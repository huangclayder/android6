From 12650bdec010e999456fee14ebafef7cb78f0d83 Mon Sep 17 00:00:00 2001
From: Xinyu Chen <xinyu.chen@freescale.com>
Date: Mon, 26 Nov 2012 15:18:01 +0800
Subject: [PATCH 103/602] ENGR00234708 Add sdcard partition and split bootimg
 tool

Bring them from ICS to JB.

Change-Id: Ifa01f72d203b92727e3aee32a7ac8cd7b5d48583
Signed-off-by: Xinyu Chen <xinyu.chen@freescale.com>
---
 common/tools/fsl-sdcard-partition.sh | 165 ++++++++++++++++++++++++++
 common/tools/split_bootimg.pl        | 221 +++++++++++++++++++++++++++++++++++
 2 files changed, 386 insertions(+)
 create mode 100755 common/tools/fsl-sdcard-partition.sh
 create mode 100755 common/tools/split_bootimg.pl

diff --git a/common/tools/fsl-sdcard-partition.sh b/common/tools/fsl-sdcard-partition.sh
new file mode 100755
index 0000000..c599f78
--- /dev/null
+++ b/common/tools/fsl-sdcard-partition.sh
@@ -0,0 +1,165 @@
+#!/bin/bash
+
+# partition size in MB
+BOOTLOAD_RESERVE=8
+BOOT_ROM_SIZE=8
+SYSTEM_ROM_SIZE=512
+DATA_SIZE=1024
+CACHE_SIZE=256
+RECOVERY_ROM_SIZE=8
+VENDER_SIZE=8
+MISC_SIZE=8
+
+help() {
+
+bn=`basename $0`
+cat << EOF
+usage $bn <option> device_node
+
+options:
+  -h				displays this help message
+  -s				only get partition size
+  -np 				not partition.
+  -f 				flash android image.
+EOF
+
+}
+
+# check the if root?
+userid=`id -u`
+if [ $userid -ne "0" ]; then
+	echo "you're not root?"
+	exit
+fi
+
+
+# parse command line
+moreoptions=1
+node="na"
+cal_only=0
+flash_images=0
+not_partition=0
+not_format_fs=0
+while [ "$moreoptions" = 1 -a $# -gt 0 ]; do
+	case $1 in
+	    -h) help; exit ;;
+	    -s) cal_only=1 ;;
+	    -f) flash_images=1 ;;
+	    -np) not_partition=1 ;;
+	    -nf) not_format_fs=1 ;;
+	    *)  moreoptions=0; node=$1 ;;
+	esac
+	[ "$moreoptions" = 0 ] && [ $# -gt 1 ] && help && exit
+	[ "$moreoptions" = 1 ] && shift
+done
+
+if [ ! -e ${node} ]; then
+	help
+	exit
+fi
+
+
+# call sfdisk to create partition table
+# get total card size
+seprate=40
+total_size=`sfdisk -s ${node}`
+total_size=`expr ${total_size} / 1024`
+rom_size=`expr ${BOOT_ROM_SIZE} + ${SYSTEM_ROM_SIZE} + ${DATA_SIZE}`
+rom_size=`expr ${rom_size} + ${CACHE_SIZE} + ${RECOVERY_ROM_SIZE} + ${MISC_SIZE} + ${VENDER_SIZE} + ${seprate}`
+boot_start=`expr ${BOOTLOAD_RESERVE}`
+boot_rom_sizeb=`expr ${BOOT_ROM_SIZE} + ${BOOTLOAD_RESERVE}`
+recovery_start=`expr ${boot_start} + ${BOOT_ROM_SIZE} + 1`
+extend_start=`expr ${recovery_start} + 1`
+extend_size=`expr ${SYSTEM_ROM_SIZE} + ${DATA_SIZE} + ${CACHE_SIZE} + ${VENDER_SIZE} + ${MISC_SIZE} + ${seprate}`
+system_start=`expr ${extend_start} + 1`
+cache_start=`expr ${extend_start} + ${SYSTEM_ROM_SIZE} + 1`
+data_start=`expr ${cache_start} + ${CACHE_SIZE} + 1`
+misc_start=`expr ${data_start} + ${DATA_SIZE}`
+vfat_start=`expr ${extend_start} + ${extend_size}`
+vfat_size=`expr ${total_size} - ${rom_size}`
+
+# create partitions
+if [ "${cal_only}" -eq "1" ]; then
+cat << EOF
+BOOT   : ${boot_rom_sizeb}MB
+RECOVERY: ${RECOVERY_ROM_SIZE}MB
+SYSTEM : ${SYSTEM_ROM_SIZE}MB
+CACHE  : ${CACHE_SIZE}MB
+DATA   : ${DATA_SIZE}MB
+MISC   : ${MISC_SIZE}MB
+VFAT   : ${vfat_size}MB
+EOF
+exit
+fi
+
+function format_android
+{
+    echo "formating android images"
+    mkfs.vfat ${node}4
+    mkfs.ext4 ${node}5 -Lsystem
+    mkfs.ext4 ${node}6 -Lcache
+    mkfs.ext4 ${node}7 -Ldata
+    mkfs.ext4 ${node}8 -Lvender
+}
+
+function flash_android
+{
+if [ "${flash_images}" -eq "1" ]; then
+    echo "flashing android images..."    
+    dd if=u-boot.bin of=${node} bs=1k seek=1 skip=1
+    dd if=/dev/zero of=${node} bs=512 seek=1536 count=16
+    dd if=boot.img of=${node}1
+    dd if=recovery.img of=${node}2
+    dd if=system.img of=${node}5
+fi
+}
+
+if [[ "${not_partition}" -eq "1" && "${flash_images}" -eq "1" ]] ; then
+    flash_android
+    exit
+fi
+
+
+# destroy the partition table
+dd if=/dev/zero of=${node} bs=1024 count=1
+
+sfdisk --force -uM ${node} << EOF
+,${boot_rom_sizeb},83
+,${RECOVERY_ROM_SIZE},83
+,${extend_size},5
+,${vfat_size},b
+,${SYSTEM_ROM_SIZE},83
+,${CACHE_SIZE},83
+,${DATA_SIZE},83
+,${VENDER_SIZE},83
+,${MISC_SIZE},83
+EOF
+
+# adjust the partition reserve for bootloader.
+# if you don't put the uboot on same device, you can remove the BOOTLOADER_ERSERVE
+# to have 8M space.
+# the minimal sylinder for some card is 4M, maybe some was 8M
+# just 8M for some big eMMC 's sylinder
+sfdisk --force -uM ${node} -N1 << EOF
+${BOOTLOAD_RESERVE},${BOOT_ROM_SIZE},83
+EOF
+
+# format the SDCARD/DATA/CACHE partition
+part=""
+echo ${node} | grep mmcblk > /dev/null
+if [ "$?" -eq "0" ]; then
+	part="p"
+fi
+
+format_android
+flash_android
+
+
+# For MFGTool Notes:
+# MFGTool use mksdcard-android.tar store this script
+# if you want change it.
+# do following:
+#   tar xf mksdcard-android.sh.tar
+#   vi mksdcard-android.sh 
+#   [ edit want you want to change ]
+#   rm mksdcard-android.sh.tar; tar cf mksdcard-android.sh.tar mksdcard-android.sh
diff --git a/common/tools/split_bootimg.pl b/common/tools/split_bootimg.pl
new file mode 100755
index 0000000..5be96af
--- /dev/null
+++ b/common/tools/split_bootimg.pl
@@ -0,0 +1,221 @@
+#!/usr/bin/perl
+######################################################################
+#
+#   File          : split_bootimg.pl
+#   Author(s)     : William Enck <enck@cse.psu.edu>
+#   Description   : Split appart an Android boot image created 
+#                   with mkbootimg. The format can be found in
+#                   android-src/system/core/mkbootimg/bootimg.h
+#
+#                   Thanks to alansj on xda-developers.com for 
+#                   identifying the format in bootimg.h and 
+#                   describing initial instructions for splitting
+#                   the boot.img file.
+#
+#   Last Modified : Tue Dec  2 23:36:25 EST 2008
+#   By            : William Enck <enck@cse.psu.edu>
+#
+#   Copyright (c) 2008 William Enck
+#
+######################################################################
+
+use strict;
+use warnings;
+
+# Turn on print flushing
+$|++;
+
+######################################################################
+## Global Variables and Constants
+
+my $SCRIPT = __FILE__;
+my $IMAGE_FN = undef;
+
+# Constants (from bootimg.h)
+use constant BOOT_MAGIC => 'ANDROID!';
+use constant BOOT_MAGIC_SIZE => 8;
+use constant BOOT_NAME_SIZE => 16;
+use constant BOOT_ARGS_SIZE => 512;
+
+# Unsigned integers are 4 bytes
+use constant UNSIGNED_SIZE => 4;
+
+# Parsed Values
+my $PAGE_SIZE = undef;
+my $KERNEL_SIZE = undef;
+my $RAMDISK_SIZE = undef;
+my $SECOND_SIZE = undef;
+
+######################################################################
+## Main Code
+
+&parse_cmdline();
+&parse_header($IMAGE_FN);
+
+=format (from bootimg.h)
+** +-----------------+
+** | boot header     | 1 page
+** +-----------------+
+** | kernel          | n pages
+** +-----------------+
+** | ramdisk         | m pages
+** +-----------------+
+** | second stage    | o pages
+** +-----------------+
+**
+** n = (kernel_size + page_size - 1) / page_size
+** m = (ramdisk_size + page_size - 1) / page_size
+** o = (second_size + page_size - 1) / page_size
+=cut
+
+my $n = int(($KERNEL_SIZE + $PAGE_SIZE - 1) / $PAGE_SIZE);
+my $m = int(($RAMDISK_SIZE + $PAGE_SIZE - 1) / $PAGE_SIZE);
+my $o = int(($SECOND_SIZE + $PAGE_SIZE - 1) / $PAGE_SIZE);
+
+my $k_offset = $PAGE_SIZE;
+my $r_offset = $k_offset + ($n * $PAGE_SIZE);
+my $s_offset = $r_offset + ($m * $PAGE_SIZE);
+
+(my $base = $IMAGE_FN) =~ s/.*\/(.*)$/$1/;
+my $k_file = $base . "-kernel";
+my $r_file = $base . "-ramdisk.gz";
+my $s_file = $base . "-second.gz";
+
+# The kernel is always there
+print "Writing $k_file ...";
+&dump_file($IMAGE_FN, $k_file, $k_offset, $KERNEL_SIZE);
+print " complete.\n";
+
+# The ramdisk is always there
+print "Writing $r_file ...";
+&dump_file($IMAGE_FN, $r_file, $r_offset, $RAMDISK_SIZE);
+print " complete.\n";
+
+# The Second stage bootloader is optional
+unless ($SECOND_SIZE == 0) {
+    print "Writing $s_file ...";
+    &dump_file($IMAGE_FN, $s_file, $s_offset, $SECOND_SIZE);
+    print " complete.\n";
+}
+    
+######################################################################
+## Supporting Subroutines
+
+=header_format (from bootimg.h)
+struct boot_img_hdr
+{
+    unsigned char magic[BOOT_MAGIC_SIZE];
+
+    unsigned kernel_size;  /* size in bytes */
+    unsigned kernel_addr;  /* physical load addr */
+
+    unsigned ramdisk_size; /* size in bytes */
+    unsigned ramdisk_addr; /* physical load addr */
+
+    unsigned second_size;  /* size in bytes */
+    unsigned second_addr;  /* physical load addr */
+
+    unsigned tags_addr;    /* physical addr for kernel tags */
+    unsigned page_size;    /* flash page size we assume */
+    unsigned unused[2];    /* future expansion: should be 0 */
+
+    unsigned char name[BOOT_NAME_SIZE]; /* asciiz product name */
+
+    unsigned char cmdline[BOOT_ARGS_SIZE];
+
+    unsigned id[8]; /* timestamp / checksum / sha1 / etc */
+};
+=cut
+sub parse_header {
+    my ($fn) = @_;
+    my $buf = undef;
+
+    open INF, $fn or die "Could not open $fn: $!\n";
+    binmode INF;
+
+    # Read the Magic
+    read(INF, $buf, BOOT_MAGIC_SIZE);
+    unless ($buf eq BOOT_MAGIC) {
+	die "Android Magic not found in $fn. Giving up.\n";
+    }
+
+    # Read kernel size and address (assume little-endian)
+    read(INF, $buf, UNSIGNED_SIZE * 2);
+    my ($k_size, $k_addr) = unpack("VV", $buf);
+
+    # Read ramdisk size and address (assume little-endian)
+    read(INF, $buf, UNSIGNED_SIZE * 2);
+    my ($r_size, $r_addr) = unpack("VV", $buf);
+
+    # Read second size and address (assume little-endian)
+    read(INF, $buf, UNSIGNED_SIZE * 2);
+    my ($s_size, $s_addr) = unpack("VV", $buf);
+
+    # Ignore tags_addr
+    read(INF, $buf, UNSIGNED_SIZE);
+
+    # get the page size (assume little-endian)
+    read(INF, $buf, UNSIGNED_SIZE);
+    my ($p_size) = unpack("V", $buf);
+
+    # Ignore unused
+    read(INF, $buf, UNSIGNED_SIZE * 2);
+
+    # Read the name (board name)
+    read(INF, $buf, BOOT_NAME_SIZE);
+    my $name = $buf;
+
+    # Read the command line
+    read(INF, $buf, BOOT_ARGS_SIZE);
+    my $cmdline = $buf;
+
+    # Ignore the id
+    read(INF, $buf, UNSIGNED_SIZE * 8);
+
+    # Close the file
+    close INF;
+
+    # Print important values
+    printf "Page size: %d (0x%08x)\n", $p_size, $p_size;
+    printf "Kernel size: %d (0x%08x)\n", $k_size, $k_size;
+    printf "Ramdisk size: %d (0x%08x)\n", $r_size, $r_size;
+    printf "Second size: %d (0x%08x)\n", $s_size, $s_size;
+    printf "Board name: $name\n";
+    printf "Command line: $cmdline\n";
+
+    # Save the values
+    $PAGE_SIZE = $p_size;
+    $KERNEL_SIZE = $k_size;
+    $RAMDISK_SIZE = $r_size;
+    $SECOND_SIZE = $s_size;
+}
+
+sub dump_file {
+    my ($infn, $outfn, $offset, $size) = @_;
+    my $buf = undef;
+
+    open INF, $infn or die "Could not open $infn: $!\n";
+    open OUTF, ">$outfn" or die "Could not open $outfn: $!\n";
+
+    binmode INF;
+    binmode OUTF;
+
+    seek(INF, $offset, 0) or die "Could not seek in $infn: $!\n";
+    read(INF, $buf, $size) or die "Could not read $infn: $!\n";
+    print OUTF $buf or die "Could not write $outfn: $!\n";
+
+    close INF;
+    close OUTF;
+}
+
+######################################################################
+## Configuration Subroutines
+
+sub parse_cmdline {
+    unless ($#ARGV == 0) {
+	die "Usage: $SCRIPT boot.img\n";
+    }
+    $IMAGE_FN = $ARGV[0];
+}
+
+
-- 
1.8.0

