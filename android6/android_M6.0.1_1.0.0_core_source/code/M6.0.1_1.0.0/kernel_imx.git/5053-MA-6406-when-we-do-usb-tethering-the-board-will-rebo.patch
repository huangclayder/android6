From 3168f1d56ff60d62cbccb11eae7cde4965218c38 Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Wed, 6 May 2015 15:14:51 +0800
Subject: [PATCH] MA-6406 when we do usb tethering, the board will reboot

Kernel panic due to usb_function is not linked with usb_function_instance in rndis_bind as below:
[<c051968c>] (rndis_bind) from [<c05053c8>] (usb_add_function+0x5c/0x114)
[<c05053c8>] (usb_add_function) from [<c051b634>] (rndis_bind_config_vendor+0xac/0xec)
[<c051b634>] (rndis_bind_config_vendor) from [<c051b724>] (rndis_function_bind_config+0xb0/0x12c)
[<c051b724>] (rndis_function_bind_config) from [<c050feb8>] (android_bind_config+0x34/0x74)
[<c050feb8>] (android_bind_config) from [<c050624c>] (usb_add_config+0x34/0xd0)
[<c050624c>] (usb_add_config) from [<c0514d1c>] (android_enable+0x34/0x70)
[<c0514d1c>] (android_enable) from [<c0514fe4>] (enable_store+0x17c/0x1a4)
[<c0514fe4>] (enable_store) from [<c03e9724>] (dev_attr_store+0x18/0x24)
[<c03e9724>] (dev_attr_store) from [<c0149204>] (sysfs_kf_write+0x44/0x48)
[<c0149204>] (sysfs_kf_write) from [<c014c7f0>] (kernfs_fop_write+0xb8/0x150)
[<c014c7f0>] (kernfs_fop_write) from [<c00ec1f0>] (vfs_write+0xb4/0x17c)
[<c00ec1f0>] (vfs_write) from [<c00ec598>] (SyS_write+0x44/0x84)
[<c00ec598>] (SyS_write) from [<c000e560>] (ret_fast_syscall+0x0/0x30)

Get usb_function from usb_function_instance in rndis_function_init
Reuse usb_function from step 1 in bind/unbind for rndis
Don't update gadget device's string in rndis driver, as it will be updated in
android gadget driver.

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 drivers/usb/gadget/android.c | 34 ++++++++++++++++++++++++++++++----
 drivers/usb/gadget/f_rndis.c | 27 +++++++++++++++++++++++++++
 2 files changed, 57 insertions(+), 4 deletions(-)

diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index daa0b17..fa85319 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -639,20 +639,46 @@ struct rndis_function_config {
 	/* "Wireless" RNDIS; auto-detected by Windows */
 	bool	wceis;
 	struct eth_dev *dev;
+	struct usb_function *f_rndis;
+	struct usb_function_instance *f_rndis_inst;
 };
 
 static int
 rndis_function_init(struct android_usb_function *f,
 		struct usb_composite_dev *cdev)
 {
-	f->config = kzalloc(sizeof(struct rndis_function_config), GFP_KERNEL);
-	if (!f->config)
+	int ret;
+	struct rndis_function_config *config;
+	config = kzalloc(sizeof(struct rndis_function_config), GFP_KERNEL);
+	if (!config)
 		return -ENOMEM;
+	f->config = config;
+
+	config->f_rndis_inst = usb_get_function_instance("rndis");
+	if (IS_ERR(config->f_rndis_inst)) {
+		ret = PTR_ERR(config->f_rndis_inst);
+		goto err_usb_get_function_instance;
+	}
+	config->f_rndis = usb_get_function(config->f_rndis_inst);
+	if (IS_ERR(config->f_rndis)) {
+		ret = PTR_ERR(config->f_rndis);
+		goto err_usb_get_function;
+	}
+
 	return 0;
+
+err_usb_get_function_instance:
+	usb_put_function(config->f_rndis);
+err_usb_get_function:
+	usb_put_function_instance(config->f_rndis_inst);
+	return ret;
 }
 
 static void rndis_function_cleanup(struct android_usb_function *f)
 {
+	struct rndis_function_config *config = f->config;
+	usb_put_function(config->f_rndis);
+	usb_put_function_instance(config->f_rndis_inst);
 	kfree(f->config);
 	f->config = NULL;
 }
@@ -694,8 +720,8 @@ rndis_function_bind_config(struct android_usb_function *f,
 		rndis_control_intf.bInterfaceProtocol =	 0x03;
 	}
 
-	return rndis_bind_config_vendor(c, rndis->ethaddr, rndis->vendorID,
-					   rndis->manufacturer, rndis->dev);
+	return rndis_bind_config_vendor_func(c, rndis->ethaddr, rndis->vendorID,
+			rndis->manufacturer, rndis->dev, rndis->f_rndis);
 }
 
 static void rndis_function_unbind_config(struct android_usb_function *f,
diff --git a/drivers/usb/gadget/f_rndis.c b/drivers/usb/gadget/f_rndis.c
index a3a2208..47389f7 100644
--- a/drivers/usb/gadget/f_rndis.c
+++ b/drivers/usb/gadget/f_rndis.c
@@ -697,6 +697,7 @@ rndis_bind(struct usb_configuration *c, struct usb_function *f)
 		rndis_opts->bound = true;
 	}
 
+#ifndef CONFIG_USB_G_ANDROID
 	us = usb_gstrings_attach(cdev, rndis_strings,
 				 ARRAY_SIZE(rndis_string_defs));
 	if (IS_ERR(us))
@@ -704,6 +705,17 @@ rndis_bind(struct usb_configuration *c, struct usb_function *f)
 	rndis_control_intf.iInterface = us[0].id;
 	rndis_data_intf.iInterface = us[1].id;
 	rndis_iad_descriptor.iFunction = us[2].id;
+#else
+	if (rndis_string_defs[0].id == 0) {
+		status = usb_string_ids_tab(c->cdev, rndis_string_defs);
+		if (status)
+			return status;
+
+		rndis_control_intf.iInterface = rndis_string_defs[0].id;
+		rndis_data_intf.iInterface = rndis_string_defs[1].id;
+		rndis_iad_descriptor.iFunction = rndis_string_defs[2].id;
+	}
+#endif
 
 	/* allocate instance-specific interface IDs */
 	status = usb_interface_id(c, f);
@@ -838,6 +850,21 @@ rndis_old_unbind(struct usb_configuration *c, struct usb_function *f)
 }
 
 int
+rndis_bind_config_vendor_func(struct usb_configuration *c, u8 ethaddr[ETH_ALEN],
+		u32 vendorID, const char *manufacturer, struct eth_dev *dev,
+		struct usb_function *f)
+{
+	int		status;
+	struct f_rndis		*rndis = func_to_rndis(f);
+
+	memcpy(rndis->ethaddr, ethaddr, ETH_ALEN);
+	rndis->vendorID = vendorID;
+	rndis->manufacturer = manufacturer;
+	status = usb_add_function(c, f);
+	return status;
+}
+
+int
 rndis_bind_config_vendor(struct usb_configuration *c, u8 ethaddr[ETH_ALEN],
 		u32 vendorID, const char *manufacturer, struct eth_dev *dev)
 {
-- 
1.8.0

