From fbfd82f6a9b44cb70d1405e03d300bbe830fcd2e Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Sat, 28 Feb 2015 21:24:01 +0800
Subject: [PATCH] MA-6328 Add recovery/bootloader boot mode in 3.14 kernel

Porting the recovery/bootloader boot mode from 3.10 to 3.14

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 arch/arm/configs/imx_v7_android_defconfig |  1 +
 arch/arm/mach-imx/Kconfig                 |  3 ++
 arch/arm/mach-imx/system.c                | 61 +++++++++++++++++++++++++++++++
 3 files changed, 65 insertions(+)

diff --git a/arch/arm/configs/imx_v7_android_defconfig b/arch/arm/configs/imx_v7_android_defconfig
index a68621e..075f545 100644
--- a/arch/arm/configs/imx_v7_android_defconfig
+++ b/arch/arm/configs/imx_v7_android_defconfig
@@ -34,6 +34,7 @@ CONFIG_SOC_IMX6SL=y
 CONFIG_SOC_IMX6SX=y
 CONFIG_SOC_IMX7D=y
 CONFIG_SOC_VF610=y
+CONFIG_MXC_REBOOT_ANDROID_CMD=y
 # CONFIG_SWP_EMULATE is not set
 CONFIG_SMP=y
 CONFIG_HAVE_ARM_ARCH_TIMER=y
diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index e75ceb7..35a78ef 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -871,6 +871,9 @@ config SOC_VF610
 	help
 	  This enable support for Freescale Vybrid VF610 processor.
 
+config MXC_REBOOT_ANDROID_CMD
+    bool "Android reboot setting"
+
 endif
 
 source "arch/arm/mach-imx/devices/Kconfig"
diff --git a/arch/arm/mach-imx/system.c b/arch/arm/mach-imx/system.c
index 2e3d6a8..d9604cf 100644
--- a/arch/arm/mach-imx/system.c
+++ b/arch/arm/mach-imx/system.c
@@ -36,6 +36,65 @@ static void __iomem *wdog_base;
 static struct clk *wdog_clk;
 static u32 wdog_source = 1; /* use WDOG1 default */
 
+#ifdef CONFIG_MXC_REBOOT_ANDROID_CMD
+/* This function will set a bit on SNVS_LPGPR[7-8] bits to enter
+ * special boot mode.  These bits will not clear by watchdog reset, so
+ * it can be checked by bootloader to choose enter different mode.*/
+
+#define ANDROID_RECOVERY_BOOT  (1 << 7)
+#define ANDROID_FASTBOOT_BOOT  (1 << 8)
+
+#define AIPS1_ARB_BASE_ADDR		0x02000000
+#define ATZ1_BASE_ADDR			AIPS1_ARB_BASE_ADDR
+#define AIPS1_OFF_BASE_ADDR		(ATZ1_BASE_ADDR + 0x80000)
+#define MX6_SNVS_BASE_ADDR		(AIPS1_OFF_BASE_ADDR + 0x4C000)
+#define SNVS_LPGPR				0x68
+#define SNVS_SIZE				(1024*16)
+void do_switch_recovery(void)
+{
+	u32 reg;
+	void *addr;
+	addr = ioremap(MX6_SNVS_BASE_ADDR, SNVS_SIZE);
+	if (!addr) {
+		pr_warn("SNVS ioremap failed!\n");
+		return;
+	}
+	reg = __raw_readl(addr + SNVS_LPGPR);
+	reg |= ANDROID_RECOVERY_BOOT;
+	__raw_writel(reg, (addr + SNVS_LPGPR));
+
+	iounmap(addr);
+}
+
+void do_switch_fastboot(void)
+{
+	u32 reg;
+	void *addr;
+
+	addr = ioremap(MX6_SNVS_BASE_ADDR, SNVS_SIZE);
+	if (!addr) {
+		pr_warn("SNVS ioremap failed!\n");
+		return;
+	}
+
+	reg = __raw_readl(addr + SNVS_LPGPR);
+	reg |= ANDROID_FASTBOOT_BOOT;
+	__raw_writel(reg, addr + SNVS_LPGPR);
+
+	iounmap(addr);
+}
+#endif
+
+static void arch_reset_special_mode(char mode, const char *cmd)
+{
+#ifdef CONFIG_MXC_REBOOT_ANDROID_CMD
+	if (cmd && strcmp(cmd, "recovery") == 0)
+		do_switch_recovery();
+	else if (cmd && strcmp(cmd, "bootloader") == 0)
+		do_switch_fastboot();
+#endif
+}
+
 /*
  * Reset the system. It is called by machine_restart().
  */
@@ -43,6 +102,8 @@ void mxc_restart(enum reboot_mode mode, const char *cmd)
 {
 	unsigned int wcr_enable;
 
+	arch_reset_special_mode(mode, cmd);
+
 	if (wdog_clk)
 		clk_enable(wdog_clk);
 
-- 
1.8.0

