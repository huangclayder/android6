From cf5f2d02df0d9bc0e40dbf45a4134b1b6de40eba Mon Sep 17 00:00:00 2001
From: b51843 <b51843@freescale.com>
Date: Thu, 17 Sep 2015 17:42:16 +0800
Subject: [PATCH] MGS-1070 [#1887] system freeze after long time monkey test.

System will freeze after long time monkey test on Android.

The root cause is if to call kernel APIs which may request
resources and sleeping when OS memoryLock is held, it will
meet deadlock.

The Solution is avoiding calling kernel API and sleeping
when OS memoryLock is held.

Date Sep 17, 2015
Signed-off-by: Meng Mingming <b51843@freescale.com>
---
 .../gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c | 70 ++++++++++------------
 .../gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.h |  2 +-
 2 files changed, 33 insertions(+), 39 deletions(-)

diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
index 976e572..128b4e9 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.c
@@ -175,7 +175,7 @@ _CreateMdlMap(
 
     gcmkHEADER_ARG("Mdl=0x%X ProcessID=%d", Mdl, ProcessID);
 
-    mdlMap = (PLINUX_MDL_MAP)kmalloc(sizeof(struct _LINUX_MDL_MAP), GFP_KERNEL | gcdNOWARN);
+    mdlMap = (PLINUX_MDL_MAP)kmalloc(sizeof(struct _LINUX_MDL_MAP), gcdNOWARN | GFP_ATOMIC);
     if (mdlMap == gcvNULL)
     {
         gcmkFOOTER_NO();
@@ -185,7 +185,8 @@ _CreateMdlMap(
     mdlMap->pid     = ProcessID;
     mdlMap->vmaAddr = gcvNULL;
     mdlMap->vma     = gcvNULL;
-    mdlMap->count   = 0;
+
+    atomic_set(&mdlMap->count, 0);
 
     mdlMap->next    = Mdl->maps;
     Mdl->maps       = mdlMap;
@@ -1230,6 +1231,8 @@ gckOS_MapMemory(
         }
     }
 
+    MEMORY_UNLOCK(Os);
+
     if (mdlMap->vmaAddr == gcvNULL)
     {
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 4, 0)
@@ -1270,8 +1273,6 @@ gckOS_MapMemory(
 
             mdlMap->vmaAddr = gcvNULL;
 
-            MEMORY_UNLOCK(Os);
-
             gcmkFOOTER_ARG("status=%d", gcvSTATUS_OUT_OF_MEMORY);
             return gcvSTATUS_OUT_OF_MEMORY;
         }
@@ -1292,8 +1293,6 @@ gckOS_MapMemory(
 
             up_write(&current->mm->mmap_sem);
 
-            MEMORY_UNLOCK(Os);
-
             gcmkFOOTER_ARG("status=%d", gcvSTATUS_OUT_OF_RESOURCES);
             return gcvSTATUS_OUT_OF_RESOURCES;
         }
@@ -1315,8 +1314,6 @@ gckOS_MapMemory(
 
             mdlMap->vmaAddr = gcvNULL;
 
-            MEMORY_UNLOCK(Os);
-
             gcmkFOOTER_ARG("status=%d", gcvSTATUS_OUT_OF_RESOURCES);
             return gcvSTATUS_OUT_OF_RESOURCES;
         }
@@ -1343,8 +1340,6 @@ gckOS_MapMemory(
 
             mdlMap->vmaAddr = gcvNULL;
 
-            MEMORY_UNLOCK(Os);
-
             gcmkFOOTER_ARG("status=%d", gcvSTATUS_OUT_OF_RESOURCES);
             return gcvSTATUS_OUT_OF_RESOURCES;
         }
@@ -1353,8 +1348,6 @@ gckOS_MapMemory(
         up_write(&current->mm->mmap_sem);
     }
 
-    MEMORY_UNLOCK(Os);
-
     *Logical = mdlMap->vmaAddr;
 
     gcmkFOOTER_ARG("*Logical=0x%X", *Logical);
@@ -1448,6 +1441,7 @@ gckOS_UnmapMemoryEx(
 {
     PLINUX_MDL_MAP          mdlMap;
     PLINUX_MDL              mdl = (PLINUX_MDL)Physical;
+    gctPOINTER              pointer = gcvNULL;
 
     gcmkHEADER_ARG("Os=0x%X Physical=0x%X Bytes=%lu Logical=0x%X PID=%d",
                    Os, Physical, Bytes, Logical, PID);
@@ -1473,13 +1467,18 @@ gckOS_UnmapMemoryEx(
             return gcvSTATUS_INVALID_ARGUMENT;
         }
 
-        _UnmapUserLogical(mdlMap->vmaAddr, mdl->numPages * PAGE_SIZE);
+        pointer = mdlMap->vmaAddr;
 
         gcmkVERIFY_OK(_DestroyMdlMap(mdl, mdlMap));
     }
 
     MEMORY_UNLOCK(Os);
 
+    if (pointer)
+    {
+        _UnmapUserLogical(pointer, mdl->numPages * PAGE_SIZE);
+    }
+
     /* Success. */
     gcmkFOOTER_NO();
     return gcvSTATUS_OK;
@@ -1584,7 +1583,6 @@ gckOS_AllocateNonPagedMemory(
     long size, order;
     gctPOINTER vaddr;
 #endif
-    gctBOOL locked = gcvFALSE;
     gceSTATUS status;
 
     gcmkHEADER_ARG("Os=0x%X InUserSpace=%d *Bytes=%lu",
@@ -1613,9 +1611,6 @@ gckOS_AllocateNonPagedMemory(
     mdl->pagedMem = 0;
     mdl->numPages = numPages;
 
-    MEMORY_LOCK(Os);
-    locked = gcvTRUE;
-
 #ifndef NO_DMA_COHERENT
 #ifdef CONFIG_ARM64
     addr = dma_alloc_coherent(gcvNULL,
@@ -1805,6 +1800,7 @@ gckOS_AllocateNonPagedMemory(
      * Will be used by get physical address
      * and mapuser pointer functions.
      */
+    MEMORY_LOCK(Os);
 
     if (!Os->mdlHead)
     {
@@ -1843,12 +1839,6 @@ OnError:
         gcmkVERIFY_OK(_DestroyMdl(mdl));
     }
 
-    if (locked)
-    {
-        /* Unlock memory. */
-        MEMORY_UNLOCK(Os);
-    }
-
     /* Return the status. */
     gcmkFOOTER();
     return status;
@@ -1904,8 +1894,6 @@ gceSTATUS gckOS_FreeNonPagedMemory(
     /* Convert physical address into a pointer to a MDL. */
     mdl = (PLINUX_MDL) Physical;
 
-    MEMORY_LOCK(Os);
-
 #ifndef NO_DMA_COHERENT
 #ifdef CONFIG_ARM64
     dma_free_coherent(gcvNULL,
@@ -1932,6 +1920,8 @@ gceSTATUS gckOS_FreeNonPagedMemory(
     _DestoryKernelVirtualMapping(mdl->addr);
 #endif /* NO_DMA_COHERENT */
 
+    MEMORY_LOCK(Os);
+
     mdlMap = mdl->maps;
 
     while (mdlMap != gcvNULL)
@@ -3884,21 +3874,21 @@ gckOS_LockPages(
         }
     }
 
-    if (mdlMap->vmaAddr == gcvNULL)
+    MEMORY_UNLOCK(Os);
+
+    if (atomic_inc_return(&mdlMap->count) == 1)
     {
+        gcmkASSERT(mdlMap->vmaAddr == gcvNULL);
+
         status = allocator->ops->MapUser(allocator, mdl, mdlMap, Cacheable);
 
         if (gcmIS_ERROR(status))
         {
-            MEMORY_UNLOCK(Os);
-
             gcmkFOOTER_ARG("*status=%d", status);
             return status;
         }
     }
 
-    mdlMap->count++;
-
     /* Convert pointer to MDL. */
     *Logical = mdlMap->vmaAddr;
 
@@ -3908,8 +3898,6 @@ gckOS_LockPages(
 
     *PageCount = mdl->numPages * (PAGE_SIZE / 4096);
 
-    MEMORY_UNLOCK(Os);
-
     gcmkVERIFY_OK(gckOS_CacheFlush(
         Os,
         _GetProcessID(),
@@ -4186,6 +4174,7 @@ gckOS_UnlockPages(
     PLINUX_MDL_MAP          mdlMap;
     PLINUX_MDL              mdl = (PLINUX_MDL)Physical;
     gckALLOCATOR            allocator = mdl->allocator;
+    gctPOINTER              pointer = gcvNULL;
 
     gcmkHEADER_ARG("Os=0x%X Physical=0x%X Bytes=%u Logical=0x%X",
                    Os, Physical, Bytes, Logical);
@@ -4203,15 +4192,15 @@ gckOS_UnlockPages(
     {
         if ((mdlMap->vmaAddr != gcvNULL) && (_GetProcessID() == mdlMap->pid))
         {
-            if (--mdlMap->count == 0)
+            if (atomic_dec_and_test(&mdlMap->count))
             {
-                allocator->ops->UnmapUser(
-                    allocator,
-                    mdlMap->vmaAddr,
-                    mdl->numPages * PAGE_SIZE);
-
+                /* User virtual address to be unmap. */
+                pointer = mdlMap->vmaAddr;
                 mdlMap->vmaAddr = gcvNULL;
             }
+
+            /* There is only one map for one process.*/
+            break;
         }
 
         mdlMap = mdlMap->next;
@@ -4219,6 +4208,11 @@ gckOS_UnlockPages(
 
     MEMORY_UNLOCK(Os);
 
+    if (pointer)
+    {
+        allocator->ops->UnmapUser(allocator, pointer, mdl->numPages * PAGE_SIZE);
+    }
+
     /* Success. */
     gcmkFOOTER_NO();
     return gcvSTATUS_OK;
diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.h b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.h
index 692a5a8..79ff676 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.h
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_os.h
@@ -60,7 +60,7 @@ typedef struct _LINUX_MDL_MAP
 {
     gctINT                  pid;
     gctPOINTER              vmaAddr;
-    gctUINT32               count;
+    atomic_t                count;
     struct vm_area_struct * vma;
     struct _LINUX_MDL_MAP * next;
 }
-- 
1.8.0

