From e59141ea4294d405c8569ebee813fe734cff99df Mon Sep 17 00:00:00 2001
From: Zhang Sanshan <b51434@freescale.com>
Date: Tue, 21 Apr 2015 15:58:17 +0800
Subject: [PATCH] MA-6565 enable 'reboot recovery&bootloader' in imx7 board

This patch add imx7 snvs address. It set bit 7-8 in SNVS_LPGPR before power off.
The uboot can decide enter fastboot or recovery mode according 7-8 bit in SNVS_LPGPR.

Signed-off-by: Zhang Sanshan <b51434@freescale.com>
---
 arch/arm/mach-imx/mxc.h    |  6 ++++
 arch/arm/mach-imx/system.c | 73 +++++++++++++++++++++++++++++++---------------
 2 files changed, 55 insertions(+), 24 deletions(-)

diff --git a/arch/arm/mach-imx/mxc.h b/arch/arm/mach-imx/mxc.h
index 977b8cd..5f2227a 100644
--- a/arch/arm/mach-imx/mxc.h
+++ b/arch/arm/mach-imx/mxc.h
@@ -183,6 +183,12 @@ static inline bool cpu_is_imx6q(void)
 	return __mxc_cpu_type == MXC_CPU_IMX6Q;
 }
 
+static inline bool cpu_is_imx6(void)
+{
+	return (__mxc_cpu_type == MXC_CPU_IMX6Q)  || (__mxc_cpu_type == MXC_CPU_IMX6SL) ||
+		(__mxc_cpu_type == MXC_CPU_IMX6DL)|| (__mxc_cpu_type == MXC_CPU_IMX6SX) ;
+}
+
 static inline bool cpu_is_imx7d(void)
 {
 	return __mxc_cpu_type == MXC_CPU_IMX7D;
diff --git a/arch/arm/mach-imx/system.c b/arch/arm/mach-imx/system.c
index ba2d5ea..bc1f250 100644
--- a/arch/arm/mach-imx/system.c
+++ b/arch/arm/mach-imx/system.c
@@ -44,25 +44,42 @@ static u32 wdog_source = 1; /* use WDOG1 default */
 #define ANDROID_RECOVERY_BOOT  (1 << 7)
 #define ANDROID_FASTBOOT_BOOT  (1 << 8)
 
-#define AIPS1_ARB_BASE_ADDR		0x02000000
-#define ATZ1_BASE_ADDR			AIPS1_ARB_BASE_ADDR
-#define AIPS1_OFF_BASE_ADDR		(ATZ1_BASE_ADDR + 0x80000)
-#define MX6_SNVS_BASE_ADDR		(AIPS1_OFF_BASE_ADDR + 0x4C000)
-#define SNVS_LPGPR				0x68
-#define SNVS_SIZE				(1024*16)
+#define MX6_AIPS1_ARB_BASE_ADDR		0x02000000
+#define MX6_ATZ1_BASE_ADDR			MX6_AIPS1_ARB_BASE_ADDR
+#define MX6_AIPS1_OFF_BASE_ADDR		(MX6_ATZ1_BASE_ADDR + 0x80000)
+#define MX6_SNVS_BASE_ADDR		(MX6_AIPS1_OFF_BASE_ADDR + 0x4C000)
+#define MX6_SNVS_LPGPR				0x68
+#define MX6_SNVS_SIZE				(1024*16)
+
+#define MX7_AIPS1_ARB_BASE_ADDR		0x30000000
+#define MX7_ATZ1_BASE_ADDR			MX7_AIPS1_ARB_BASE_ADDR
+#define MX7_AIPS1_OFF_BASE_ADDR		(MX7_ATZ1_BASE_ADDR + 0x200000)
+#define MX7_SNVS_BASE_ADDR		(MX7_AIPS1_OFF_BASE_ADDR + 0x170000)
+#define MX7_SNVS_LPGPR				0x68
+#define MX7_SNVS_SIZE				(1024*16)
 void do_switch_recovery(void)
 {
 	u32 reg;
 	void *addr;
-	addr = ioremap(MX6_SNVS_BASE_ADDR, SNVS_SIZE);
-	if (!addr) {
-		pr_warn("SNVS ioremap failed!\n");
-		return;
+	if(cpu_is_imx6()){
+		addr = ioremap(MX6_SNVS_BASE_ADDR, MX6_SNVS_SIZE);
+		if (!addr) {
+			pr_warn("SNVS ioremap failed!\n");
+			return;
+		}
+		reg = __raw_readl(addr + MX6_SNVS_LPGPR);
+		reg |= ANDROID_RECOVERY_BOOT;
+		__raw_writel(reg, (addr + MX6_SNVS_LPGPR));
+	}else{
+		addr = ioremap(MX7_SNVS_BASE_ADDR, MX7_SNVS_SIZE);	
+		if (!addr) {
+			pr_warn("SNVS ioremap failed!\n");
+			return;
+		}
+		reg = __raw_readl(addr + MX7_SNVS_LPGPR);
+		reg |= ANDROID_RECOVERY_BOOT;
+		__raw_writel(reg, (addr + MX7_SNVS_LPGPR));
 	}
-	reg = __raw_readl(addr + SNVS_LPGPR);
-	reg |= ANDROID_RECOVERY_BOOT;
-	__raw_writel(reg, (addr + SNVS_LPGPR));
-
 	iounmap(addr);
 }
 
@@ -70,17 +87,25 @@ void do_switch_fastboot(void)
 {
 	u32 reg;
 	void *addr;
-
-	addr = ioremap(MX6_SNVS_BASE_ADDR, SNVS_SIZE);
-	if (!addr) {
-		pr_warn("SNVS ioremap failed!\n");
-		return;
+	if(cpu_is_imx6()){
+		addr = ioremap(MX6_SNVS_BASE_ADDR, MX6_SNVS_SIZE);
+		if (!addr) {
+			pr_warn("SNVS ioremap failed!\n");
+			return;
+		}
+		reg = __raw_readl(addr + MX6_SNVS_LPGPR);
+		reg |= ANDROID_FASTBOOT_BOOT;
+		__raw_writel(reg, addr + MX6_SNVS_LPGPR);
+	}else{
+		addr = ioremap(MX7_SNVS_BASE_ADDR, MX7_SNVS_SIZE);	
+		if (!addr) {
+			pr_warn("SNVS ioremap failed!\n");
+			return;
+		}
+		reg = __raw_readl(addr + MX7_SNVS_LPGPR);
+		reg |= ANDROID_FASTBOOT_BOOT;
+		__raw_writel(reg, addr + MX7_SNVS_LPGPR);
 	}
-
-	reg = __raw_readl(addr + SNVS_LPGPR);
-	reg |= ANDROID_FASTBOOT_BOOT;
-	__raw_writel(reg, addr + SNVS_LPGPR);
-
 	iounmap(addr);
 }
 #endif
-- 
1.8.0

