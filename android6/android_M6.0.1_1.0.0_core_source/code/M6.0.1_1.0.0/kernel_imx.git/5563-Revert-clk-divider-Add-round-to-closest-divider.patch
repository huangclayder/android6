From 970e69efa040d7aa4713bf44535f11043322ee67 Mon Sep 17 00:00:00 2001
From: Liu Xiaowen <xiaowen.liu@freescale.com>
Date: Tue, 21 Jul 2015 17:26:41 +0800
Subject: [PATCH] Revert "clk: divider: Add round to closest divider"

This reverts commit 79c2dc7b4fbcb79591916cdd399b6a0b166ce206.
---
 drivers/clk/clk-divider.c    | 69 ++------------------------------------------
 include/linux/clk-provider.h |  3 --
 2 files changed, 2 insertions(+), 70 deletions(-)

diff --git a/drivers/clk/clk-divider.c b/drivers/clk/clk-divider.c
index c572945..4637697 100644
--- a/drivers/clk/clk-divider.c
+++ b/drivers/clk/clk-divider.c
@@ -43,17 +43,6 @@ static unsigned int _get_table_maxdiv(const struct clk_div_table *table)
 	return maxdiv;
 }
 
-static unsigned int _get_table_mindiv(const struct clk_div_table *table)
-{
-	unsigned int mindiv = UINT_MAX;
-	const struct clk_div_table *clkt;
-
-	for (clkt = table; clkt->div; clkt++)
-		if (clkt->div < mindiv)
-			mindiv = clkt->div;
-	return mindiv;
-}
-
 static unsigned int _get_maxdiv(struct clk_divider *divider)
 {
 	if (divider->flags & CLK_DIVIDER_ONE_BASED)
@@ -173,24 +162,6 @@ static int _round_up_table(const struct clk_div_table *table, int div)
 	return up;
 }
 
-static int _round_down_table(const struct clk_div_table *table, int div)
-{
-	const struct clk_div_table *clkt;
-	int down = _get_table_mindiv(table);
-
-	for (clkt = table; clkt->div; clkt++) {
-		if (clkt->div == div)
-			return clkt->div;
-		else if (clkt->div > div)
-			continue;
-
-		if ((div - clkt->div) < (div - down))
-			down = clkt->div;
-	}
-
-	return down;
-}
-
 static int _div_round_up(struct clk_divider *divider,
 		unsigned long parent_rate, unsigned long rate)
 {
@@ -204,42 +175,6 @@ static int _div_round_up(struct clk_divider *divider,
 	return div;
 }
 
-static int _div_round_closest(struct clk_divider *divider,
-		unsigned long parent_rate, unsigned long rate)
-{
-	int up, down, div;
-
-	up = down = div = DIV_ROUND_CLOSEST(parent_rate, rate);
-
-	if (divider->flags & CLK_DIVIDER_POWER_OF_TWO) {
-		up = __roundup_pow_of_two(div);
-		down = __rounddown_pow_of_two(div);
-	} else if (divider->table) {
-		up = _round_up_table(divider->table, div);
-		down = _round_down_table(divider->table, div);
-	}
-
-	return (up - div) <= (div - down) ? up : down;
-}
-
-static int _div_round(struct clk_divider *divider, unsigned long parent_rate,
-		unsigned long rate)
-{
-	if (divider->flags & CLK_DIVIDER_ROUND_CLOSEST)
-		return _div_round_closest(divider, parent_rate, rate);
-
-	return _div_round_up(divider, parent_rate, rate);
-}
-
-static bool _is_best_div(struct clk_divider *divider,
-		int rate, int now, int best)
-{
-	if (divider->flags & CLK_DIVIDER_ROUND_CLOSEST)
-		return abs(rate - now) < abs(rate - best);
-
-	return now <= rate && now > best;
-}
-
 static int clk_divider_bestdiv(struct clk_hw *hw, unsigned long rate,
 		unsigned long *best_parent_rate)
 {
@@ -255,7 +190,7 @@ static int clk_divider_bestdiv(struct clk_hw *hw, unsigned long rate,
 
 	if (!(__clk_get_flags(hw->clk) & CLK_SET_RATE_PARENT)) {
 		parent_rate = *best_parent_rate;
-		bestdiv = _div_round(divider, parent_rate, rate);
+		bestdiv = _div_round_up(divider, parent_rate, rate);
 		bestdiv = bestdiv == 0 ? 1 : bestdiv;
 		bestdiv = bestdiv > maxdiv ? maxdiv : bestdiv;
 		return bestdiv;
@@ -282,7 +217,7 @@ static int clk_divider_bestdiv(struct clk_hw *hw, unsigned long rate,
 		parent_rate = __clk_round_rate(__clk_get_parent(hw->clk),
 				MULT_ROUND_UP(rate, i));
 		now = DIV_ROUND_UP(parent_rate, i);
-		if (_is_best_div(divider, rate, now, best)) {
+		if (now <= rate && now > best) {
 			bestdiv = i;
 			best = now;
 			*best_parent_rate = parent_rate;
diff --git a/include/linux/clk-provider.h b/include/linux/clk-provider.h
index a0ab265..b2a3323 100644
--- a/include/linux/clk-provider.h
+++ b/include/linux/clk-provider.h
@@ -315,8 +315,6 @@ struct clk_div_table {
  *   of this register, and mask of divider bits are in higher 16-bit of this
  *   register.  While setting the divider bits, higher 16-bit should also be
  *   updated to indicate changing divider bits.
- * CLK_DIVIDER_ROUND_CLOSEST - Makes the best calculated divider to be rounded
- *	to the closest integer instead of the up one.
  */
 struct clk_divider {
 	struct clk_hw	hw;
@@ -332,7 +330,6 @@ struct clk_divider {
 #define CLK_DIVIDER_POWER_OF_TWO	BIT(1)
 #define CLK_DIVIDER_ALLOW_ZERO		BIT(2)
 #define CLK_DIVIDER_HIWORD_MASK		BIT(3)
-#define CLK_DIVIDER_ROUND_CLOSEST	BIT(4)
 
 extern const struct clk_ops clk_divider_ops;
 struct clk *clk_register_divider(struct device *dev, const char *name,
-- 
1.8.0

