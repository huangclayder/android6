From 480dbc33fa30671129b8634f921384be7388ed5d Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Tue, 25 Aug 2015 00:45:21 +0800
Subject: [PATCH] MLK-11401-2 ARM: imx: correct pcie PGC power up/down flow

For SW power up/down pcie phy in GPC, below flow should
be executed:

1. map pcie phy to A7 domain;
2. enable pcie phy PGC bit if it is a disable operation;
3. do software power up/down request in GPC;
4. wait for the software request bit clear.

Previous flow is incorrect, as it miss #4 step, correct it.

Signed-off-by: Anson Huang <b20788@freescale.com>
---
 arch/arm/mach-imx/gpcv2.c | 22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)

diff --git a/arch/arm/mach-imx/gpcv2.c b/arch/arm/mach-imx/gpcv2.c
index c7cebf1..f36f4e0 100644
--- a/arch/arm/mach-imx/gpcv2.c
+++ b/arch/arm/mach-imx/gpcv2.c
@@ -543,28 +543,32 @@ static int imx_pcie_regulator_notify(struct notifier_block *nb,
 {
 	u32 val = 0;
 
+	val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
+	writel_relaxed(val | BIT(3), gpc_base + GPC_PGC_CPU_MAPPING);
+
 	switch (event) {
 	case REGULATOR_EVENT_PRE_ENABLE:
-		val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
-		writel_relaxed(val | BIT(3), gpc_base + GPC_PGC_CPU_MAPPING);
-
 		val = readl_relaxed(gpc_base + GPC_PU_PGC_SW_PUP_REQ);
 		writel_relaxed(val | BIT(1), gpc_base + GPC_PU_PGC_SW_PUP_REQ);
+		while (readl_relaxed(gpc_base + GPC_PU_PGC_SW_PUP_REQ) & BIT(1))
+			;
 		break;
 	case REGULATOR_EVENT_PRE_DISABLE:
+		/* only disable phy need to set PGC bit, enable does NOT need */
+		imx_gpcv2_set_m_core_pgc(true, GPC_PGC_PCIE_PHY);
 		val = readl_relaxed(gpc_base + GPC_PU_PGC_SW_PDN_REQ);
 		writel_relaxed(val | BIT(1), gpc_base + GPC_PU_PGC_SW_PDN_REQ);
-
-		val = readl_relaxed(gpc_base + GPC_PGC_PCIE_PHY);
-		writel_relaxed(val | BIT(0), gpc_base + GPC_PGC_PCIE_PHY);
-
-		val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
-		writel_relaxed(val & ~BIT(3), gpc_base + GPC_PGC_CPU_MAPPING);
+		while (readl_relaxed(gpc_base + GPC_PU_PGC_SW_PDN_REQ) & BIT(1))
+			;
+		imx_gpcv2_set_m_core_pgc(false, GPC_PGC_PCIE_PHY);
 		break;
 	default:
 		break;
 	}
 
+	val = readl_relaxed(gpc_base + GPC_PGC_CPU_MAPPING);
+	writel_relaxed(val & ~BIT(3), gpc_base + GPC_PGC_CPU_MAPPING);
+
 	return NOTIFY_OK;
 }
 
-- 
1.8.0

