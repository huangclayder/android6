From b6e68ede41c3383aa9332fe989dabbe5092fed7c Mon Sep 17 00:00:00 2001
From: Bai Ping <b51503@freescale.com>
Date: Fri, 24 Oct 2014 16:13:51 +0800
Subject: [PATCH] MLK-9739 cpufreq: imx: add request busfreq support for
 cpufreq

Request high bus frequency before scaling up the CPU frequency
and release high bus frequency after scaling down the CPU frequency

Doing so makes a balance between high performance and lower power
consumption.

Signed-off-by: Bai Ping <b51503@freescale.com>
---
 drivers/cpufreq/imx6q-cpufreq.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/drivers/cpufreq/imx6q-cpufreq.c b/drivers/cpufreq/imx6q-cpufreq.c
index 6aea6c5..f6379cc 100644
--- a/drivers/cpufreq/imx6q-cpufreq.c
+++ b/drivers/cpufreq/imx6q-cpufreq.c
@@ -6,6 +6,7 @@
  * published by the Free Software Foundation.
  */
 
+#include <linux/busfreq-imx6.h>
 #include <linux/clk.h>
 #include <linux/cpu.h>
 #include <linux/cpufreq.h>
@@ -68,6 +69,12 @@ static int imx6q_set_target(struct cpufreq_policy *policy, unsigned int index)
 	dev_dbg(cpu_dev, "%u MHz, %ld mV --> %u MHz, %ld mV\n",
 		old_freq / 1000, volt_old / 1000,
 		new_freq / 1000, volt / 1000);
+	/*
+	 * CPU freq is increasing, so need to ensure
+	 * that bus frequency is increased too.
+	 */
+	if (old_freq == freq_table[0].frequency)
+		request_bus_freq(BUS_FREQ_HIGH);
 
 	/* scaling up?  scale voltage before frequency */
 	if (new_freq > old_freq) {
@@ -145,6 +152,12 @@ static int imx6q_set_target(struct cpufreq_policy *policy, unsigned int index)
 			}
 		}
 	}
+	/*
+	 * If CPU is dropped to the lowest level, release the need
+	 * for a high bus frequency.
+	 */
+	if (new_freq == freq_table[0].frequency)
+		release_bus_freq(BUS_FREQ_HIGH);
 
 	mutex_unlock(&set_cpufreq_lock);
 	return 0;
-- 
1.8.0

