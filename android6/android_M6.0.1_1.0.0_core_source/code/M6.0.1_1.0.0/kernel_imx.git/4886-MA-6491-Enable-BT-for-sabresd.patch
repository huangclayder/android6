From 7e32981e4e2d3aa76ca4f79c898f4762ab733423 Mon Sep 17 00:00:00 2001
From: Haoran Wang <b50027@freescale.com>
Date: Tue, 31 Mar 2015 15:18:06 +0800
Subject: [PATCH] MA-6491 Enable BT for sabresd

Remove HCI_H4 support in defconfig.
Add bt_rfkill codes.
Modify DTS for sabresd platform.

Signed-off-by: Haoran Wang <b50027@freescale.com>
---
 arch/arm/boot/dts/imx6qdl-sabresd.dtsi    |  14 ++
 arch/arm/boot/dts/imx6sx-sdb.dts          |   6 +
 arch/arm/configs/imx_v7_android_defconfig |   2 +-
 arch/arm/mach-imx/Kconfig                 |   7 +
 arch/arm/mach-imx/Makefile                |   1 +
 arch/arm/mach-imx/mx6_bt_rfkill.c         | 229 ++++++++++++++++++++++++++++++
 6 files changed, 258 insertions(+), 1 deletion(-)

diff --git a/arch/arm/boot/dts/imx6qdl-sabresd.dtsi b/arch/arm/boot/dts/imx6qdl-sabresd.dtsi
index 152eda5..bb8b558 100644
--- a/arch/arm/boot/dts/imx6qdl-sabresd.dtsi
+++ b/arch/arm/boot/dts/imx6qdl-sabresd.dtsi
@@ -257,6 +257,12 @@
 		power-on-gpio = <&gpio3 19 0>;
 	};
 
+    bt_rfkill {
+                compatible = "fsl,mxc_bt_rfkill";
+                        bt-power-gpios = <&gpio1 2 0>;
+                                status ="okay";
+    };
+
 	ramoops_device {
 		compatible = "fsl,mxc_ramoops";
 		record_size = <524288>; /*512K*/
@@ -569,6 +575,7 @@
 				MX6QDL_PAD_GPIO_9__GPIO1_IO09 	0x80000000
 				MX6QDL_PAD_EIM_DA9__GPIO3_IO09 0x80000000
 				MX6QDL_PAD_GPIO_1__WDOG2_B 0x80000000
+                MX6QDL_PAD_GPIO_2__GPIO1_IO02 0x1b0b0
 				MX6QDL_PAD_NANDF_CS0__GPIO6_IO11 0x80000000
 				MX6QDL_PAD_NANDF_CS1__GPIO6_IO14 0x80000000
 			>;
@@ -923,6 +930,13 @@
 	status = "okay";
 };
 
+&uart5 {
+    pinctrl-names = "default";
+    pinctrl-0 = <&pinctrl_uart5_1>;
+    fsl,uart-has-rtscts;
+    status = "okay";
+};
+
 &usbh1 {
 	vbus-supply = <&reg_usb_h1_vbus>;
 	status = "okay";
diff --git a/arch/arm/boot/dts/imx6sx-sdb.dts b/arch/arm/boot/dts/imx6sx-sdb.dts
index c37b52a..6020a56 100644
--- a/arch/arm/boot/dts/imx6sx-sdb.dts
+++ b/arch/arm/boot/dts/imx6sx-sdb.dts
@@ -222,6 +222,12 @@
 	status = "okay";
 };
 
+bt_rfkill {
+    compatible = "fsl,mxc_bt_rfkill";
+    bt-power-gpios = <&gpio4 10 0>;
+    status = "okay";
+};
+
 &csi1 {
 	status = "okay";
 
diff --git a/arch/arm/configs/imx_v7_android_defconfig b/arch/arm/configs/imx_v7_android_defconfig
index 2d8d28e..acd8f6f 100644
--- a/arch/arm/configs/imx_v7_android_defconfig
+++ b/arch/arm/configs/imx_v7_android_defconfig
@@ -36,6 +36,7 @@ CONFIG_SOC_IMX7D=y
 CONFIG_SOC_VF610=y
 CONFIG_MXC_REBOOT_ANDROID_CMD=y
 CONFIG_MX6_RAMOOPS=y
+CONFIG_MACH_IMX_BLUETOOTH_RFKILL=y
 # CONFIG_SWP_EMULATE is not set
 CONFIG_SMP=y
 CONFIG_HAVE_ARM_ARCH_TIMER=y
@@ -177,7 +178,6 @@ CONFIG_BT_HIDP=y
 CONFIG_BT_HCIBTUSB=y
 CONFIG_BT_HCIBTSDIO=y
 CONFIG_BT_HCIUART=y
-CONFIG_BT_HCIUART_H4=y
 CONFIG_BT_HCIUART_BCSP=y
 CONFIG_BT_HCIUART_ATH3K=y
 CONFIG_BT_HCIBCM203X=y
diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index 92fa0b2..d0835f5 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -891,6 +891,13 @@ config MX6_RAMOOPS
 	help
 	 This config is for MX6 ramoop support
 
+config MACH_IMX_BLUETOOTH_RFKILL
+    tristate "i.MX Bluetooth rfkill interface support"
+    depends on RFKILL
+
+  help
+     Say Y to get the standard rfkill interface of Bluetooth
+
 source "arch/arm/mach-imx/devices/Kconfig"
 
 endmenu
diff --git a/arch/arm/mach-imx/Makefile b/arch/arm/mach-imx/Makefile
index aaa740d..c1512d8 100644
--- a/arch/arm/mach-imx/Makefile
+++ b/arch/arm/mach-imx/Makefile
@@ -141,6 +141,7 @@ obj-$(CONFIG_SOC_IMX50) += mach-imx50.o
 obj-$(CONFIG_SOC_IMX53) += mach-imx53.o
 
 obj-$(CONFIG_SOC_VF610) += clk-vf610.o mach-vf610.o
+obj-$(CONFIG_MACH_IMX_BLUETOOTH_RFKILL) += mx6_bt_rfkill.o
 
 obj-$(CONFIG_MX6_RAMOOPS) += mx6_ramoops.o
 obj-y += devices/
diff --git a/arch/arm/mach-imx/mx6_bt_rfkill.c b/arch/arm/mach-imx/mx6_bt_rfkill.c
new file mode 100644
index 0000000..c9f7b87
--- /dev/null
+++ b/arch/arm/mach-imx/mx6_bt_rfkill.c
@@ -0,0 +1,229 @@
+/*
+ * Copyright (C) 2012-2015 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+/*!
+ * @file mx6_bt_rfkill.c
+ *
+ * @brief This driver is implement a rfkill control interface of bluetooth
+ * chip on i.MX serial boards. Register the power regulator function and
+ * reset function in platform data.
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/device.h>
+#include <linux/kernel.h>
+#include <linux/suspend.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/rfkill.h>
+#include <linux/of_gpio.h>
+#include <linux/of_device.h>
+#include <linux/gpio.h>
+
+static int system_in_suspend;
+
+struct mxc_bt_rfkill_data {
+	int bt_power_gpio;
+};
+
+struct mxc_bt_rfkill_pdata {
+};
+
+static void mxc_bt_rfkill_reset(void *rfkdata)
+{
+	struct mxc_bt_rfkill_data *data = rfkdata;
+	printk(KERN_INFO "mxc_bt_rfkill_reset\n");
+	if (gpio_is_valid(data->bt_power_gpio)) {
+		mdelay(500);
+		gpio_set_value(data->bt_power_gpio, 0);
+		mdelay(500);
+		gpio_set_value(data->bt_power_gpio, 1);
+		mdelay(500);
+	}
+}
+
+static int mxc_bt_rfkill_power_change(void *rfkdata, int status)
+{
+	if (status)
+		mxc_bt_rfkill_reset(rfkdata);
+	return 0;
+}
+static int mxc_bt_set_block(void *rfkdata, bool blocked)
+{
+	int ret;
+
+	/* Bluetooth stack will reset the bluetooth chip during
+	 * resume, since we keep bluetooth's power during suspend,
+	 * don't let rfkill to actually reset the chip. */
+	if (system_in_suspend)
+		return 0;
+	pr_info("rfkill: BT RF going to : %s\n", blocked ? "off" : "on");
+	if (!blocked)
+		ret = mxc_bt_rfkill_power_change(rfkdata, 1);
+	else
+		ret = mxc_bt_rfkill_power_change(rfkdata, 0);
+
+	return ret;
+}
+
+static const struct rfkill_ops mxc_bt_rfkill_ops = {
+	.set_block = mxc_bt_set_block,
+};
+
+static int mxc_bt_power_event(struct notifier_block *this,
+							unsigned long event, void *dummy)
+{
+	switch (event) {
+	case PM_SUSPEND_PREPARE:
+		system_in_suspend = 1;
+		/* going to suspend, don't reset chip */
+		break;
+	case PM_POST_SUSPEND:
+		system_in_suspend = 0;
+		/* System is resume, can reset chip */
+		break;
+	default:
+		break;
+	}
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block mxc_bt_power_notifier = {
+	.notifier_call = mxc_bt_power_event,
+};
+
+#if defined(CONFIG_OF)
+static const struct of_device_id mxc_bt_rfkill_dt_ids[] = {
+	{ .compatible = "fsl,mxc_bt_rfkill", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, mxc_bt_rfkill_dt_ids);
+
+static struct mxc_bt_rfkill_pdata *mxc_bt_rfkill_of_populate_pdata(
+		struct device *dev)
+{
+	struct device_node *of_node = dev->of_node;
+	struct mxc_bt_rfkill_pdata *pdata = dev->platform_data;
+
+	if (!of_node || pdata)
+		return pdata;
+
+	pdata = devm_kzalloc(dev, sizeof(struct mxc_bt_rfkill_pdata),
+				GFP_KERNEL);
+	if (!pdata)
+		return pdata;
+
+	return pdata;
+}
+#endif
+static int mxc_bt_rfkill_probe(struct platform_device *pdev)
+{
+	int rc;
+	struct rfkill *rfk;
+	struct mxc_bt_rfkill_data *data;
+	struct device *dev = &pdev->dev;
+	struct mxc_bt_rfkill_pdata *pdata = pdev->dev.platform_data;
+	struct device_node *np = pdev->dev.of_node;
+
+	data = devm_kzalloc(dev, sizeof(struct mxc_bt_rfkill_data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	pdata = pdev->dev.platform_data;
+	if (!pdata) {
+		pdata = mxc_bt_rfkill_of_populate_pdata(&pdev->dev);
+		if (!pdata)
+			return -EINVAL;
+	}
+
+	data->bt_power_gpio = of_get_named_gpio(np, "bt-power-gpios", 0);
+	if (gpio_is_valid(data->bt_power_gpio)) {
+		printk(KERN_INFO "bt power gpio is:%d\n", data->bt_power_gpio);
+		rc = devm_gpio_request_one(&pdev->dev,
+								data->bt_power_gpio,
+								GPIOF_OUT_INIT_HIGH,
+								"BT power enable");
+		if (rc) {
+			dev_err(&pdev->dev, "unable to get bt-power-gpios\n");
+			goto error_request_gpio;
+		}
+	}
+
+	rc = register_pm_notifier(&mxc_bt_power_notifier);
+	if (rc)
+		goto error_check_func;
+
+	rfk = rfkill_alloc("mxc-bt", &pdev->dev, RFKILL_TYPE_BLUETOOTH,
+					&mxc_bt_rfkill_ops, data);
+
+	if (!rfk) {
+		rc = -ENOMEM;
+		goto error_rfk_alloc;
+	}
+
+	rc = rfkill_register(rfk);
+	if (rc)
+		goto error_rfkill;
+
+	platform_set_drvdata(pdev, rfk);
+	printk(KERN_INFO "mxc_bt_rfkill driver success loaded\n");
+	return 0;
+
+error_rfkill:
+	rfkill_destroy(rfk);
+error_request_gpio:
+error_rfk_alloc:
+error_check_func:
+	kfree(data);
+	return rc;
+}
+
+static int  mxc_bt_rfkill_remove(struct platform_device *pdev)
+{
+	struct mxc_bt_rfkill_data *data = platform_get_drvdata(pdev);
+	struct rfkill *rfk = platform_get_drvdata(pdev);
+
+	platform_set_drvdata(pdev, NULL);
+
+	if (rfk) {
+		rfkill_unregister(rfk);
+		rfkill_destroy(rfk);
+	}
+	mxc_bt_rfkill_power_change(data, 0);
+	kfree(data);
+	return 0;
+}
+
+static struct platform_driver mxc_bt_rfkill_driver = {
+	.probe	= mxc_bt_rfkill_probe,
+	.remove	= mxc_bt_rfkill_remove,
+	.driver = {
+		.name	= "mxc_bt_rfkill",
+		.owner	= THIS_MODULE,
+		.of_match_table = mxc_bt_rfkill_dt_ids,
+	},
+};
+
+module_platform_driver(mxc_bt_rfkill_driver)
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_DESCRIPTION("RFKill control interface of BT on MX6 Platform");
-- 
1.8.0

