From 670bbc60428fbae1c9b894c1f7f0bbc94a4d5e0e Mon Sep 17 00:00:00 2001
From: Liu Xiaowen <b37945@freescale.com>
Date: Tue, 2 Dec 2014 14:34:44 +0800
Subject: [PATCH] MA-6412 PxP V4L2 output: force to call pxp_streamoff when
 device closes.

By previous implementation, there's the possibility that last picture remains
on screen when the program exits. This can be reproduced by not calling
STREAMOFF ioctl in v4l2 output application or just trying to kill the v4l2
output program. The driver has faults to handle this case, since it depends on
'pxp->s0_vbq.streaming' variable be true in close() function to call
pxp_streamoff() while the variable is set to 0 after the application calls
munmap().  The driver should call pxp_streamoff() even if the application
does not call STREAMOFF ioctl.

This patch uses the local 'streaming' variable to track the streaming
status to fix this problem.

Signed-off-by: Robby Cai <r63905@freescale.com>
Signed-off-by: Liu Xiaowen <xiaowen.liu@freescale.com>
---
 drivers/media/platform/mxc/output/mxc_pxp_v4l2.c | 22 +++++++++++++++++-----
 drivers/media/platform/mxc/output/mxc_pxp_v4l2.h |  3 ++-
 2 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/drivers/media/platform/mxc/output/mxc_pxp_v4l2.c b/drivers/media/platform/mxc/output/mxc_pxp_v4l2.c
index 780e228..5037407 100644
--- a/drivers/media/platform/mxc/output/mxc_pxp_v4l2.c
+++ b/drivers/media/platform/mxc/output/mxc_pxp_v4l2.c
@@ -698,6 +698,13 @@ static int pxp_streamon(struct file *file, void *priv,
 	if (t != V4L2_BUF_TYPE_VIDEO_OUTPUT)
 		return -EINVAL;
 
+	if (pxp->streaming) {
+		dev_err(&pxp->pdev->dev, "v4l2 output already run!");
+		return -EBUSY;
+	}
+
+	pxp->streaming = true;
+
 	_get_cur_fb_blank(pxp);
 	set_fb_blank(FB_BLANK_UNBLANK);
 
@@ -718,12 +725,16 @@ static int pxp_streamoff(struct file *file, void *priv,
 	if ((t != V4L2_BUF_TYPE_VIDEO_OUTPUT))
 		return -EINVAL;
 
-	ret = videobuf_streamoff(&pxp->s0_vbq);
+	if (pxp->streaming) {
+		ret = videobuf_streamoff(&pxp->s0_vbq);
+
+		pxp_show_buf(pxp, (unsigned long)pxp->fb.base);
 
-	pxp_show_buf(pxp, (unsigned long)pxp->fb.base);
+		if (pxp->fb_blank)
+			set_fb_blank(FB_BLANK_POWERDOWN);
 
-	if (pxp->fb_blank)
-		set_fb_blank(FB_BLANK_POWERDOWN);
+		pxp->streaming = false;
+	}
 
 	return ret;
 }
@@ -1152,8 +1163,9 @@ out:
 static int pxp_close(struct file *file)
 {
 	struct pxps *pxp = video_get_drvdata(video_devdata(file));
+	if (pxp->streaming)
+		pxp_streamoff(file, NULL, V4L2_BUF_TYPE_VIDEO_OUTPUT);
 
-	pxp_streamoff(file, NULL, V4L2_BUF_TYPE_VIDEO_OUTPUT);
 	videobuf_stop(&pxp->s0_vbq);
 	videobuf_mmap_free(&pxp->s0_vbq);
 	pxp->active = NULL;
diff --git a/drivers/media/platform/mxc/output/mxc_pxp_v4l2.h b/drivers/media/platform/mxc/output/mxc_pxp_v4l2.h
index 8abb4c1..dadfc13 100644
--- a/drivers/media/platform/mxc/output/mxc_pxp_v4l2.h
+++ b/drivers/media/platform/mxc/output/mxc_pxp_v4l2.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2010-2014 Freescale Semiconductor, Inc.
+ * Copyright (C) 2010-2015 Freescale Semiconductor, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -53,6 +53,7 @@ struct pxps {
 	struct video_device *vdev;
 
 	struct videobuf_queue s0_vbq;
+	bool streaming;
 	struct pxp_buffer *active;
 	struct list_head outq;
 	struct pxp_channel	*pxp_channel[1];	/* We need 1 channel */
-- 
1.8.0

