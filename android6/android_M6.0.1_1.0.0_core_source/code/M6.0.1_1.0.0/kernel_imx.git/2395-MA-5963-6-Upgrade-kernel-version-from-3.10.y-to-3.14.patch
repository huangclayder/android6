From e3ae82c339eb208edadd4244948411e347fd390d Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Mon, 2 Feb 2015 09:42:42 +0800
Subject: [PATCH] MA-5963-6 Upgrade kernel version from 3.10.y to 3.14.y

Backport imx_3.10_y_android's touch driver to meet android framework
requirment

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 drivers/input/touchscreen/egalax_ts.c | 217 +++++++++++++++++++++++++++-------
 1 file changed, 175 insertions(+), 42 deletions(-)

diff --git a/drivers/input/touchscreen/egalax_ts.c b/drivers/input/touchscreen/egalax_ts.c
index e6bcb13..2cfaaed 100644
--- a/drivers/input/touchscreen/egalax_ts.c
+++ b/drivers/input/touchscreen/egalax_ts.c
@@ -1,7 +1,7 @@
 /*
  * Driver for EETI eGalax Multiple Touch Controller
  *
- * Copyright (C) 2011 Freescale Semiconductor, Inc.
+ * Copyright (C) 2011-2015 Freescale Semiconductor, Inc.
  *
  * based on max11801_ts.c
  *
@@ -18,6 +18,7 @@
 */
 
 #include <linux/module.h>
+#include <linux/init.h>
 #include <linux/i2c.h>
 #include <linux/interrupt.h>
 #include <linux/input.h>
@@ -28,7 +29,9 @@
 #include <linux/bitops.h>
 #include <linux/input/mt.h>
 #include <linux/of_gpio.h>
-
+#ifdef CONFIG_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
 /*
  * Mouse Mode: some panel may configure the controller to mouse mode,
  * which can only report one point at a given time.
@@ -44,7 +47,7 @@
 /* Multiple Touch Mode */
 #define REPORT_MODE_MTTOUCH		0x4
 
-#define MAX_SUPPORT_POINTS		5
+#define MAX_SUPPORT_POINTS		2
 
 #define EVENT_VALID_OFFSET	7
 #define EVENT_VALID_MASK	(0x1 << EVENT_VALID_OFFSET)
@@ -57,17 +60,56 @@
 
 #define EGALAX_MAX_X	32760
 #define EGALAX_MAX_Y	32760
+#define EGALAX_MAX_Z	2048
 #define EGALAX_MAX_TRIES 100
 
+struct finger_info {
+	s16	x;
+	s16	y;
+	s16	z;
+};
+
 struct egalax_ts {
 	struct i2c_client		*client;
 	struct input_dev		*input_dev;
+#ifdef CONFIG_EARLYSUSPEND
+	struct early_suspend		es_handler;
+#endif
+	u32				finger_mask;
+	int				touch_no_wake;
+	struct finger_info		fingers[MAX_SUPPORT_POINTS];
 };
 
+static void report_input_data(struct egalax_ts *ts)
+{
+	int i;
+	int num_fingers_down;
+
+	num_fingers_down = 0;
+	for (i = 0; i < MAX_SUPPORT_POINTS; i++) {
+		if (ts->fingers[i].z == -1)
+			continue;
+
+		input_report_abs(ts->input_dev, ABS_MT_POSITION_X,
+					ts->fingers[i].x);
+		input_report_abs(ts->input_dev, ABS_MT_POSITION_Y,
+					ts->fingers[i].y);
+		input_report_abs(ts->input_dev, ABS_MT_PRESSURE,
+					ts->fingers[i].z);
+		input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, 1);
+		input_report_abs(ts->input_dev, ABS_MT_TRACKING_ID, i);
+		input_mt_sync(ts->input_dev);
+		num_fingers_down++;
+	}
+	ts->finger_mask = 0;
+
+	if (num_fingers_down == 0)
+		input_mt_sync(ts->input_dev);
+	input_sync(ts->input_dev);
+}
 static irqreturn_t egalax_ts_interrupt(int irq, void *dev_id)
 {
 	struct egalax_ts *ts = dev_id;
-	struct input_dev *input_dev = ts->input_dev;
 	struct i2c_client *client = ts->client;
 	u8 buf[MAX_I2C_DATA_LEN];
 	int id, ret, x, y, z;
@@ -75,6 +117,7 @@ static irqreturn_t egalax_ts_interrupt(int irq, void *dev_id)
 	bool down, valid;
 	u8 state;
 
+	memset(buf, 0, MAX_I2C_DATA_LEN);
 	do {
 		ret = i2c_master_recv(client, buf, MAX_I2C_DATA_LEN);
 	} while (ret == -EAGAIN && tries++ < EGALAX_MAX_TRIES);
@@ -82,7 +125,10 @@ static irqreturn_t egalax_ts_interrupt(int irq, void *dev_id)
 	if (ret < 0)
 		return IRQ_HANDLED;
 
+
 	if (buf[0] != REPORT_MODE_MTTOUCH) {
+		/* invalid point */
+
 		/* ignore mouse events and vendor events */
 		return IRQ_HANDLED;
 	}
@@ -96,25 +142,30 @@ static irqreturn_t egalax_ts_interrupt(int irq, void *dev_id)
 	id = (state & EVENT_ID_MASK) >> EVENT_ID_OFFSET;
 	down = state & EVENT_DOWN_UP;
 
-	if (!valid || id > MAX_SUPPORT_POINTS) {
+	if (!valid || id >= MAX_SUPPORT_POINTS) {
 		dev_dbg(&client->dev, "point invalid\n");
 		return IRQ_HANDLED;
 	}
 
-	input_mt_slot(input_dev, id);
-	input_mt_report_slot_state(input_dev, MT_TOOL_FINGER, down);
-
-	dev_dbg(&client->dev, "%s id:%d x:%d y:%d z:%d",
-		down ? "down" : "up", id, x, y, z);
-
-	if (down) {
-		input_report_abs(input_dev, ABS_MT_POSITION_X, x);
-		input_report_abs(input_dev, ABS_MT_POSITION_Y, y);
-		input_report_abs(input_dev, ABS_MT_PRESSURE, z);
+	if (ts->finger_mask & (1U << id))
+		report_input_data(ts);
+	if (!down) {
+		ts->fingers[id].z = -1;
+		ts->finger_mask |= 1U << id;
+
+	} else {
+		ts->fingers[id].x = x;
+		ts->fingers[id].y = y;
+		ts->fingers[id].z = z;
+		ts->finger_mask |= 1U << id;
 	}
 
-	input_mt_report_pointer_emulation(input_dev, true);
-	input_sync(input_dev);
+	/* report all pointers */
+	dev_dbg(&client->dev, "%s id:%d x:%d y:%d z:%d\n",
+		(down ? "down" : "up"), id, x, y, z);
+
+	if (ts->finger_mask)
+		report_input_data(ts);
 
 	return IRQ_HANDLED;
 }
@@ -124,7 +175,8 @@ static int egalax_wake_up_device(struct i2c_client *client)
 {
 	struct device_node *np = client->dev.of_node;
 	int gpio;
-	int ret;
+	u8 buf[MAX_I2C_DATA_LEN];
+	int ret, tries = 0;
 
 	if (!np)
 		return -ENODEV;
@@ -142,13 +194,18 @@ static int egalax_wake_up_device(struct i2c_client *client)
 	}
 
 	/* wake up controller via an falling edge on IRQ gpio. */
-	gpio_direction_output(gpio, 0);
+	gpio_direction_output(gpio, 1);
+	gpio_set_value(gpio, 0);
 	gpio_set_value(gpio, 1);
 
 	/* controller should be waken up, return irq.  */
 	gpio_direction_input(gpio);
 	gpio_free(gpio);
 
+	/* If the touch controller has some data pending, read it */
+	/* or the INT line will remian low */
+	while ((gpio_get_value(gpio) == 0) && (tries++ < EGALAX_MAX_TRIES))
+		i2c_master_recv(client, buf, MAX_I2C_DATA_LEN);
 	return 0;
 }
 
@@ -164,23 +221,30 @@ static int egalax_firmware_version(struct i2c_client *client)
 	return 0;
 }
 
+#ifdef CONFIG_EARLYSUSPEND
+static void egalax_early_suspend(struct early_suspend *h);
+static void egalax_later_resume(struct early_suspend *h);
+#endif
+
 static int egalax_ts_probe(struct i2c_client *client,
-			   const struct i2c_device_id *id)
+				       const struct i2c_device_id *id)
 {
 	struct egalax_ts *ts;
 	struct input_dev *input_dev;
+	int ret;
 	int error;
 
-	ts = devm_kzalloc(&client->dev, sizeof(struct egalax_ts), GFP_KERNEL);
+	ts = kzalloc(sizeof(struct egalax_ts), GFP_KERNEL);
 	if (!ts) {
 		dev_err(&client->dev, "Failed to allocate memory\n");
 		return -ENOMEM;
 	}
 
-	input_dev = devm_input_allocate_device(&client->dev);
+	input_dev = input_allocate_device();
 	if (!input_dev) {
 		dev_err(&client->dev, "Failed to allocate memory\n");
-		return -ENOMEM;
+		error = -ENOMEM;
+		goto err_free_ts;
 	}
 
 	ts->client = client;
@@ -189,47 +253,84 @@ static int egalax_ts_probe(struct i2c_client *client,
 	/* controller may be in sleep, wake it up. */
 	error = egalax_wake_up_device(client);
 	if (error) {
-		dev_err(&client->dev, "Failed to wake up the controller\n");
-		return error;
+		dev_err(&client->dev, "Failed to wake up, disable suspend,"
+				"otherwise it can not wake up\n");
+		ts->touch_no_wake = true;
 	}
+	msleep(10);
 
-	error = egalax_firmware_version(client);
-	if (error < 0) {
+	ret = egalax_firmware_version(client);
+	if (ret < 0) {
 		dev_err(&client->dev, "Failed to read firmware version\n");
-		return error;
+		error = -EIO;
+		goto err_free_dev;
 	}
 
-	input_dev->name = "EETI eGalax Touch Screen";
+	input_dev->name = "eGalax Touch Screen";
 	input_dev->id.bustype = BUS_I2C;
+	input_dev->dev.parent = &client->dev;
 
 	__set_bit(EV_ABS, input_dev->evbit);
-	__set_bit(EV_KEY, input_dev->evbit);
-	__set_bit(BTN_TOUCH, input_dev->keybit);
 
-	input_set_abs_params(input_dev, ABS_X, 0, EGALAX_MAX_X, 0, 0);
-	input_set_abs_params(input_dev, ABS_Y, 0, EGALAX_MAX_Y, 0, 0);
 	input_set_abs_params(input_dev,
 			     ABS_MT_POSITION_X, 0, EGALAX_MAX_X, 0, 0);
 	input_set_abs_params(input_dev,
 			     ABS_MT_POSITION_Y, 0, EGALAX_MAX_Y, 0, 0);
-	input_mt_init_slots(input_dev, MAX_SUPPORT_POINTS, 0);
+	input_set_abs_params(input_dev,
+			     ABS_MT_PRESSURE, 0, EGALAX_MAX_Z, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, 1, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_TRACKING_ID, 0,
+			     MAX_SUPPORT_POINTS - 1, 0, 0);
 
 	input_set_drvdata(input_dev, ts);
 
-	error = devm_request_threaded_irq(&client->dev, client->irq, NULL,
-					  egalax_ts_interrupt,
-					  IRQF_TRIGGER_LOW | IRQF_ONESHOT,
-					  "egalax_ts", ts);
+	error = request_threaded_irq(client->irq, NULL, egalax_ts_interrupt,
+				     IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+				     "egalax_ts", ts);
 	if (error < 0) {
 		dev_err(&client->dev, "Failed to register interrupt\n");
-		return error;
+		goto err_free_dev;
 	}
 
 	error = input_register_device(ts->input_dev);
 	if (error)
-		return error;
+		goto err_free_irq;
 
 	i2c_set_clientdata(client, ts);
+#ifdef CONFIG_EARLYSUSPEND
+	/* Not register earlysuspend if not way to wake device. */
+	if (ts->touch_no_wake == false) {
+		/* register this client's earlysuspend */
+		ts->es_handler.level = EARLY_SUSPEND_LEVEL_DISABLE_FB;
+		ts->es_handler.suspend = egalax_early_suspend;
+		ts->es_handler.resume = egalax_later_resume;
+		ts->es_handler.data = (void *)client;
+		register_early_suspend(&ts->es_handler);
+	}
+#endif
+	return 0;
+
+err_free_irq:
+	free_irq(client->irq, ts);
+err_free_dev:
+	input_free_device(input_dev);
+err_free_ts:
+	kfree(ts);
+
+	return error;
+}
+
+static int egalax_ts_remove(struct i2c_client *client)
+{
+	struct egalax_ts *ts = i2c_get_clientdata(client);
+#ifdef CONFIG_EARLYSUSPEND
+	unregister_early_suspend(&ts->es_handler);
+#endif
+	free_irq(client->irq, ts);
+	input_free_device(ts->input_dev);
+	input_unregister_device(ts->input_dev);
+	kfree(ts);
+
 	return 0;
 }
 
@@ -242,12 +343,19 @@ MODULE_DEVICE_TABLE(i2c, egalax_ts_id);
 #ifdef CONFIG_PM_SLEEP
 static int egalax_ts_suspend(struct device *dev)
 {
+    int ret;
 	static const u8 suspend_cmd[MAX_I2C_DATA_LEN] = {
 		0x3, 0x6, 0xa, 0x3, 0x36, 0x3f, 0x2, 0, 0, 0
 	};
 	struct i2c_client *client = to_i2c_client(dev);
-	int ret;
+	struct egalax_ts *ts = i2c_get_clientdata(client);
 
+	/* If can not wake up, not suspend. */
+	if (ts->touch_no_wake) {
+		dev_info(&client->dev,
+				"not suspend because unable to wake up device\n");
+		return 0;
+	}
 	ret = i2c_master_send(client, suspend_cmd, MAX_I2C_DATA_LEN);
 	return ret > 0 ? 0 : ret;
 }
@@ -255,7 +363,11 @@ static int egalax_ts_suspend(struct device *dev)
 static int egalax_ts_resume(struct device *dev)
 {
 	struct i2c_client *client = to_i2c_client(dev);
+	struct egalax_ts *ts = i2c_get_clientdata(client);
 
+	/* If not wake up, don't needs resume. */
+	if (ts->touch_no_wake)
+		return 0;
 	return egalax_wake_up_device(client);
 }
 #endif
@@ -271,13 +383,34 @@ static struct i2c_driver egalax_ts_driver = {
 	.driver = {
 		.name	= "egalax_ts",
 		.owner	= THIS_MODULE,
+#ifndef CONFIG_HAS_EARLYSUSPEND
 		.pm	= &egalax_ts_pm_ops,
-		.of_match_table	= egalax_ts_dt_ids,
+#endif
+		.of_match_table	= of_match_ptr(egalax_ts_dt_ids),
 	},
 	.id_table	= egalax_ts_id,
 	.probe		= egalax_ts_probe,
+	.remove		= egalax_ts_remove,
 };
 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void egalax_early_suspend(struct early_suspend *h)
+{
+	u8 suspend_cmd[MAX_I2C_DATA_LEN] = {0x3, 0x6, 0xa, 0x3, 0x36,
+					    0x3f, 0x2, 0, 0, 0};
+
+	if (h->data == NULL)
+		return;
+	i2c_master_send((struct i2c_client *)h->data,
+				suspend_cmd, MAX_I2C_DATA_LEN);
+}
+
+static void egalax_later_resume(struct early_suspend *h)
+{
+	if (h->data)
+		egalax_wake_up_device((struct i2c_client *)h->data);
+}
+#endif
 module_i2c_driver(egalax_ts_driver);
 
 MODULE_AUTHOR("Freescale Semiconductor, Inc.");
-- 
1.8.0

