From d3517bdaa012c14a2903ac4bc19e2ab00e929302 Mon Sep 17 00:00:00 2001
From: ZhongWen <b47623@freescale.com>
Date: Thu, 5 Dec 2013 15:00:13 +0800
Subject: [PATCH 043/115] ENGR00288582 fix white bar flashes during open or
 close WfdSink.apk

Fix white bar flashes during open or close WfdSink.apk.
Add one theme.xml in the WfdSink.apk and make some changes in AndroidManifest.xml.
Enable WfdSink.apk searching devices automaticlly.
Enable WfdSink.apk full screen.

Signed-off-by: ZhongWen <b47623@freescale.com>
---
 WfdSink/AndroidManifest.xml                        |  2 +-
 WfdSink/res/values/themes.xml                      | 10 +++++
 .../src/com/freescale/wfdsink/WfdSinkActivity.java | 45 ++++++++++++++++++----
 3 files changed, 49 insertions(+), 8 deletions(-)
 create mode 100755 WfdSink/res/values/themes.xml

diff --git a/WfdSink/AndroidManifest.xml b/WfdSink/AndroidManifest.xml
index a5a5c1e..07ebf61 100755
--- a/WfdSink/AndroidManifest.xml
+++ b/WfdSink/AndroidManifest.xml
@@ -17,7 +17,7 @@
         android:allowBackup="true"
         android:icon="@drawable/ic_hdmi"
         android:label="@string/app_name"
-        android:theme="@style/AppTheme" >
+        android:theme="@style/theme" >
         <activity
             android:icon="@drawable/ic_hdmi"
             android:name="com.freescale.wfdsink.WfdSinkActivity"
diff --git a/WfdSink/res/values/themes.xml b/WfdSink/res/values/themes.xml
new file mode 100755
index 0000000..3efaeb9
--- /dev/null
+++ b/WfdSink/res/values/themes.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <style name="theme">
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowFullscreen">?android:windowNoTitle</item>
+        <item name="android:windowBackground">@android:drawable/screen_background_dark</item>
+        <item name="android:windowFrame">@null</item>
+        <item name="android:windowAnimationStyle">@android:style/Animation.Activity</item>
+    </style>
+</resources>
diff --git a/WfdSink/src/com/freescale/wfdsink/WfdSinkActivity.java b/WfdSink/src/com/freescale/wfdsink/WfdSinkActivity.java
index 33b443f..9b9d9b3 100755
--- a/WfdSink/src/com/freescale/wfdsink/WfdSinkActivity.java
+++ b/WfdSink/src/com/freescale/wfdsink/WfdSinkActivity.java
@@ -79,8 +79,8 @@ import android.content.BroadcastReceiver;
 import android.net.wifi.p2p.WifiP2pDevice;
 import android.content.Intent;
 import android.os.Parcelable;
-
-public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback
+import android.view.View.OnClickListener;
+public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback,OnClickListener
 {
     private static final String TAG = "WfdSinkActivity";
     private static final int UPDATE_GRID_VIEW = 0x10;
@@ -89,7 +89,9 @@ public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback
     private static final int START_PLAY = 0x13;
     private static final int STOP_PLAY = 0x14;
     private static final int DO_CONNECTED = 0x15;
-
+    private static final int START_SEARCH = 0x16;
+    private static final int DELAY = 1000;
+    private static final int PERIOD = 3000;
     private WfdSink mWfdSink;
     private SurfaceHolder mSurfaceHolder = null;
     private boolean mWaitingForSurface = false;
@@ -152,7 +154,7 @@ public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback
     };
 
 
-
+    private View sink_main;
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         requestWindowFeature(Window.FEATURE_NO_TITLE);
@@ -163,9 +165,11 @@ public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback
         intentFilter.addAction(WfdSink.WFD_DEVICE_CONNECTED_ACTION);
         intentFilter.addAction(WfdSink.WFD_THIS_DEVICE_UPDATE_ACTION);
         registerReceiver(mWifiP2pReceiver, intentFilter);
+        sink_main = getLayoutInflater().from(this).inflate(R.layout.sink_main, null);  
+        sink_main.setOnClickListener(this);
 
         mWfdSink = new WfdSink(this);
-        setContentView(R.layout.sink_main);
+        setContentView(sink_main);
 
         mSurfaceView = (SurfaceView) findViewById(R.id.sink_preview);
         SurfaceHolder holder = mSurfaceView.getHolder();
@@ -204,7 +208,6 @@ public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback
         mGridView.setAdapter(mPictureAdapter);
 
         startSearch();
-        mTimer = new Timer(true);
     }
 
     @Override
@@ -301,9 +304,14 @@ public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback
                     break;
 
                 case DO_CONNECTED:
-                	status.setText("Status:Connected");
+                    status.setText("Status:Connected");
                     boolean connected = (msg.arg1 == 1);
                     handleConnected(connected);
+                    sink_main.setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
+                    mTimer.cancel();
+                    break;
+                case START_SEARCH:
+                    mWfdSink.startSearch();
                     break;
             }
         }
@@ -410,6 +418,17 @@ public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback
         mGridView.setAdapter(mPictureAdapter);
     }
 
+    public  void onResume() {
+        super.onResume();
+        TimerTask task = new TimerTask(){  
+            public void run() {     
+                mHandler.sendEmptyMessage(START_SEARCH);    
+            }  
+        };
+        mTimer = new Timer(true);
+        mTimer.schedule(task,DELAY, PERIOD);
+    }
+
     public void onStop() {
         super.onStop();
         unregisterReceiver(mWifiP2pReceiver);
@@ -495,5 +514,17 @@ public class WfdSinkActivity extends Activity implements SurfaceHolder.Callback
             return convertView;
         }
     }
+        @Override
+        public void onClick(View v) {
+
+            int i = sink_main.getSystemUiVisibility();
+            if (i == View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) {
+                sink_main.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
+            } else if (i == View.SYSTEM_UI_FLAG_VISIBLE){
+                sink_main.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
+            } else if (i == View.SYSTEM_UI_FLAG_LOW_PROFILE) {
+                sink_main.setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
+            }
+        }
 }
 
-- 
1.8.0

