From 0bec498ceb2c218147d8b658ef176374d9148379 Mon Sep 17 00:00:00 2001
From: Wenbo Zhu <b52619@freescale.com>
Date: Wed, 22 Jul 2015 16:56:39 +0800
Subject: [PATCH 103/115] MA-6914 when auto sx/dq diaplay without hdmi, the
 "enable passthrough" isn't be show on AudioRoute
 application. and make the apk support sabresd dq.

  add passthrough.xml, nodevice.xml and spdifin.xml in layout, and add Judgment statement to
distinguish different display.

Signed-off-by: Wenbo Zhu <b52619@freescale.com>
---
 AudioRoute/res/layout/main.xml                     |  2 +-
 AudioRoute/res/layout/nodevice.xml                 | 34 ++++++++
 AudioRoute/res/layout/passthrough.xml              | 42 +++++++++
 AudioRoute/res/layout/spdifin.xml                  | 42 +++++++++
 .../src/com/example/audioroute/AudioRoute.java     | 99 ++++++++++++++++++----
 5 files changed, 203 insertions(+), 16 deletions(-)
 create mode 100644 AudioRoute/res/layout/nodevice.xml
 create mode 100644 AudioRoute/res/layout/passthrough.xml
 create mode 100644 AudioRoute/res/layout/spdifin.xml

diff --git a/AudioRoute/res/layout/main.xml b/AudioRoute/res/layout/main.xml
index 78d2cf3..6dee200 100644
--- a/AudioRoute/res/layout/main.xml
+++ b/AudioRoute/res/layout/main.xml
@@ -43,7 +43,7 @@
 		  android:layout_height="wrap_content"
 		  android:textSize="6pt"/>
 
-    <CheckBox android:id="@+id/CheckPassthrough"
+   <CheckBox android:id="@+id/CheckPassthrough"
               android:layout_width="wrap_content"
               android:layout_height="wrap_content"
               android:layout_marginLeft="10dip"/>
diff --git a/AudioRoute/res/layout/nodevice.xml b/AudioRoute/res/layout/nodevice.xml
new file mode 100644
index 0000000..217dc79
--- /dev/null
+++ b/AudioRoute/res/layout/nodevice.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+**
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="fill_parent"
+              android:layout_height="fill_parent"
+              android:orientation="vertical">
+
+    <LinearLayout android:layout_width="fill_parent"
+                  android:layout_height="wrap_content"
+                  android:orientation="vertical">
+
+   
+    </LinearLayout>
+
+
+</LinearLayout>
diff --git a/AudioRoute/res/layout/passthrough.xml b/AudioRoute/res/layout/passthrough.xml
new file mode 100644
index 0000000..d5a8563
--- /dev/null
+++ b/AudioRoute/res/layout/passthrough.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+**
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="fill_parent"
+              android:layout_height="fill_parent"
+              android:orientation="vertical">
+
+    <LinearLayout android:layout_width="fill_parent"
+                  android:layout_height="wrap_content"
+                  android:orientation="vertical">
+
+    </LinearLayout>
+
+
+    <TextView android:id="@+id/AudioOutputText"
+		  android:layout_width="wrap_content"
+		  android:layout_height="wrap_content"
+		  android:textSize="6pt"/>
+
+    <CheckBox android:id="@+id/CheckPassthrough"
+              android:layout_width="wrap_content"
+              android:layout_height="wrap_content"
+              android:layout_marginLeft="10dip"/>
+</LinearLayout>
diff --git a/AudioRoute/res/layout/spdifin.xml b/AudioRoute/res/layout/spdifin.xml
new file mode 100644
index 0000000..6f35415
--- /dev/null
+++ b/AudioRoute/res/layout/spdifin.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+**
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="fill_parent"
+              android:layout_height="fill_parent"
+              android:orientation="vertical">
+
+    <LinearLayout android:layout_width="fill_parent"
+                  android:layout_height="wrap_content"
+                  android:orientation="vertical">
+
+        <TextView android:id="@+id/commandText"
+                  android:layout_width="fill_parent"
+                  android:layout_height="wrap_content"
+                  android:textSize="6pt"/>
+    </LinearLayout>
+
+    <CheckBox android:id="@+id/spdif_in"
+              android:layout_width="wrap_content"
+              android:layout_height="wrap_content"
+              android:layout_marginLeft="10dip"/>
+
+
+</LinearLayout>
diff --git a/AudioRoute/src/com/example/audioroute/AudioRoute.java b/AudioRoute/src/com/example/audioroute/AudioRoute.java
index c73268b..4d49976 100644
--- a/AudioRoute/src/com/example/audioroute/AudioRoute.java
+++ b/AudioRoute/src/com/example/audioroute/AudioRoute.java
@@ -17,7 +17,7 @@
 
 package com.example.audioroute;
 
-
+import java.io.File;
 import android.app.Activity;
 import android.content.Context;
 import android.os.Bundle;
@@ -53,24 +53,90 @@ public class AudioRoute extends Activity {
         // Create and attach the view that is responsible for painting.
 
         mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+        File fileHdmi=new File("proc/asound/imxhdmisoc");
+        File fileSpdif=new File("proc/asound/imxspdif");
+        if(fileHdmi.exists()&&!fileSpdif.exists())
+        {
+         setContentView(R.layout.passthrough);
+         mCheckBoxPassthrough = (CheckBox)findViewById(R.id.CheckPassthrough);
+         mTextViewOutputChoose = (TextView) findViewById(R.id.AudioOutputText);
+        }
+        else if(!fileHdmi.exists()&&fileSpdif.exists())
+        {
+         setContentView(R.layout.spdifin);
+         mSpdifIn = (CheckBox)findViewById(R.id.spdif_in);
+         mCommand = (TextView) findViewById(R.id.commandText);
+        }
+        else if(fileHdmi.exists()&&fileSpdif.exists())
+        {
+         setContentView(R.layout.main);
+         mCheckBoxPassthrough = (CheckBox)findViewById(R.id.CheckPassthrough);
+         mSpdifIn = (CheckBox)findViewById(R.id.spdif_in);
+         mCommand = (TextView) findViewById(R.id.commandText);
+         mTextViewOutputChoose = (TextView) findViewById(R.id.AudioOutputText);
+        }
+        else 
+        {
+         setContentView(R.layout.nodevice);
+         Log.d(TAG,"no device connected");
+        }
+
+       if(fileHdmi.exists()&&!fileSpdif.exists())
+        {
+         mTextViewOutputChoose.setText(getResources().getString(R.string.output_choose));
+         mCheckBoxPassthrough.setText(getResources().getString(R.string.Enable_Passthrough));
+        }
+      else if(!fileHdmi.exists()&&fileSpdif.exists())
+        {
+         mCommand.setText(getResources().getString(R.string.device_choose));
+         mSpdifIn.setText(getResources().getString(R.string.Enable_SPDIF_In));
+        }
+      else if(fileHdmi.exists()&&fileSpdif.exists())
+        {
+         mTextViewOutputChoose.setText(getResources().getString(R.string.output_choose));
+         mCheckBoxPassthrough.setText(getResources().getString(R.string.Enable_Passthrough));
+         mCommand.setText(getResources().getString(R.string.device_choose));
+         mSpdifIn.setText(getResources().getString(R.string.Enable_SPDIF_In));
+        }
+      else
+          Log.d(TAG,"no device connected");
+
+      if(fileHdmi.exists()&&!fileSpdif.exists())
+        {
+        String value = SystemProperties.get("persist.audio.pass.through");
+        Log.d(TAG,"property persist.audio.pass.through is " + value);
+        if(value.equals("2000"))
+            mCheckBoxPassthrough.setChecked(true);
+        else
+            mCheckBoxPassthrough.setChecked(false);
 
-        setContentView(R.layout.main);
-        mCommand = (TextView) findViewById(R.id.commandText);
-        mSpdifIn = (CheckBox)findViewById(R.id.spdif_in);
-        mTextViewOutputChoose = (TextView) findViewById(R.id.AudioOutputText);
-        mCheckBoxPassthrough = (CheckBox)findViewById(R.id.CheckPassthrough);
-
-
-        mCommand.setText(getResources().getString(R.string.device_choose));
-
-        mSpdifIn.setText(getResources().getString(R.string.Enable_SPDIF_In));
+        mCheckBoxPassthrough.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                Log.d(TAG, "CheckBox Passthrough is clicked");
+                SystemProperties.set("persist.audio.pass.through",mCheckBoxPassthrough.isChecked() ? "2000" : "0" );
+            }
+        });
+        }
+      else if (!fileHdmi.exists()&&fileSpdif.exists())
+         {
+         if (AudioSystem.getDeviceConnectionState(AudioSystem.DEVICE_IN_AUX_DIGITAL, "") == AudioSystem.DEVICE_STATE_AVAILABLE)
+            mSpdifIn.setChecked(true);
+          else
+            mSpdifIn.setChecked(false);
 
-        mTextViewOutputChoose.setText(getResources().getString(R.string.output_choose));
-        mCheckBoxPassthrough.setText(getResources().getString(R.string.Enable_Passthrough));
+        mSpdifIn.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                Log.d(TAG, "SPDIF IN is clicked");
 
-        if (AudioSystem.getDeviceConnectionState(AudioSystem.DEVICE_IN_AUX_DIGITAL, "") == AudioSystem.DEVICE_STATE_AVAILABLE)
+                setupAudioRoute();
+            }
+        });
+         }
+      else if(fileHdmi.exists()&&fileSpdif.exists())
+         {
+         if (AudioSystem.getDeviceConnectionState(AudioSystem.DEVICE_IN_AUX_DIGITAL, "") == AudioSystem.DEVICE_STATE_AVAILABLE)
             mSpdifIn.setChecked(true);
-        else
+          else
             mSpdifIn.setChecked(false);
 
         mSpdifIn.setOnClickListener(new OnClickListener() {
@@ -94,6 +160,9 @@ public class AudioRoute extends Activity {
                 SystemProperties.set("persist.audio.pass.through",mCheckBoxPassthrough.isChecked() ? "2000" : "0" );
             }
         });
+       }
+      else
+      Log.d(TAG, "no device connected and can't do some operation");
 
 
     }
-- 
1.8.0

