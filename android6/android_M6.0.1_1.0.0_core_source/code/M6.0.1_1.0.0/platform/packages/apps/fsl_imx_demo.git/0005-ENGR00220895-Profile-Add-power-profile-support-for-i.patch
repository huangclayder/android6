From e075674f3ba902535569a30c40873b77881d8e7f Mon Sep 17 00:00:00 2001
From: Lin Fuzhen <fuzhen.lin@freescale.com>
Date: Tue, 21 Aug 2012 17:53:14 +0800
Subject: [PATCH 005/115] ENGR00220895 Profile: Add power profile support for
 i.MX6 SOCs

Profile App allow end user to configurate the system
performance to get savimg more power and better performance.
It can work in auto mode according the SOC internal
temperature. Provide three profile: Performace, Power saving and Normal
mode profiles for end user to select and let the device working as user expected

Signed-off-by: Lin Fuzhen <fuzhen.lin@freescale.com>
---
 FSLPowerProfleApp/Android.mk                       |  19 +
 FSLPowerProfleApp/AndroidManifest.xml              |  26 +
 FSLPowerProfleApp/proguard.cfg                     |  40 ++
 .../res/drawable-hdpi/ic_launcher.png              | Bin 0 -> 4147 bytes
 .../res/drawable-ldpi/ic_launcher.png              | Bin 0 -> 1723 bytes
 .../res/drawable-mdpi/ic_launcher.png              | Bin 0 -> 2574 bytes
 FSLPowerProfleApp/res/layout/main.xml              |  19 +
 FSLPowerProfleApp/res/values-zh-rCN/arrays.xml     |  10 +
 FSLPowerProfleApp/res/values-zh-rCN/strings.xml    |   8 +
 FSLPowerProfleApp/res/values/arrays.xml            |  10 +
 FSLPowerProfleApp/res/values/strings.xml           |   8 +
 .../src/fsl/power/manager/PowerReceiver.java       |  45 ++
 .../src/fsl/power/manager/PowerServiceDB.java      |  87 +++
 .../src/fsl/power/manager/powermanager.java        | 151 +++++
 FSLProfileService/Android.mk                       |  19 +
 FSLProfileService/AndroidManifest.xml              |  47 ++
 FSLProfileService/proguard.cfg                     |  40 ++
 .../res/drawable-hdpi/ic_launcher.png              | Bin 0 -> 4147 bytes
 .../res/drawable-ldpi/ic_launcher.png              | Bin 0 -> 1723 bytes
 .../res/drawable-mdpi/ic_launcher.png              | Bin 0 -> 2574 bytes
 FSLProfileService/res/layout/main.xml              |  19 +
 FSLProfileService/res/values/strings.xml           |   8 +
 .../fsl/power/service/FSLPowerOptionService.java   | 662 +++++++++++++++++++++
 .../src/fsl/power/service/FSLPpowerProvider.java   | 355 +++++++++++
 .../src/fsl/power/service/PowerServiceDB.java      |  86 +++
 .../fsl/power/service/PowerServiceReceiver.java    |  53 ++
 .../src/fsl/power/service/TestFSLPowerService.java |  56 ++
 27 files changed, 1768 insertions(+)
 create mode 100644 FSLPowerProfleApp/Android.mk
 create mode 100644 FSLPowerProfleApp/AndroidManifest.xml
 create mode 100644 FSLPowerProfleApp/proguard.cfg
 create mode 100644 FSLPowerProfleApp/res/drawable-hdpi/ic_launcher.png
 create mode 100644 FSLPowerProfleApp/res/drawable-ldpi/ic_launcher.png
 create mode 100644 FSLPowerProfleApp/res/drawable-mdpi/ic_launcher.png
 create mode 100644 FSLPowerProfleApp/res/layout/main.xml
 create mode 100644 FSLPowerProfleApp/res/values-zh-rCN/arrays.xml
 create mode 100644 FSLPowerProfleApp/res/values-zh-rCN/strings.xml
 create mode 100644 FSLPowerProfleApp/res/values/arrays.xml
 create mode 100644 FSLPowerProfleApp/res/values/strings.xml
 create mode 100644 FSLPowerProfleApp/src/fsl/power/manager/PowerReceiver.java
 create mode 100644 FSLPowerProfleApp/src/fsl/power/manager/PowerServiceDB.java
 create mode 100644 FSLPowerProfleApp/src/fsl/power/manager/powermanager.java
 create mode 100644 FSLProfileService/Android.mk
 create mode 100644 FSLProfileService/AndroidManifest.xml
 create mode 100644 FSLProfileService/proguard.cfg
 create mode 100755 FSLProfileService/res/drawable-hdpi/ic_launcher.png
 create mode 100755 FSLProfileService/res/drawable-ldpi/ic_launcher.png
 create mode 100755 FSLProfileService/res/drawable-mdpi/ic_launcher.png
 create mode 100755 FSLProfileService/res/layout/main.xml
 create mode 100755 FSLProfileService/res/values/strings.xml
 create mode 100755 FSLProfileService/src/fsl/power/service/FSLPowerOptionService.java
 create mode 100755 FSLProfileService/src/fsl/power/service/FSLPpowerProvider.java
 create mode 100755 FSLProfileService/src/fsl/power/service/PowerServiceDB.java
 create mode 100755 FSLProfileService/src/fsl/power/service/PowerServiceReceiver.java
 create mode 100755 FSLProfileService/src/fsl/power/service/TestFSLPowerService.java

diff --git a/FSLPowerProfleApp/Android.mk b/FSLPowerProfleApp/Android.mk
new file mode 100644
index 0000000..622012a
--- /dev/null
+++ b/FSLPowerProfleApp/Android.mk
@@ -0,0 +1,19 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-java-files-under, src)
+
+LOCAL_JAVA_LIBRARIES := services
+
+#LOCAL_STATIC_JAVA_LIBRARIES := android-common-carousel
+
+LOCAL_PACKAGE_NAME := FSLProfileApp
+LOCAL_CERTIFICATE := platform
+
+#LOCAL_PROGUARD_FLAG_FILES := proguard.cfg
+
+include $(BUILD_PACKAGE)
+
+include $(call all-makefiles-under,$(LOCAL_PATH))
diff --git a/FSLPowerProfleApp/AndroidManifest.xml b/FSLPowerProfleApp/AndroidManifest.xml
new file mode 100644
index 0000000..e8a8ba8
--- /dev/null
+++ b/FSLPowerProfleApp/AndroidManifest.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="fsl.power.manager"
+    >
+
+
+    <application
+	android:icon="@drawable/ic_launcher"
+	android:label="@string/app_name" >
+	<activity
+	    android:name=".powermanager"
+	    android:label="@string/Profile" >
+	    <intent-filter>
+		<action android:name="android.intent.action.MAIN" />
+				<category android:name="android.intent.category.LAUNCHER" />
+	    </intent-filter>
+
+	</activity>
+	<receiver android:name=".PowerReceiver" >
+	    <intent-filter >
+		<action android:name="fsl.power.service.action.START_SERVICE" />
+	    </intent-filter>
+	</receiver>
+    </application>
+
+</manifest>
diff --git a/FSLPowerProfleApp/proguard.cfg b/FSLPowerProfleApp/proguard.cfg
new file mode 100644
index 0000000..b1cdf17
--- /dev/null
+++ b/FSLPowerProfleApp/proguard.cfg
@@ -0,0 +1,40 @@
+-optimizationpasses 5
+-dontusemixedcaseclassnames
+-dontskipnonpubliclibraryclasses
+-dontpreverify
+-verbose
+-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
+
+-keep public class * extends android.app.Activity
+-keep public class * extends android.app.Application
+-keep public class * extends android.app.Service
+-keep public class * extends android.content.BroadcastReceiver
+-keep public class * extends android.content.ContentProvider
+-keep public class * extends android.app.backup.BackupAgentHelper
+-keep public class * extends android.preference.Preference
+-keep public class com.android.vending.licensing.ILicensingService
+
+-keepclasseswithmembernames class * {
+    native <methods>;
+}
+
+-keepclasseswithmembers class * {
+    public <init>(android.content.Context, android.util.AttributeSet);
+}
+
+-keepclasseswithmembers class * {
+    public <init>(android.content.Context, android.util.AttributeSet, int);
+}
+
+-keepclassmembers class * extends android.app.Activity {
+   public void *(android.view.View);
+}
+
+-keepclassmembers enum * {
+    public static **[] values();
+    public static ** valueOf(java.lang.String);
+}
+
+-keep class * implements android.os.Parcelable {
+  public static final android.os.Parcelable$Creator *;
+}
diff --git a/FSLPowerProfleApp/res/drawable-hdpi/ic_launcher.png b/FSLPowerProfleApp/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 0000000000000000000000000000000000000000..8074c4c571b8cd19e27f4ee5545df367420686d7
GIT binary patch
literal 4147
zcmV-35X|q1P)<h;3K|Lk000e1NJLTq002k;002k`1^@s6RqeA!00004b3#c}2nYxW
zd<bNS00009a7bBm000W`000W`0Ya=am;e9(9CSrkbW?9;ba!ELWdK2BZ(?O2Mrm?o
zcW-iQb09-gGzPNMpa1|5tw}^dRCt{2oOy6v)qTf5=iKFO(zBjyS+Xo+%Qj{)!7Q$W
z6KBFe9H5z!Cet*NNr0A2LK&8HhBBEZoyic|G);$p5}K_o1!mG|N`@p9l1vB;J7GzU
z0UH||Z?dh;mfn-zdhc2K$9>OwvMs$Q8_8nISM!^>PxsujeDCl4&hPxrxkp%Qc^^|l
zp6LqAcf3zf1H4aA1Gv-O6ha)ktct9Y+VA@N^9i;p0H%6v>ZJZYQ`zEa396z-gi{r_
zDz)D=vgRv62GCVeRjK{15j7<m5mZl(2gHEX4d3YbCqHS|8EZwgD)Wt;2qJ2{6v75Y
zvGsww4t^CV0F}B_(~=~n8|H-&l88hPhy!ic-_?C@ysdn7po;H83+4{Ko1~nL|K`DO
z9KIFE0%ag1(kL?(4~+<_k&^&YU;FXK@3ppjpEO#}zYf(17Np}aJ`(=&TVH<hHX=<b
z5s{?r6ht)YVl@ql0gJj;%S|0!N#3izr4TSYFun;`M5H+(6ZYt&XojGg?MdgxMnbQ(
zfHCh)hNKka#wsC@21bc&QApGuPFaI$20D(BQsC5V9{>V@v6|2nafFX6W7z2j1_T0a
zLyT3pGTubf1lB5)32>bl0*BflrA!$|_(<V4RW3$KB75pFc@&<Kfa&v`Fw!w=tK8Iy
zHVRiH=xw{4ws<c}SHKc=Lkreetg(}xDTiaMY5!xcI{O}^bumUCOUp@~3ss5EmUUcv
z?hlDO8H^6mIwbC7xc1y1)0w)EKovQ@ZYL8PjkvLDn_L>WD2)iJIfV}37=<tz>ZKAC
zSe3boYtQ=;o0i>)RtBvsI#iT{0!oF1VFeW`jDjF2Q4aE?{pGCAd>o8Kg#neIh*AMY
zLl{;F!vLiem7s*x0<9FKAd6LoPz3~G32P+F+cuGOJ5gcC@pU_?C<K#zxM?|P#!;*h
z<yaeeoHc_VQSY*5(bXKxzCv5Fm-fVJhKt+z;Idmt`HNZ7dLb2^=kZ;C$5{Cwn^xRG
zZ~I3Hb%|X0Ab~D%ara-4jxS|#%LP2Y?;eW55jL;+ds_T1et+Qmyx#v41QKfv%7pZ!
zH}KI_U!xctA=G7zRgr=;7(HxFvnR-Ds^N`rOa*J?)FjYl+7i8Vq}KApuDd8yhFQ7r
z3QEBkovrIw+xcf~8~8bAWiDey=A&d1tN5d3Ut-sh$0-EENIaAY=t!N%MN2<V-{|kj
zmHW7A&3CA%0<RDJl#i{xoA%_{#M}($cm63cw~Y_4xPwra**EeWu8d=hIiYUT$?@$v
z9fImJ5!Qk=6B4Ql%hDet?zeE^lFyO!+gaYW2}i`RR&#i43orNm8^uZvtiyuXa<K6H
z-tY3(;G+m3!AdNGf!v!svHLE9uuNC_0^aC<m>2fmix7g2<OKw(NJSO!Wh<G)O12OD
zk{9;hOR+MF#G6#FX=OtB>)SUaQO$NS07~H)#fn!Q<}KQWtX}wW`g2>cMld+`7Rxgq
zChaey66SG560JhO66zA!;sK1cWa2AG$9k~VQY??6bOmJsw9@3uL*z;WWa7(Nm{^TA
zilc?y#N9O3LcTo2c)6d}SQl-v-pE4^#wb=s(RxaE28f3FQW(yp$ulG9{KcQ7r>7mQ
zE!HYxUYex~*7IinL+l*>HR*UaD;HkQhkL(5I@UwN%Wz504M^d!ylo>ANvKPF_TvA<
zkugG5;F6x}$s~J8cnev->_(Ic7%lGQgUi3n#XVo36lUpcS<B*<^O3@1)uNA43bS0?
za~<a`{v?j@Ske9wVqO|oCZ?^w;|LChBf!5j-{=N?H4Q8SE&@KYZ+HK&Jq|$-TC1x+
zjI}`!SgWno%32kg6Ve1hV0CD17-|~^%35o!4y{$8K9;8rtqlWhby$7YT5EMR?_>9s
z)ympRr7}@|6WF)Ae;D{owN1;aZS<z%U`85L3`Wtq;{;U>R50al9h~?-WhbtKK%bDd
zhML131oi1Bu1&Qb$Cp199LJ#;j5d|FhW8_i4KO1OI>}J^p2DfreMSVGY9aFlr&90t
zyI2FvxQiKMFviSQeP$Ixh#70qj5O%I+O_I2t2XHWqmh2!1~tHpN3k<ugQ5k@C@Ok7
z+FQ2}+B9a|#m)q5Ej;-ypgId^I<pxY>A4n=1iHj?`@c<~3q<khQ_D+AiSPS(o;PhA
z`n^Sv1#1+erM+mQs!_q26XUurrBaD_Jl?i>^X6_Q$AqTDjBU`|!y<&lkqL|m5tG(b
z8a!z&j^m(|;?SW(l*?tZ*{m2H9d&3jqBtXh>O-5e4Qp-W*a5=2NL&Oi62BUM)>zE3
zbSHb>aU3d@3cGggA`C-PsT9^)oy}%dHCaO~nwOrm5E54=aD<PxWdc(q&_xc9ze;;z
zHLgsOaNCGEX{@j)Q^Ht%Tpp3F>g(&HR4S23Oa#-a^=}w%g?ZP-1iq8PSjE8jYaGZu
z$I<dGMoPOWg+~}HypAJW1P(3!5;{{KV0qg|Sem{J-)X5D@d@oNm&=TgkK?+NnkmGD
z-_Q{A#FMr-B8Dqt^yOY;>)?YN8he?F9>)<bj*Q_57qEn;3|Nj9cQTmY%C_N$=t`~Q
z;w4{XMcd^l6D<P?Ay7&Y1OdM9A8)vuc8KPXAd4&GNZ}FcLfta4#gi!lo#*+!e`fp8
z&(OAv=d=)a+Um*{SaelE1QL&!lK>2d$G6a*zm0XB*Rf&gZAjq(8l@CUDSY1tB#!i>
zW$VfG%#SYSiZ}<yUM62T%y}K3#sZ-(5_4L}RSxpRzOQpA_YyHTjW5$2?;2XGa7B!d
ztoRyIcszIDAF1eZgm9|eQuBwy|4Kd>;)>pHA`qlfDTEYQEwN6>NNEp+uxuqx({Fgr
zjI@!4xRc?vk^9+~eU|mzH__dCDI=xb{Cd}4bELS9xRaS!*FXMwtMR-RR%SLMh0Cjl
zencr8#Su<4(%}$yGVB<Bgt*hjhnC%m<GA#mwVG#MdW;e0Y1~wZEwtgvc)kC3T3hfY
zSMoH5`B0b0#8+|6>U-HX{18v=yPH*+%^Vtknc>2A;%-~DrYFx^3XfuVgvZ{#1tA==
zm3>IzAM2{3Iv_d1XG{P6^tN3|PkJMnjs&CWN7%7_CmjoVakUhsa&dMv==2~^ri?&x
zVdv*rnfVyM+I1^Kg*S=23mR@+0T9BWFZUu~@toA8d)fw6be=`Yb6DSX6D?jB%2YT~
z*aHjtIOozfMhA!Jd*?u5_n!SnX>vX`=Ti-1HA<HWRGx~;;frK-Ys%y;GE<2slXx;!
zx1GgM4s$rf_|Ve7;o7tR9cwMW*zuR_9{CMPZ!v@(j)WyE5}b8zA|%>4RiE>eI3vTn
zz+>Ccf0HX6Ans-ebOB>RJST-Cyr#4XAk+mAlJgdQnoE{^iIN)OcYFSpgJUmXtl@tT
z-^ZuUeSj5hSFrQwqX>~EtZ*{>Gi8Bu9_|o06oNtaXP?E936!a@DsvS*tsB@fa6kEA
z5GkjwmH?EgpiG&itsB_Tb1NxtF<S=iW9N}aFjnEobhIC__!e&t|CIIJH?ueUG}@}#
z*5IbJ2TmcPSR2JoRU8pxF#iT)<-^sjbdq(QH?VQp^>nvxh_s@9KYX1Sttf?AlI~)z
zT=6Y7ulx=}<8Scr_UqU-_z)5gPo%050PsbM*ZLno;_-ow&k?FZJtYmb2hPA$LkP)8
z=^d0Q6PImh6Y|QT?{grxj)S=uBKvY2EQUbm@ns9^yKiP~$DcD)c$5Em`zDSScH%iH
zVov&m=cMo`1tYwA=!a}vb_ef_{)Q2?FUqn>BR$6phXQRv^1%=YfyE-F$AR4Q?9D!f
zCzB^^#td~4u&l~l#rp2QLfe3+_ub9@+|x+m;=2(sQ`s%gO|j$XBb>A7Q(Uy<Ms~mR
z)sr@Bsv6HJK@x#68l_8!W4+tria4%_*Y>dipiMw%igcweV#Cr~SP);q>w`bxts_4}
znKHg?X==JDkQl3Y>Ckt%`s{n?Nq-1<xam62X*|eake2F>Fw5~%Mq$CAsi-`yu_bKm
zxs#QdE7&vgJD%M84f4SNzSDv)S|V?|$!d5a#lhT5>>YWE4NGqa9-fbmV$=<!@JM<c
zC&X_omO$rmWt??g*K=X#7Z@$=;a9tEXDI(Vu9G}wXJ-C-A`g4(;Dem+-U&z%S^l~N
zQ((^hAY(O|#LDVE#%LB51-uk1+Ae2(_f1IQ@xp<7*qeP4fxvebRLei*VsS*AT)B@e
zWA_nla&2xtIp+k0rc6h2Eh(>)@k&32kdEYetna>=j@0>V8+wRsL;po!3ivVwh<9tn
z2S<1u9DAAQ>x1Sn=fk`)At|quvleV($B|#Kap_lB-F^*yV=wZ{9baUu(uXfokr95^
zA*!*W=5a>$2Ps`<ZO3O>-F^+qRQT<luhKvM2V5DC;>^{*cN>vipT*4!r#p%{(#I7s
z0NN94*q?ib$KJjfDI_sjHNdmEVp5wB&j54O#VoFqBwy)gfA$%)4d_X4q${<K?$%4`
zAKx-J)i?#riIMhXoFj#uJh}JljFtNkLb7$>L9Xom2R3xy&ZBSNgt4a1d7K^CDWa9r
zVb-_52m}Vp)`9;ZSKd#|U4ZYj5}Gp49{4utST|=c`~(#>KHF6}CCov<Oc3fKBc;8#
zGIi`Nx+1|?<uF?Y9^~S#8%cQ`XcHd0KbtaZ1f3cTu8gxFwmkaSt`43|v19n>1iHYw
zt{bWo)A@yF2$~c(nR$rSAaFQ$(Wh{vkG1AlutDMw=mM`C`T=X&|Ad9fb5Od}ROt1z
z<iuFelzP>OpczHqrb4Jo^rSCiW#&o(m7jFamnrsTpQb;*h4o8r#$aZ}2RaT-x2u^^
z%u@YyIv$U^u~@9(XGbSwU@fk6SikH>j+D1jQrYTKGJpW%vUT{!d}7THI5&Sa?~MKy
zS0-mvMl+BOcroEJ@hN!2H_?coTEJ5Q<;Nd?yx;eIj4{$$E2?YUO|NtNPJ-PdDf;s}
zab;}Mz0kbOI}5*w@3gROcnl#5)wQnEhDBfn!Xhy`u>C}*E~vWpO^HS)FC>8^umI=+
z&H;LW6w#;EF`}vQd_9Muru`KnQVPI9U?(sD<bWa&SZmeEGH6DFY6WD0w}C;Rh4&^w
zc_LD>)&Dg-0j3#(!fNKVZ_GoYH{la~d*1Yh$TI-TL>mI4vpNb@sU2=IZ8vL%AXUx0
zz{K0|nK(yizLHaeW#ZhRfQXoK^}1$<rbM${EMT&_)(%*j&)QQ%O^fOeSPGdq*yOYb
xs*zGFL~-IVT`+%1s&@qImmziC^|Zdw{{iC%_e>=$#1{Yn002ovPDHLkV1n#w+^+xt

literal 0
HcmV?d00001

diff --git a/FSLPowerProfleApp/res/drawable-ldpi/ic_launcher.png b/FSLPowerProfleApp/res/drawable-ldpi/ic_launcher.png
new file mode 100644
index 0000000000000000000000000000000000000000..1095584ec21f71cd0afc9e0993aa2209671b590c
GIT binary patch
literal 1723
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
Rn%e*X002ovPDHLkV1g`*Fem^3

literal 0
HcmV?d00001

diff --git a/FSLPowerProfleApp/res/drawable-mdpi/ic_launcher.png b/FSLPowerProfleApp/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000000000000000000000000000000000000..a07c69fa5a0f4da5d5efe96eea12a543154dbab6
GIT binary patch
literal 2574
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

literal 0
HcmV?d00001

diff --git a/FSLPowerProfleApp/res/layout/main.xml b/FSLPowerProfleApp/res/layout/main.xml
new file mode 100644
index 0000000..d3529bc
--- /dev/null
+++ b/FSLPowerProfleApp/res/layout/main.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+
+    <TextView
+	android:layout_width="fill_parent"
+	android:layout_height="wrap_content"
+	android:text="@string/Profile" />
+
+    <ListView
+	android:id="@+id/profile"
+	android:layout_width="match_parent"
+	android:layout_height="wrap_content"
+	android:entries = "@array/profile_name">
+    </ListView>
+
+</LinearLayout>
diff --git a/FSLPowerProfleApp/res/values-zh-rCN/arrays.xml b/FSLPowerProfleApp/res/values-zh-rCN/arrays.xml
new file mode 100644
index 0000000..8f2300f
--- /dev/null
+++ b/FSLPowerProfleApp/res/values-zh-rCN/arrays.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+ <string-array name="profile_name">
+        <item>效能模式</item>
+        <item>省电模式</item>
+        <item>平衡模式</item>
+    </string-array>
+
+</resources>
\ No newline at end of file
diff --git a/FSLPowerProfleApp/res/values-zh-rCN/strings.xml b/FSLPowerProfleApp/res/values-zh-rCN/strings.xml
new file mode 100644
index 0000000..9d5a3c3
--- /dev/null
+++ b/FSLPowerProfleApp/res/values-zh-rCN/strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="Profile">系统性能设置</string>
+    <string name="app_name">FSL系统性能设置</string>
+    <string name="toastshow">select power mode</string>
+
+</resources>
\ No newline at end of file
diff --git a/FSLPowerProfleApp/res/values/arrays.xml b/FSLPowerProfleApp/res/values/arrays.xml
new file mode 100644
index 0000000..4b99414
--- /dev/null
+++ b/FSLPowerProfleApp/res/values/arrays.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+ <string-array name="profile_name">
+        <item>Performance Mode</item>
+        <item>Power Saving Mode</item>
+        <item>Normal Mode</item>
+    </string-array>
+
+</resources>
\ No newline at end of file
diff --git a/FSLPowerProfleApp/res/values/strings.xml b/FSLPowerProfleApp/res/values/strings.xml
new file mode 100644
index 0000000..0437346
--- /dev/null
+++ b/FSLPowerProfleApp/res/values/strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="Profile">System Profile Setting</string>
+    <string name="app_name">FSL System Profile</string>
+    <string name="toastshow">select power mode</string>
+
+</resources>
\ No newline at end of file
diff --git a/FSLPowerProfleApp/src/fsl/power/manager/PowerReceiver.java b/FSLPowerProfleApp/src/fsl/power/manager/PowerReceiver.java
new file mode 100644
index 0000000..3dce86b
--- /dev/null
+++ b/FSLPowerProfleApp/src/fsl/power/manager/PowerReceiver.java
@@ -0,0 +1,45 @@
+/*
+/* Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package fsl.power.manager;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+
+public class PowerReceiver extends BroadcastReceiver{
+
+    private static final String TAG = "PowerReceiver";
+
+	@Override
+	public void onReceive(Context context, Intent intent) {
+		// TODO Auto-generated method stub
+		String action = intent.getAction();
+		int id = intent.getIntExtra("POWER_OPTION", 0);
+		Log.i(TAG, "change to option" + id + action);
+		if (powermanager.ACTION_POWER_OPTION.equals(action)){
+			powermanager.updatePowerOptions(id);
+		}
+		if ("fsl.power.service.action.START_SETTING".equals(action)){
+			Intent start_ui = new Intent(context,powermanager.class);
+			 context.startActivity(start_ui);
+		}
+
+	}
+
+}
diff --git a/FSLPowerProfleApp/src/fsl/power/manager/PowerServiceDB.java b/FSLPowerProfleApp/src/fsl/power/manager/PowerServiceDB.java
new file mode 100644
index 0000000..b08429a
--- /dev/null
+++ b/FSLPowerProfleApp/src/fsl/power/manager/PowerServiceDB.java
@@ -0,0 +1,87 @@
+/*
+/* Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package fsl.power.manager;
+
+import android.net.Uri;
+import android.provider.BaseColumns;
+
+public final class PowerServiceDB {
+
+	public PowerServiceDB() {
+		// TODO Auto-generated constructor stub
+	}
+	public static final String AUTHORITY = "fsl.power.service.PowerServiceDB";
+
+	/*
+	 * Profile table
+	 */
+	public static final class Profiles implements BaseColumns {
+		private Profiles() {}
+		/*
+		 *  The content:// style URL for this table
+		 */
+       public static final Uri CONTENT_URI
+						= Uri.parse("content://" + AUTHORITY + "/profiles");
+
+       public static final Uri CONTENT_URI_ID
+								= Uri.parse("content://" + AUTHORITY + "/profiles/#");
+       /**
+	* The MIME type of {@link #CONTENT_URI} providing a directory of profiles.
+	*/
+       public static final String CONTENT_TYPE
+								= "vnd.android.cursor.dir/vnd.power.service";
+
+       /**
+	* The MIME type of a {@link #CONTENT_URI} sub-directory of a single profile.
+	*/
+       public static final String CONTENT_ITEM_TYPE
+								= "vnd.android.cursor.item/vnd.power.service";
+
+       /**
+	* The default sort order for this table
+	*/
+       public static final String DEFAULT_SORT_ORDER = "name DESC";
+
+       /**
+	* The ID of the profiles
+	This param is not used in this version,and we use the "_ID" instead.
+	* <P>Type: integer</P>
+	*/
+       public static final String ProfileID = "profileID";
+
+       /**
+	* The name of profile
+	* There are 3 prefix profile for users to select:
+		*  Performance Mode
+		*  Power Saving Mode
+		*  WebBrowsering Mode
+	* <P>Type: TEXT</P>
+	*/
+       public static final String ProfileName = "name";
+       public static final String PfofileStatus = "status";
+       public static final String TempHot = "hot";
+       public static final String TempActive = "active";
+       public static final String MaxFreq = "maxfreq";
+       public static final String MinFreq = "minfreq";
+       public static final String CurCPUGov = "governor";
+       public static final String CPUHotPlug = "cpuhotplug";
+       public static final String CPUNM = "cpunm";
+
+	}
+
+}
diff --git a/FSLPowerProfleApp/src/fsl/power/manager/powermanager.java b/FSLPowerProfleApp/src/fsl/power/manager/powermanager.java
new file mode 100644
index 0000000..27203c3
--- /dev/null
+++ b/FSLPowerProfleApp/src/fsl/power/manager/powermanager.java
@@ -0,0 +1,151 @@
+/*
+/* Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+
+package fsl.power.manager;
+
+
+import fsl.power.manager.PowerServiceDB.Profiles;
+import android.app.ListActivity;
+
+import android.content.ContentResolver;
+
+import android.content.Intent;
+import android.database.Cursor;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.ArrayAdapter;
+import android.widget.ListView;
+
+
+public class powermanager extends ListActivity {
+	private static final String TAG = "FSL_POWER";
+
+	public static final String ACTION_POWER_OPTION = "fsl.power.service.action.START_SERVICE";
+
+	private static final String KEY_PROFILE_ACTIVED = "activeid";
+
+	private ContentResolver cr = null;
+	private boolean DEBUG = false;
+
+	//below define should align with profile service, if changed, please also
+	// update them in profile service, otherwise, it may not work.
+    private int PERFORMANCE = 1;
+    private int POWERSAVING =2;
+    private int NORMAL = 3;
+
+    private int mCheckid = NORMAL -1; //normal mode
+
+
+    /** Called when the activity is first created. */
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+	super.onCreate(savedInstanceState);
+
+	ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
+		this, R.array.profile_name, android.R.layout.simple_list_item_single_choice);
+	final ListView listView = getListView();
+	listView.setAdapter(adapter);
+
+	/*
+	 * acquire the sql to get the previous settings
+	 */
+	cr = getContentResolver();
+	InitialPowerOption();
+
+	listView.setItemsCanFocus(false);
+	listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
+
+	listView.setEnabled(true);
+	if(DEBUG) Log.i(TAG,"select mode "+ mCheckid);
+	listView.setSelection(mCheckid);
+	listView.getCheckedItemIds();
+	listView.isItemChecked(mCheckid);
+	listView.setItemChecked(mCheckid, true);
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Bundle savedInstanceState) {
+	super.onRestoreInstanceState(savedInstanceState);
+	mCheckid = savedInstanceState.getInt(KEY_PROFILE_ACTIVED);
+	Log.i(TAG, "onRestoreInstanceState() mCheckid: " + mCheckid);
+	final ListView list = getListView();
+	list.setSelection(mCheckid);
+
+
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+	super.onSaveInstanceState(outState);
+	outState.putInt(KEY_PROFILE_ACTIVED, mCheckid);
+    }
+
+
+    protected void onListItemClick(ListView l, View v, int position, long id) {
+
+	int check_pos = l.getCheckedItemPosition();
+	mCheckid = check_pos;
+	int profileid = NORMAL;
+	switch (mCheckid){
+		case 0:
+			profileid = PERFORMANCE;
+			break;
+		case 1:
+			profileid = POWERSAVING;
+			break;
+		default:
+			profileid = NORMAL;
+	}
+
+	l.setEnabled(true);
+	l.setSelection(mCheckid);
+
+	Intent startservice = new Intent();
+	startservice.putExtra("profile", profileid);
+	startservice.setAction(ACTION_POWER_OPTION);
+	sendBroadcast(startservice);
+
+	if(DEBUG) Log.i(TAG,"position:  "+position+"   id:  "+id+"  check_pos: " + check_pos);
+
+    }
+
+    /*
+     * acquire the sql to get the previous settings
+     */
+    private void  InitialPowerOption(){
+	Cursor cur;
+	cur = cr.query(Profiles.CONTENT_URI, null, Profiles.PfofileStatus + "="+"1", null, null);
+	if (cur !=null){
+		if (cur.getCount() > 0) {
+			cur.moveToFirst();
+			mCheckid = cur.getInt(cur.getColumnIndex(Profiles.ProfileID))-1;
+		}
+	}
+	cur.close();
+	cur = null;
+
+    }
+
+    public static void updatePowerOptions(int id) {
+
+    }
+
+
+
+}
diff --git a/FSLProfileService/Android.mk b/FSLProfileService/Android.mk
new file mode 100644
index 0000000..80ca4a7
--- /dev/null
+++ b/FSLProfileService/Android.mk
@@ -0,0 +1,19 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-java-files-under, src)
+
+LOCAL_JAVA_LIBRARIES := services
+
+#LOCAL_STATIC_JAVA_LIBRARIES := android-common-carousel
+
+LOCAL_PACKAGE_NAME := FSLProfileService
+LOCAL_CERTIFICATE := platform
+
+#LOCAL_PROGUARD_FLAG_FILES := proguard.cfg
+
+include $(BUILD_PACKAGE)
+
+include $(call all-makefiles-under,$(LOCAL_PATH))
diff --git a/FSLProfileService/AndroidManifest.xml b/FSLProfileService/AndroidManifest.xml
new file mode 100644
index 0000000..ee408e3
--- /dev/null
+++ b/FSLProfileService/AndroidManifest.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="fsl.power.service"
+    coreApp="true"
+    android:sharedUserId="android.uid.system"
+    android:process="system">
+    <!--
+    android:versionCode="1"
+    android:versionName="1.0" >
+    <uses-sdk android:minSdkVersion="15" />
+    -->
+
+    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
+
+    <application
+	android:icon="@drawable/ic_launcher"
+	android:label="@string/app_name" >
+	<service
+	    android:name=".FSLPowerOptionService"
+	    android:enabled="true"
+	 />
+
+	<receiver android:name=".PowerServiceReceiver" >
+	    <intent-filter>
+		<action android:name="android.intent.action.BOOT_COMPLETED" />
+		<action android:name="fsl.power.service.action.START_SERVICE" />
+		</intent-filter>
+	</receiver>
+	<!--
+		<activity
+	    android:name=".TestFSLPowerService"
+	    android:label="power service test" >
+	    <intent-filter>
+		<action android:name="android.intent.action.MAIN" />
+		<category android:name="android.intent.category.LAUNCHER" />
+	    </intent-filter>
+	    </activity>
+	 -->
+
+		 <provider
+		     android:name="FSLPpowerProvider"
+	     android:authorities="fsl.power.service.PowerServiceDB"
+	     />
+
+    </application>
+
+</manifest>
diff --git a/FSLProfileService/proguard.cfg b/FSLProfileService/proguard.cfg
new file mode 100644
index 0000000..b1cdf17
--- /dev/null
+++ b/FSLProfileService/proguard.cfg
@@ -0,0 +1,40 @@
+-optimizationpasses 5
+-dontusemixedcaseclassnames
+-dontskipnonpubliclibraryclasses
+-dontpreverify
+-verbose
+-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
+
+-keep public class * extends android.app.Activity
+-keep public class * extends android.app.Application
+-keep public class * extends android.app.Service
+-keep public class * extends android.content.BroadcastReceiver
+-keep public class * extends android.content.ContentProvider
+-keep public class * extends android.app.backup.BackupAgentHelper
+-keep public class * extends android.preference.Preference
+-keep public class com.android.vending.licensing.ILicensingService
+
+-keepclasseswithmembernames class * {
+    native <methods>;
+}
+
+-keepclasseswithmembers class * {
+    public <init>(android.content.Context, android.util.AttributeSet);
+}
+
+-keepclasseswithmembers class * {
+    public <init>(android.content.Context, android.util.AttributeSet, int);
+}
+
+-keepclassmembers class * extends android.app.Activity {
+   public void *(android.view.View);
+}
+
+-keepclassmembers enum * {
+    public static **[] values();
+    public static ** valueOf(java.lang.String);
+}
+
+-keep class * implements android.os.Parcelable {
+  public static final android.os.Parcelable$Creator *;
+}
diff --git a/FSLProfileService/res/drawable-hdpi/ic_launcher.png b/FSLProfileService/res/drawable-hdpi/ic_launcher.png
new file mode 100755
index 0000000000000000000000000000000000000000..8074c4c571b8cd19e27f4ee5545df367420686d7
GIT binary patch
literal 4147
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

literal 0
HcmV?d00001

diff --git a/FSLProfileService/res/drawable-ldpi/ic_launcher.png b/FSLProfileService/res/drawable-ldpi/ic_launcher.png
new file mode 100755
index 0000000000000000000000000000000000000000..1095584ec21f71cd0afc9e0993aa2209671b590c
GIT binary patch
literal 1723
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
Rn%e*X002ovPDHLkV1g`*Fem^3

literal 0
HcmV?d00001

diff --git a/FSLProfileService/res/drawable-mdpi/ic_launcher.png b/FSLProfileService/res/drawable-mdpi/ic_launcher.png
new file mode 100755
index 0000000000000000000000000000000000000000..a07c69fa5a0f4da5d5efe96eea12a543154dbab6
GIT binary patch
literal 2574
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

literal 0
HcmV?d00001

diff --git a/FSLProfileService/res/layout/main.xml b/FSLProfileService/res/layout/main.xml
new file mode 100755
index 0000000..4b143c8
--- /dev/null
+++ b/FSLProfileService/res/layout/main.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+
+    <Button
+        android:id="@+id/start"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/start" />
+
+    <Button
+        android:id="@+id/stop"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/stop" />
+
+</LinearLayout>
diff --git a/FSLProfileService/res/values/strings.xml b/FSLProfileService/res/values/strings.xml
new file mode 100755
index 0000000..4d39061
--- /dev/null
+++ b/FSLProfileService/res/values/strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="app_name">FSL PowerProfile service</string>
+    <string name="start">start</string>
+    <string name="stop">stop</string>
+
+</resources>
diff --git a/FSLProfileService/src/fsl/power/service/FSLPowerOptionService.java b/FSLProfileService/src/fsl/power/service/FSLPowerOptionService.java
new file mode 100755
index 0000000..cee91a0
--- /dev/null
+++ b/FSLProfileService/src/fsl/power/service/FSLPowerOptionService.java
@@ -0,0 +1,662 @@
+/*
+/* Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+
+
+package fsl.power.service;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.sql.Date;
+import java.util.Calendar;
+import java.util.Timer;
+import java.util.TimerTask;
+
+import fsl.power.service.PowerServiceDB.Profiles;
+
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.app.Service;
+import android.content.ComponentName;
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Intent;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.IBinder;
+import android.util.Log;
+import android.widget.Toast;
+
+public class FSLPowerOptionService extends Service{
+
+	private static final String TAG = "FSL_POWER_SERVICE";
+	private static final boolean DEBUG = false;
+
+	private NotificationManager mNM;
+	private int NOTIFICATION = R.string.start;
+
+	private Timer timer;
+
+	// date and time
+	private int mYear;
+
+	private int mMonth;
+
+	private int mDay;
+
+	private int mHour;
+
+	private int mMinute;
+
+   private int scheduletime = 1;
+   // use thermal to adjust the cpufreq
+   private boolean gNothermal = false;
+   static private int gTempKeeper = 50;
+   static private int gMaxcpus = 1;
+   static private long gProfileId = 3;
+   public class cpufreq_table {
+	   static final int F198 = 198*1000;
+	   static final int F400 = 396*1000;
+	   static final int F600 = 672*1000;
+	   static final int F800 = 792*1000;
+	   static final int F1G = 996*1000;
+
+   }
+
+
+   private int PERFORMANCE =1;
+   private int POWERSAVING =2;
+   private int DEFAULT =3;
+
+
+   public void testProvider() {
+	   if(DEBUG) Log.i(TAG,"testProvider");
+	   ContentResolver cr = getContentResolver();
+	   Uri uri = ContentUris.withAppendedId(PowerServiceDB.Profiles.CONTENT_URI, 1);
+	   //Uri uri =
+	   Cursor cur = cr.query(PowerServiceDB.Profiles.CONTENT_URI, null, null, null, null);
+	   if(DEBUG) Log.i(TAG, "query the profiles table, create it");
+
+   }
+
+   @Override
+	public IBinder onBind(Intent intent) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+	public FSLPowerOptionService (){
+		super();
+	}
+
+	@Override
+	public void onCreate() {
+	super.onCreate();
+	mNM = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);
+	if(DEBUG) Log.i(TAG,"service is starting");
+	timer = new Timer(true);
+	//showNotification();
+	//testProvider();
+	ContentResolver cr = getContentResolver();
+	Cursor cur = cr.query(PowerServiceDB.Profiles.CONTENT_URI, null, null, null, null);
+	int i  = cur.getCount();
+	if (i  == 0)
+		initPowerProfile();
+	cur.close();
+	cur = null;
+	gMaxcpus = getCurCPUNm();
+	Log.i(TAG,"boot with core0-"+gMaxcpus);
+	}
+
+	@Override
+	public void onStart(Intent intent, int startId) {
+		if(DEBUG) Log.i(TAG,"service is starting" + "  "+startId);
+
+
+		//controlThermal(50,40);
+		//if(DEBUG) Log.i(TAG,"set temp to 50,40 ");
+		//Toast.makeText(this, "service start", Toast.LENGTH_SHORT).show();
+
+		TimerTask moniteProfile = new TimerTask() {
+			public void run() {
+				getCurrentTime();
+				tempMoniter();
+				if(DEBUG) Log.i(TAG,"scheduletime="+scheduletime);
+				showNotification();
+				FSLPowerOptionService.this.stopSelf();
+			}
+		};
+
+		ContentResolver cr = getContentResolver();
+		Cursor cur = cr.query(Profiles.CONTENT_URI, null, Profiles.PfofileStatus + "="+"1", null, null);
+		long profileid =3;
+		int status = 0;
+
+		if (cur!=null){
+			if (cur.getCount() > 0) {
+				cur.moveToFirst();
+				profileid = cur.getLong(cur.getColumnIndex(Profiles.ProfileID));
+				status = cur.getInt(cur.getColumnIndex(Profiles.PfofileStatus));
+			}
+		}
+		cur.close();
+		cur = null;
+		Log.i(TAG, "start with profile id "+profileid +" status " +status);
+		gProfileId = profileid;
+		if (status!=0 && profileid!=0)
+			activeProfile(cr, profileid);
+		else//active normal mode
+			activeProfile(cr, DEFAULT);
+
+
+		timer.schedule(moniteProfile, new Date(10), 10000);
+
+
+	}
+	 @Override
+	  public void onDestroy() {
+		 mNM.cancel(NOTIFICATION);
+	    //Toast.makeText(this, "service done", Toast.LENGTH_SHORT).show();
+	  }
+
+	    /**
+	     * Show a notification while this service is running.
+	     */
+	    private void showNotification() {
+		// In this sample, we'll use the same text for the ticker and the expanded notification
+		CharSequence text = getText(R.string.start);
+
+		// Set the icon, scrolling text and timestamp
+		Notification notification = new Notification(R.drawable.ic_launcher, text,
+			System.currentTimeMillis());
+
+		Intent intent;
+	    ComponentName toLaunch;
+	    intent = new Intent(Intent.ACTION_VIEW);
+	    toLaunch = new ComponentName("fsl.power.manager",
+			"fsl.power.manager.powermanager");
+	    intent.setComponent(toLaunch);
+
+		// The PendingIntent to launch our activity if the user selects this notification
+		PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
+				intent, 0);
+
+		// Set the info for the views that show in the notification panel.
+		notification.setLatestEventInfo(this, getText(R.string.app_name),
+			       text, contentIntent);
+
+		// Send the notification.
+		mNM.notify(NOTIFICATION, notification);
+	    }
+
+		public void getCurrentTime() {
+			final Calendar c = Calendar.getInstance();
+			mYear = c.get(Calendar.YEAR);
+			mMonth = c.get(Calendar.MONTH);
+			mDay = c.get(Calendar.DAY_OF_MONTH);
+			mHour = c.get(Calendar.HOUR_OF_DAY);
+			mMinute = c.get(Calendar.MINUTE);
+			if(DEBUG) Log.i(TAG, "CurrentItme" + mYear + "-" + mMonth + "-" + mDay + "-"
+					+ mHour + ":" + mMinute);
+
+		}
+
+		static void setCPUFreq(int maxf, int minf){
+			FileOutputStream scaling_max = null;
+			File scaling_max1 = null;
+			if (maxf > 0){
+				scaling_max1 = new File(
+						"/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq");
+
+				try {
+					scaling_max = new FileOutputStream(scaling_max1);;
+				} catch (FileNotFoundException e1) {
+					// TODO Auto-generated catch block
+					e1.printStackTrace();
+				}
+				try {
+
+					String freqs =  String.format("%d",maxf);
+					scaling_max.write(freqs.getBytes());
+					//scaling_max.write(freq);
+					scaling_max.close();
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			}
+			if (minf >= 0 ){
+				scaling_max1 = new File(
+						"/sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq");
+
+				try {
+					scaling_max = new FileOutputStream(scaling_max1);;
+				} catch (FileNotFoundException e1) {
+					// TODO Auto-generated catch block
+					e1.printStackTrace();
+				}
+				try {
+
+					String freqs =  String.format("%d",minf);
+					scaling_max.write(freqs.getBytes());
+					//scaling_max.write(freq);
+					scaling_max.close();
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			}
+
+		}
+
+		static void setCPUGovernor(String gover)
+		{
+			FileOutputStream scaling_max = null;
+			File scaling_max1 = null;
+				scaling_max1 = new File(
+						"/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor");
+
+				try {
+					scaling_max = new FileOutputStream(scaling_max1);;
+				} catch (FileNotFoundException e1) {
+					// TODO Auto-generated catch block
+					e1.printStackTrace();
+				}
+				try {
+					scaling_max.write(gover.getBytes());
+					scaling_max.close();
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+
+
+		}
+		static void offlineCPU(int id, boolean on){
+
+			FileOutputStream cpuhotlug = null;
+			File cpuhotlug1 = new File(
+					"sys/devices/system/cpu/cpu"+id+"/online");
+
+			try {
+				cpuhotlug = new FileOutputStream(cpuhotlug1);
+			} catch (FileNotFoundException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+			try {
+				if (on){
+					String up =  String.format("1");
+					cpuhotlug.write(up.getBytes());
+				} else {
+					String off =  String.format("0");
+					cpuhotlug.write(off.getBytes());
+				}
+
+				cpuhotlug.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+
+		}
+		static void adjustCPUFreq(int curfreq, boolean up){
+			if(DEBUG) Log.i(TAG,"cur_cpufreq  "+ curfreq);
+			if (up)
+				setCPUFreq(cpufreq_table.F1G, cpufreq_table.F400);
+			else  {
+				switch (curfreq*1000){
+
+				case cpufreq_table.F400:
+
+					setCPUFreq(cpufreq_table.F400, cpufreq_table.F400);
+					break;
+				case cpufreq_table.F600:
+
+					setCPUFreq(cpufreq_table.F400, cpufreq_table.F400);
+					break;
+				case cpufreq_table.F800:
+
+					setCPUFreq(cpufreq_table.F600, cpufreq_table.F400);
+					break;
+				case cpufreq_table.F1G:
+
+					setCPUFreq(800*1000, cpufreq_table.F400);
+					break;
+				case cpufreq_table.F198:
+				default:
+						Log.i(TAG,"do nothing");
+
+				}
+			}
+		}
+
+		static int getCurCPUNm(){
+	    //sys/devices/system/cpu/online
+			/* need root permission to change the cpuinfo_cur_freq */
+	    int cpuNm = 0;
+	    try {
+		  BufferedReader reader = new BufferedReader(
+						     new InputStreamReader(
+							   new FileInputStream( "/sys/devices/system/cpu/online" ) ), 1000 );
+		  String load = reader.readLine();
+		  if (load.length()==1)
+			  cpuNm = (int)(Long.parseLong(load));
+		  else{
+			  String cpunum = load.substring(2);
+			  cpuNm = (int)(Long.parseLong(cpunum));
+		  }
+
+		  reader.close();
+
+		 }catch( IOException ex )
+		 {
+			ex.printStackTrace();
+		 }
+	    return cpuNm ;
+
+		}
+
+		static void controlThermal(int hottemp, int activetemp){
+			FileOutputStream thermal_hot = null;
+			File thermal_hot1 = new File(
+					"/sys/class/thermal/thermal_zone0/trip_point_1_temp");
+
+			try {
+				thermal_hot = new FileOutputStream(thermal_hot1);
+			} catch (FileNotFoundException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+			try {
+
+				String hot =  String.format("%d",hottemp);
+				thermal_hot.write(hot.getBytes());
+				thermal_hot.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+			FileOutputStream thermal_active = null;
+			File thermal_active1 = new File(
+					"/sys/class/thermal/thermal_zone0/trip_point_2_temp");
+
+			try {
+				thermal_active = new FileOutputStream(thermal_active1);
+			} catch (FileNotFoundException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+			try {
+				//thermal_active.write(activetemp);
+				String act =  String.format("%d",activetemp);
+				thermal_active.write(act.getBytes());
+				thermal_active.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+
+		}
+
+		private  void tempMoniter() {
+			/* Monitor the system temp to keep it
+			 * at MAX_TEMP
+			 */
+			int cpu_freq = getCPUCurrentFreq();
+			int soc_temp = getCPUTemp();
+			int cpu_nm = getCurCPUNm();
+			int cpu_id =0;
+			if(DEBUG) Log.i(TAG,"cpu frequency= "+cpu_freq+ " profileId ="
+					+ gProfileId+ " soc temp="+soc_temp+ "  CPU nM "+cpu_nm);
+
+			if (gProfileId == PERFORMANCE){
+				if(DEBUG) Log.i(TAG, " tempMoniter cancel operation due to run in performance mode");
+				return;
+			}
+
+			if(gNothermal){
+				if (soc_temp >= gTempKeeper){
+					// lower the cpu freq
+					if(DEBUG) Log.i(TAG,"lowe the cpu freq and cpu nm");
+					adjustCPUFreq(cpu_freq,false);
+					//offline the cpu core
+					if (cpu_nm > 0) {
+						offlineCPU(cpu_nm,false);
+						if(DEBUG) Log.i(TAG,"offline cpu "+ cpu_nm);
+					}
+
+				}else{
+					//increase the cpu freq
+					if (cpu_freq < cpufreq_table.F1G){
+						adjustCPUFreq(cpu_freq,true);
+					}
+					//bring up cpu cores
+					if (cpu_nm < gMaxcpus) {
+						offlineCPU(cpu_nm+1,true);
+						if(DEBUG) Log.i(TAG,"bring up cpu "+ cpu_nm);
+					}
+				}
+			}else {
+
+				/* use thermal to control the cpu freq */
+				if (soc_temp >= gTempKeeper){
+					if (getCPUCurrentFreq() < cpufreq_table.F400)
+						setCPUFreq(0, cpufreq_table.F400);
+					if(DEBUG) Log.i(TAG,"decrease performance ");
+					if (cpu_nm > 0) {
+						offlineCPU(cpu_nm,false);
+						if(DEBUG) Log.i(TAG,"offline cpu "+ cpu_nm);
+					}
+
+				}else{
+					//controlThermal(80,60);
+					if(DEBUG) Log.i(TAG,"increase performance ");
+					if (cpu_nm < gMaxcpus) {
+						offlineCPU(cpu_nm+1,true);
+						if(DEBUG) Log.i(TAG,"bring up cpu "+ cpu_nm);
+					}
+				}
+			}
+
+
+		}
+
+		static int getCPUCurrentFreq(){
+			    //sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq
+			/* need root permission to change the cpuinfo_cur_freq */
+			    int cpuFreq = 0;
+			    try {
+				  BufferedReader reader = new BufferedReader(
+								     new InputStreamReader(
+									   new FileInputStream(
+											   "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq" )
+									   ), 1000 );
+				  String load = reader.readLine();
+				  cpuFreq = (int)(Long.parseLong(load))/1000;
+				  //if(DEBUG) Log.i(TAG, "cpuinfo_cur_freq:"+load+", cpuFreq:"+cpuFreq);
+				  reader.close();
+				 }catch( IOException ex )
+				 {
+					ex.printStackTrace();
+				 }
+			    return cpuFreq;
+		    }
+
+
+		static int getCPUTemp(){
+	    //sys/class/thermal/thermal_zone0/temp
+	  int temp = 0;
+	    try {
+		  BufferedReader reader = new BufferedReader(
+						     new InputStreamReader(
+							   new FileInputStream( "/sys/class/thermal/thermal_zone0/temp" ) ), 1000 );
+		  String load = reader.readLine();
+		  temp = (int)(Long.parseLong(load));
+		  reader.close();
+		 }catch( IOException ex )
+		 {
+			ex.printStackTrace();
+		 }
+	    return temp;
+		}
+
+		public void initPowerProfile(){
+
+			   ContentResolver cr = getContentResolver();
+			   //Uri uri = ContentUris.withAppendedId(PowerServiceDB.Profiles.CONTENT_URI, 1);
+			   //Cursor cur = cr.query(PowerServiceDB.Profiles.CONTENT_URI, null, null, null, null);
+
+			   ContentValues values = new ContentValues();
+			   values.clear();
+			   values.put(Profiles.ProfileName, "Performance Mode");
+			   values.put(Profiles.ProfileID, PERFORMANCE);
+			   values.put(Profiles.TempActive, "60");
+			   values.put(Profiles.TempHot, "80");
+			   values.put(Profiles.MaxFreq, "996");
+			   values.put(Profiles.MinFreq, "996");
+			   values.put(Profiles.CPUNM, "3");
+			   values.put(Profiles.CPUHotPlug, "0");
+			   values.put(Profiles.CurCPUGov, "performance");
+			   values.put(Profiles.PfofileStatus, "0");
+			   cr.insert(Profiles.CONTENT_URI, values);
+
+			   values.clear();
+			   values.put(Profiles.ProfileName, "PowerSaving Mode");
+			   values.put(Profiles.ProfileID, POWERSAVING);
+			   values.put(Profiles.TempActive, "60");
+			   values.put(Profiles.TempHot, "80");
+			   values.put(Profiles.MaxFreq, "792");
+			   values.put(Profiles.MinFreq, "396");
+			   values.put(Profiles.CPUNM, "0");
+			   values.put(Profiles.CPUHotPlug, "1");
+			   values.put(Profiles.CurCPUGov, "ondemand");
+			   values.put(Profiles.PfofileStatus, "0");
+			   cr.insert(Profiles.CONTENT_URI, values);
+
+			   values.clear();
+			   values.put(Profiles.ProfileName, "Normal Mode");
+			   values.put(Profiles.ProfileID, DEFAULT);
+			   values.put(Profiles.TempActive, "50");
+			   values.put(Profiles.TempHot, "70");
+			   values.put(Profiles.MaxFreq, "996");
+			   values.put(Profiles.MinFreq, "396");
+			   values.put(Profiles.CPUNM, "1");
+			   values.put(Profiles.CPUHotPlug, "1");
+			   values.put(Profiles.CurCPUGov, "interactive");
+			   values.put(Profiles.PfofileStatus, "1");
+			   cr.insert(Profiles.CONTENT_URI, values);
+
+		}
+
+		static int activeProfile(ContentResolver cr, long profileid){
+			if(DEBUG) Log.i(TAG,"active proileid " + profileid);
+			long actid = profileid;
+			long oldid = gProfileId;
+			int hottemp = 80;
+			int acttemp	= 60;
+			int maxfreq = 996;
+			int minfreq = 996;
+			String goveron = "performance";
+			int cpunm = 3;
+			int status =0;
+			int hotplug = 1;
+
+			//get the profile prarms from sql
+
+			//ContentResolver cr = getContentResolver();
+			Uri uri = ContentUris.withAppendedId(Profiles.CONTENT_URI,profileid);
+			Cursor cur;
+			cur = cr.query(uri, null, null, null, null);
+			if (cur !=null){
+				if (cur.getCount() > 0) {
+					cur.moveToFirst();
+					actid = cur.getLong(cur.getColumnIndex(Profiles.ProfileID));
+					hottemp = cur.getInt(cur.getColumnIndex(Profiles.TempHot));
+					acttemp = cur.getInt(cur.getColumnIndex(Profiles.TempActive));
+					cpunm = cur.getInt(cur.getColumnIndex(Profiles.CPUNM));
+					hotplug = cur.getInt(cur.getColumnIndex(Profiles.CPUHotPlug));
+					maxfreq = cur.getInt(cur.getColumnIndex(Profiles.MaxFreq));
+					minfreq = cur.getInt(cur.getColumnIndex(Profiles.MinFreq));
+					goveron = cur.getString(cur.getColumnIndex(Profiles.CurCPUGov));
+
+				}
+			}
+			cur.close();
+			cur = null;
+			cur = cr.query(Profiles.CONTENT_URI, null, Profiles.PfofileStatus + "="+"1", null, null);
+			if (cur !=null){
+				if (cur.getCount() > 0) {
+					cur.moveToFirst();
+					oldid = cur.getInt(cur.getColumnIndex(Profiles.ProfileID));
+				}
+			}
+			cur.close();
+			cur = null;
+			ContentValues valuestmp = new ContentValues();
+		valuestmp.clear();
+		valuestmp.put(Profiles.PfofileStatus,0);
+		cr.update(Profiles.CONTENT_URI, valuestmp, Profiles.ProfileID+"="+oldid, null);
+		if(DEBUG) Log.i(TAG, "clean profile " + oldid +" status");
+		valuestmp.clear();
+		valuestmp.put(Profiles.PfofileStatus,1);
+		cr.update(Profiles.CONTENT_URI, valuestmp, Profiles.ProfileID+"="+actid, null);
+		if(DEBUG) Log.i(TAG, "update profile " + oldid +" status");
+		valuestmp.clear();
+		valuestmp = null;
+		if(DEBUG) Log.i(TAG,"active profile "+ actid+ "/ " + hottemp+ " / " +acttemp+ " / " +cpunm + " / " +hotplug +" / " +maxfreq+" / "  +minfreq +" / " +goveron);
+
+		controlThermal(hottemp,acttemp);
+		setCPUFreq(maxfreq*1000, minfreq*1000);
+		setcpuNM(cpunm);
+		setCPUGovernor(goveron);
+		//setGPUFPS(gpufps);
+		gProfileId = actid;
+		gTempKeeper = hottemp;
+		gMaxcpus = cpunm;
+
+
+			return 0;
+
+		}
+
+		static int setcpuNM(int cpunm){
+			int curnm = getCurCPUNm();
+			if (cpunm > curnm) {
+				while (cpunm > curnm){
+					curnm++;
+					offlineCPU(curnm, true);
+				}
+			} else {
+				while (curnm >cpunm){
+					offlineCPU(curnm, false);
+					curnm--;
+
+				}
+			}
+			return getCurCPUNm();
+		}
+
+
+
+}
diff --git a/FSLProfileService/src/fsl/power/service/FSLPpowerProvider.java b/FSLProfileService/src/fsl/power/service/FSLPpowerProvider.java
new file mode 100755
index 0000000..8146e7b
--- /dev/null
+++ b/FSLProfileService/src/fsl/power/service/FSLPpowerProvider.java
@@ -0,0 +1,355 @@
+/*
+/* Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+
+package fsl.power.service;
+
+import java.util.HashMap;
+
+import fsl.power.service.PowerServiceDB.Profiles;
+
+import android.content.ContentProvider;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.UriMatcher;
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.database.sqlite.SQLiteQueryBuilder;
+import android.net.Uri;
+import android.text.TextUtils;
+import android.util.Log;
+
+/**
+ * @author B33531
+ *
+ */
+public class FSLPpowerProvider extends ContentProvider{
+
+	private static final String TAG = "FSL_Provider";
+	private static final boolean DEBUG = false;
+	private static final String DATABASE_NAME = "profiles.db";
+    private static final int DATABASE_VERSION = 1;
+    /**
+     * Table Name Define
+     */
+    private static final String PROFILE_TABLE_NAME = "profiles";
+
+    /**
+     * ProjectctionMap
+     */
+
+    private static HashMap<String, String> sProfilesProjectionMap;
+    /**
+     * Operation Code
+     */
+    private static final int PROFILES     = 1;
+    private static final int PROFILES_ID  = 2;
+    /**
+     * Define the URI Matcher
+     */
+    private static final UriMatcher sUriMatcher;
+    private DatabaseHelper mOpenHelper;
+
+	 static {
+	 /**
+	  * URI Matcher
+	  */
+		 sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
+		 sUriMatcher.addURI(PowerServiceDB.AUTHORITY, "profiles", PROFILES);
+		 sUriMatcher.addURI(PowerServiceDB.AUTHORITY, "profiles/#", PROFILES_ID);
+
+		 /**
+	  * ProjectMap List
+	  * _ID	Profile_ID	ProfileName	PfofileStatus	TempHot TempActive	CurFreq	CurCPUGov	CPUHotPlug	CPUNM
+	  * 1	1			Performance		1			80		60			996		interactive		true	4
+	  */
+       sProfilesProjectionMap = new HashMap<String, String>();
+       sProfilesProjectionMap.put(Profiles._ID, Profiles._ID);
+       sProfilesProjectionMap.put(Profiles.ProfileID, Profiles.ProfileID);
+       sProfilesProjectionMap.put(Profiles.ProfileName, Profiles.ProfileName);
+       sProfilesProjectionMap.put(Profiles.PfofileStatus, Profiles.PfofileStatus);
+       sProfilesProjectionMap.put(Profiles.TempHot, Profiles.TempHot);
+       sProfilesProjectionMap.put(Profiles.TempActive, Profiles.TempActive);
+       sProfilesProjectionMap.put(Profiles.MaxFreq, Profiles.MaxFreq);
+       sProfilesProjectionMap.put(Profiles.MinFreq, Profiles.MinFreq);
+       sProfilesProjectionMap.put(Profiles.CurCPUGov, Profiles.CurCPUGov);
+       sProfilesProjectionMap.put(Profiles.CPUHotPlug, Profiles.CPUHotPlug);
+       sProfilesProjectionMap.put(Profiles.CPUNM, Profiles.CPUNM);
+	 }
+
+	public FSLPpowerProvider() {
+		// TODO Auto-generated constructor stub
+	}
+
+	static class DatabaseHelper extends SQLiteOpenHelper {
+		 DatabaseHelper(Context context) {
+		    super(context, DATABASE_NAME, null, DATABASE_VERSION);
+		    if(DEBUG) Log.i(TAG,"create profile DB");
+		}
+		 @Override
+		 public void onCreate(SQLiteDatabase db) {
+				/**
+				 * Create the Profile Table
+				 */
+			 db.execSQL("CREATE TABLE " + PROFILE_TABLE_NAME + " ("
+			    + Profiles._ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
+			    + Profiles.ProfileID + " INTEGER  ,"
+			    + Profiles.ProfileName + " TEXT,"
+			    + Profiles.PfofileStatus + " INTEGER,"
+			    + Profiles.TempHot+ " INTEGER,"
+			    + Profiles.TempActive + " INTEGER,"
+			    + Profiles.CurCPUGov + " TEXT,"
+			    + Profiles.MaxFreq + " INTEGGER,"
+			    + Profiles.MinFreq + " INTEGGER,"
+			    + Profiles.CPUHotPlug + " INTERGER,"
+			    + Profiles.CPUNM +" INTEGER"
+			    + ");");
+				if(DEBUG) Log.i(TAG,"ceate the profile table");
+		 }
+
+		 @Override
+		 public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+		    Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
+			    + newVersion + ", which will destroy all old data");
+		    db.execSQL("DROP TABLE IF EXISTS profiles");
+		    onCreate(db);
+		    if(DEBUG)Log.i(TAG,"onupgrade firewall DB");
+	       }
+	 }
+
+
+	@Override
+	public int delete(Uri uri, String where, String[] whereArgs) {
+		 SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+		int count;
+		ContentValues values = new ContentValues();
+		if(DEBUG) Log.i(TAG,"=========>delete()");
+		switch (sUriMatcher.match(uri)) {
+		case PROFILES:
+		    if(where == null){
+			//clear the relations table
+			//db.delete(Relations_TABLE_NAME, where, null);
+			//clear the reject table
+			//db.delete(RejectMethods_TABLE_NAME, where, null);
+
+		    }else{
+			String[]keyOpcode =where.split("=");
+			long profileId =0;
+			if(keyOpcode[0].equals(Profiles._ID)){//SUPPORT FOR Profile._ID = profileId operation
+				profileId = Long.parseLong(keyOpcode[1]);
+				//rmRelationRowsAndRejectsToProfile(profileId);
+
+			}else if (keyOpcode[0].equals(Profiles.ProfileName)) {//SUPPORT FOR Profile.ProfileName = profileName operation
+						Cursor cur = db.query(PROFILE_TABLE_NAME, new String[]{Profiles._ID}, Profiles.ProfileName+"="+keyOpcode[1], null, null, null, null);
+						cur.moveToFirst();
+						profileId = cur.getLong(cur.getColumnIndex(Profiles._ID));
+						cur.close();
+						cur = null;
+						//rmRelationRowsAndRejectsToProfile(profileId);
+					}
+		    }
+
+
+			//clear the profile table
+		    count = db.delete(PROFILE_TABLE_NAME, where, whereArgs);
+
+		    break;
+		case PROFILES_ID:
+		    String profileId = uri.getPathSegments().get(1);
+		    //rmRelationRowsAndRejectsToProfile(Long.parseLong(profileId));
+		    //delete a profile which ID is profileId
+		    count = db.delete(PROFILE_TABLE_NAME, Profiles._ID + "=" + profileId
+			    + (!TextUtils.isEmpty(where) ? " AND (" + where + ')' : ""), whereArgs);
+		    break;
+
+		default:
+		    throw new IllegalArgumentException("Unknown URI " + uri);
+		}
+
+		getContext().getContentResolver().notifyChange(uri, null);
+		return count;
+	}
+
+	@Override
+	public String getType(Uri uri) {
+		Log.i(TAG,"------------>get Type");
+		  switch (sUriMatcher.match(uri)) {
+		case PROFILES:
+			return Profiles.CONTENT_TYPE;
+		case PROFILES_ID:
+			return Profiles.CONTENT_ITEM_TYPE;
+		default:
+		    throw new IllegalArgumentException("Unknown URI " + uri);
+
+		  }
+	}
+
+	@Override
+	public Uri insert(Uri uri, ContentValues value) {
+		// TODO Auto-generated method stub
+		if (DEBUG) Log.i(TAG, "insert a cloum");
+		ContentValues values;
+		if (value != null)
+			values = new ContentValues(value);
+		else
+			values = new ContentValues();
+
+	    String strTable="";
+	    String strColumnName="";
+	    Uri CommonUri=null;
+		switch (sUriMatcher.match(uri)){
+		case PROFILES:
+			strTable=PROFILE_TABLE_NAME;
+		strColumnName=Profiles.ProfileID;
+		CommonUri =PowerServiceDB.Profiles.CONTENT_URI;
+		if (values.containsKey(Profiles.ProfileName)== false)
+			values.put(Profiles.ProfileName, "");
+		if (values.containsKey(Profiles.CPUHotPlug)== false)
+			values.put(Profiles.CPUHotPlug, 0);
+		if (values.containsKey(Profiles.CPUNM)== false)
+			values.put(Profiles.CPUNM, 3);
+		if (values.containsKey(Profiles.CurCPUGov)== false)
+			values.put(Profiles.CurCPUGov, "interactive");
+		if (values.containsKey(Profiles.MaxFreq)== false)
+			values.put(Profiles.MaxFreq, 996);
+		if (values.containsKey(Profiles.MinFreq)== false)
+			values.put(Profiles.MinFreq, 198);
+		if (values.containsKey(Profiles.PfofileStatus)== false)
+			values.put(Profiles.PfofileStatus, "0");
+		if (values.containsKey(Profiles.TempActive)== false)
+			values.put(Profiles.TempActive, "60");
+		if (values.containsKey(Profiles.TempHot)== false)
+			values.put(Profiles.TempHot, 80);
+
+		break;
+		default:
+			throw new IllegalArgumentException("unknow URI "+uri);
+
+
+		}
+		 SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+
+	 long rowId = db.insert(strTable, strColumnName, values);
+
+	 if (rowId > 0) {
+		Uri insertUri = ContentUris.withAppendedId(CommonUri, rowId);
+	     getContext().getContentResolver().notifyChange(insertUri, null);
+	     if (DEBUG) Log.i(TAG, "insert a cloum done");
+	     return insertUri;
+	 }
+	 throw new SQLException("Failed to insert row into " + uri);
+
+	}
+
+	@Override
+	public boolean onCreate() {
+		// TODO Auto-generated method stub
+	mOpenHelper = new DatabaseHelper(getContext());
+	if (mOpenHelper==null) {
+		if (DEBUG) Log.i(TAG,">faild in onCreate");
+		return false;
+	}
+	if (DEBUG) Log.i(TAG,"Create scucess");
+	return true;
+	}
+
+	@Override
+	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
+		   String sortOrder) {
+
+		Log.i("TAG", "query");
+		SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
+		String defaultOrder="";
+		switch (sUriMatcher.match(uri)) {
+	case PROFILES:
+	    qb.setTables(PROFILE_TABLE_NAME);
+	    qb.setProjectionMap(sProfilesProjectionMap);
+	    defaultOrder=PowerServiceDB.Profiles.DEFAULT_SORT_ORDER;
+	    Log.i(TAG,"=========>query profile table");
+	    break;
+	case PROFILES_ID:
+	    qb.setTables(PROFILE_TABLE_NAME);
+	    qb.setProjectionMap(sProfilesProjectionMap);
+	    qb.appendWhere(Profiles._ID + "=" + uri.getPathSegments().get(1));
+	    //qb.appendWhere(Profiles.ProfileID + "=" + uri.getPathSegments().get(1));
+	    defaultOrder=PowerServiceDB.Profiles.DEFAULT_SORT_ORDER;
+	    Log.i(TAG,"=========>query profile table item");
+	    break;
+	default:
+	    throw new IllegalArgumentException("Unknown URI " + uri);
+	}
+		// If no sort order is specified use the default
+	String orderBy;
+	if (TextUtils.isEmpty(sortOrder)) {
+	    orderBy = defaultOrder;
+	} else {
+	    orderBy = sortOrder;
+	}
+	// Get the database and run the query
+	SQLiteDatabase db = mOpenHelper.getReadableDatabase();
+	Cursor c = qb.query(db, projection, selection, selectionArgs, null, null, orderBy);
+
+	// Tell the cursor what uri to watch, so it knows when its source data changes
+	c.setNotificationUri(getContext().getContentResolver(), uri);
+	return c;
+	}
+
+	@Override
+	public int update(Uri uri, ContentValues values, String where, String[] whereArgs) {
+		 SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+		int count;
+		if (DEBUG) Log.i(TAG,"=========>updata()");
+		switch (sUriMatcher.match(uri)) {
+		case PROFILES:
+		    count = db.update(PROFILE_TABLE_NAME, values, where, whereArgs);
+		    break;
+		case PROFILES_ID:
+		    String profileId = uri.getPathSegments().get(1);
+		    int status = 0;
+		    if(values.getAsInteger(Profiles.PfofileStatus)!=null){
+			status = values.getAsInteger(Profiles.PfofileStatus);
+		    }
+		    if(status == 1){
+			//update the other profile of which status =1 and set the status =0
+				ContentValues valuestmp = new ContentValues();
+				valuestmp.clear();
+				valuestmp.put(Profiles.PfofileStatus,0);
+				count = db.update(PROFILE_TABLE_NAME, valuestmp, Profiles.PfofileStatus+"="+"1", whereArgs);
+				valuestmp.clear();
+				valuestmp = null;
+		    }
+
+		    count = db.update(PROFILE_TABLE_NAME, values, Profiles._ID + "=" + profileId
+			    + (!TextUtils.isEmpty(where) ? " AND (" + where + ')' : ""), whereArgs);
+
+		    break;
+		default:
+		    throw new IllegalArgumentException("Unknown URI " + uri);
+		}
+
+		getContext().getContentResolver().notifyChange(uri, null);
+		return count;
+
+	}
+
+
+
+
+}
diff --git a/FSLProfileService/src/fsl/power/service/PowerServiceDB.java b/FSLProfileService/src/fsl/power/service/PowerServiceDB.java
new file mode 100755
index 0000000..3dbc524
--- /dev/null
+++ b/FSLProfileService/src/fsl/power/service/PowerServiceDB.java
@@ -0,0 +1,86 @@
+/*
+/* Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package fsl.power.service;
+
+import android.net.Uri;
+import android.provider.BaseColumns;
+
+public final class PowerServiceDB {
+
+	public PowerServiceDB() {
+		// TODO Auto-generated constructor stub
+	}
+	public static final String AUTHORITY = "fsl.power.service.PowerServiceDB";
+
+	/*
+	 * Profile table
+	 */
+	public static final class Profiles implements BaseColumns {
+		private Profiles() {}
+		/*
+		 *  The content:// style URL for this table
+		 */
+       public static final Uri CONTENT_URI
+						= Uri.parse("content://" + AUTHORITY + "/profiles");
+
+       public static final Uri CONTENT_URI_ID
+								= Uri.parse("content://" + AUTHORITY + "/profiles/#");
+       /**
+	* The MIME type of {@link #CONTENT_URI} providing a directory of profiles.
+	*/
+       public static final String CONTENT_TYPE
+								= "vnd.android.cursor.dir/vnd.power.service";
+
+       /**
+	* The MIME type of a {@link #CONTENT_URI} sub-directory of a single profile.
+	*/
+       public static final String CONTENT_ITEM_TYPE
+								= "vnd.android.cursor.item/vnd.power.service";
+
+       /**
+	* The default sort order for this table
+	*/
+       public static final String DEFAULT_SORT_ORDER = "name DESC";
+
+       /**
+	* The ID of the profiles
+	This param is not used in this version,and we use the "_ID" instead.
+	* <P>Type: integer</P>
+	*/
+       public static final String ProfileID = "profileID";
+
+       /**
+	* The name of profile
+	* There are 3 prefix profile for users to select:
+		*  Performance Mode
+		*  Power Saving Mode
+		*  WebBrowsering Mode
+	* <P>Type: TEXT</P>
+	*/
+       public static final String ProfileName = "name";
+       public static final String PfofileStatus = "status";
+       public static final String TempHot = "hot";
+       public static final String TempActive = "active";
+       public static final String MaxFreq = "maxfreq";
+       public static final String MinFreq = "minfreq";
+       public static final String CurCPUGov = "governor";
+       public static final String CPUHotPlug = "cpuhotplug";
+       public static final String CPUNM = "cpunm";
+
+	}
+
+}
diff --git a/FSLProfileService/src/fsl/power/service/PowerServiceReceiver.java b/FSLProfileService/src/fsl/power/service/PowerServiceReceiver.java
new file mode 100755
index 0000000..332b06c
--- /dev/null
+++ b/FSLProfileService/src/fsl/power/service/PowerServiceReceiver.java
@@ -0,0 +1,53 @@
+/*
+/* Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package fsl.power.service;
+
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+
+
+public class PowerServiceReceiver extends BroadcastReceiver{
+
+	private static final String TAG = "PowerServiceReceiver";
+	@Override
+	public void onReceive(Context context, Intent intent) {
+		// TODO Auto-generated method stub
+		String action = intent.getAction();
+		Intent startservice;
+		startservice = new Intent(context, FSLPowerOptionService.class);
+		int id = intent.getIntExtra("profile", 3);
+		ContentResolver cr = context.getContentResolver();
+		Log.i(TAG, action + "----"+"change to profile" + id);
+		if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)){
+			context.startService(startservice);
+			//FSLPowerOptionService.activeProfile(cr,id);
+		}
+		else if (intent.getAction().equals("fsl.power.service.action.START_SERVICE" )){
+			FSLPowerOptionService.activeProfile(cr,id);
+			context.startService(startservice);
+
+		}
+
+
+
+	}
+
+}
diff --git a/FSLProfileService/src/fsl/power/service/TestFSLPowerService.java b/FSLProfileService/src/fsl/power/service/TestFSLPowerService.java
new file mode 100755
index 0000000..cafb34e
--- /dev/null
+++ b/FSLProfileService/src/fsl/power/service/TestFSLPowerService.java
@@ -0,0 +1,56 @@
+/*
+/* Copyright 2012 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package fsl.power.service;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+
+public class TestFSLPowerService extends Activity{
+
+    private OnClickListener mStartService = new OnClickListener() {
+	public void onClick(View v) {
+		Intent stintent = new Intent();
+		stintent.setClass(TestFSLPowerService.this, FSLPowerOptionService.class);
+		TestFSLPowerService.this.startService(stintent);
+	}
+    };
+
+    private OnClickListener mStopService = new OnClickListener() {
+	public void onClick(View v) {
+		Intent stintent = new Intent();
+		stintent.setClass(TestFSLPowerService.this, FSLPowerOptionService.class);
+		TestFSLPowerService.this.stopService(stintent);
+	}
+    };
+
+
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.main);
+
+		Button start = (Button)findViewById(R.id.start);
+		start.setOnClickListener(mStartService);
+		Button stop = (Button)findViewById(R.id.stop);
+		stop.setOnClickListener(mStopService);
+	    }
+
+}
-- 
1.8.0

