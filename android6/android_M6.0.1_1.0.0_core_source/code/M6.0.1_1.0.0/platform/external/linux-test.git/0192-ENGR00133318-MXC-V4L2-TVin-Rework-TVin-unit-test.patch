From 96ffa99d36070a6a3273d9dcfed6395b86f2e4a8 Mon Sep 17 00:00:00 2001
From: Liu Ying <b17645@freescale.com>
Date: Wed, 10 Nov 2010 19:06:02 +0800
Subject: [PATCH 192/505] ENGR00133318 MXC V4L2 TVin:Rework TVin unit test

Use V4L2 capture and V4L2 output to do TVin preview.
VDI medium motion will be used in V4L2 output to do video
de-interlacing.

Signed-off-by: Liu Ying <b17645@freescale.com>
---
 test/mxc_v4l2_test/mxc_v4l2_tvin.c | 654 ++++++++++++++++++++++++++-----------
 1 file changed, 471 insertions(+), 183 deletions(-)

diff --git a/test/mxc_v4l2_test/mxc_v4l2_tvin.c b/test/mxc_v4l2_test/mxc_v4l2_tvin.c
index 834155e..ca8abc9 100644
--- a/test/mxc_v4l2_test/mxc_v4l2_tvin.c
+++ b/test/mxc_v4l2_test/mxc_v4l2_tvin.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2009 Freescale Semiconductor, Inc. All rights reserved.
+ * Copyright 2007-2010 Freescale Semiconductor, Inc. All rights reserved.
  */
 
 /*
@@ -52,262 +52,550 @@ extern "C"{
 #define TFAIL -1
 #define TPASS 0
 
-char v4l_device[100] = "/dev/video0";
-int fd_v4l = 0;
+char v4l_capture_dev[100] = "/dev/video0";
+char v4l_output_dev[100] = "/dev/video16";
+int fd_capture_v4l = 0;
+int fd_output_v4l = 0;
 int g_cap_mode = 0;
+int g_input = 1;
+int g_fmt = V4L2_PIX_FMT_UYVY;
+int g_rotate = 0;
+int g_output = 3;
+int g_output_num_buffers = 4;
+int g_capture_num_buffers = 3;
+int g_in_width = 0;
+int g_in_height = 0;
+int g_display_width = 0;
+int g_display_height = 0;
+int g_display_top = 0;
+int g_display_left = 0;
+int g_frame_size;
+int g_frame_period = 33333;
 v4l2_std_id g_current_std = V4L2_STD_PAL;
 
-/* PAL active frame size is 720 * 576, output is interlaced mode */
-#define PAL_WIDTH             720
-#define PAL_HEIGHT            288
-/* Display area on LCD */
-#define DISPLAY_WIDTH         720
-#define DISPLAY_HEIGHT        464
-#define DISPLAY_TOP           12
-#define DISPLAY_LEFT          40
+struct testbuffer
+{
+        unsigned char *start;
+        size_t offset;
+        unsigned int length;
+};
 
-int
-mxc_v4l_tvin_test(void)
+struct testbuffer output_buffers[4];
+struct testbuffer capture_buffers[3];
+
+int start_capturing(void)
 {
-        int overlay = 1;
-	v4l2_std_id id;
-	struct v4l2_streamparm parm;
+        unsigned int i;
+        struct v4l2_buffer buf;
+        enum v4l2_buf_type type;
 
-        parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-        parm.parm.capture.timeperframe.numerator = 1;
-        parm.parm.capture.timeperframe.denominator = 0;
-        parm.parm.capture.capturemode = 0;
-        if (ioctl(fd_v4l, VIDIOC_OVERLAY, &overlay) < 0)
+        for (i = 0; i < g_capture_num_buffers; i++)
         {
-                printf("VIDIOC_OVERLAY start failed\n");
-		return TFAIL;
+                memset(&buf, 0, sizeof (buf));
+                buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+                buf.index = i;
+                if (ioctl(fd_capture_v4l, VIDIOC_QUERYBUF, &buf) < 0)
+                {
+                        printf("VIDIOC_QUERYBUF error\n");
+                        return TFAIL;
+                }
+
+                capture_buffers[i].length = buf.length;
+                capture_buffers[i].offset = (size_t) buf.m.offset;
+                capture_buffers[i].start = mmap (NULL, capture_buffers[i].length,
+                    PROT_READ | PROT_WRITE, MAP_SHARED,
+                    fd_capture_v4l, capture_buffers[i].offset);
+		memset(capture_buffers[i].start, 0xFF, capture_buffers[i].length);
         }
 
-       /* Detect standard monitor, the default video standard is PAL when the test programe is started */
+        for (i = 0; i < g_capture_num_buffers; i++)
+        {
+                memset(&buf, 0, sizeof (buf));
+                buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+                buf.memory = V4L2_MEMORY_MMAP;
+                buf.index = i;
+		buf.m.offset = capture_buffers[i].offset;
+                if (ioctl (fd_capture_v4l, VIDIOC_QBUF, &buf) < 0) {
+                        printf("VIDIOC_QBUF error\n");
+                        return TFAIL;
+                }
+        }
+
+        type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+        if (ioctl (fd_capture_v4l, VIDIOC_STREAMON, &type) < 0) {
+                printf("VIDIOC_STREAMON error\n");
+                return TFAIL;
+        }
+        return 0;
+}
+
+int prepare_output(void)
+{
+	int i;
+        struct v4l2_buffer output_buf;
 
-       while (1) {
-		if (ioctl(fd_v4l, VIDIOC_G_STD, &id) < 0)
+        for (i = 0; i < g_output_num_buffers; i++)
+        {
+                memset(&output_buf, 0, sizeof(output_buf));
+                output_buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+                output_buf.memory = V4L2_MEMORY_MMAP;
+                output_buf.index = i;
+                if (ioctl(fd_output_v4l, VIDIOC_QUERYBUF, &output_buf) < 0)
                 {
-                    printf("overlay test programe: VIDIOC_G_STD failed\n");
-                    return TFAIL;
+                        printf("VIDIOC_QUERYBUF error\n");
+			return TFAIL;
                 }
-		if (g_current_std == id)
-		{
-                    sleep(1);
-		    continue;
-		}
-		else
-		{
-		    printf("overlay test programe: video standard changed ... \n");
-		    ioctl(fd_v4l, VIDIOC_S_STD, &id);
-		    g_cap_mode = (g_cap_mode + 1) % 2;
-		    parm.parm.capture.capturemode = g_cap_mode;
-		    ioctl(fd_v4l, VIDIOC_S_PARM, &parm);
-		    g_current_std = id;
-                    sleep(1);
-		    continue;
-		 }
-
-       }
-
-    return 0;
+
+                output_buffers[i].length = output_buf.length;
+                output_buffers[i].offset = (size_t) output_buf.m.offset;
+                output_buffers[i].start = mmap (NULL, output_buffers[i].length,
+                                         PROT_READ | PROT_WRITE, MAP_SHARED,
+                                         fd_output_v4l, output_buffers[i].offset);
+                if (output_buffers[i].start == NULL) {
+                        printf("v4l2 tvin test: output mmap failed\n");
+			return TFAIL;
+                }
+        }
+	return 0;
 }
 
-int
-mxc_v4l_tvin_setup(struct v4l2_format *fmt)
+int v4l_capture_setup(void)
 {
-        struct v4l2_streamparm parm;
-        struct v4l2_control ctl;
-        struct v4l2_crop crop;
-	 int display_lcd = 0;
+	struct v4l2_format fmt;
+	struct v4l2_streamparm parm;
+        struct v4l2_requestbuffers req;
+	v4l2_std_id id;
 
-        if (ioctl(fd_v4l, VIDIOC_S_OUTPUT, &display_lcd) < 0)
+	if (ioctl(fd_capture_v4l, VIDIOC_S_INPUT, &g_input) < 0)
+	{
+		printf("VIDIOC_S_INPUT failed\n");
+		close(fd_capture_v4l);
+		return TFAIL;
+	}
+
+	if (ioctl(fd_capture_v4l, VIDIOC_G_STD, &id) < 0)
+	{
+		printf("VIDIOC_G_STD failed\n");
+		close(fd_capture_v4l);
+		return TFAIL;
+	}
+	g_current_std = id;
+
+	if (ioctl(fd_capture_v4l, VIDIOC_S_STD, &id) < 0)
+	{
+		printf("VIDIOC_S_STD failed\n");
+		close(fd_capture_v4l);
+		return TFAIL;
+	}
+
+	parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	parm.parm.capture.timeperframe.numerator = 1;
+	parm.parm.capture.timeperframe.denominator = 0;
+	parm.parm.capture.capturemode = 0;
+	if (ioctl(fd_capture_v4l, VIDIOC_S_PARM, &parm) < 0)
+	{
+		printf("VIDIOC_S_PARM failed\n");
+		close(fd_capture_v4l);
+		return TFAIL;
+	}
+
+	memset(&fmt, 0, sizeof(fmt));
+	fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	fmt.fmt.pix.pixelformat = g_fmt;
+	fmt.fmt.pix.width = 0;
+	fmt.fmt.pix.height = 0;
+	if (ioctl(fd_capture_v4l, VIDIOC_S_FMT, &fmt) < 0)
+	{
+		printf("VIDIOC_S_FMT failed\n");
+		close(fd_capture_v4l);
+		return TFAIL;
+	}
+
+	if (ioctl(fd_capture_v4l, VIDIOC_G_FMT, &fmt) < 0)
+	{
+		printf("VIDIOC_G_FMT failed\n");
+		close(fd_capture_v4l);
+		return TFAIL;
+	}
+
+	g_in_width = fmt.fmt.pix.width;
+	g_in_height = fmt.fmt.pix.height;
+
+        memset(&req, 0, sizeof (req));
+        req.count = g_capture_num_buffers;
+        req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+        req.memory = V4L2_MEMORY_MMAP;
+        if (ioctl(fd_capture_v4l, VIDIOC_REQBUFS, &req) < 0)
         {
-                printf("VIDIOC_S_OUTPUT failed\n");
+                printf("VIDIOC_REQBUFS failed\n");
+		close(fd_capture_v4l);
                 return TFAIL;
         }
 
-        ctl.id = V4L2_CID_PRIVATE_BASE;
-	ctl.value = 0;
-        if (ioctl(fd_v4l, VIDIOC_S_CTRL, &ctl) < 0)
+        return 0;
+}
+
+int v4l_output_setup(void)
+{
+	struct v4l2_control ctrl;
+	struct v4l2_format fmt;
+	struct v4l2_framebuffer fb;
+	struct v4l2_cropcap cropcap;
+	struct v4l2_crop crop;
+	struct v4l2_requestbuffers buf_req;
+
+        if (ioctl(fd_output_v4l, VIDIOC_S_OUTPUT, &g_output) < 0)
         {
-                printf("set control failed\n");
+                printf("set output failed\n");
                 return TFAIL;
         }
 
-	parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-        parm.parm.capture.timeperframe.numerator = 1;
-        parm.parm.capture.timeperframe.denominator = 0;
-        parm.parm.capture.capturemode = 0;
-	if (ioctl(fd_v4l, VIDIOC_S_PARM, &parm) < 0)
+        memset(&cropcap, 0, sizeof(cropcap));
+        cropcap.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+        if (ioctl(fd_output_v4l, VIDIOC_CROPCAP, &cropcap) < 0)
         {
-                printf("VIDIOC_S_PARM failed\n");
+                printf("get crop capability failed\n");
                 return TFAIL;
         }
 
-	parm.parm.capture.timeperframe.numerator = 0;
-        parm.parm.capture.timeperframe.denominator = 0;
-	if (ioctl(fd_v4l, VIDIOC_G_PARM, &parm) < 0)
+        crop.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+        crop.c.top = g_display_top;
+        crop.c.left = g_display_left;
+        crop.c.width = g_display_width;
+        crop.c.height = g_display_height;
+        if (ioctl(fd_output_v4l, VIDIOC_S_CROP, &crop) < 0)
         {
-                printf("get frame rate failed\n");
+                printf("set crop failed\n");
                 return TFAIL;
         }
 
-	g_cap_mode = parm.parm.capture.capturemode;
-        printf("cap_mode is %d\n", parm.parm.capture.capturemode);
-        crop.type = V4L2_BUF_TYPE_VIDEO_OVERLAY;
-        crop.c.left = 0;
-        crop.c.top = 0;
-        crop.c.width = PAL_WIDTH;
-        crop.c.height = PAL_HEIGHT;
-        if (ioctl(fd_v4l, VIDIOC_S_CROP, &crop) < 0)
+        ctrl.id = V4L2_CID_PRIVATE_BASE;
+        ctrl.value = g_rotate;
+        if (ioctl(fd_output_v4l, VIDIOC_S_CTRL, &ctrl) < 0)
         {
-                printf("set cropping failed\n");
-                return TFAIL;
+                printf("set ctrl failed\n");
+		return TFAIL;
+        }
+
+	ctrl.id = V4L2_CID_PRIVATE_BASE + 3;
+        ctrl.value = 0;
+        if (ioctl(fd_output_v4l, VIDIOC_S_CTRL, &ctrl) < 0)
+        {
+                printf("set ctrl failed\n");
+		return TFAIL;
         }
 
-        if (ioctl(fd_v4l, VIDIOC_S_FMT, fmt) < 0)
+	fb.flags = V4L2_FBUF_FLAG_OVERLAY;
+	ioctl(fd_output_v4l, VIDIOC_S_FBUF, &fb);
+
+	memset(&fmt, 0, sizeof(fmt));
+	fmt.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+	fmt.fmt.pix.width= g_in_width;
+	fmt.fmt.pix.height= g_in_height;
+	fmt.fmt.pix.pixelformat = g_fmt;
+	fmt.fmt.pix.bytesperline = g_in_width;
+	fmt.fmt.pix.priv = 0;
+	fmt.fmt.pix.sizeimage = 0;
+	fmt.fmt.pix.field = V4L2_FIELD_INTERLACED_BT;
+        if (ioctl(fd_output_v4l, VIDIOC_S_FMT, &fmt) < 0)
         {
                 printf("set format failed\n");
                 return TFAIL;
         }
 
-        if (ioctl(fd_v4l, VIDIOC_G_FMT, fmt) < 0)
+        if (ioctl(fd_output_v4l, VIDIOC_G_FMT, &fmt) < 0)
         {
                 printf("get format failed\n");
                 return TFAIL;
         }
+        g_frame_size = fmt.fmt.pix.sizeimage;
 
-        return TPASS;
+        memset(&buf_req, 0, sizeof(buf_req));
+        buf_req.count = g_output_num_buffers;
+        buf_req.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+        buf_req.memory = V4L2_MEMORY_MMAP;
+        if (ioctl(fd_output_v4l, VIDIOC_REQBUFS, &buf_req) < 0)
+        {
+                printf("request buffers failed\n");
+                return TFAIL;
+        }
+
+	return 0;
 }
 
 int
-main(int argc, char **argv)
+mxc_v4l_tvin_test(void)
 {
-        struct v4l2_format fmt;
-        struct v4l2_framebuffer fb_v4l2;
-        char fb_device[100] = "/dev/fb0";
-        int fd_fb = 0;
-        struct fb_fix_screeninfo fix;
-        struct fb_var_screeninfo var;
-        struct mxcfb_color_key color_key;
-        struct mxcfb_gbl_alpha alpha;
-        unsigned short * fb0;
-        unsigned char * cur_fb8;
-        unsigned short * cur_fb16;
-        unsigned int * cur_fb32;
-        __u32 screen_size;
-        int h, w;
-	int ret = 0;
-
-        if ((fd_v4l = open(v4l_device, O_RDWR, 0)) < 0) {
-                printf("Unable to open %s\n", v4l_device);
-                return TFAIL;
-        }
-
-        fmt.type = V4L2_BUF_TYPE_VIDEO_OVERLAY;
-        fmt.fmt.win.w.top =  DISPLAY_TOP ;
-        fmt.fmt.win.w.left = DISPLAY_LEFT;
-        fmt.fmt.win.w.width = DISPLAY_WIDTH;
-        fmt.fmt.win.w.height = DISPLAY_HEIGHT;
+        struct v4l2_buffer capture_buf, output_buf;
+	v4l2_std_id id;
+        int i, j;
+	enum v4l2_buf_type type;
+        int total_time;
+        struct timeval tv_start, tv_current;
+
+	if (prepare_output() < 0)
+	{
+		printf("prepare_output failed\n");
+		return TFAIL;
+	}
 
-        if (mxc_v4l_tvin_setup(&fmt) < 0) {
-                printf("Setup tvin failed.\n");
-                return TFAIL;
+	if (start_capturing() < 0)
+	{
+		printf("start_capturing failed\n");
+		return TFAIL;
 	}
 
-        memset(&fb_v4l2, 0, sizeof(fb_v4l2));
+	gettimeofday(&tv_start, 0);
+	printf("start time = %d s, %d us\n", tv_start.tv_sec, tv_start.tv_usec);
 
-        if ((fd_fb = open(fb_device, O_RDWR )) < 0)	{
-                printf("Unable to open frame buffer\n");
-                return TFAIL;
-        }
+	for (i = 0; ; i++) {
+begin:
+		if (ioctl(fd_capture_v4l, VIDIOC_G_STD, &id)) {
+                        printf("VIDIOC_G_STD failed.\n");
+			return TFAIL;
+		}
 
-        if (ioctl(fd_fb, FBIOGET_VSCREENINFO, &var) < 0) {
-                close(fd_fb);
-                return TFAIL;
-        }
-        if (ioctl(fd_fb, FBIOGET_FSCREENINFO, &fix) < 0) {
-                close(fd_fb);
-                return TFAIL;
-        }
+		if (id == g_current_std)
+			goto next;
+		else if (id == V4L2_STD_PAL || id == V4L2_STD_NTSC) {
+			type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+			ioctl(fd_output_v4l, VIDIOC_STREAMOFF, &type);
+
+			type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+			ioctl(fd_capture_v4l, VIDIOC_STREAMOFF, &type);
+
+			for (j = 0; j < g_output_num_buffers; j++)
+			{
+				munmap(output_buffers[j].start, output_buffers[j].length);
+			}
+			for (j = 0; j < g_capture_num_buffers; j++)
+			{
+				munmap(capture_buffers[j].start, capture_buffers[j].length);
+			}
+
+			if (v4l_capture_setup() < 0) {
+				printf("Setup v4l capture failed.\n");
+				return TFAIL;
+			}
+
+			if (v4l_output_setup() < 0) {
+				printf("Setup v4l output failed.\n");
+				return TFAIL;
+			}
+
+			if (prepare_output() < 0)
+			{
+				printf("prepare_output failed\n");
+				return TFAIL;
+			}
+
+			if (start_capturing() < 0)
+			{
+				printf("start_capturing failed\n");
+				return TFAIL;
+			}
+			i = 0;
+			printf("TV standard changed\n");
+		} else {
+			sleep(1);
+			/* Try again */
+			if (ioctl(fd_capture_v4l, VIDIOC_G_STD, &id)) {
+				printf("VIDIOC_G_STD failed.\n");
+				return TFAIL;
+			}
+
+			if (id != V4L2_STD_ALL)
+				goto begin;
+
+			printf("Cannot detect TV standard\n");
+			return 0;
+		}
+next:
+                memset(&capture_buf, 0, sizeof(capture_buf));
+                capture_buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+                capture_buf.memory = V4L2_MEMORY_MMAP;
+                if (ioctl(fd_capture_v4l, VIDIOC_DQBUF, &capture_buf) < 0)	{
+                        printf("VIDIOC_DQBUF failed.\n");
+			return TFAIL;
+                }
 
-        /* Overlay setting */
-        alpha.alpha = 0;
-	alpha.enable = 1;
-	if ( ioctl(fd_fb, MXCFB_SET_GBL_ALPHA, &alpha) < 0) {
-                close(fd_fb);
-                return TFAIL;
-	}
+                memset(&output_buf, 0, sizeof(output_buf));
+                output_buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+                output_buf.memory = V4L2_MEMORY_MMAP;
+                if (i < g_output_num_buffers) {
+                        output_buf.index = i;
+                        if (ioctl(fd_output_v4l, VIDIOC_QUERYBUF, &output_buf) < 0)
+                        {
+                                printf("VIDIOC_QUERYBUF failed\n");
+				return TFAIL;
+                        }
+                } else {
+                        output_buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+                        output_buf.memory = V4L2_MEMORY_MMAP;
+                        if (ioctl(fd_output_v4l, VIDIOC_DQBUF, &output_buf) < 0)
+                        {
+                                printf("VIDIOC_DQBUF failed\n");
+				return TFAIL;
+                        }
+                }
 
-        color_key.color_key = 0x00080808;
-        color_key.enable = 1;
-        if ( ioctl(fd_fb, MXCFB_SET_CLR_KEY, &color_key) < 0) {
-                close(fd_fb);
-                return TFAIL;
-        }
+		memcpy(output_buffers[output_buf.index].start, capture_buffers[capture_buf.index].start, g_frame_size);
 
-        screen_size = var.yres * fix.line_length; // 480*800
+		if (ioctl(fd_capture_v4l, VIDIOC_QBUF, &capture_buf) < 0) {
+			printf("VIDIOC_QBUF failed\n");
+			return TFAIL;
+		}
 
-        /* Map the device to memory*/
-        fb0 = (unsigned short *)mmap(0, screen_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd_fb, 0);
-        if ((int)fb0 == -1)
-        {
-                printf("\nError: failed to map framebuffer device 0 to memory.\n");
-                close(fd_fb);
-                return TFAIL;
-	 }
+		output_buf.timestamp.tv_sec = tv_start.tv_sec;
+		output_buf.timestamp.tv_usec = tv_start.tv_usec + (g_frame_period * i);
+                if (ioctl(fd_output_v4l, VIDIOC_QBUF, &output_buf) < 0)
+                {
+                        printf("VIDIOC_QBUF failed\n");
+			return TFAIL;
+                }
 
-        if (var.bits_per_pixel == 16) {
-                for (h = DISPLAY_TOP; h < (DISPLAY_HEIGHT+ DISPLAY_TOP); h++) {
-                        cur_fb16 = (unsigned short *)((__u32)fb0 + h*fix.line_length);
-                        for (w = DISPLAY_LEFT; w < DISPLAY_WIDTH + DISPLAY_LEFT; w++) {
-                                cur_fb16[w] = 0x0841;
+                if (i == 1) {
+                        type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+                        if (ioctl(fd_output_v4l, VIDIOC_STREAMON, &type) < 0) {
+                                printf("Could not start stream\n");
+				return TFAIL;
                         }
                 }
-        }
-        else if (var.bits_per_pixel == 24) {
-                for (h = DISPLAY_TOP; h < (DISPLAY_HEIGHT + DISPLAY_TOP); h++) {
-                        cur_fb8 = (unsigned char *)((__u32)fb0 + h*fix.line_length);
-                        for (w = DISPLAY_LEFT; w < DISPLAY_WIDTH + DISPLAY_LEFT; w++) {
-                                *cur_fb8++ = 8;
-                                *cur_fb8++ = 8;
-                                *cur_fb8++ = 8;
-                        }
+	}
+
+        gettimeofday(&tv_current, 0);
+        total_time = (tv_current.tv_sec - tv_start.tv_sec) * 1000000L;
+        total_time += tv_current.tv_usec - tv_start.tv_usec;
+        printf("total time for %u frames = %u us =  %lld fps\n", i, total_time, (i * 1000000ULL) / total_time);
+
+	return 0;
+}
+
+int process_cmdline(int argc, char **argv)
+{
+        int i;
+
+        for (i = 1; i < argc; i++) {
+		if (strcmp(argv[i], "-ow") == 0) {
+			g_display_width = atoi(argv[++i]);
+		}
+		else if (strcmp(argv[i], "-oh") == 0) {
+			g_display_height = atoi(argv[++i]);
+		}
+		else if (strcmp(argv[i], "-ot") == 0) {
+			g_display_top = atoi(argv[++i]);
+		}
+		else if (strcmp(argv[i], "-ol") == 0) {
+			g_display_left = atoi(argv[++i]);
+		}
+                else if (strcmp(argv[i], "-r") == 0) {
+                        g_rotate = atoi(argv[++i]);
                 }
-        }
-        else if (var.bits_per_pixel == 32) {
-                for (h = DISPLAY_TOP; h < (DISPLAY_HEIGHT + DISPLAY_TOP); h++) {
-                        cur_fb32 = (unsigned int *)((__u32)fb0 + h*fix.line_length);
-                        for (w = DISPLAY_LEFT; w < DISPLAY_WIDTH + DISPLAY_LEFT; w++) {
-                                cur_fb32[w] = 0x00080808;
+                else if (strcmp(argv[i], "-f") == 0) {
+                        i++;
+                        g_fmt = v4l2_fourcc(argv[i][0], argv[i][1],argv[i][2],argv[i][3]);
+
+			if ((g_fmt != V4L2_PIX_FMT_NV12) &&
+			    (g_fmt != V4L2_PIX_FMT_UYVY) &&
+			    (g_fmt != V4L2_PIX_FMT_YUYV) &&
+                            (g_fmt != V4L2_PIX_FMT_YUV420))
+                        {
+				printf("Default format is used: UYVY\n");
                         }
                 }
+                else if (strcmp(argv[i], "-help") == 0) {
+                        printf("MXC Video4Linux TVin Test\n\n" \
+			       "Syntax: mxc_v4l2_tvin.out\n" \
+			       " -ow <capture display width>\n" \
+			       " -oh <capture display height>\n" \
+			       " -ot <display top>\n" \
+			       " -ol <display left>\n" \
+                               " -r <rotation> -c <capture counter> \n"
+			       " -f <format, only YU12, YUYV, UYVY and NV12 are supported> \n");
+                        return TFAIL;
+               }
         }
-        if (ioctl(fd_v4l, VIDIOC_G_FBUF, &fb_v4l2) < 0) {
-                printf("Get framebuffer failed\n");
+
+        if ((g_display_width == 0) || (g_display_height == 0)) {
+		printf("Zero display width or height\n");
                 return TFAIL;
-        }
-        fb_v4l2.flags = V4L2_FBUF_FLAG_OVERLAY;
+	}
+
+        return 0;
+}
 
-        close(fd_fb);
+int
+main(int argc, char **argv)
+{
+        char fb_device[100] = "/dev/fb0";
+        int fd_fb = 0, i;
+        struct mxcfb_gbl_alpha alpha;
+	enum v4l2_buf_type type;
 
-        if (ioctl(fd_v4l, VIDIOC_S_FBUF, &fb_v4l2) < 0)
+        if (process_cmdline(argc, argv) < 0) {
+                return TFAIL;
+        }
+
+        if ((fd_capture_v4l = open(v4l_capture_dev, O_RDWR, 0)) < 0)
         {
-                printf("set framebuffer failed\n");
+                printf("Unable to open %s\n", v4l_capture_dev);
                 return TFAIL;
         }
 
-        if (ioctl(fd_v4l, VIDIOC_G_FBUF, &fb_v4l2) < 0) {
-                printf("set framebuffer failed\n");
+	if ((fd_output_v4l = open(v4l_output_dev, O_RDWR, 0)) < 0)
+	{
+		printf("Unable to open %s\n", v4l_output_dev);
+		return TFAIL;
+	}
+
+        if (v4l_capture_setup() < 0) {
+                printf("Setup v4l capture failed.\n");
+                return TFAIL;
+	}
+
+        if (v4l_output_setup() < 0) {
+                printf("Setup v4l output failed.\n");
+		close(fd_capture_v4l);
+                return TFAIL;
+	}
+
+        if ((fd_fb = open(fb_device, O_RDWR )) < 0)	{
+		printf("Unable to open frame buffer\n");
+		close(fd_capture_v4l);
+		close(fd_output_v4l);
                 return TFAIL;
         }
 
-        printf("\n frame buffer width %d, height %d, bytesperline %d\n",
-                fb_v4l2.fmt.width, fb_v4l2.fmt.height, fb_v4l2.fmt.bytesperline); // 800 480 1600
-        ret = mxc_v4l_tvin_test();
+        /* Overlay setting */
+        alpha.alpha = 0;
+	alpha.enable = 1;
+	if (ioctl(fd_fb, MXCFB_SET_GBL_ALPHA, &alpha) < 0) {
+		printf("Set global alpha failed\n");
+		close(fd_fb);
+		close(fd_capture_v4l);
+		close(fd_output_v4l);
+		return TFAIL;
+	}
+
+	mxc_v4l_tvin_test();
 
-        close(fd_v4l);
-        return ret;
-}
+        type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+        ioctl(fd_output_v4l, VIDIOC_STREAMOFF, &type);
+
+        type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+        ioctl(fd_capture_v4l, VIDIOC_STREAMOFF, &type);
 
+        for (i = 0; i < g_output_num_buffers; i++)
+        {
+                munmap(output_buffers[i].start, output_buffers[i].length);
+        }
+        for (i = 0; i < g_capture_num_buffers; i++)
+        {
+                munmap(capture_buffers[i].start, capture_buffers[i].length);
+        }
+
+	close(fd_capture_v4l);
+	close(fd_output_v4l);
+	close(fd_fb);
+	return 0;
+}
-- 
1.8.0

