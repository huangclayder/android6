From 8c346b5cf9129f4fc866e335ba1afa8c2c5d6fc2 Mon Sep 17 00:00:00 2001
From: Liu Ying <b17645@freescale.com>
Date: Tue, 20 Jan 2009 18:03:51 +0800
Subject: [PATCH 068/505] ENGR00104959 V4L2 capture unit test enhancement

1) Add support capture mode and NV12(partial interleaved) pixel format for v4l2 capture recoder.
2) Add support capture mode and change the default frame rate to 30fps for v4l2 capture preview.
3) Add support capture mode and frame rate setting for v4l2 still capture.

Signed-off-by: Liu Ying <b17645@freescale.com>
---
 test/mxc_v4l2_test/mxc_v4l2_capture.c | 12 +++++++++---
 test/mxc_v4l2_test/mxc_v4l2_overlay.c | 11 ++++++++---
 test/mxc_v4l2_test/mxc_v4l2_still.c   | 23 +++++++++++++++--------
 3 files changed, 32 insertions(+), 14 deletions(-)

diff --git a/test/mxc_v4l2_test/mxc_v4l2_capture.c b/test/mxc_v4l2_test/mxc_v4l2_capture.c
index fc5ba22..4c99c63 100644
--- a/test/mxc_v4l2_test/mxc_v4l2_capture.c
+++ b/test/mxc_v4l2_test/mxc_v4l2_capture.c
@@ -67,6 +67,7 @@ int g_rotate = 0;
 int g_cap_fmt = V4L2_PIX_FMT_YUV420;
 int g_camera_framerate = 30;
 int g_extra_pixel = 0;
+int g_capture_mode = 0;
 
 int start_capturing(int fd_v4l)
 {
@@ -143,7 +144,7 @@ int v4l_capture_setup(void)
         }
 
         fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-        fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YUV420;
+	fmt.fmt.pix.pixelformat = g_cap_fmt;
         fmt.fmt.pix.width = g_width;
         fmt.fmt.pix.height = g_height;
         if (g_extra_pixel){
@@ -171,7 +172,7 @@ int v4l_capture_setup(void)
         parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         parm.parm.capture.timeperframe.numerator = 1;
         parm.parm.capture.timeperframe.denominator = g_camera_framerate;
-        parm.parm.capture.capturemode = 0;
+	parm.parm.capture.capturemode = g_capture_mode;
 
         if (ioctl(fd_v4l, VIDIOC_S_PARM, &parm) < 0)
         {
@@ -310,6 +311,9 @@ int process_cmdline(int argc, char **argv)
                 else if (strcmp(argv[i], "-e") == 0) {
                         g_extra_pixel = atoi(argv[++i]);
                 }
+		else if (strcmp(argv[i], "-m") == 0) {
+			g_capture_mode = atoi(argv[++i]);
+		}
                 else if (strcmp(argv[i], "-f") == 0) {
                         i++;
                         g_cap_fmt = v4l2_fourcc(argv[i][0], argv[i][1],argv[i][2],argv[i][3]);
@@ -317,6 +321,7 @@ int process_cmdline(int argc, char **argv)
                         if ( (g_cap_fmt != V4L2_PIX_FMT_BGR24) &&
                              (g_cap_fmt != V4L2_PIX_FMT_BGR32) &&
                              (g_cap_fmt != V4L2_PIX_FMT_RGB565) &&
+			     (g_cap_fmt != V4L2_PIX_FMT_NV12) &&
                              (g_cap_fmt != V4L2_PIX_FMT_YUV420) )
                         {
                                 return -1;
@@ -328,7 +333,8 @@ int process_cmdline(int argc, char **argv)
                                " -h <capture height>\n" \
                                " -r <rotation> -c <capture counter> \n"
                                " -e <destination cropping: extra pixels> \n" \
-                               " -f <format> -fr <frame rate, 0-auto> \n");
+			       " -m <capture mode, 0-low resolution, 1-high resolution> \n" \
+			       " -f <format> -fr <frame rate, 30fps by default> \n");
                         return -1;
                }
         }
diff --git a/test/mxc_v4l2_test/mxc_v4l2_overlay.c b/test/mxc_v4l2_test/mxc_v4l2_overlay.c
index f9f3b20..13b1579 100644
--- a/test/mxc_v4l2_test/mxc_v4l2_overlay.c
+++ b/test/mxc_v4l2_test/mxc_v4l2_overlay.c
@@ -82,7 +82,8 @@ int g_timeout = 3600;
 int g_display_lcd = 0;
 int g_overlay = 0;
 int g_camera_color = 0;
-int g_camera_framerate = 0;
+int g_camera_framerate = 30;
+int g_capture_mode = 0;
 
 int
 mxc_v4l_overlay_test(int timeout)
@@ -220,7 +221,7 @@ mxc_v4l_overlay_setup(struct v4l2_format *fmt)
         parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         parm.parm.capture.timeperframe.numerator = 1;
         parm.parm.capture.timeperframe.denominator = g_camera_framerate;
-        parm.parm.capture.capturemode = 0;
+	parm.parm.capture.capturemode = g_capture_mode;
 
         if (ioctl(fd_v4l, VIDIOC_S_PARM, &parm) < 0)
         {
@@ -288,6 +289,9 @@ int process_cmdline(int argc, char **argv)
                 else if (strcmp(argv[i], "-fr") == 0) {
                         g_camera_framerate = atoi(argv[++i]);
                 }
+		else if (strcmp(argv[i], "-m") == 0) {
+			g_capture_mode = atoi(argv[++i]);
+		}
                 else if (strcmp(argv[i], "-help") == 0) {
                         printf("MXC Video4Linux overlay Device Test\n\n" \
                                " -iw <input width>\n -ih <input height>\n" \
@@ -298,7 +302,8 @@ int process_cmdline(int argc, char **argv)
                                " -d <output display> \n"	\
                                " -v <camera color> 1-brightness 2-saturation"
                                " 3-red 4-blue 5-black balance\n"\
-                               " -fr <frame rate 0-Auto> \n"	\
+			       " -m <capture mode> 0-low resolution 1-high resolution\n" \
+			       " -fr <frame rate> 30fps by default\n" \
                                " -fg foreground mode when -fg specified,"
                                " otherwise go to frame buffer\n");
                         return -1;
diff --git a/test/mxc_v4l2_test/mxc_v4l2_still.c b/test/mxc_v4l2_test/mxc_v4l2_still.c
index 7940c2c..bc78b6c 100644
--- a/test/mxc_v4l2_test/mxc_v4l2_still.c
+++ b/test/mxc_v4l2_test/mxc_v4l2_still.c
@@ -46,15 +46,19 @@ static int g_width = 640;
 static int g_height = 480;
 static unsigned long g_pixelformat = V4L2_PIX_FMT_YUYV;
 static int g_bpp = 16;
+static int g_camera_framerate = 30;
+static int g_capture_mode = 0;
 
 void usage(void)
 {
-        printf("Usage: mxc_v4l2_still.out [-w width] [-h height] [-f pixformat] [-c]\n"
+	printf("Usage: mxc_v4l2_still.out [-w width] [-h height] [-f pixformat] [-c] [-m] [-fr]\n"
                 "-w    Image width, 640 by default\n"
                 "-h    Image height, 480 by default\n"
                 "-f    Image pixel format, YUV420, YUV422P, YUYV (default), UYVY or YUV444\n"
                 "-c    Convert to YUV420P. This option is valid for interleaved pixel\n"
                 "      formats only - YUYV, UYVY, YUV444\n"
+		"-m    Capture mode, 0-low resolution(default), 1-high resolution \n"
+		"-fr   Capture frame rate, 30fps by default\n"
                 "The output is saved in ./still.yuv\n"
                 "MX27(eMMA) driver supports YUV420, YUYV and YUV444\n"
                 "MXC(IPU) driver supports UYVY, YUV422P and YUV420\n\n"
@@ -145,11 +149,8 @@ int v4l_capture_setup(void)
 
         parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         parm.parm.capture.timeperframe.numerator = 1;
-        parm.parm.capture.timeperframe.denominator = 5;
-        if (g_width > 640 || g_height > 480)
-                parm.parm.capture.capturemode = V4L2_MODE_HIGHQUALITY;
-        else
-                parm.parm.capture.capturemode = 0;
+	parm.parm.capture.timeperframe.denominator = g_camera_framerate;
+	parm.parm.capture.capturemode = g_capture_mode;
 
         if (ioctl(fd_v4l, VIDIOC_S_PARM, &parm) < 0)
         {
@@ -204,8 +205,8 @@ void v4l_capture_test(int fd_v4l)
 
         parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         parm.parm.capture.timeperframe.numerator = 1;
-        parm.parm.capture.timeperframe.denominator = 30;
-        parm.parm.capture.capturemode = 0;
+        parm.parm.capture.timeperframe.denominator = g_camera_framerate;
+        parm.parm.capture.capturemode = g_capture_mode;
 
         if (ioctl(fd_v4l, VIDIOC_S_PARM, &parm) < 0)
         {
@@ -244,6 +245,12 @@ int main(int argc, char **argv)
                 else if (strcmp(argv[i], "-c") == 0) {
                         g_convert = 1;
                 }
+		else if (strcmp(argv[i], "-m") == 0) {
+			g_capture_mode = atoi(argv[++i]);
+		}
+		else if (strcmp(argv[i], "-fr") == 0) {
+			g_camera_framerate = atoi(argv[++i]);
+		}
                 else if (strcmp(argv[i], "-f") == 0) {
                         i++;
                         if (strcmp(argv[i], "YUV420") == 0) {
-- 
1.8.0

