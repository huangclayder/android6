From 02a5700ecedc26cc669c75e5f46e5346e102e581 Mon Sep 17 00:00:00 2001
From: Zidan Wang <zidan.wang@freescale.com>
Date: Tue, 28 Jul 2015 10:12:56 +0800
Subject: [PATCH 500/505] MLK-11292 mxc: tuner: support set/get rssi, snr
 threshold and seek frequency function

support set/get rssi, snr threshold and seek frequency function.

Signed-off-by: Zidan Wang <zidan.wang@freescale.com>
---
 test/mxc_tuner_test/mxc_tuner_test.c | 118 +++++++++++++++++++++++++++++++++--
 1 file changed, 112 insertions(+), 6 deletions(-)

diff --git a/test/mxc_tuner_test/mxc_tuner_test.c b/test/mxc_tuner_test/mxc_tuner_test.c
index 4c9794b..35407a0 100644
--- a/test/mxc_tuner_test/mxc_tuner_test.c
+++ b/test/mxc_tuner_test/mxc_tuner_test.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013 Freescale Semiconductor, Inc. All rights reserved.
+ * Copyright (C) 2013-2015 Freescale Semiconductor, Inc. All rights reserved.
  */
 
 /*
@@ -30,14 +30,31 @@
 #define TUNER_ON	1
 #define TUNER_GETFREQ	2
 #define TUNER_SETFREQ	3
-#define TUNER_OFF	4
-#define TUNER_EXIT	9
+#define TUNER_SETRSSI_THRESHOLD	4
+#define TUNER_SETSNR_THRESHOLD	5
+#define TUNER_SETMAX_TUNE_ERROR_THRESHOLD 6
+#define TUNER_GETRSSI_SNR_THRESHOLD 7
+#define TUNER_SEEKFREQ  8
+#define TUNER_OFF	9
+#define TUNER_EXIT	10
+
+#define V4L2_CID_USER_SI476X_BASE (V4L2_CID_USER_BASE + 0x1040)
+enum si476x_ctrl_id {
+	V4L2_CID_SI476X_RSSI_THRESHOLD  = (V4L2_CID_USER_SI476X_BASE + 1),
+	V4L2_CID_SI476X_SNR_THRESHOLD   = (V4L2_CID_USER_SI476X_BASE + 2),
+	V4L2_CID_SI476X_MAX_TUNE_ERROR  = (V4L2_CID_USER_SI476X_BASE + 3),
+	V4L2_CID_SI476X_HARMONICS_COUNT = (V4L2_CID_USER_SI476X_BASE + 4),
+	V4L2_CID_SI476X_DIVERSITY_MODE  = (V4L2_CID_USER_SI476X_BASE + 5),
+	V4L2_CID_SI476X_INTERCHIP_LINK  = (V4L2_CID_USER_SI476X_BASE + 6),
+};
 
 int main(int argc, char **argv)
 {
 	int fd, ret, n_selection, freq, core;
 	struct v4l2_frequency vt;
+	struct v4l2_hw_freq_seek seek;
 	struct stat buf;
+	struct v4l2_control vctl;
 	char *dev = NULL;
 
 	/* Check if using si476x drivers, return 0 means true */
@@ -45,14 +62,19 @@ int main(int argc, char **argv)
 	printf("Using si476%c drivers.....\n", core ? '3' : 'x');
 
 	memset(&vt, 0, sizeof(struct v4l2_frequency));
-
+	memset(&seek, 0, sizeof(struct v4l2_hw_freq_seek));
 	do{
 		printf("Welcome to radio menu\n");
 		printf("1.-Turn on the radio\n");
 		printf("2.-Get current frequency\n");
 		printf("3.-Set current frequency\n");
-		printf("4.-Turn off the radio\n");
-		printf("9.-Exit\n");
+		printf("4.-Set current rssi threshold\n");
+		printf("5.-Set current snr threshold\n");
+		printf("6.-Set current max tuner error threshold\n");
+		printf("7.-get current rssi and snr threshold\n");;
+		printf("8.-seek frequcncy\n");
+		printf("9.-Turn off the radio\n");
+		printf("10.-Exit\n");
 		printf("Enter selection number: ");
 
 		if(scanf("%d", &n_selection) != 1)
@@ -98,6 +120,90 @@ int main(int argc, char **argv)
 				}
 			}
 			break;
+		case TUNER_SETRSSI_THRESHOLD:
+			vctl.id = V4L2_CID_SI476X_RSSI_THRESHOLD;
+			printf("Set rssi threshold = ");
+			if (scanf("%d", &vctl.value) == 1) {
+				ret = ioctl(fd, VIDIOC_S_CTRL, &vctl);
+				if (ret < 0) {
+					perror("error: Turn on the radio first\n");
+					break;
+				}
+			}
+			break;
+		case TUNER_SETSNR_THRESHOLD:
+			vctl.id = V4L2_CID_SI476X_SNR_THRESHOLD;
+			printf("Set snr threshold = ");
+			if (scanf("%d", &vctl.value) == 1) {
+				ret = ioctl(fd, VIDIOC_S_CTRL, &vctl);
+				if (ret < 0) {
+					perror("error: Turn on the radio first\n");
+					break;
+				}
+			}
+			break;
+		case TUNER_SETMAX_TUNE_ERROR_THRESHOLD:
+			vctl.id = V4L2_CID_SI476X_MAX_TUNE_ERROR;
+			printf("Set max_tune_error threshold = ");
+			if (scanf("%d", &vctl.value) == 1) {
+				ret = ioctl(fd, VIDIOC_S_CTRL, &vctl);
+				if (ret < 0) {
+					perror("error: Turn on the radio first\n");
+					break;
+				}
+			}
+			break;
+		case TUNER_GETRSSI_SNR_THRESHOLD:
+			vctl.id = V4L2_CID_SI476X_RSSI_THRESHOLD;
+			vctl.value = 0;
+			ret = ioctl(fd, VIDIOC_G_CTRL, &vctl);
+			if (ret < 0) {
+				perror("error: Turn on the radio first\n");
+				break;
+			}
+			printf("rssi threshold = %d", vctl.value);
+
+			vctl.id = V4L2_CID_SI476X_SNR_THRESHOLD;
+			vctl.value = 0;
+			ret = ioctl(fd, VIDIOC_G_CTRL, &vctl);
+			if (ret < 0) {
+				perror("error: Turn on the radio first\n");
+				break;
+			}
+			printf(", snr threshold = %d\n", vctl.value);
+
+			break;
+		case TUNER_SEEKFREQ:
+			/*
+			 * v4l2_hw_freq_seek
+			 * seek_upward = 1(0): seek upward(downward)
+			 * wrap_around = 1(0): warp around(stop) when reach the high range
+			 * rangehigh : high value of the seek range
+			 * rangelow: low value of the seek range
+			 * spacing: searching interval
+			 */
+			seek.tuner = 0;
+			seek.seek_upward = 1;
+			seek.wrap_around = 1;
+			seek.type = V4L2_TUNER_RADIO;
+
+			ret = ioctl(fd, VIDIOC_S_HW_FREQ_SEEK, &seek);
+			if (ret < 0) {
+				printf("error: failed seek freq\n");
+				break;
+			};
+
+			ret = ioctl(fd, VIDIOC_G_FREQUENCY, &vt);
+			if (ret < 0) {
+				printf("error: Turn on the radio first\n");
+				break;
+			}
+			if (!core)
+				printf("Frequency = %d\n", vt.frequency * 625 / 100000);
+			else
+				printf("Frequency = %d\n", vt.frequency);
+
+			break;
 		case TUNER_OFF:
 			if (fd)
 				close(fd);
-- 
1.8.0

