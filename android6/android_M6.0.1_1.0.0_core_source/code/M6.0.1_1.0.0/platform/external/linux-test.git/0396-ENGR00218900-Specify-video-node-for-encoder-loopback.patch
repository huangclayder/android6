From 57317a58f3cc2776d167cacd1a026112bb5c274d Mon Sep 17 00:00:00 2001
From: Hongzhang Yang <Hongzhang.Yang@freescale.com>
Date: Tue, 4 Jun 2013 17:44:10 +0800
Subject: [PATCH 396/505] ENGR00218900 Specify video node for encoder/loopback

User can use -x option to specify video node for
encoder/loopback test.

e.g. If ov5640_mipi_camera uses /dev/video1, user can
set -x 1 to use it as encoder/loopback input.

Signed-off-by: Hongzhang Yang <Hongzhang.Yang@freescale.com>
---
 test/mxc_vpu_test/capture.c  |  8 ++++++--
 test/mxc_vpu_test/main.c     | 36 ++++++++++++++++++++++--------------
 test/mxc_vpu_test/vpu_test.h |  1 +
 3 files changed, 29 insertions(+), 16 deletions(-)

diff --git a/test/mxc_vpu_test/capture.c b/test/mxc_vpu_test/capture.c
index 39a24fe..fa66a67 100644
--- a/test/mxc_vpu_test/capture.c
+++ b/test/mxc_vpu_test/capture.c
@@ -1,6 +1,6 @@
 
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc.
+ * Copyright 2004-2013 Freescale Semiconductor, Inc.
  *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  */
@@ -100,7 +100,7 @@ v4l_stop_capturing(void)
 int
 v4l_capture_setup(struct encode *enc, int width, int height, int fps)
 {
-	char v4l_device[32] = "/dev/video0";
+	char v4l_device[80], node[8];
 	struct v4l2_format fmt = {0};
 	struct v4l2_streamparm parm = {0};
 	struct v4l2_requestbuffers req = {0};
@@ -115,6 +115,10 @@ v4l_capture_setup(struct encode *enc, int width, int height, int fps)
 		return -1;
 	}
 
+	sprintf(node, "%d", enc->cmdl->video_node_capture);
+	strcpy(v4l_device, "/dev/video");
+	strcat(v4l_device, node);
+
 	if ((cap_fd = open(v4l_device, O_RDWR, 0)) < 0) {
 		err_msg("Unable to open %s\n", v4l_device);
 		return -1;
diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index 5fa8e7c..67de4eb 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -30,7 +30,7 @@
 char *usage = "Usage: ./mxc_vpu_test.out -D \"<decode options>\" "\
 	       "-E \"<encode options>\" "\
 	       "-L \"<loopback options>\" -C <config file> "\
-	       "-T \"<transcode options>\" -C <config file> "\
+	       "-T \"<transcode options>\" "\
 	       "-H display this help \n "
 	       "\n"\
 	       "decode options \n "\
@@ -90,6 +90,8 @@ char *usage = "Usage: ./mxc_vpu_test.out -D \"<decode options>\" "\
 	       "encode options \n "\
 	       "  -i <input file> Read input from file (yuv) \n "\
 	       "	If no input file specified, default is camera \n "\
+	       "  -x <input method> input mode V4L2 with video node \n "\
+	       "        0 - /dev/video0, 1 - /dev/video1, and so on \n "\
 	       "  -o <output file> Write output to file \n "\
 	       "	This option will be ignored if 'n' is specified \n "\
 	       "	If no output is specified, def files are created \n "\
@@ -118,6 +120,8 @@ char *usage = "Usage: ./mxc_vpu_test.out -D \"<decode options>\" "\
 	       "	default is 20 \n "\
 	       "\n"\
 	       "loopback options \n "\
+	       "  -x <input method> input mode V4L2 with video node \n "\
+	       "        0 - /dev/video0, 1 - /dev/video1, and so on \n "\
 	       "  -f <format> 0 - MPEG4, 1 - H.263, 2 - H.264, 7 - MJPG \n "\
 	       "	If no format specified, default is 0 (MPEG4) \n "\
 	       "  -w <width> capture image width \n "\
@@ -203,7 +207,7 @@ int encdec_test(void *arg);
 int transcode_test(void *arg);
 
 /* Encode or Decode or Loopback */
-static char *mainopts = "H:E:D:L:T:C:";
+static char *mainopts = "HE:D:L:T:C:";
 
 /* Options for encode and decode */
 static char *options = "i:o:x:n:p:r:f:c:w:h:g:b:d:e:m:u:t:s:l:j:k:a:v:y:q:";
@@ -329,18 +333,22 @@ parse_args(int argc, char *argv[], int i)
 			break;
 		case 'x':
 			val = atoi(optarg);
-			if (val == 1) {
-				input_arg[i].cmd.dst_scheme = PATH_IPU;
-				info_msg("Display through IPU LIB\n");
-			} else {
-				input_arg[i].cmd.dst_scheme = PATH_V4L2;
-				info_msg("Display through V4L2\n");
-				input_arg[i].cmd.video_node = val;
-			}
-			if (cpu_is_mx27() &&
-				(input_arg[i].cmd.dst_scheme == PATH_IPU)) {
-				input_arg[i].cmd.dst_scheme = PATH_V4L2;
-				warn_msg("ipu lib disp only support in ipuv3\n");
+			if ((input_arg[i].mode == ENCODE) || (input_arg[i].mode == LOOPBACK))
+				input_arg[i].cmd.video_node_capture = val;
+			else {
+				if (val == 1) {
+					input_arg[i].cmd.dst_scheme = PATH_IPU;
+					info_msg("Display through IPU LIB\n");
+				} else {
+					input_arg[i].cmd.dst_scheme = PATH_V4L2;
+					info_msg("Display through V4L2\n");
+					input_arg[i].cmd.video_node = val;
+				}
+				if (cpu_is_mx27() &&
+					(input_arg[i].cmd.dst_scheme == PATH_IPU)) {
+					input_arg[i].cmd.dst_scheme = PATH_V4L2;
+					warn_msg("ipu lib disp only support in ipuv3\n");
+				}
 			}
 			break;
 		case 'n':
diff --git a/test/mxc_vpu_test/vpu_test.h b/test/mxc_vpu_test/vpu_test.h
index 8d74c1b..6f7d379 100644
--- a/test/mxc_vpu_test/vpu_test.h
+++ b/test/mxc_vpu_test/vpu_test.h
@@ -163,6 +163,7 @@ struct cmd_line {
 	int src_scheme;
 	int dst_scheme;
 	int video_node;
+	int video_node_capture;
 	int src_fd;
 	int dst_fd;
 	int width;
-- 
1.8.0

