From 40f59151ec3002c0e506dedbb7225850b1a03675 Mon Sep 17 00:00:00 2001
From: Sandor Yu <R01008@freescale.com>
Date: Fri, 14 Feb 2014 10:23:09 +0800
Subject: [PATCH 439/505] ENGR00299155 Fix c code indent

Just use tab key replace instead of 4 space key

Signed-off-by: Sandor Yu <R01008@freescale.com>
---
 test/mxc_v4l2_test/csi_v4l2_capture.c | 188 +++++++++++++++++-----------------
 1 file changed, 92 insertions(+), 96 deletions(-)

diff --git a/test/mxc_v4l2_test/csi_v4l2_capture.c b/test/mxc_v4l2_test/csi_v4l2_capture.c
index 94bbcc8..37c185a 100644
--- a/test/mxc_v4l2_test/csi_v4l2_capture.c
+++ b/test/mxc_v4l2_test/csi_v4l2_capture.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009-2013 Freescale Semiconductor, Inc. All rights reserved.
+ * Copyright 2009-2014 Freescale Semiconductor, Inc. All rights reserved.
  */
 
 /*
@@ -85,21 +85,20 @@ int g_frame_size;
 
 int start_capturing(int fd_v4l)
 {
-        unsigned int i;
-        struct v4l2_buffer buf;
-        enum v4l2_buf_type type;
-        struct v4l2_requestbuffers req;
-
-        memset(&req, 0, sizeof (req));
-        req.count = TEST_BUFFER_NUM;
-        req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-        req.memory = g_mem_type;
-
-        if (ioctl(fd_v4l, VIDIOC_REQBUFS, &req) < 0)
-        {
-                printf("VIDIOC_REQBUFS failed\n");
-                return -1;
-        }
+	unsigned int i;
+	struct v4l2_buffer buf;
+	enum v4l2_buf_type type;
+	struct v4l2_requestbuffers req;
+
+	memset(&req, 0, sizeof (req));
+	req.count = TEST_BUFFER_NUM;
+	req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	req.memory = g_mem_type;
+
+	if (ioctl(fd_v4l, VIDIOC_REQBUFS, &req) < 0) {
+		printf("VIDIOC_REQBUFS failed\n");
+		return -1;
+	}
 
 	for (i = 0; i < TEST_BUFFER_NUM; i++) {
 		memset(&buf, 0, sizeof (buf));
@@ -121,41 +120,41 @@ int start_capturing(int fd_v4l)
 			buffers[i].length = buf.length;
 			buffers[i].offset = (size_t) buf.m.offset;
 			buffers[i].start = mmap(NULL, buffers[i].length,
-					 PROT_READ | PROT_WRITE, MAP_SHARED,
-					 fd_v4l, buffers[i].offset);
+				PROT_READ | PROT_WRITE, MAP_SHARED,
+				fd_v4l, buffers[i].offset);
 			memset(buffers[i].start, 0xFF, buffers[i].length);
 		}
 	}
 
-        for (i = 0; i < TEST_BUFFER_NUM; i++)
-        {
-                memset(&buf, 0, sizeof (buf));
-                buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-                buf.memory = g_mem_type;
-                buf.index = i;
+	for (i = 0; i < TEST_BUFFER_NUM; i++)
+	{
+		memset(&buf, 0, sizeof (buf));
+		buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+		buf.memory = g_mem_type;
+		buf.index = i;
 		buf.m.offset = buffers[i].offset;
 
-                if (ioctl (fd_v4l, VIDIOC_QBUF, &buf) < 0) {
-                        printf("VIDIOC_QBUF error\n");
-                        return -1;
-                }
-        }
+		if (ioctl (fd_v4l, VIDIOC_QBUF, &buf) < 0) {
+			printf("VIDIOC_QBUF error\n");
+			return -1;
+		}
+	}
 
-        type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-        if (ioctl (fd_v4l, VIDIOC_STREAMON, &type) < 0) {
-                printf("VIDIOC_STREAMON error\n");
-                return -1;
-        }
+	type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	if (ioctl (fd_v4l, VIDIOC_STREAMON, &type) < 0) {
+		printf("VIDIOC_STREAMON error\n");
+		return -1;
+	}
 
-        return 0;
+	return 0;
 }
 
 int stop_capturing(int fd_v4l)
 {
-        enum v4l2_buf_type type;
+	enum v4l2_buf_type type;
 
-        type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-        return ioctl (fd_v4l, VIDIOC_STREAMOFF, &type);
+	type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	return ioctl (fd_v4l, VIDIOC_STREAMOFF, &type);
 }
 
 static int find_video_device(void)
@@ -230,10 +229,10 @@ int v4l_capture_setup(void)
 	int fd_v4l = 0;
 
 	if ((fd_v4l = find_video_device()) < 0)
-        {
-                printf("Unable to open v4l2 capture device.\n");
-                return 0;
-        }
+	{
+		printf("Unable to open v4l2 capture device.\n");
+		return 0;
+	}
 
 	fmtdesc.index = 0;
 	while (ioctl(fd_v4l, VIDIOC_ENUM_FMT, &fmtdesc) >= 0) {
@@ -258,21 +257,21 @@ int v4l_capture_setup(void)
 	parm.parm.capture.timeperframe.numerator = 1;
 	if (ioctl(fd_v4l, VIDIOC_S_PARM, &parm) < 0)
 	{
-	        printf("VIDIOC_S_PARM failed\n");
-	        return -1;
+		printf("VIDIOC_S_PARM failed\n");
+		return -1;
 	}
 
 	memset(&fmt, 0, sizeof(fmt));
-        fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 	fmt.fmt.pix.pixelformat = g_cap_fmt;
 	print_pixelformat("pixelformat (output by v4l)", fmt.fmt.pix.pixelformat);
-        fmt.fmt.pix.width = g_in_width;
-        fmt.fmt.pix.height = g_in_height;
-        if (ioctl(fd_v4l, VIDIOC_S_FMT, &fmt) < 0)
-        {
-                printf("set format failed\n");
-                return 0;
-        }
+	fmt.fmt.pix.width = g_in_width;
+	fmt.fmt.pix.height = g_in_height;
+	if (ioctl(fd_v4l, VIDIOC_S_FMT, &fmt) < 0)
+	{
+		printf("set format failed\n");
+		return 0;
+	}
 
 	if (ioctl(fd_v4l, VIDIOC_G_FMT, &fmt) < 0)
 	{
@@ -325,6 +324,7 @@ int v4l_capture_setup(void)
 		printf("s_ctrl failed.\n");
 		return -1;
 	}
+
 	if (g_vflip)
 		vc.value = 1;
 	else
@@ -342,13 +342,13 @@ int v4l_capture_setup(void)
 		return -1;
 	}
 
-        return fd_v4l;
+	return fd_v4l;
 }
 
 int v4l_capture_test(int fd_v4l)
 {
 	struct fb_var_screeninfo var;
-        struct v4l2_buffer buf;
+	struct v4l2_buffer buf;
 	char fb_device[100] = "/dev/fb0";
 	int fd_fb = 0;
 	int frame_num = 0, i, fb0_size;
@@ -395,30 +395,28 @@ int v4l_capture_test(int fd_v4l)
 	fb0_size = var.xres * var.yres_virtual * var.bits_per_pixel / 8;
 	fb0 = (unsigned char *)mmap(0, fb0_size,
 					PROT_READ | PROT_WRITE, MAP_SHARED, fd_fb, 0);
-	if ((int)fb0 == -1)
-	{
+	if ((int)fb0 == -1) {
 		printf("Error: failed to map framebuffer device 0 to memory.\n");
 		goto FAIL;
 	}
 
 loop:
-        if (start_capturing(fd_v4l) < 0)
-        {
+	if (start_capturing(fd_v4l) < 0) {
 		printf("start_capturing failed\n");
 		goto FAIL;
-        }
+	}
 
 	gettimeofday(&tv1, NULL);
 	do {
-                memset(&buf, 0, sizeof (buf));
-                buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-                buf.memory = g_mem_type;
-                if (ioctl (fd_v4l, VIDIOC_DQBUF, &buf) < 0) {
-                        printf("VIDIOC_DQBUF failed.\n");
+		memset(&buf, 0, sizeof (buf));
+		buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+		buf.memory = g_mem_type;
+		if (ioctl (fd_v4l, VIDIOC_DQBUF, &buf) < 0) {
+			printf("VIDIOC_DQBUF failed.\n");
 			break;
-                }
+		}
 
-        	for (i = 0; i < TEST_BUFFER_NUM; i++) {
+		for (i = 0; i < TEST_BUFFER_NUM; i++) {
 			if (buf.m.userptr == buffers[i].offset) {
 				if (var.yoffset == 0) {
 					var.yoffset += var.yres;
@@ -464,10 +462,8 @@ loop:
 			printf("FBIOPAN_DISPLAY failed\n");
 	}
 
-        if (stop_capturing(fd_v4l) < 0)
-        {
-                printf("stop_capturing failed\n");
-        }
+	if (stop_capturing(fd_v4l) < 0)
+		printf("stop_capturing failed\n");
 
 	if (g_loop > 0 && !quitflag) {
 		printf("loop %d done!\n", g_loop);
@@ -477,38 +473,38 @@ loop:
 
 	munmap((void *)fd_fb, fb0_size);
 	close(fd_fb);
-        close(fd_v4l);
-        return 0;
+	close(fd_v4l);
+	return 0;
 FAIL:
 	close(fd_fb);
-        close(fd_v4l);
-        return -1;
+	close(fd_v4l);
+	return -1;
 }
 
 void print_help(void)
 {
 	printf("CSI Video4Linux capture Device Test\n"
-	       "Syntax: ./csi_v4l2_capture -iw <capture input width>\n"
-	       " -ih <capture input height>\n"
-	       " -ow <capture output width>\n"
-	       " -oh <capture output height>\n"
-	       " -hf <horizontal flip>\n"
-	       " -vf <vertical flip>\n"
-	       " -m <capture mode, 0-640x480, 1-320x240, etc>\n" \
-	       " -r <rotation 0, 90, 180, 270>\n"
-	       " -t <time> -fr <framerate>\n"
-	       " -loop <times>\n"
+		"Syntax: ./csi_v4l2_capture -iw <capture input width>\n"
+		" -ih <capture input height>\n"
+		" -ow <capture output width>\n"
+		" -oh <capture output height>\n"
+		" -hf <horizontal flip>\n"
+		" -vf <vertical flip>\n"
+		" -m <capture mode, 0-640x480, 1-320x240, etc>\n" \
+		" -r <rotation 0, 90, 180, 270>\n"
+		" -t <time> -fr <framerate>\n"
+		" -loop <times>\n"
 #ifdef	GET_CONTI_PHY_MEM_VIA_PXP_LIB
-	       " [-u if defined, means use userp, otherwise mmap]\n"
+		" [-u if defined, means use userp, otherwise mmap]\n"
 #endif
-		);
+	);
 }
 
 int process_cmdline(int argc, char **argv)
 {
-        int i;
+	int i;
 
-        for (i = 1; i < argc; i++) {
+	for (i = 1; i < argc; i++) {
 		if (strcmp(argv[i], "-m") == 0) {
 			g_capture_mode = atoi(argv[++i]);
 		} else if (strcmp(argv[i], "-iw") == 0) {
@@ -540,11 +536,11 @@ int process_cmdline(int argc, char **argv)
 #endif
 		} else {
 			print_help();
-                        return -1;
+			return -1;
 		}
-        }
+	}
 
-        return 0;
+	return 0;
 }
 
 static int signal_thread(void *arg)
@@ -629,7 +625,7 @@ int memalloc(int buf_size, int buf_cnt) { return 0; }
 
 int main(int argc, char **argv)
 {
-        int fd_v4l;
+	int fd_v4l;
 	quitflag = 0;
 
 	pthread_t sigtid;
@@ -638,11 +634,11 @@ int main(int argc, char **argv)
 	pthread_sigmask(SIG_BLOCK, &sigset, NULL);
 	pthread_create(&sigtid, NULL, (void *)&signal_thread, NULL);
 
-        if (process_cmdline(argc, argv) < 0) {
-                return -1;
-        }
+	if (process_cmdline(argc, argv) < 0) {
+		return -1;
+	}
 
-        fd_v4l = v4l_capture_setup();
+	fd_v4l = v4l_capture_setup();
 	if (g_mem_type == V4L2_MEMORY_USERPTR)
 		if (memalloc(g_frame_size, TEST_BUFFER_NUM) < 0) {
 			close(fd_v4l);
-- 
1.8.0

