From 9829debd23ea37621cb2231a32b755f982299fe8 Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Wed, 11 Mar 2015 16:20:49 +0800
Subject: [PATCH 485/505] MA-6380 Add script to sign android's boot.img for
 HAB

Follow zImage to create script to handle boot.img for HAB
The cmd to sign the boot.img as below for i.mx6q sabresd board:
./mk_secure_zimage 0x14007800

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 test/mxc_secureboot/V2012/README                   | 39 +++++++++++++-
 .../mxc_secureboot/V2012/bootimg/mk_secure_bootimg | 62 ++++++++++++++++++++++
 .../V2012/templates/bimagecsf_template             | 31 +++++++++++
 .../V2012/templates/habbimagegen_template          | 19 +++++++
 4 files changed, 150 insertions(+), 1 deletion(-)
 create mode 100755 test/mxc_secureboot/V2012/bootimg/mk_secure_bootimg
 create mode 100644 test/mxc_secureboot/V2012/templates/bimagecsf_template
 create mode 100644 test/mxc_secureboot/V2012/templates/habbimagegen_template

diff --git a/test/mxc_secureboot/V2012/README b/test/mxc_secureboot/V2012/README
index 74620ff..15bc25b 100644
--- a/test/mxc_secureboot/V2012/README
+++ b/test/mxc_secureboot/V2012/README
@@ -10,13 +10,15 @@ File Description
 
 "u-boot/mk_secure_uboot"
 "zImage/mk_secure_zimage"
+"bootimg/mk_secure_bootimg"
 "templates/"
-	Automatic secure uboot and zImage generation scripts. These files
+	Automatic secure uboot, zImage and android's boot.img generation scripts. These files
 	are used for dynamic authentication. It is more convinient and
 	adaptive comparing to the original static way.
 
 	Copy "u-boot/mk_secure_uboot" to "BLN_CST_MAIN_01.00.00/u-boot"
 	Copy "zImage/mk_secure_zimage" to "BLN_CST_MAIN_01.00.00/zImage"
+	Copy "bootimg/mk_secure_bootimg" to "BLN_CST_MAIN_01.00.00/bootimg"
 	Copy "templates/" to "BLN_CST_MAIN_01.00.00"
 
 Secure Boot Genreation
@@ -38,6 +40,15 @@ For generating secure zImage
     . zimage-signed-pad.bin will be generated. It is the zImage
       with signature
 
+For generating secure boot.img
+    . copy "boot.img" to "BLN_CST_MAIN_01.00.00/boot.img"
+    . "./mk_secure_bootimg 0x14007800"
+	- where 0x14007800 is the DDR location where boot.img is
+	  copied to by UBoot, different from platform to platform
+    . boot-signed-pad.img will be generated. It is the boot.img
+      with signature
+
+
 Image Layout
 ------------------------------------
 U-Boot
@@ -69,6 +80,23 @@ zImage
     |     PADDING       | /
     +-------------------+
 
+boot.img
+
+    +-------------------+      DDR_START
+    |                   |
+    |     boot.img      |
+    |                   |
+    +-------------------+      DDR_START + BOOTIMG_SIZE
+    |     PADDING       |
+    +-------------------+      align to 0x1000
+    |     IVT           | ---- Size : 0x20
+    +-------------------+
+    |     CSF Data      | \
+    +-------------------+  +-- CSF + Pad,  Size : 0x2000
+    |     PADDING       | /
+    +-------------------+
+
+
 DDR Location Parameters
 ------------------------------------
 The DDR location parameter provided to "mk_secure_zimage" script is the
@@ -80,5 +108,14 @@ physical address. The following are the default values
 	-------------------------		-------------------------
 	0x10800000				0x80800000
 
+The DDR location parameter provided to "mk_secure_bootimg" script is the
+kernel_addr from boot.img's header minus 0x800. The kernel_addr can be get from
+'$od --skip-bytes=12 --read-bytes=4  --format=x4 boot.img |head -1 | awk '{print $2}')'
+The following are the default values
+
+	MX6Q/DL SabreSD Board
+    ------------------------
+	0x14007800
+
 Please refer to "MX6 Linux High Assurance Boot (HAB) User Guide" for
 detailed test steps.
diff --git a/test/mxc_secureboot/V2012/bootimg/mk_secure_bootimg b/test/mxc_secureboot/V2012/bootimg/mk_secure_bootimg
new file mode 100755
index 0000000..9408e57
--- /dev/null
+++ b/test/mxc_secureboot/V2012/bootimg/mk_secure_bootimg
@@ -0,0 +1,62 @@
+#! /bin/bash
+if [ $# != 1 ]
+then
+	printf "	Command Syntax:\n"
+	printf "	    mk_secure_bootimg <DDR_ADDR>\n"
+	printf "	        DDR_ADDR : ddr address where boot.img is copied to RAM by U-Boot\n"
+	printf "	Please try again\n"
+	exit
+fi
+
+let ddr_addr=$1
+
+if [ ! -f boot.img ]
+then
+	printf "File \"boot.img\" does not exist. Copy it from android directory and try again\n"
+	exit 1
+fi
+printf "Make Sure Your \"boot.img\" is up to date...\n"
+
+# DDR_ADDR should be as $(od --skip-bytes=12 --read-bytes=4  --format=x4 boot.img |head -1 | awk '{print $2}') and
+# minus 0x800
+
+# Calculate the size
+let bootimg_size=$(ls -lct boot.img | awk '{print $5}')
+let pad_len=$((bootimg_size - bootimg_size % 0x1000 + 0x1000)) # align to 0x1000
+let auth_len=$((pad_len + 0x20)) # +0x20 "IVT"
+let sig_len=$((auth_len + 0x2000))
+let self_ptr=$((${ddr_addr}+ pad_len))
+let csf_ptr=$((${ddr_addr} + auth_len))
+let jump_addr=$((${ddr_addr} + 0x1000))
+
+# change value to hex string
+pad_len=`printf "0x%X" ${pad_len}`
+auth_len=`printf "0x%X" ${auth_len}`
+sig_len=`printf "0x%X" ${sig_len}`
+ddr_addr=`printf "0x%X" ${ddr_addr}`
+self_ptr=`printf "0x%X" ${self_ptr}`
+csf_ptr=`printf "0x%X" ${csf_ptr}`
+jump_addr=`printf "0x%X" ${jump_addr}`
+
+echo "ddr_addr $ddr_addr"
+echo "self_addr $self_addr"
+
+# Create habBImagegen
+sed -e s/%pad_len%/${pad_len}/g -e s/%sig_len%/${sig_len}/g ../templates/habbimagegen_template > habBImageGen
+chmod +x habBImageGen
+
+# Create BImage.csf
+sed -e s/%ddr_addr%/${ddr_addr}/g -e s/%auth_len%/${auth_len}/g ../templates/bimagecsf_template > bootimg.csf
+
+# Create genIVT
+sed -e s/%jump_addr%/${jump_addr}/g -e s/%self_ptr%/${self_ptr}/g -e s/%csf_ptr%/${csf_ptr}/g ../templates/genivt_template > genIVT
+chmod +x genIVT
+
+# Generate secure boot
+./habBImageGen
+
+# Remove temperory files
+rm -f genIVT habBImageGen bootimg.csf boot-pad.img ivt.bin boot-pad-ivt.img bootimg_csf.img boot-signed.img
+
+# OK
+printf "boot.img with Signature \"boot-signed-pad.img\" is ready to use\n"
diff --git a/test/mxc_secureboot/V2012/templates/bimagecsf_template b/test/mxc_secureboot/V2012/templates/bimagecsf_template
new file mode 100644
index 0000000..b33e971
--- /dev/null
+++ b/test/mxc_secureboot/V2012/templates/bimagecsf_template
@@ -0,0 +1,31 @@
+[Header]
+    Version = 4.0
+    Security Configuration = Open
+    Hash Algorithm = sha256
+    Engine Configuration = 0
+    Certificate Format = X509
+    Signature Format = CMS
+
+[Install SRK]
+    File = "../crts/SRK_1_2_3_4_table.bin"
+    Source index = 0
+
+[Install CSFK]
+    File = "../crts/CSF1_1_sha256_2048_65537_v3_usr_crt.pem"
+
+[Authenticate CSF]
+
+[Install Key]
+    Verification index = 0
+    Target index = 2
+    File = "../crts/IMG1_1_sha256_2048_65537_v3_usr_crt.pem"
+
+# Sign padded uImage start at address %ddr_addr%
+# length = %auth_len%
+# This covers the essential parts: original uImage and the attached IVT
+# Blocks have the following definition:
+#    Image block start address on i.MX, Offset from start of image file,
+#    Length of block in bytes, image data file
+[Authenticate Data]
+    Verification index = 2
+    Blocks = %ddr_addr% 0x0 %auth_len% "boot-pad-ivt.img"
diff --git a/test/mxc_secureboot/V2012/templates/habbimagegen_template b/test/mxc_secureboot/V2012/templates/habbimagegen_template
new file mode 100644
index 0000000..6554da9
--- /dev/null
+++ b/test/mxc_secureboot/V2012/templates/habbimagegen_template
@@ -0,0 +1,19 @@
+#! /bin/bash
+
+echo "extend boot.img to %pad_len%..."
+objcopy -I binary -O binary --pad-to %pad_len% --gap-fill=0x5A boot.img boot-pad.img
+
+echo "generate IVT"
+./genIVT
+
+echo "attach IVT..."
+cat boot-pad.img ivt.bin > boot-pad-ivt.img
+
+echo "generate csf data..."
+../linux/cst --o bootimg_csf.img < bootimg.csf
+
+echo "merge image and csf data..."
+cat boot-pad-ivt.img bootimg_csf.img > boot-signed.img
+
+echo "extend final image to %sig_len%..."
+objcopy -I binary -O binary --pad-to %sig_len% --gap-fill=0x5A boot-signed.img boot-signed-pad.img
-- 
1.8.0

