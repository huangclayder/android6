From 83bbf371eac58da762808565a31023dfc783b73c Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Wed, 29 Oct 2008 10:29:23 +0800
Subject: [PATCH 052/505] ENGR00096973 vpu: remove max frame size limit and
 enlarge max filename length

Remove max encoder size limitation from lib.
Enlarge max input/output filename length in test code.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 test/mxc_vpu_test/main.c     | 12 ++++++------
 test/mxc_vpu_test/utils.c    |  6 +++---
 test/mxc_vpu_test/vpu_test.h |  2 +-
 3 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index 8999e59..ee3a7d7 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -131,7 +131,7 @@ parse_config_file(char *file_name)
 		return -1;
 	}
 
-	while (fgets(line, 64, fp) != NULL) {
+	while (fgets(line, MAX_PATH, fp) != NULL) {
 		if (instance > 3) {
 			err_msg("No more instances!!\n");
 			break;
@@ -162,21 +162,21 @@ parse_main_args(int argc, char *argv[])
 			input_arg[instance].mode = DECODE;
 			strncpy(input_arg[instance].line, argv[0], 26);
 			strncat(input_arg[instance].line, " ", 2);
-			strncat(input_arg[instance].line, optarg, 100);
+			strncat(input_arg[instance].line, optarg, 200);
 			instance++;
 			break;
 		case 'E':
 			input_arg[instance].mode = ENCODE;
 			strncpy(input_arg[instance].line, argv[0], 26);
 			strncat(input_arg[instance].line, " ", 2);
-			strncat(input_arg[instance].line, optarg, 100);
+			strncat(input_arg[instance].line, optarg, 200);
 			instance++;
 			break;
 		case 'L':
 			input_arg[instance].mode = LOOPBACK;
 			strncpy(input_arg[instance].line, argv[0], 26);
 			strncat(input_arg[instance].line, " ", 2);
-			strncat(input_arg[instance].line, optarg, 100);
+			strncat(input_arg[instance].line, optarg, 200);
 			instance++;
 			break;
 		case 'C':
@@ -214,7 +214,7 @@ parse_args(int argc, char *argv[], int i)
 		switch (opt)
 		{
 		case 'i':
-			strncpy(input_arg[i].cmd.input, optarg, 64);
+			strncpy(input_arg[i].cmd.input, optarg, MAX_PATH);
 			input_arg[i].cmd.src_scheme = PATH_FILE;
 			break;
 		case 'o':
@@ -222,7 +222,7 @@ parse_args(int argc, char *argv[], int i)
 				warn_msg("-o ignored because of -n\n");
 				break;
 			}
-			strncpy(input_arg[i].cmd.output, optarg, 64);
+			strncpy(input_arg[i].cmd.output, optarg, MAX_PATH);
 			input_arg[i].cmd.dst_scheme = PATH_FILE;
 			break;
 		case 'n':
diff --git a/test/mxc_vpu_test/utils.c b/test/mxc_vpu_test/utils.c
index 983ffce..4b63f5c 100644
--- a/test/mxc_vpu_test/utils.c
+++ b/test/mxc_vpu_test/utils.c
@@ -539,7 +539,7 @@ char*
 skip_unwanted(char *ptr)
 {
 	int i = 0;
-	static char buf[64];
+	static char buf[MAX_PATH];
 	while (*ptr != '\0') {
 		if (*ptr == ' ' || *ptr == '\t' || *ptr == '\n') {
 			ptr++;
@@ -585,7 +585,7 @@ int parse_options(char *buf, struct cmd_line *cmd, int *mode)
 		if (str != NULL) {
 			str++;
 			if (*str != '\0') {
-				strncpy(cmd->input, str, 64);
+				strncpy(cmd->input, str, MAX_PATH);
 				cmd->src_scheme = PATH_FILE;
 			}
 		}
@@ -599,7 +599,7 @@ int parse_options(char *buf, struct cmd_line *cmd, int *mode)
 		if (str != NULL) {
 			str++;
 			if (*str != '\0') {
-				strncpy(cmd->output, str, 64);
+				strncpy(cmd->output, str, MAX_PATH);
 				cmd->dst_scheme = PATH_FILE;
 			}
 		}
diff --git a/test/mxc_vpu_test/vpu_test.h b/test/mxc_vpu_test/vpu_test.h
index 7dff6b1..d636999 100644
--- a/test/mxc_vpu_test/vpu_test.h
+++ b/test/mxc_vpu_test/vpu_test.h
@@ -106,7 +106,7 @@ struct rot {
 	int rot_angle;
 };
 
-#define MAX_PATH	64
+#define MAX_PATH	128
 struct cmd_line {
 	char input[MAX_PATH];	/* Input file name */
 	char output[MAX_PATH];  /* Output file name */
-- 
1.8.0

