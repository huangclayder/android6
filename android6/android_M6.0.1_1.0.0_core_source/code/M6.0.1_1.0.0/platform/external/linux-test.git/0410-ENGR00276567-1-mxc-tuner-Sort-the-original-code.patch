From fd927c2e549db0383688808116fa553fecaa907c Mon Sep 17 00:00:00 2001
From: Nicolin Chen <b42378@freescale.com>
Date: Thu, 29 Aug 2013 11:44:39 +0800
Subject: [PATCH 410/505] ENGR00276567-1 mxc: tuner: Sort the original code

Sort the code according to CodingStyle.

Acked-by: Wang Shengjiu <b02247@freescale.com>
Signed-off-by: Nicolin Chen <b42378@freescale.com>
---
 test/mxc_tuner_test/mxc_tuner_test.c | 107 +++++++++++++++++++----------------
 1 file changed, 57 insertions(+), 50 deletions(-)

diff --git a/test/mxc_tuner_test/mxc_tuner_test.c b/test/mxc_tuner_test/mxc_tuner_test.c
index a65a855..e54bf33 100644
--- a/test/mxc_tuner_test/mxc_tuner_test.c
+++ b/test/mxc_tuner_test/mxc_tuner_test.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Freescale Semiconductor, Inc. All rights reserved.
+ * Copyright (C) 2013 Freescale Semiconductor, Inc. All rights reserved.
  */
 
 /*
@@ -21,70 +21,77 @@
 #include <sys/ioctl.h>
 #include <linux/videodev2.h>
 
-#define TRIES		25		/* get 25 samples                 */
-#define LOCKTIME	400000		/* wait 400ms for card to lock on */
-#define SAMPLEDELAY	15000		/* wait 15ms between samples      */
-#define THRESHOLD	.5		/* minimum acceptable signal %    */
+#define TRIES		25		/* Get 25 samples */
+#define LOCKTIME	400000		/* Wait 400ms for card to lock on */
+#define SAMPLEDELAY	15000		/* Wait 15ms between samples */
+#define THRESHOLD	.5		/* Minimum acceptable signal % */
+
+#define TUNER_ON	1
+#define TUNER_GETFREQ	2
+#define TUNER_SETFREQ	3
+#define TUNER_OFF	4
+#define TUNER_EXIT	9
 
 int main(int argc, char **argv)
 {
-	int	fd, ret;
-	struct	v4l2_frequency vt;
-	int n_selection, freq;
+	int fd, ret, n_selection, freq;
+	struct v4l2_frequency vt;
 	char *dev = NULL;
 
 	do{
 		printf("Welcome to radio menu\n");
 		printf("1.-Turn on the radio\n");
 		printf("2.-Get current frequency\n");
-                printf("3.-Set current frequency\n");
-                printf("4.-Turn off the radio\n");
+		printf("3.-Set current frequency\n");
+		printf("4.-Turn off the radio\n");
 		printf("9.-Exit\n");
 		printf("Enter selection number: ");
-		if(scanf("%d", &n_selection) == 1){
-			switch(n_selection){
-			    case 1:
-				dev = strdup("/dev/radio0");    /* default */
-				fd = open(dev, O_RDONLY);
-        			if (fd < 0) {
-		                    fprintf(stderr, "Unable to open %s: %s\n", dev, strerror(errno));
-    			            exit(1);
-        			}
-			    break;
-                            case 2:
-                                ret = ioctl(fd, VIDIOC_G_FREQUENCY, &vt);   /* get initial info */
-			        if (ret < 0) {
-		                    printf("error: Turn on the radio first\n");
-                		    break;
-        			}
-        			printf("Frequency = %d\n", vt.frequency);
-                            break;
 
-                            case 3:
-				ret = ioctl(fd, VIDIOC_G_FREQUENCY, &vt);   /* get initial info */
-                                if (ret < 0) {
-                                    printf("error: Turn on the radio first\n");
-                                    break;
-                                }
-			        printf("Set frequency = ");
-				if(scanf("%d", &freq) == 1){
-				    vt.frequency = freq;
-				    ret = ioctl(fd, VIDIOC_S_FREQUENCY, &vt);   // get initial info
-        			    if (ret < 0) {
-                                        perror("error: Turn on the radio first\n");
-                                        break;
-			            }
+		if(scanf("%d", &n_selection) != 1)
+			continue;
+
+		switch (n_selection) {
+		case TUNER_ON:
+			dev = strdup("/dev/radio0");
+			fd = open(dev, O_RDONLY);
+			if (fd < 0) {
+				fprintf(stderr, "Unable to open %s: %s\n", dev, strerror(errno));
+				exit(1);
+			}
+			break;
+		case TUNER_GETFREQ:
+			ret = ioctl(fd, VIDIOC_G_FREQUENCY, &vt);
+			if (ret < 0) {
+				printf("error: Turn on the radio first\n");
+				break;
+			}
+			printf("Frequency = %d\n", vt.frequency);
+			break;
+
+		case TUNER_SETFREQ:
+			ret = ioctl(fd, VIDIOC_G_FREQUENCY, &vt);
+			if (ret < 0) {
+				printf("error: Turn on the radio first\n");
+				break;
+			}
+			printf("Set frequency = ");
+			if (scanf("%d", &freq) == 1){
+				vt.frequency = freq;
+				ret = ioctl(fd, VIDIOC_S_FREQUENCY, &vt);
+				if (ret < 0) {
+					perror("error: Turn on the radio first\n");
+					break;
 				}
-                            break;
-                            case 4:
-				if(fd)
-                                    close(fd);
-                            break;
-			    default:
-			    break;
 			}
+			break;
+		case TUNER_OFF:
+			if (fd)
+				close(fd);
+			break;
+		default:
+			break;
 		}
-	}while(n_selection != 9);
+	}while (n_selection != TUNER_EXIT);
 
 	close(fd);
 	return 0;
-- 
1.8.0

