From 03f477f002d933fc0a9a4e1b8d30d66ebbed31a6 Mon Sep 17 00:00:00 2001
From: Robby Cai <r63905@freescale.com>
Date: Mon, 22 Dec 2008 21:47:19 +0800
Subject: [PATCH 063/505] ENGR00102790 [MX37] update FW to V1.0.8 and package
 to V1.4.0

*) the API IOSystemInit and IOSystemShutdown will not be exposed to the applications in the future, the application should use vpu_Init() and vpu_UnInit() instead. Please see the reference codes.
*) the chromaInterleave should apply for each instance via vpu_DecOpen(), not for whole as before.
*) Add the Frame Buffer Status, Mb Param report, Mv Param report, user data report

Signed-off-by: Robby Cai <r63905@freescale.com>
---
 test/mxc_vpu_test/dec.c  | 237 ++++++++++++++++++++++++++++++++++++++++++++++-
 test/mxc_vpu_test/main.c |  13 +--
 2 files changed, 242 insertions(+), 8 deletions(-)

diff --git a/test/mxc_vpu_test/dec.c b/test/mxc_vpu_test/dec.c
index e59d44c..dd831f1 100644
--- a/test/mxc_vpu_test/dec.c
+++ b/test/mxc_vpu_test/dec.c
@@ -25,6 +25,107 @@
 
 extern int quitflag;
 
+static FILE *fpFrmStatusLogfile = 0;
+static FILE *fpMbLogfile = 0;
+static FILE *fpMvLogfile = 0;
+/*static FILE *fpUserDataLogfile = 0;*/
+
+#define FN_FRAME_BUFFER_STATUS "log_FrameBufStatus.log"
+#define FN_MB_DATA "log_MB_Para.log"
+#define FN_MV_DATA "log_Mv_Para.log"
+#define FN_USER_DATA "log_User_Data.log"
+
+void SaveFrameBufStat(u8 *frmStatusBuf, int size) {
+
+	int i;
+
+	if (fpFrmStatusLogfile == 0) {
+		fpFrmStatusLogfile = fopen(FN_FRAME_BUFFER_STATUS, "w+");
+	}
+
+	for (i = 0; i < size; i++) {
+		fprintf(fpFrmStatusLogfile, "%X %X ",
+				((frmStatusBuf[i] >> 4) & 0x0F),
+						(frmStatusBuf[i] & 0x0F));
+	}
+	fprintf(fpFrmStatusLogfile, "\n");
+	fflush(fpFrmStatusLogfile);
+}
+
+
+void SaveMB_Para(u8 *mbParaBuf, int size, int mbNumX, int DecNum) {
+
+	int i;
+
+	if (fpMbLogfile == 0) {
+		fpMbLogfile = fopen(FN_MB_DATA, "w+");
+	}
+
+	fprintf(fpMbLogfile, "Dec Frame Num : %d\n", DecNum);
+
+	for (i = 0; i < size; i++) {
+		fprintf(fpMbLogfile, "%02X ", mbParaBuf[i]);
+		if(mbNumX == ((i % mbNumX) + 1))
+			fprintf(fpMbLogfile, "%%\n");
+	}
+
+	fflush(fpMbLogfile);
+}
+
+void SaveMvPara(u8 *mvParaBuf, int size, int mvNumPerMb, int mbNumX, int DecNum) {
+
+	int i, j;
+	short mvX, mvY;
+	u8 *mvDatabuf;
+
+	if (fpMvLogfile == 0) {
+		fpMvLogfile = fopen(FN_MV_DATA, "w+");
+	}
+
+	fprintf(fpMvLogfile, "Dec Frame Num : %d\n", DecNum);
+
+	for (i = 0; i < size; i++) {
+		for (j = 0; j < mvNumPerMb; j++) {
+			mvDatabuf = (mvParaBuf + (i*mvNumPerMb + j)*4);
+			mvX = (short)((mvDatabuf[0]<<8) | (mvDatabuf[1]<<0));
+			mvY = (short)((mvDatabuf[2]<<8) | (mvDatabuf[3]<<0));
+
+			if (!(mvX & 0x8000)){
+				/* Intra MB */
+				mvX = 0;
+				mvY = 0;
+
+				if (j == 0 )
+					fprintf(fpMvLogfile, "[ No FW  ]");
+				if (j == 1)
+					fprintf(fpMvLogfile, "[ No BW  ]");
+
+			} else {
+
+				if(mvX & 0x2000) {/* Signed extension */
+					mvX = mvX | 0xC000;
+				} else {
+					mvX = mvX & 0x1FFF;
+				}
+
+				if(mvY & 0x2000) {
+					mvY = mvY | 0xC000;
+				} else {
+					mvY = mvY & 0x1FFF;
+				}
+
+				if (j == 0 )
+					fprintf(fpMvLogfile, "[%4d%4d]", mvX, mvY);
+				if (j == 1)
+					fprintf(fpMvLogfile, "[%4d%4d]", mvX, mvY);
+			}
+		}
+		if(mvNumPerMb && mbNumX == ((i%mbNumX) + 1))
+			fprintf(fpMvLogfile, "%%\n");
+	}
+	fflush(fpMvLogfile);
+}
+
 /*
  * Fill the bitstream ring buffer
  */
@@ -511,6 +612,7 @@ decoder_start(struct decode *dec)
 	int sec, usec;
 	u32 yuv_addr, img_size;
 	float tdec_time = 0, frame_id = 0, total_time=0;
+	int decIndex = 0;
 	int rotid = 0, dblkid = 0, mirror;
 	int count = dec->cmdl->count;
 	int totalNumofErrMbs = 0;
@@ -541,6 +643,12 @@ decoder_start(struct decode *dec)
 	 */
 	decparam.iframeSearchEnable = 0;
 
+	decparam.extParam.userDataEnable = 0;
+
+	decparam.extParam.mbParamEnable = 0;
+	decparam.extParam.mvReportEnable = 0;
+	decparam.extParam.frameBufStatEnable = 0;
+
 	fwidth = ((dec->picwidth + 15) & ~15);
 	fheight = ((dec->picheight + 15) & ~15);
 
@@ -631,7 +739,7 @@ decoder_start(struct decode *dec)
 				      (dec->virt_bsbuf_addr + STREAM_BUF_SIZE),
 				      dec->phy_bsbuf_addr, STREAM_FILL_SIZE,
 				      &eos, &fill_end_bs);
-			
+
 			if (err < 0) {
 				err_msg("dec_fill_bsbuffer failed\n");
 				return -1;
@@ -677,6 +785,57 @@ decoder_start(struct decode *dec)
 			return -1;
 		}
 
+		/* Frame Buffer Status */
+		if (decparam.extParam.frameBufStatEnable &&
+			outinfo.outputExtData.frameBufDataSize) {
+			int size;
+			u8 *frameBufferStatBuf;
+			size = (outinfo.outputExtData.frameBufDataSize+7)*8/8;
+
+			frameBufferStatBuf = malloc(size);
+			memset(frameBufferStatBuf, 0, size);
+			memcpy(frameBufferStatBuf, (void *)outinfo.outputExtData.frameBufStatDataAddr, size);
+			SaveFrameBufStat(frameBufferStatBuf, outinfo.outputExtData.frameBufDataSize);
+			free(frameBufferStatBuf);
+		}
+
+		/* Mb Param */
+		if (outinfo.indexFrameDecoded >= 0 &&
+			decparam.extParam.mbParamEnable &&
+			outinfo.outputExtData.mbParamDataSize) {
+			int size;
+			u8 *mbDataBuf;
+			int mbNumX = dec->picwidth / 16;
+
+			size = (outinfo.outputExtData.mbParamDataSize + 7) / 8 * 8;
+			mbDataBuf = malloc(size);
+			memset(mbDataBuf, 0, size);
+			memcpy(mbDataBuf, (void *)outinfo.outputExtData.mbParamDataAddr, size);
+			SaveMB_Para(mbDataBuf, outinfo.outputExtData.mbParamDataSize,
+						mbNumX, decIndex);
+			free(mbDataBuf);
+		}
+
+		/* Motion Vector */
+		if (outinfo.indexFrameDecoded >= 0 &&
+			decparam.extParam.mvReportEnable &&
+			outinfo.outputExtData.mvDataSize) {
+			int size;
+			u8 *mvDataBuf;
+			int mbNumX = dec->picwidth / 16;
+			size = (outinfo.outputExtData.mvDataSize+7)/8*8;
+			size = size*outinfo.outputExtData.mvNumPerMb*4;
+			mvDataBuf = malloc(size);
+			memset(mvDataBuf, 0, size);
+			memcpy(mvDataBuf, (void *)outinfo.outputExtData.mvDataAddr, size);
+			SaveMvPara(mvDataBuf, outinfo.outputExtData.mvDataSize,
+				   outinfo.outputExtData.mvNumPerMb,
+				   mbNumX, decIndex);
+			free(mvDataBuf);
+		}
+
+		decIndex++;
+
 		if (outinfo.indexFrameDisplay == -1)
 			decodefinish = 1;
 		else if ((outinfo.indexFrameDisplay > dec->fbcount) &&
@@ -1040,6 +1199,80 @@ decoder_parse(struct decode *dec)
 		return -1;
 	}
 
+	if (initinfo.streamInfoObtained) {
+		switch (dec->cmdl->format) {
+		case STD_AVC:
+			info_msg("H.264 Profile: %d Level: %d FrameMbsOnlyFlag: %d\n",
+				initinfo.profile, initinfo.level, initinfo.interlace);
+
+			if (initinfo.aspectRateInfo) {
+				int aspect_ratio_idc;
+				int sar_width, sar_height;
+
+				if ((initinfo.aspectRateInfo >> 16) == 0) {
+					aspect_ratio_idc = (initinfo.aspectRateInfo & 0xFF);
+					info_msg("aspect_ratio_idc: %d\n", aspect_ratio_idc);
+				} else {
+					sar_width = (initinfo.aspectRateInfo >> 16);
+					sar_height = (initinfo.aspectRateInfo & 0xFFFF);
+					info_msg("sar_width: %d\nsar_height: %d",
+						sar_width, sar_height);
+				}
+			} else {
+				info_msg("Aspect Ratio is not present.\n");
+			}
+
+			break;
+		case STD_VC1:
+			if (initinfo.profile == 0)
+				info_msg("VC1 Profile: Simple\n");
+			else if (initinfo.profile == 1)
+				info_msg("VC1 Profile: Main\n");
+			else if (initinfo.profile == 2)
+				info_msg("VC1 Profile: Advanced\n");
+
+			info_msg("Level: %d Interlace: %d PSF: %d\n",
+				initinfo.level, initinfo.interlace, initinfo.vc1_psf);
+
+			if (initinfo.aspectRateInfo)
+				info_msg("Aspect Ratio [X, Y]:[%3d, %3d]\n",
+						(initinfo.aspectRateInfo >> 8) & 0xff,
+						(initinfo.aspectRateInfo) & 0xff);
+			else
+				info_msg("Aspect Ratio is not present.\n");
+
+			break;
+		case STD_MPEG2:
+			info_msg("Mpeg2 Profile: %d Level: %d Progressive Sequence Flag: %d\n",
+				initinfo.profile, initinfo.level, initinfo.interlace);
+			/*
+			 * Profile: 3'b101: Simple, 3'b100: Main, 3'b011: SNR Scalable,
+			 * 3'b10: Spatially Scalable, 3'b001: High
+			 * Level: 4'b1010: Low, 4'b1000: Main, 4'b0110: High 1440, 4'b0100: High
+			 */
+			if (initinfo.aspectRateInfo)
+				info_msg("Aspect Ratio Table index: %d\n", initinfo.aspectRateInfo);
+			else
+				info_msg("Aspect Ratio is not present.\n");
+			break;
+
+		case STD_MPEG4:
+			info_msg("Mpeg4 Profile: %d Level: %d Interlaced: %d\n",
+				initinfo.profile, initinfo.level, initinfo.interlace);
+			/*
+			 * Profile: 8'b00000000: SP, 8'b00010001: ASP
+			 * Level: 4'b0000: L0, 4'b0001: L1, 4'b0010: L2, 4'b0011: L3, ...
+			 * SP: 1/2/3/4a/5/6, ASP: 0/1/2/3/4/5
+			 */
+			if (initinfo.aspectRateInfo)
+				info_msg("Aspect Ratio Table index: %d\n", initinfo.aspectRateInfo);
+			else
+				info_msg("Aspect Ratio is not present.\n");
+
+			break;
+		}
+	}
+
 	info_msg("Decoder: width = %d, height = %d, fps = %lu, count = %u\n",
 			initinfo.picWidth, initinfo.picHeight,
 			initinfo.frameRateInfo,
@@ -1148,7 +1381,7 @@ void decoder_close(struct decode *dec)
 		if (ret != RETCODE_SUCCESS)
 			err_msg("vpu_DecClose failed\n");
 	}
-}		
+}
 
 int
 decode_test(void *arg)
diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index 35ffccb..7dff100 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -321,6 +321,7 @@ main(int argc, char *argv[])
 		goto usage;
 	}
 
+	info_msg("VPU test program built on %s %s\n", __DATE__, __TIME__);
 	sigemptyset(&sigset);
 	sigaddset(&sigset, SIGINT);
 	pthread_sigmask(SIG_BLOCK, &sigset, NULL);
@@ -328,16 +329,16 @@ main(int argc, char *argv[])
 
 	framebuf_init();
 
-	err = IOSystemInit(NULL);
+	err = vpu_Init(NULL);
 	if (err) {
-		err_msg("IOSystemInit failure\n");
+		err_msg("VPU Init Failure.\n");
 		return -1;
 	}
 
 	err = vpu_GetVersionInfo(&ver);
 	if (err) {
 		err_msg("Cannot get version info\n");
-		IOSystemShutdown();
+		vpu_UnInit();
 		return -1;
 	}
 
@@ -352,7 +353,7 @@ main(int argc, char *argv[])
 				get_arg(input_arg[i].line, &nargc, pargv);
 				err = parse_args(nargc, pargv, i);
 				if (err) {
-					IOSystemShutdown();
+					vpu_UnInit();
 					goto usage;
 				}
 			}
@@ -381,7 +382,7 @@ main(int argc, char *argv[])
 			get_arg(input_arg[0].line, &nargc, pargv);
 			err = parse_args(nargc, pargv, 0);
 			if (err) {
-				IOSystemShutdown();
+				vpu_UnInit();
 				goto usage;
 			}
 		}
@@ -416,7 +417,7 @@ main(int argc, char *argv[])
 		}
 	}
 
-	IOSystemShutdown();
+	vpu_UnInit();
 	return ret;
 
 usage:
-- 
1.8.0

