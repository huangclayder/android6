From 7bedbb2c7e40d324d409e26057ea7d35b15fb003 Mon Sep 17 00:00:00 2001
From: Hongzhang Yang <Hongzhang.Yang@freescale.com>
Date: Mon, 3 Dec 2012 15:39:16 +0800
Subject: [PATCH 371/505] ENGR00235538 Improve multi-thread VPU unit test

In multi-thread (of instances) use case, vpu_Init/vpu_UnInit can be
called in each instance, instead of some common place. In this case,
global variables are not safely initialized and have concurrency among
threads.

Add this usecase in VPU unit test (each thread has 0-100ms initial delay
to test concurrency of vpu_Init/vpu_UnInit).

Signed-off-by: Hongzhang Yang <Hongzhang.Yang@freescale.com>
---
 test/mxc_vpu_test/dec.c       | 24 ++++++++++++++++++++++++
 test/mxc_vpu_test/enc.c       | 24 ++++++++++++++++++++++++
 test/mxc_vpu_test/loopback.c  | 24 ++++++++++++++++++++++++
 test/mxc_vpu_test/main.c      | 26 ++++++++++++++++++++++++++
 test/mxc_vpu_test/transcode.c | 24 ++++++++++++++++++++++++
 5 files changed, 122 insertions(+)

diff --git a/test/mxc_vpu_test/dec.c b/test/mxc_vpu_test/dec.c
index 77da8a6..ab2641f 100644
--- a/test/mxc_vpu_test/dec.c
+++ b/test/mxc_vpu_test/dec.c
@@ -2131,6 +2131,27 @@ decode_test(void *arg)
 	struct decode *dec;
 	int ret, eos = 0, fill_end_bs = 0, fillsize = 0;
 
+#ifndef COMMON_INIT
+	vpu_versioninfo ver;
+	ret = vpu_Init(NULL);
+	if (ret) {
+		err_msg("VPU Init Failure.\n");
+		return -1;
+	}
+
+	ret = vpu_GetVersionInfo(&ver);
+	if (ret) {
+		err_msg("Cannot get version info, err:%d\n", ret);
+		vpu_UnInit();
+		return -1;
+	}
+
+	info_msg("VPU firmware version: %d.%d.%d_r%d\n", ver.fw_major, ver.fw_minor,
+						ver.fw_release, ver.fw_code);
+	info_msg("VPU library version: %d.%d.%d\n", ver.lib_major, ver.lib_minor,
+						ver.lib_release);
+#endif
+
 	vpu_v4l_performance_test = 0;
 
 	dec = (struct decode *)calloc(1, sizeof(struct decode));
@@ -2257,6 +2278,9 @@ err:
 	IOFreeVirtMem(&mem_desc);
 	IOFreePhyMem(&mem_desc);
 	free(dec);
+#ifndef COMMON_INIT
+	vpu_UnInit();
+#endif
 	return ret;
 }
 
diff --git a/test/mxc_vpu_test/enc.c b/test/mxc_vpu_test/enc.c
index 479f4a6..b59d281 100644
--- a/test/mxc_vpu_test/enc.c
+++ b/test/mxc_vpu_test/enc.c
@@ -1099,6 +1099,27 @@ encode_test(void *arg)
 	struct encode *enc;
 	int ret = 0;
 
+#ifndef COMMON_INIT
+	vpu_versioninfo ver;
+	ret = vpu_Init(NULL);
+	if (ret) {
+		err_msg("VPU Init Failure.\n");
+		return -1;
+	}
+
+	ret = vpu_GetVersionInfo(&ver);
+	if (ret) {
+		err_msg("Cannot get version info, err:%d\n", ret);
+		vpu_UnInit();
+		return -1;
+	}
+
+	info_msg("VPU firmware version: %d.%d.%d_r%d\n", ver.fw_major, ver.fw_minor,
+						ver.fw_release, ver.fw_code);
+	info_msg("VPU library version: %d.%d.%d\n", ver.lib_major, ver.lib_minor,
+						ver.lib_release);
+#endif
+
 	/* sleep some time so that we have time to start the server */
 	if (cmdl->dst_scheme == PATH_NET) {
 		sleep(10);
@@ -1189,6 +1210,9 @@ err:
 	IOFreeVirtMem(&mem_desc);
 	IOFreePhyMem(&mem_desc);
 	free(enc);
+#ifndef COMMON_INIT
+	vpu_UnInit();
+#endif
 	return ret;
 }
 
diff --git a/test/mxc_vpu_test/loopback.c b/test/mxc_vpu_test/loopback.c
index b1d0e20..7b40e25 100644
--- a/test/mxc_vpu_test/loopback.c
+++ b/test/mxc_vpu_test/loopback.c
@@ -356,6 +356,27 @@ encdec_test(void *arg)
 	vpu_mem_desc	slice_mem_desc = {0};
 	int ret, i;
 
+#ifndef COMMON_INIT
+	vpu_versioninfo ver;
+	ret = vpu_Init(NULL);
+	if (ret) {
+		err_msg("VPU Init Failure.\n");
+		return -1;
+	}
+
+	ret = vpu_GetVersionInfo(&ver);
+	if (ret) {
+		err_msg("Cannot get version info, err:%d\n", ret);
+		vpu_UnInit();
+		return -1;
+	}
+
+	info_msg("VPU firmware version: %d.%d.%d_r%d\n", ver.fw_major, ver.fw_minor,
+						ver.fw_release, ver.fw_code);
+	info_msg("VPU library version: %d.%d.%d\n", ver.lib_major, ver.lib_minor,
+						ver.lib_release);
+#endif
+
 	/* allocate memory for must remember stuff */
 	enc = (struct encode *)calloc(1, sizeof(struct encode));
 	if (enc == NULL) {
@@ -542,6 +563,9 @@ err:
 	IOFreeVirtMem(&enc_mem_desc);
 	IOFreePhyMem(&enc_mem_desc);
 	free(enc);
+#ifndef COMMON_INIT
+	vpu_UnInit();
+#endif
 	return 0;
 }
 
diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index a38b233..8366828 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -25,6 +25,9 @@
 #include <getopt.h>
 #include "vpu_test.h"
 
+#define COMMON_INIT
+#define ONE_FRAME_INTERV 100000 // 100 ms
+
 char *usage = "Usage: ./mxc_vpu_test.out -D \"<decode options>\" "\
 	       "-E \"<encode options>\" "\
 	       "-L \"<loopback options>\" -C <config file> "\
@@ -465,6 +468,10 @@ main(int argc, char *argv[])
 	pthread_t sigtid;
 	vpu_versioninfo ver;
 
+#ifndef COMMON_INIT
+	srand((unsigned)time(0));     // init seed of rand()
+#endif
+
 	dbg_env=getenv("VPU_TEST_DBG");
 	if (dbg_env)
 		vpu_test_dbg_level = atoi(dbg_env);
@@ -490,6 +497,7 @@ main(int argc, char *argv[])
 
 	framebuf_init();
 
+#ifdef COMMON_INIT
 	err = vpu_Init(NULL);
 	if (err) {
 		err_msg("VPU Init Failure.\n");
@@ -507,9 +515,25 @@ main(int argc, char *argv[])
 						ver.fw_release, ver.fw_code);
 	info_msg("VPU library version: %d.%d.%d\n", ver.lib_major, ver.lib_minor,
 						ver.lib_release);
+#else
+	// just to enable cpu_is_xx() to be used in command line parsing
+	err = vpu_Init(NULL);
+	if (err) {
+		err_msg("VPU Init Failure.\n");
+		return -1;
+	}
+
+	vpu_UnInit();
+
+#endif
 
 	if (instance > 1) {
 		for (i = 0; i < instance; i++) {
+#ifndef COMMON_INIT
+			/* sleep roughly a frame interval to test multi-thread race
+			   especially vpu_Init/vpu_UnInit */
+			usleep((int)(rand()%ONE_FRAME_INTERV));
+#endif
 			if (using_config_file == 0) {
 				get_arg(input_arg[i].line, &nargc, pargv);
 				err = parse_args(nargc, pargv, i);
@@ -580,7 +604,9 @@ main(int argc, char *argv[])
 		}
 	}
 
+#ifdef COMMON_INIT
 	vpu_UnInit();
+#endif
 	return ret;
 
 usage:
diff --git a/test/mxc_vpu_test/transcode.c b/test/mxc_vpu_test/transcode.c
index b40dd30..1c049d9 100644
--- a/test/mxc_vpu_test/transcode.c
+++ b/test/mxc_vpu_test/transcode.c
@@ -1159,6 +1159,27 @@ transcode_test(void *arg)
         vpu_mem_desc enc_scratch_mem_desc = {0};
         struct encode *enc;
 
+#ifndef COMMON_INIT
+	vpu_versioninfo ver;
+	ret = vpu_Init(NULL);
+	if (ret) {
+		err_msg("VPU Init Failure.\n");
+		return -1;
+	}
+
+	ret = vpu_GetVersionInfo(&ver);
+	if (ret) {
+		err_msg("Cannot get version info, err:%d\n", ret);
+		vpu_UnInit();
+		return -1;
+	}
+
+	info_msg("VPU firmware version: %d.%d.%d_r%d\n", ver.fw_major, ver.fw_minor,
+						ver.fw_release, ver.fw_code);
+	info_msg("VPU library version: %d.%d.%d\n", ver.lib_major, ver.lib_minor,
+						ver.lib_release);
+#endif
+
 	dec = (struct decode *)calloc(1, sizeof(struct decode));
 	if (dec == NULL) {
 		err_msg("Failed to allocate decode structure\n");
@@ -1339,5 +1360,8 @@ err:
 	IOFreeVirtMem(&mem_desc);
 	IOFreePhyMem(&mem_desc);
 	free(dec);
+#ifndef COMMON_INIT
+	vpu_UnInit();
+#endif
 	return ret;
 }
-- 
1.8.0

