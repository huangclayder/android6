From 8ab5010bfb5ba42245131579c73327b4b8d9b145 Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Tue, 17 Jan 2012 15:46:17 +0800
Subject: [PATCH 271/505] ENGR00172204 vpu: Use environment variable to set
 debug in test

Use VPU_TEST_DBG environment variable to control debug level in
unit test.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 test/mxc_vpu_test/main.c     | 12 ++++++++++--
 test/mxc_vpu_test/vpu_test.h | 10 +++++-----
 2 files changed, 15 insertions(+), 7 deletions(-)

diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index 032b984..9ca80d0 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2011 Freescale Semiconductor, Inc.
+ * Copyright 2004-2012 Freescale Semiconductor, Inc.
  *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  */
@@ -137,6 +137,8 @@ static struct input_argument input_arg[MAX_NUM_INSTANCE];
 static int instance;
 static int using_config_file;
 
+int vpu_test_dbg_level;
+
 int decode_test(void *arg);
 int encode_test(void *arg);
 int encdec_test(void *arg);
@@ -384,10 +386,16 @@ int
 main(int argc, char *argv[])
 {
 	int err, nargc, i, ret = 0;
-	char *pargv[32] = {0};
+	char *pargv[32] = {0}, *dbg_env;
 	pthread_t sigtid;
 	vpu_versioninfo ver;
 
+	dbg_env=getenv("VPU_TEST_DBG");
+	if (dbg_env)
+		vpu_test_dbg_level = atoi(dbg_env);
+	else
+		vpu_test_dbg_level = 0;
+
 	err = parse_main_args(argc, argv);
 	if (err) {
 		goto usage;
diff --git a/test/mxc_vpu_test/vpu_test.h b/test/mxc_vpu_test/vpu_test.h
index 2f58f08..c5790dc 100644
--- a/test/mxc_vpu_test/vpu_test.h
+++ b/test/mxc_vpu_test/vpu_test.h
@@ -25,20 +25,20 @@
 #include "vpu_lib.h"
 #include "vpu_io.h"
 
-#define	DEBUG_LEVEL	0
+extern int vpu_test_dbg_level;
 
-#define dprintf(level, fmt, arg...)     if (DEBUG_LEVEL >= level) \
+#define dprintf(level, fmt, arg...)     if (vpu_test_dbg_level >= level) \
         printf("[DEBUG]\t%s:%d " fmt, __FILE__, __LINE__, ## arg)
 
-#define err_msg(fmt, arg...) do { if (DEBUG_LEVEL >= 1)		\
+#define err_msg(fmt, arg...) do { if (vpu_test_dbg_level >= 1)		\
 	printf("[ERR]\t%s:%d " fmt,  __FILE__, __LINE__, ## arg); else \
 	printf("[ERR]\t" fmt, ## arg);	\
 	} while (0)
-#define info_msg(fmt, arg...) do { if (DEBUG_LEVEL >= 1)		\
+#define info_msg(fmt, arg...) do { if (vpu_test_dbg_level >= 1)		\
 	printf("[INFO]\t%s:%d " fmt,  __FILE__, __LINE__, ## arg); else \
 	printf("[INFO]\t" fmt, ## arg);	\
 	} while (0)
-#define warn_msg(fmt, arg...) do { if (DEBUG_LEVEL >= 1)		\
+#define warn_msg(fmt, arg...) do { if (vpu_test_dbg_level >= 1)		\
 	printf("[WARN]\t%s:%d " fmt,  __FILE__, __LINE__, ## arg); else \
 	printf("[WARN]\t" fmt, ## arg);	\
 	} while (0)
-- 
1.8.0

