From 73215a9c1e6a96c0c0a319b7321e8683c920d4fd Mon Sep 17 00:00:00 2001
From: Jason Chen <b02280@freescale.com>
Date: Tue, 8 Nov 2011 10:11:29 +0800
Subject: [PATCH 239/505] ENGR00161600 ipu3 dev test: add command line support

Signed-off-by: Hake Huang <b20222@freescale.com>
Acked-by: Jason Chen <b02280@freescale.com>
---
 test/mxc_ipudev_test/mxc_ipudev_test.c |   7 ++
 test/mxc_ipudev_test/mxc_ipudev_test.h |   2 +-
 test/mxc_ipudev_test/utils.c           | 190 +++++++++++++++++++++++++++++++++
 3 files changed, 198 insertions(+), 1 deletion(-)

diff --git a/test/mxc_ipudev_test/mxc_ipudev_test.c b/test/mxc_ipudev_test/mxc_ipudev_test.c
index 7f916f7..2486da5 100644
--- a/test/mxc_ipudev_test/mxc_ipudev_test.c
+++ b/test/mxc_ipudev_test/mxc_ipudev_test.c
@@ -44,6 +44,7 @@ void ctrl_c_handler(int signum, siginfo_t *info, void *myact)
 int process_cmdline(int argc, char **argv, ipu_test_handle_t *test_handle)
 {
 	int i;
+	int pre_set = 0;
 	struct ipu_task *t = &test_handle->task;
 
 	if (argc == 1)
@@ -51,7 +52,13 @@ int process_cmdline(int argc, char **argv, ipu_test_handle_t *test_handle)
 
 	for (i = 1; i < argc; i++)
 		if (strcmp(argv[i], "-C") == 0)
+		{
+			pre_set = 1;
 			parse_config_file(argv[++i], test_handle);
+    }
+
+	 if(pre_set == 0)
+		 parse_cmd_input(argc,argv,test_handle);
 
 	if ((t->input.width == 0) || (t->input.height == 0) ||
 			(t->output.width == 0) ||
diff --git a/test/mxc_ipudev_test/mxc_ipudev_test.h b/test/mxc_ipudev_test/mxc_ipudev_test.h
index 6ccfbcf..6841a82 100644
--- a/test/mxc_ipudev_test/mxc_ipudev_test.h
+++ b/test/mxc_ipudev_test/mxc_ipudev_test.h
@@ -33,5 +33,5 @@ typedef struct {
 } ipu_test_handle_t;
 
 extern int parse_config_file(char *file_name, ipu_test_handle_t *test_handle);
-
+extern int parse_cmd_input(int argc, char ** argv, ipu_test_handle_t *test_handle);
 #endif
diff --git a/test/mxc_ipudev_test/utils.c b/test/mxc_ipudev_test/utils.c
index 3c8e11e..7836f02 100644
--- a/test/mxc_ipudev_test/utils.c
+++ b/test/mxc_ipudev_test/utils.c
@@ -24,10 +24,38 @@
 #include <stdint.h>
 #include <string.h>
 #include <fcntl.h>
+#include <unistd.h>
+
 #include "mxc_ipudev_test.h"
 
 #define MAX_PATH	128
 
+#define deb_msg 1
+#if deb_msg
+#define deb_printf printf
+#else
+#define deb_printf
+#endif
+
+char * options = "p:d:t:c:l:i:o:O:s:f:h";
+
+void util_help()
+{
+ printf("options: \n\r");
+ printf("p:d:t:c:l:i:o:O:s:f:h \r\n");
+ printf("p: priority\r\n");
+ printf("d: tak id\r\n");
+ printf("t: timeout\r\n");
+ printf("c: frame count\r\n");
+ printf("l: loop count\r\n");
+ printf("i: input width,height,format,crop pos.x, pos.y,w,h,deinterlace.enable,deinterlace.motion\r\n");
+ printf("o: overlay enable,w,h,format,crop x,y,width,height,alpha mode,alpha value,colorkey enable, color key value\r\n");
+ printf("O: output width,height,format,rotation, crop pos.x,pos.y,w,h\r\n");
+ printf("s: output to fb enable\r\n");
+ printf("f: output file name\r\n");
+}
+
+
 char * skip_unwanted(char *ptr)
 {
 	int i = 0;
@@ -589,3 +617,165 @@ int parse_config_file(char *file_name, ipu_test_handle_t *test_handle)
 	return 0;
 }
 
+int parse_cmd_input(int argc, char ** argv, ipu_test_handle_t *test_handle)
+{
+ char opt;
+ char fourcc[5];
+ struct ipu_task *t = &test_handle->task;
+
+ printf("pass cmdline %d, %s\n", argc, argv[0]);
+
+ /*default settings*/
+ t->priority = 0;
+ t->task_id = 0;
+ t->timeout = 1000;
+ test_handle->fcount = 50;
+ test_handle->loop_cnt = 1;
+ t->input.width = 320;
+ t->input.height = 240;
+ t->input.format =  v4l2_fourcc('I', '4','2', '0');
+ t->input.crop.pos.x = 0;
+ t->input.crop.pos.y = 0;
+ t->input.crop.w = 0;
+ t->input.crop.h = 0;
+ t->input.deinterlace.enable = 0;
+ t->input.deinterlace.motion = 0;
+
+ t->overlay_en = 0;
+ t->overlay.width = 320;
+ t->overlay.height = 240;
+ t->overlay.format = v4l2_fourcc('I', '4','2', '0');
+ t->overlay.crop.pos.x = 0;
+ t->overlay.crop.pos.y = 0;
+ t->overlay.crop.w = 0;
+ t->overlay.crop.h = 0;
+ t->overlay.alpha.mode = 0;
+ t->overlay.alpha.gvalue = 0;
+ t->overlay.colorkey.enable = 0;
+ t->overlay.colorkey.value = 0x555555;
+
+ t->output.width = 1024;
+ t->output.height = 768;
+ t->output.format = v4l2_fourcc('U', 'Y','V', 'Y');
+ t->output.rotate = 0;
+ t->output.crop.pos.x = 0;
+ t->output.crop.pos.y = 0;
+ t->output.crop.w = 0;
+ t->output.crop.h = 0;
+
+ test_handle->show_to_fb = 1;
+ memcpy(test_handle->outfile,"ipu0-1st-ovfb",13);
+
+ while((opt = getopt(argc, argv, options)) > 0)
+ {
+  deb_printf("new option : %c \n", opt);
+  switch(opt)
+  {
+   case 'p':/*mode*/
+     if(NULL == optarg)
+       break;
+      t->priority = strtol(optarg, NULL, 10);
+      deb_printf("mod set %d \n",t->priority);
+      break;
+   case 'd': /*frame count*/
+     if(NULL == optarg)
+       break;
+      t->task_id = strtol(optarg, NULL, 10);
+      deb_printf("frame count set %d \n",t->task_id);
+      break;
+	 case 't':
+     if(NULL == optarg)
+       break;
+	   t->timeout = strtol(optarg, NULL, 10);
+   case 'c':
+     if(NULL == optarg)
+       break;
+			 test_handle->fcount = strtol(optarg, NULL, 10);
+      deb_printf("frame count set %d \n",test_handle->fcount);
+      break;
+	 case 'l':
+     if(NULL == optarg)
+       break;
+			test_handle->loop_cnt = strtol(optarg, NULL, 10);
+      deb_printf("loop count set %d \n",test_handle->loop_cnt);
+			break;
+   case 'i': /*input param*/
+     if(NULL == optarg)
+       break;
+      memset(fourcc,0,sizeof(fourcc));
+      sscanf(optarg,"%d,%d,%c%c%c%c,%d,%d,%d,%d,%d,%d",
+			 &(t->input.width),&(t->input.height),
+			 &(fourcc[0]),&(fourcc[1]), &(fourcc[2]), &(fourcc[3]),
+			 &(t->input.crop.pos.x),&(t->input.crop.pos.y),
+			 &(t->input.crop.w), &(t->input.crop.h),
+			 (int *)&(t->input.deinterlace.enable), (int *)&(t->input.deinterlace.motion));
+       t->input.format = v4l2_fourcc(fourcc[0], fourcc[1],
+       fourcc[2], fourcc[3]);
+      deb_printf("input w=%d,h=%d,fucc=%s,cpx=%d,cpy=%d,cpw=%d,cph=%d,de=%d,dm=%d\n",
+			 t->input.width,t->input.height,
+			 fourcc,t->input.crop.pos.x,t->input.crop.pos.y,
+			 t->input.crop.w, t->input.crop.h,
+			 t->input.deinterlace.enable, t->input.deinterlace.motion);
+      break;
+   case 'o':/*overlay setting*/
+     if(NULL == optarg)
+       break;
+		 memset(fourcc,0,sizeof(fourcc));
+     sscanf(optarg,"%d,%d,%d,%c%c%c%c,%d,%d,%d,%d,%d,%d,%d,%x",
+			 (int *)&(t->overlay_en),&(t->overlay.width),&(t->overlay.height),
+			 &(fourcc[0]),&(fourcc[1]), &(fourcc[2]), &(fourcc[3]),
+			 &(t->overlay.crop.pos.x),&(t->overlay.crop.pos.y),
+			 &(t->overlay.crop.w), &(t->overlay.crop.h),
+			 (int *)&(t->overlay.alpha.mode), (int *)&(t->overlay.alpha.gvalue),
+			 (int *)&(t->overlay.colorkey.enable),&(t->overlay.colorkey.value));
+       t->overlay.format = v4l2_fourcc(fourcc[0], fourcc[1],
+       fourcc[2], fourcc[3]);
+      deb_printf("overlay en=%d,w=%d,h=%d,fourcc=%c%c%c%c,cpx=%d,\
+cpy=%d,cw=%d,ch=%d,am=%c,ag=%d,ce=%d,cv=%x\n",
+			 t->overlay_en, t->overlay.width,t->overlay.height,
+			 fourcc[0],fourcc[1], fourcc[2], fourcc[3],
+			 t->overlay.crop.pos.x,t->overlay.crop.pos.y,
+			 t->overlay.crop.w, t->overlay.crop.h,
+			 t->overlay.alpha.mode, t->overlay.alpha.gvalue,
+			 t->overlay.colorkey.enable,t->overlay.colorkey.value);
+      break;
+   case 'O':/*output setting*/
+		 memset(fourcc,0,sizeof(fourcc));
+     if(NULL == optarg)
+       break;
+			 sscanf(optarg,"%d,%d,%c%c%c%c,%d,%d,%d,%d,%d",
+       &(t->output.width),&(t->output.height),
+			 &(fourcc[0]),&(fourcc[1]), &(fourcc[2]), &(fourcc[3]),
+			 (int *)&(t->output.rotate),&(t->output.crop.pos.x),
+			 &(t->output.crop.pos.y),&(t->output.crop.w),
+			 &(t->output.crop.h));
+       t->output.format = v4l2_fourcc(fourcc[0],
+       fourcc[1],fourcc[2], fourcc[3]);
+			 deb_printf(optarg,"%d,%d,%s,%d,%d,%d,%d,%d\n",
+       t->output.width,t->output.height,
+			 fourcc,t->output.rotate,t->output.crop.pos.x,
+			 t->output.crop.pos.y,t->output.crop.w,
+			 t->output.crop.h);
+       break;
+   case 's':/*fb setting*/
+     if(NULL == optarg)
+       break;
+			 test_handle->show_to_fb = strtol(optarg, NULL, 10);
+       deb_printf("show to fb %d\n", test_handle->show_to_fb);
+      break;
+   case 'f':/*output0 file name*/
+     if(NULL == optarg)
+       break;
+			memset(test_handle->outfile,0,sizeof(test_handle->outfile));
+      sscanf(optarg,"%s",test_handle->outfile);
+      deb_printf("output file name %s \n",test_handle->outfile);
+      break;
+	case 'h':
+	    util_help();
+			break;
+   default:
+      return 0;
+  }
+ }
+ return 0;
+}
-- 
1.8.0

