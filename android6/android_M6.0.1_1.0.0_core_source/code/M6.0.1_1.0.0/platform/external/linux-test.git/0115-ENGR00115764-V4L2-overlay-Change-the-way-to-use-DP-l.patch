From 7e4cb28be3736af3ff2527e3a42bbd715c010283 Mon Sep 17 00:00:00 2001
From: Liu Ying <b17645@freescale.com>
Date: Fri, 21 Aug 2009 16:06:30 +0800
Subject: [PATCH 115/505] ENGR00115764 V4L2 overlay:Change the way to use DP
 local alpha feature

Use MXCFB_SET_LOC_ALP_BUF ioctl to support DP local alpha feature.

Signed-off-by: Liu Ying <b17645@freescale.com>
(cherry picked from commit 8bbc34dd447948e09b170cbabd43e22fe74c078c)
---
 test/mxc_v4l2_test/mxc_v4l2_overlay.c | 155 ++++++++++++++++++++++++++++++----
 1 file changed, 137 insertions(+), 18 deletions(-)

diff --git a/test/mxc_v4l2_test/mxc_v4l2_overlay.c b/test/mxc_v4l2_test/mxc_v4l2_overlay.c
index b606a6d..f9a0c55 100644
--- a/test/mxc_v4l2_test/mxc_v4l2_overlay.c
+++ b/test/mxc_v4l2_test/mxc_v4l2_overlay.c
@@ -86,7 +86,10 @@ int g_camera_color = 0;
 int g_camera_framerate = 30;
 int g_capture_mode = 0;
 int g_alpha_mode = 0;
-char *alpha_buf = NULL;
+char *alpha_buf0 = NULL;
+char *alpha_buf1 = NULL;
+unsigned long loc_alpha_phy_addr0;
+unsigned long loc_alpha_phy_addr1;
 int alpha_buf_size = 0;
 int ctrl_c_rev = 0;
 
@@ -118,11 +121,17 @@ mxc_v4l_overlay_test(int timeout)
         int i;
         int overlay = 1;
         struct v4l2_control ctl;
+	char fb_device_2[100] = "/dev/fb2";
+	int fd_fb_2 = 0;
 
-	/* The window shows graphics and video planes. */
-	if (g_alpha_mode)
-		fill_alpha_buffer(alpha_buf, 0, 0,
+	if (g_alpha_mode) {
+		/* The window shows graphics and video planes. */
+		fill_alpha_buffer(alpha_buf0, 0, 0,
+			  g_display_width, g_display_height, 0x80);
+
+		fill_alpha_buffer(alpha_buf1, 0, 0,
 			  g_display_width, g_display_height, 0x80);
+	}
 
         if (ioctl(fd_v4l, VIDIOC_OVERLAY, &overlay) < 0)
         {
@@ -130,6 +139,27 @@ mxc_v4l_overlay_test(int timeout)
 		return TFAIL;
         }
 
+	if (g_alpha_mode) {
+		if ((fd_fb_2 = open(fb_device_2, O_RDWR)) < 0) {
+			printf("Unable to open frame buffer 2\n");
+			return TFAIL;
+		}
+
+		if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALP_BUF, &loc_alpha_phy_addr0) < 0) {
+			printf("Set local alpha buf failed\n");
+			close(fd_fb_2);
+			return TFAIL;
+		}
+
+		sleep(5);
+
+		if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALP_BUF, &loc_alpha_phy_addr1) < 0) {
+			printf("Set local alpha buf failed\n");
+			close(fd_fb_2);
+			return TFAIL;
+		}
+	}
+
         for (i = 0; i < 3 ; i++) {
                 // flash a frame
                 ctl.id = V4L2_CID_PRIVATE_BASE + 1;
@@ -145,9 +175,45 @@ mxc_v4l_overlay_test(int timeout)
 		while (ctrl_c_rev == 0) {
 			/*
 			 * The middle quarter window shows
+			 * video plane only.
+			 */
+			fill_alpha_buffer(alpha_buf0,
+					  g_display_width/4,
+					  g_display_height/4,
+					  3*g_display_width/4,
+					  3*g_display_height/4,
+					  0x00);
+			sleep(5);
+
+			if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALP_BUF, &loc_alpha_phy_addr0) < 0) {
+				printf("Set local alpha buf failed\n");
+				close(fd_fb_2);
+				return TFAIL;
+			}
+
+			/*
+			 * The middle quarter window shows
+			 * graphics plane only.
+			 */
+			fill_alpha_buffer(alpha_buf1,
+					  g_display_width/4,
+					  g_display_height/4,
+					  3*g_display_width/4,
+					  3*g_display_height/4,
+					  0xFF);
+			sleep(5);
+
+			if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALP_BUF, &loc_alpha_phy_addr1) < 0) {
+				printf("Set local alpha buf failed\n");
+				close(fd_fb_2);
+				return TFAIL;
+			}
+
+			/*
+			 * The middle quarter window shows
 			 * graphics and video planes.
 			 */
-			fill_alpha_buffer(alpha_buf,
+			fill_alpha_buffer(alpha_buf0,
 					  g_display_width/4,
 					  g_display_height/4,
 					  3*g_display_width/4,
@@ -155,11 +221,17 @@ mxc_v4l_overlay_test(int timeout)
 					  0x80);
 			sleep(5);
 
+			if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALP_BUF, &loc_alpha_phy_addr0) < 0) {
+				printf("Set local alpha buf failed\n");
+				close(fd_fb_2);
+				return TFAIL;
+			}
+
 			/*
 			 * The middle quarter window shows
 			 * video plane only.
 			 */
-			fill_alpha_buffer(alpha_buf,
+			fill_alpha_buffer(alpha_buf1,
 					  g_display_width/4,
 					  g_display_height/4,
 					  3*g_display_width/4,
@@ -167,17 +239,47 @@ mxc_v4l_overlay_test(int timeout)
 					  0x00);
 			sleep(5);
 
+			if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALP_BUF, &loc_alpha_phy_addr1) < 0) {
+				printf("Set local alpha buf failed\n");
+				close(fd_fb_2);
+				return TFAIL;
+			}
+
 			/*
 			 * The middle quarter window shows
-			 * video plane only.
+			 * graphics plane only.
 			 */
-			fill_alpha_buffer(alpha_buf,
+			fill_alpha_buffer(alpha_buf0,
 					  g_display_width/4,
 					  g_display_height/4,
 					  3*g_display_width/4,
 					  3*g_display_height/4,
 					  0xFF);
 			sleep(5);
+
+			if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALP_BUF, &loc_alpha_phy_addr0) < 0) {
+				printf("Set local alpha buf failed\n");
+				close(fd_fb_2);
+				return TFAIL;
+			}
+
+			/*
+			 * The middle quarter window shows
+			 * graphics and video planes.
+			 */
+			fill_alpha_buffer(alpha_buf1,
+					  g_display_width/4,
+					  g_display_height/4,
+					  3*g_display_width/4,
+					  3*g_display_height/4,
+					  0x80);
+			sleep(5);
+
+			if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALP_BUF, &loc_alpha_phy_addr1) < 0) {
+				printf("Set local alpha buf failed\n");
+				close(fd_fb_2);
+				return TFAIL;
+			}
 		}
 		goto out;
 	}
@@ -238,8 +340,11 @@ out:
 		return TFAIL;
         }
 
-	if (g_alpha_mode)
-		munmap((void *)alpha_buf, alpha_buf_size);
+	if (g_alpha_mode) {
+		munmap((void *)alpha_buf0, alpha_buf_size);
+		munmap((void *)alpha_buf1, alpha_buf_size);
+		close(fd_fb_2);
+	}
 
 	return 0;
 }
@@ -415,7 +520,6 @@ main(int argc, char **argv)
         struct mxcfb_color_key color_key;
         struct mxcfb_gbl_alpha g_alpha;
         struct mxcfb_loc_alpha l_alpha;
-	unsigned long loc_alpha_phy_addr;
 	int ret = 0;
 	struct sigaction act;
 
@@ -560,7 +664,8 @@ main(int argc, char **argv)
 			}
 
 			l_alpha.enable = 1;
-			l_alpha.alpha_phy_addr = 0;
+			l_alpha.alpha_phy_addr0 = 0;
+			l_alpha.alpha_phy_addr1 = 0;
 			if (ioctl(fd_fb_2, MXCFB_SET_LOC_ALPHA,
 				  &l_alpha) < 0) {
 				printf("Set local alpha failed\n");
@@ -568,18 +673,32 @@ main(int argc, char **argv)
 				close(fd_fb_0);
 				return TFAIL;
 			}
-			loc_alpha_phy_addr =
-				(unsigned long)(l_alpha.alpha_phy_addr);
+			loc_alpha_phy_addr0 =
+				(unsigned long)(l_alpha.alpha_phy_addr0);
+			loc_alpha_phy_addr1 =
+				(unsigned long)(l_alpha.alpha_phy_addr1);
 
 			alpha_buf_size = fb2_var.xres * fb2_var.yres;
 
-			alpha_buf = (char *)mmap(0, alpha_buf_size,
+			alpha_buf0 = (char *)mmap(0, alpha_buf_size,
+						 PROT_READ | PROT_WRITE,
+						 MAP_SHARED, fd_fb_2,
+						 loc_alpha_phy_addr0);
+			if ((int)alpha_buf0 == -1) {
+				printf("\nError: failed to map alpha buffer 0"
+				       " to memory.\n");
+				close(fd_fb_2);
+				close(fd_fb_0);
+				return TFAIL;
+			}
+			alpha_buf1 = (char *)mmap(0, alpha_buf_size,
 						 PROT_READ | PROT_WRITE,
 						 MAP_SHARED, fd_fb_2,
-						 loc_alpha_phy_addr);
-			if ((int)alpha_buf == -1) {
-				printf("\nError: failed to map alpha buffer"
+						 loc_alpha_phy_addr1);
+			if ((int)alpha_buf1 == -1) {
+				printf("\nError: failed to map alpha buffer 1"
 				       " to memory.\n");
+				munmap((void *)alpha_buf0, alpha_buf_size);
 				close(fd_fb_2);
 				close(fd_fb_0);
 				return TFAIL;
-- 
1.8.0

