From fc2e22bb93545b0646c4d5d31ed1a477c1238d70 Mon Sep 17 00:00:00 2001
From: Frank Li <Frank.Li@freescale.com>
Date: Mon, 3 Sep 2012 17:28:13 +0800
Subject: [PATCH 347/505] ENGR00222875-1 Lindent memtools

Lindent memtools

Signed-off-by: Frank Li <Frank.Li@freescale.com>
---
 test/memtool/memtool.c | 147 ++++++++++++++++++++++++-------------------------
 1 file changed, 72 insertions(+), 75 deletions(-)

diff --git a/test/memtool/memtool.c b/test/memtool/memtool.c
index 4d4ac71..ee468fa 100644
--- a/test/memtool/memtool.c
+++ b/test/memtool/memtool.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2006-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2006-2012 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
 /*
@@ -11,7 +11,6 @@
  * http://www.gnu.org/copyleft/gpl.html
  */
 
-
 #include <stddef.h>
 #include <stdio.h>
 #include <sys/types.h>
@@ -26,27 +25,25 @@ int g_is_write;
 uint32_t g_value = 0;
 uint32_t g_count = 1;
 
-int parse_cmdline(int argc, char ** argv)
+int parse_cmdline(int argc, char **argv)
 {
 	int cur_arg = 0;
-	char * str;
+	char *str;
 
 	if (argc < 2)
 		return -1;
 
 	cur_arg++;
-        if (strcmp(argv[cur_arg], "-8") == 0) {
+	if (strcmp(argv[cur_arg], "-8") == 0) {
 		cur_arg++;
-                g_size = 1;
-        }
-	else if (strcmp(argv[cur_arg], "-16") == 0) {
+		g_size = 1;
+	} else if (strcmp(argv[cur_arg], "-16") == 0) {
 		cur_arg++;
-                g_size = 2;
-        }
-	else if (strcmp(argv[cur_arg], "-32") == 0) {
+		g_size = 2;
+	} else if (strcmp(argv[cur_arg], "-32") == 0) {
 		cur_arg++;
-                g_size = 4;
-        }
+		g_size = 4;
+	}
 	if (cur_arg >= argc)
 		return -1;
 
@@ -54,7 +51,7 @@ int parse_cmdline(int argc, char ** argv)
 	if (!g_paddr)
 		return -1;
 
-	if ( str = strchr(argv[cur_arg], '=') ) {
+	if (str = strchr(argv[cur_arg], '=')) {
 		g_is_write = 1;
 		if (strlen(str) > 1) {
 			str++;
@@ -65,7 +62,7 @@ int parse_cmdline(int argc, char ** argv)
 	if (++cur_arg >= argc)
 		return -1;
 
-	if ((argv[cur_arg])[0] == '=' ) {
+	if ((argv[cur_arg])[0] == '=') {
 		g_is_write = 1;
 		if (strlen(argv[cur_arg]) > 1) {
 			(argv[cur_arg])++;
@@ -74,8 +71,7 @@ int parse_cmdline(int argc, char ** argv)
 				return -1;
 		}
 		g_value = strtoul(argv[cur_arg], NULL, 16);
-	}
-	else {
+	} else {
 		if (g_is_write)
 			g_value = strtoul(argv[cur_arg], NULL, 16);
 		else
@@ -84,77 +80,75 @@ int parse_cmdline(int argc, char ** argv)
 	return 0;
 }
 
-void read_mem(void * addr, uint32_t count, uint32_t size)
+void read_mem(void *addr, uint32_t count, uint32_t size)
 {
 	int i;
-	uint8_t * addr8 = addr;
-	uint16_t * addr16 = addr;
-	uint32_t * addr32 = addr;
-
-	switch (size)
-	{
-		case 1:
-			for (i = 0; i < count; i++) {
-				if ( (i % 16) == 0 )
-					printf("\n0x%08X: ", g_paddr);
-				printf(" %02X", addr8[i]);
-				g_paddr++;
-			}
-			break;
-		case 2:
-			for (i = 0; i < count; i++) {
-				if ( (i % 8) == 0 )
-					printf("\n0x%08X: ", g_paddr);
-				printf(" %04X", addr16[i]);
-				g_paddr += 2;
-			}
-			break;
-		case 4:
-			for (i = 0; i < count; i++) {
-				if ( (i % 4) == 0 )
-					printf("\n0x%08X: ", g_paddr);
-				printf(" %08X", addr32[i]);
-				g_paddr += 4;
-			}
-			break;
+	uint8_t *addr8 = addr;
+	uint16_t *addr16 = addr;
+	uint32_t *addr32 = addr;
+
+	switch (size) {
+	case 1:
+		for (i = 0; i < count; i++) {
+			if ((i % 16) == 0)
+				printf("\n0x%08X: ", g_paddr);
+			printf(" %02X", addr8[i]);
+			g_paddr++;
+		}
+		break;
+	case 2:
+		for (i = 0; i < count; i++) {
+			if ((i % 8) == 0)
+				printf("\n0x%08X: ", g_paddr);
+			printf(" %04X", addr16[i]);
+			g_paddr += 2;
+		}
+		break;
+	case 4:
+		for (i = 0; i < count; i++) {
+			if ((i % 4) == 0)
+				printf("\n0x%08X: ", g_paddr);
+			printf(" %08X", addr32[i]);
+			g_paddr += 4;
+		}
+		break;
 	}
 	printf("\n\n");
 
 }
 
-void write_mem(void * addr, uint32_t value, uint32_t size)
+void write_mem(void *addr, uint32_t value, uint32_t size)
 {
 	int i;
-	uint8_t * addr8 = addr;
-	uint16_t * addr16 = addr;
-	uint32_t * addr32 = addr;
-
-	switch (size)
-	{
-		case 1:
-			*addr8 = value;
-			break;
-		case 2:
-			*addr16 = value;
-			break;
-		case 4:
-			*addr32 = value;
-			break;
+	uint8_t *addr8 = addr;
+	uint16_t *addr16 = addr;
+	uint32_t *addr32 = addr;
+
+	switch (size) {
+	case 1:
+		*addr8 = value;
+		break;
+	case 2:
+		*addr16 = value;
+		break;
+	case 4:
+		*addr32 = value;
+		break;
 	}
 }
 
 int main(int argc, char **argv)
 {
 	int fd;
-	void * mem;
-	void * aligned_vaddr;
+	void *mem;
+	void *aligned_vaddr;
 	unsigned long aligned_paddr;
 	uint32_t aligned_size;
 
 	if (parse_cmdline(argc, argv)) {
-		printf("Usage:\n\n" \
-		       "Read memory: memtool [-8 | -16 | -32] <phys addr> <count>\n" \
-		       "Write memory: memtool [-8 | -16 | -32] <phys addr>=<value>\n\n" \
+		printf("Usage:\n\n"
+		       "Read memory: memtool [-8 | -16 | -32] <phys addr> <count>\n"
+		       "Write memory: memtool [-8 | -16 | -32] <phys addr>=<value>\n\n"
 		       "Default access size is 32-bit.\n\nAddress, count and value are all in hex.\n");
 		return 1;
 	}
@@ -167,26 +161,29 @@ int main(int argc, char **argv)
 	aligned_size = (aligned_size + 4096 - 1) & ~(4096 - 1);
 
 	if (g_is_write)
-		printf("Writing %d-bit value 0x%X to address 0x%08X\n", g_size*8, g_value, g_paddr);
+		printf("Writing %d-bit value 0x%X to address 0x%08X\n",
+		       g_size * 8, g_value, g_paddr);
 	else
-		printf("Reading 0x%X count starting at address 0x%08X\n", g_count, g_paddr);
+		printf("Reading 0x%X count starting at address 0x%08X\n",
+		       g_count, g_paddr);
 
 	if ((fd = open("/dev/mem", O_RDWR | O_SYNC, 0)) < 0)
 		return 1;
 
-	aligned_vaddr = mmap(NULL, aligned_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, aligned_paddr);
+	aligned_vaddr =
+	    mmap(NULL, aligned_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd,
+		 aligned_paddr);
 	if (aligned_vaddr == NULL) {
 		printf("Error mapping address\n");
 		close(fd);
 		return 1;
 	}
 
-	mem = (void *)((uint32_t)aligned_vaddr + (g_paddr - aligned_paddr));
+	mem = (void *)((uint32_t) aligned_vaddr + (g_paddr - aligned_paddr));
 
 	if (g_is_write) {
 		write_mem(mem, g_value, g_size);
-	}
-	else {
+	} else {
 		read_mem(mem, g_count, g_size);
 	}
 
-- 
1.8.0

