From bf0dcdb00d173c1fbbdd8aded299958d848063f5 Mon Sep 17 00:00:00 2001
From: William Lai <b04597@freescale.com>
Date: Thu, 6 Aug 2009 15:18:41 +0800
Subject: [PATCH 109/505] ENGR00114908 MX35 ASRC: Add clock source
 configuration option

The input and output clock sources can be freely configured by
passing two parameters to the ASRC  test application.
The command would be the following.
mxc_asrc_test.out -to <output sample rate> <origin.wav> <converted.wav>
<input clock source> <output clock source>

Signed-off-by: William Lai <b04597@freescale.com>
---
 test/mxc_asrc_test/mxc_asrc_test.c | 151 +++++++++++++++++++++++++++++++++++--
 1 file changed, 144 insertions(+), 7 deletions(-)

diff --git a/test/mxc_asrc_test/mxc_asrc_test.c b/test/mxc_asrc_test/mxc_asrc_test.c
index ef19801..ddf345e 100644
--- a/test/mxc_asrc_test/mxc_asrc_test.c
+++ b/test/mxc_asrc_test/mxc_asrc_test.c
@@ -59,12 +59,42 @@ static int output_done_bytes;
 static int pause_enable;
 static int flush_enable;
 
+static enum asrc_inclk inclk;
+static enum asrc_outclk outclk;
+
 void help_info(int ac, char *av[])
 {
 	printf("\n\n**************************************************\n");
 	printf("* Test aplication for ASRC\n");
 	printf("* Options : \n\n");
 	printf("-to <output sample rate> <origin.wav> <converted.wav>\n");
+	printf("<input clock source> <output clock source>\n");
+	printf("input clock source types are:\n\n");
+	printf("0  --  INCLK_NONE\n");
+	printf("1  --  INCLK_ESAI_RX\n");
+	printf("2  --  INCLK_SSI1_RX\n");
+	printf("3  --  INCLK_SSI2_RX\n");
+	printf("4  --  INCLK_SPDIF_RX\n");
+	printf("5  --  INCLK_MLB_CLK\n");
+	printf("6  --  INCLK_ESAI_TX\n");
+	printf("7  --  INCLK_SSI1_TX\n");
+	printf("8  --  INCLK_SSI2_TX\n");
+	printf("9  --  INCLK_SPDIF_TX\n");
+	printf("10 --  INCLK_ASRCK1_CLK\n");
+	printf("default option for output clock source is 0\n");
+	printf("output clock source types are:\n\n");
+	printf("0  --  OUTCLK_NONE\n");
+	printf("1  --  OUTCLK_ESAI_TX\n");
+	printf("2  --  OUTCLK_SSI1_TX\n");
+	printf("3  --  OUTCLK_SSI2_TX\n");
+	printf("4  --  OUTCLK_SPDIF_TX\n");
+	printf("5  --  OUTCLK_MLB_CLK\n");
+	printf("6  --  OUTCLK_ESAI_RX\n");
+	printf("7  --  OUTCLK_SSI1_RX\n");
+	printf("8  --  OUTCLK_SSI2_RX\n");
+	printf("9  --  OUTCLK_SPDIF_RX\n");
+	printf("10 --  OUTCLK_ASRCK1_CLK\n");
+	printf("default option for output clock source is 10\n");
 	printf("**************************************************\n\n");
 }
 
@@ -95,10 +125,8 @@ int configure_asrc_channel(int fd_asrc, struct audio_info_s *info)
 	config.output_sample_rate = info->output_sample_rate;
 	config.buffer_num = BUF_NUM;
 	config.word_width = 32;
-	config.inclk = INCLK_NONE;
-	//config.inclk = INCLK_SSI1_TX;
-	//config.outclk = OUTCLK_SSI1_TX;
-	config.outclk = OUTCLK_ASRCK1_CLK;
+	config.inclk = inclk;
+	config.outclk = outclk;
 	pair_index = req.index;
 	if (err = ioctl(fd_asrc, ASRC_CONFIG_PAIR, &config) < 0)
 		return err;
@@ -469,9 +497,11 @@ int main(int ac, char *av[])
 	output_done_bytes = 0;
 	pause_enable = 0;
 	flush_enable = 0;
+	inclk = INCLK_NONE;
+	outclk = OUTCLK_ASRCK1_CLK;
 	printf("Hi... \n");
 
-	if (ac != 5) {
+	if (ac < 5) {
 		help_info(ac, av);
 		return 1;
 	}
@@ -485,11 +515,118 @@ int main(int ac, char *av[])
 			audio_info.output_sample_rate = atoi(av[++i]);
 	}
 
-	if ((fd_dst = fopen(av[ac - 1], "wb+")) <= 0) {
+	if (ac > 5)
+	{
+		i = atoi(av[5]);
+		switch (i)
+		{
+			case 0:
+			    inclk = INCLK_NONE;
+			    printf("inclk : INCLK_NONE\n");
+			    break;
+			case 1:
+			    inclk = INCLK_ESAI_RX;
+			    printf("inclk : INCLK_ESAI_RX\n");
+			    break;
+			case 2:
+			    inclk = INCLK_SSI1_RX;
+			    printf("inclk : INCLK_SSI1_RX\n");
+			    break;
+			case 3:
+			    inclk = INCLK_SSI2_RX;
+			    printf("inclk : INCLK_SSI2_RX\n");
+			    break;
+			case 4:
+			    inclk = INCLK_SPDIF_RX;
+			    printf("inclk : INCLK_SPDIF_RX\n");
+			    break;
+			case 5:
+			    inclk = INCLK_MLB_CLK;
+			    printf("inclk : INCLK_MLB_CLK\n");
+			    break;
+			case 6:
+			    inclk = INCLK_ESAI_TX;
+			    printf("inclk : INCLK_ESAI_TX\n");
+			    break;
+			case 7:
+			    inclk = INCLK_SSI1_TX;
+			    printf("inclk : INCLK_SSI1_TX\n");
+			    break;
+			case 8:
+			    inclk = INCLK_SSI2_TX;
+			    printf("inclk : INCLK_SSI2_TX\n");
+			    break;
+			case 9:
+			    inclk = INCLK_SPDIF_TX;
+			    printf("inclk : INCLK_SPDIF_TX\n");
+			    break;
+			case 10:
+			    inclk = INCLK_ASRCK1_CLK;
+			    printf("inclk : INCLK_ASRCK1_CLK\n");
+			    break;
+			default:
+			    printf("Incorrect clock source\n");
+			    return;
+		}
+
+		i = atoi(av[6]);
+		switch (i)
+		{
+			case 0:
+			    outclk = OUTCLK_NONE;
+			    printf("outclk : OUTCLK_NONE\n");
+			    break;
+			case 1:
+			    outclk = OUTCLK_ESAI_TX;
+			    printf("outclk : OUTCLK_ESAI_TX\n");
+			    break;
+			case 2:
+			    outclk = OUTCLK_SSI1_TX;
+			    printf("outclk : OUTCLK_SSI1_TX\n");
+			    break;
+			case 3:
+			    outclk = OUTCLK_SSI2_TX;
+			    printf("outclk : OUTCLK_SSI2_TX\n");
+			    break;
+			case 4:
+			    outclk = OUTCLK_SPDIF_TX;
+			    printf("outclk : OUTCLK_SPDIF_TX\n");
+			    break;
+			case 5:
+			    outclk = OUTCLK_MLB_CLK;
+			    printf("outclk : OUTCLK_MLB_CLK\n");
+			    break;
+			case 6:
+			    outclk = OUTCLK_ESAI_RX;
+			    printf("outclk : OUTCLK_ESAI_RX\n");
+			    break;
+			case 7:
+			    outclk = OUTCLK_SSI1_RX;
+			    printf("outclk : OUTCLK_SSI1_RX\n");
+			    break;
+			case 8:
+			    outclk = OUTCLK_SSI2_RX;
+			    printf("outclk : OUTCLK_SSI2_RX\n");
+			    break;
+			case 9:
+			    outclk = OUTCLK_SPDIF_RX;
+			    printf("outclk : OUTCLK_SPDIF_RX\n");
+			    break;
+			case 10:
+			    outclk = OUTCLK_ASRCK1_CLK;
+			    printf("outclk : OUTCLK_ASRCK1_CLK\n");
+			    break;
+			default:
+			    printf("Incorrect clock source\n");
+			    return ;
+		}
+	}
+
+	if ((fd_dst = fopen(av[5 - 1], "wb+")) <= 0) {
 		goto err_dst_not_found;
 	}
 
-	if ((fd_src = fopen(av[ac - 2], "r")) <= 0) {
+	if ((fd_src = fopen(av[5 - 2], "r")) <= 0) {
 		goto err_src_not_found;
 	}
 
-- 
1.8.0

