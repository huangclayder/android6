From 3f54528a85a1f6cca08f740b990c8153d78e7aef Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Wed, 1 Feb 2012 11:17:37 +0800
Subject: [PATCH 272/505] ENGR00173462 vpu: Add the support for mx6dl platform
 in vpu test

Add the support for mx6dl platform in vpu unit test.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 test/mxc_vpu_test/dec.c      | 24 ++++++++++++------------
 test/mxc_vpu_test/display.c  | 14 +++++++-------
 test/mxc_vpu_test/enc.c      | 24 ++++++++++++------------
 test/mxc_vpu_test/loopback.c | 12 ++++++------
 test/mxc_vpu_test/main.c     |  2 +-
 test/mxc_vpu_test/vpu_test.h |  4 ++--
 6 files changed, 40 insertions(+), 40 deletions(-)

diff --git a/test/mxc_vpu_test/dec.c b/test/mxc_vpu_test/dec.c
index 72022de..101d034 100644
--- a/test/mxc_vpu_test/dec.c
+++ b/test/mxc_vpu_test/dec.c
@@ -673,7 +673,7 @@ write_to_file(struct decode *dec, Rect cropRect, int index)
 			cropRect.top, cropRect.right, cropRect.bottom);
 	cropping = cropRect.left | cropRect.top | cropRect.bottom | cropRect.right;
 
-	if (cpu_is_mx6q() && (dec->cmdl->mapType != LINEAR_FRAME_MAP) &&
+	if (cpu_is_mx6x() && (dec->cmdl->mapType != LINEAR_FRAME_MAP) &&
 	    !dec->tiled2LinearEnable) {
 		SaveTiledYuvImageHelper(dec, dec->cmdl->dst_fd, stride, height, index);
 		goto out;
@@ -787,7 +787,7 @@ decoder_start(struct decode *dec)
 
 	decparam.dispReorderBuf = 0;
 
-	if (!cpu_is_mx6q()) {
+	if (!cpu_is_mx6x()) {
 		decparam.prescanEnable = dec->cmdl->prescan;
 		decparam.prescanMode = 0;
 	}
@@ -906,14 +906,14 @@ decoder_start(struct decode *dec)
 		}
 
 		/*
-		 * FIXME for mx6q MJPG decoding with streaming mode
+		 * FIXME for mx6x MJPG decoding with streaming mode
 		 * Currently bitstream buffer filling cannot be done when JPU is in decoding,
 		 * there are three places can do this:
 		 * 1. before vpu_DecStartOneFrame;
 		 * 2. in the case of RETCODE_JPEG_BIT_EMPTY returned in DecStartOneFrame() func;
 		 * 3. after vpu_DecGetOutputInfo.
 		 */
-		if (cpu_is_mx6q() && (dec->cmdl->format == STD_MJPG)) {
+		if (cpu_is_mx6x() && (dec->cmdl->format == STD_MJPG)) {
 			err = dec_fill_bsbuffer(handle, dec->cmdl,
 				    dec->virt_bsbuf_addr,
 				    (dec->virt_bsbuf_addr + STREAM_BUF_SIZE),
@@ -951,7 +951,7 @@ decoder_start(struct decode *dec)
 		is_waited_int = 0;
 		loop_id = 0;
 		while (vpu_IsBusy()) {
-			if (!(cpu_is_mx6q() && (dec->cmdl->format == STD_MJPG))) {
+			if (!(cpu_is_mx6x() && (dec->cmdl->format == STD_MJPG))) {
 				err = dec_fill_bsbuffer(handle, dec->cmdl,
 					dec->virt_bsbuf_addr,
 					(dec->virt_bsbuf_addr + STREAM_BUF_SIZE),
@@ -1015,7 +1015,7 @@ decoder_start(struct decode *dec)
 				continue;
 		}
 
-		if (cpu_is_mx6q() && (outinfo.decodingSuccess & 0x10)) {
+		if (cpu_is_mx6x() && (outinfo.decodingSuccess & 0x10)) {
 			warn_msg("vpu needs more bitstream in rollback mode\n"
 				"\tframe_id = %d\n", (int)frame_id);
 
@@ -1126,13 +1126,13 @@ decoder_start(struct decode *dec)
 		if (outinfo.indexFrameDisplay == -1)
 			decodefinish = 1;
 		else if ((outinfo.indexFrameDisplay > dec->regfbcount) &&
-			 (outinfo.prescanresult != 0) && !cpu_is_mx6q())
+			 (outinfo.prescanresult != 0) && !cpu_is_mx6x())
 			decodefinish = 1;
 
 		if (decodefinish)
 			break;
 
-		if (!cpu_is_mx6q() && (outinfo.prescanresult == 0) &&
+		if (!cpu_is_mx6x() && (outinfo.prescanresult == 0) &&
 		    (decparam.prescanEnable == 1)) {
 			if (eos) {
 				break;
@@ -1258,7 +1258,7 @@ decoder_start(struct decode *dec)
 		}
 
 		if (outinfo.numOfErrMBs) {
-			if (cpu_is_mx6q() && dec->cmdl->format == STD_MJPG)
+			if (cpu_is_mx6x() && dec->cmdl->format == STD_MJPG)
 				info_msg("Error Mb info:0x%x, in Frame : %d\n",
 					    outinfo.numOfErrMBs, (int)frame_id);
 			else {
@@ -1656,7 +1656,7 @@ decoder_parse(struct decode *dec)
 			err_msg("malloc_error\n");
 	}
 
-	if(!cpu_is_mx6q() && dec->cmdl->format == STD_MJPG) {
+	if(!cpu_is_mx6x() && dec->cmdl->format == STD_MJPG) {
 		ret = vpu_DecGiveCommand(handle,DEC_SET_REPORT_USERDATA, &dec->userData);
 		if (ret != RETCODE_SUCCESS) {
 			err_msg("Failed to set user data report, ret %d\n", ret);
@@ -1822,7 +1822,7 @@ decoder_parse(struct decode *dec)
 		}
 	}
 
-	if (cpu_is_mx6q())
+	if (cpu_is_mx6x())
 		info_msg("Decoder: width = %d, height = %d, frameRateRes = %d, frameRateDiv = %d, count = %u\n",
 			initinfo.picWidth, initinfo.picHeight,
 			initinfo.frameRateRes, initinfo.frameRateDiv,
@@ -1970,7 +1970,7 @@ decoder_open(struct decode *dec)
 	oparam.mp4DeblkEnable = dec->cmdl->deblock_en;
 	oparam.chromaInterleave = dec->cmdl->chromaInterleave;
 	oparam.mp4Class = dec->cmdl->mp4_h264Class;
-	if (cpu_is_mx6q())
+	if (cpu_is_mx6x())
 		oparam.avcExtension = dec->cmdl->mp4_h264Class;
 	oparam.mjpg_thumbNailDecEnable = 0;
 	oparam.mapType = dec->cmdl->mapType;
diff --git a/test/mxc_vpu_test/display.c b/test/mxc_vpu_test/display.c
index 494a7ee..c904a20 100644
--- a/test/mxc_vpu_test/display.c
+++ b/test/mxc_vpu_test/display.c
@@ -581,8 +581,8 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation, Rect crop
 	}
 
 	if (!dec->cmdl->video_node) {
-		if (cpu_is_mx6q())
-			dec->cmdl->video_node = 17; /* fg for mx6q */
+		if (cpu_is_mx6x())
+			dec->cmdl->video_node = 17; /* fg for mx6x */
 		else
 			dec->cmdl->video_node = 16;
 	}
@@ -598,7 +598,7 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation, Rect crop
 
 	info_msg("v4l output to %s\n", v4l_device);
 
-	if (!cpu_is_mx6q()) {
+	if (!cpu_is_mx6x()) {
 		err = ioctl(fd, VIDIOC_S_OUTPUT, &out);
 		if (err < 0) {
 			err_msg("VIDIOC_S_OUTPUT failed\n");
@@ -669,7 +669,7 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation, Rect crop
 		}
 	}
 
-	if (cpu_is_mx6q()) {
+	if (cpu_is_mx6x()) {
 		/* Set rotation via new V4L2 interface on 2.6.38 kernel */
 		struct v4l2_control ctrl;
 
@@ -732,7 +732,7 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation, Rect crop
 			"top/left = %d/%d\n", top, left);
 		goto err;
 	} else if (right || bottom) {
-		if (cpu_is_mx6q()) {
+		if (cpu_is_mx6x()) {
 			/* This is aligned with new V4L interface on 2.6.38 kernel */
 			fmt.fmt.pix.width = width;
 			fmt.fmt.pix.height = height;
@@ -824,7 +824,7 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation, Rect crop
 		buf->start = mmap(NULL, buffer.length, PROT_READ | PROT_WRITE,
 				MAP_SHARED, fd, buffer.m.offset);
 
-		if (cpu_is_mx6q()) {
+		if (cpu_is_mx6x()) {
 			/*
 			 * Workaround for new V4L interface change, this change
 			 * will be removed after V4L driver is updated for this.
@@ -896,7 +896,7 @@ void v4l_display_close(struct vpu_display *disp)
 		}
 
 		/* take care of ENGR00161948 */
-		if (cpu_is_mx6q()) {
+		if (cpu_is_mx6x()) {
 			if (disp->buf.field == V4L2_FIELD_ANY || disp->buf.field == V4L2_FIELD_NONE)
 				threshold = 1;
 			else
diff --git a/test/mxc_vpu_test/enc.c b/test/mxc_vpu_test/enc.c
index 3d7fcb0..1d3112c 100644
--- a/test/mxc_vpu_test/enc.c
+++ b/test/mxc_vpu_test/enc.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2011 Freescale Semiconductor, Inc.
+ * Copyright 2004-2012 Freescale Semiconductor, Inc.
  *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  */
@@ -220,7 +220,7 @@ encoder_fill_headers(struct encode *enc)
 	if (enc->cmdl->format == STD_MPEG4) {
 		enchdr_param.headerType = VOS_HEADER;
 
-		if (cpu_is_mx6q())
+		if (cpu_is_mx6x())
 			goto put_mp4header;
 		/*
 		 * Please set userProfileLevelEnable to 0 if you need to generate
@@ -314,7 +314,7 @@ put_mp4header:
 			free(enc->huffTable);
 		if (enc->qMatTable)
 			free(enc->qMatTable);
-		if (cpu_is_mx6q()) {
+		if (cpu_is_mx6x()) {
 			EncParamSet enchdr_param = {0};
 			enchdr_param.size = STREAM_BUF_SIZE;
 			enchdr_param.pParaSet = malloc(STREAM_BUF_SIZE);
@@ -366,7 +366,7 @@ encoder_allocate_framebuffer(struct encode *enc)
 	src_fbwidth = (enc->src_picwidth + 15) & ~15;
 	src_fbheight = (enc->src_picheight + 15) & ~15;
 
-	if (cpu_is_mx6q()) {
+	if (cpu_is_mx6x()) {
 		if (enc->cmdl->format == STD_AVC && enc->mvc_extension) /* MVC */
 			extrafbcount = 2 + 2; /* Subsamp [2] + Subsamp MVC [2] */
 		else if (enc->cmdl->format == STD_MJPG)
@@ -430,7 +430,7 @@ encoder_allocate_framebuffer(struct encode *enc)
 		fb[i].strideC = pfbpool[i]->strideC;
 	}
 
-	if (cpu_is_mx6q() && (enc->cmdl->format != STD_MJPG)) {
+	if (cpu_is_mx6x() && (enc->cmdl->format != STD_MJPG)) {
 		subSampBaseA = fb[minfbcount].bufY;
 		subSampBaseB = fb[minfbcount + 1].bufY;
 		if (enc->cmdl->format == STD_AVC && enc->mvc_extension) { /* MVC */
@@ -513,7 +513,7 @@ encoder_start(struct encode *enc)
 	u32 virt_bsbuf_end = virt_bsbuf_start + STREAM_BUF_SIZE;
 
 	/* Must put encode header here before encoding for all codec, except MX6 MJPG */
-	if (!(cpu_is_mx6q() && (enc->cmdl->format == STD_MJPG))) {
+	if (!(cpu_is_mx6x() && (enc->cmdl->format == STD_MJPG))) {
 		ret = encoder_fill_headers(enc);
 		if (ret) {
 			err_msg("Encode fill headers failed\n");
@@ -607,7 +607,7 @@ encoder_start(struct encode *enc)
 		}
 
 		/* Must put encode header before each frame encoding for mx6 MJPG */
-		if (cpu_is_mx6q() && (enc->cmdl->format == STD_MJPG)) {
+		if (cpu_is_mx6x() && (enc->cmdl->format == STD_MJPG)) {
 			ret = encoder_fill_headers(enc);
 			if (ret) {
 				err_msg("Encode fill headers failed\n");
@@ -913,7 +913,7 @@ encoder_open(struct encode *enc)
 	encop.dynamicAllocEnable = 0;
 	encop.chromaInterleave = enc->cmdl->chromaInterleave;
 
-	if(!cpu_is_mx6q() &&  enc->cmdl->format == STD_MJPG )
+	if(!cpu_is_mx6x() &&  enc->cmdl->format == STD_MJPG )
 	{
 		qMatTable = calloc(192,1);
 		if (qMatTable == NULL) {
@@ -1030,7 +1030,7 @@ encoder_open(struct encode *enc)
 		encop.EncStdParam.avcParam.avc_deblkFilterOffsetBeta = 0;
 		encop.EncStdParam.avcParam.avc_chromaQpOffset = 10;
 		encop.EncStdParam.avcParam.avc_audEnable = 0;
-		if (cpu_is_mx6q()) {
+		if (cpu_is_mx6x()) {
 			encop.EncStdParam.avcParam.interview_en = 0;
 			encop.EncStdParam.avcParam.paraset_refresh_en = enc->mvc_paraset_refresh_en = 0;
 			encop.EncStdParam.avcParam.prefix_nal_en = 0;
@@ -1066,7 +1066,7 @@ encoder_open(struct encode *enc)
 		encop.EncStdParam.mjpgParam.mjpg_thumbNailEnable = 0;
 		encop.EncStdParam.mjpgParam.mjpg_thumbNailWidth = 0;
 		encop.EncStdParam.mjpgParam.mjpg_thumbNailHeight = 0;
-		if (cpu_is_mx6q()) {
+		if (cpu_is_mx6x()) {
 			jpgGetHuffTable(&encop.EncStdParam.mjpgParam);
 			jpgGetQMatrix(&encop.EncStdParam.mjpgParam);
 			jpgGetCInfoTable(&encop.EncStdParam.mjpgParam);
@@ -1156,7 +1156,7 @@ encode_test(void *arg)
 		goto err1;
 
         /* allocate scratch buf */
-	if (cpu_is_mx6q() && (cmdl->format == STD_MPEG4) && enc->mp4_dataPartitionEnable) {
+	if (cpu_is_mx6x() && (cmdl->format == STD_MPEG4) && enc->mp4_dataPartitionEnable) {
 		scratch_mem_desc.size = MPEG4_SCRATCH_SIZE;
                 ret = IOGetPhyMem(&scratch_mem_desc);
                 if (ret) {
@@ -1181,7 +1181,7 @@ err1:
 	/* close the encoder */
 	encoder_close(enc);
 err:
-	if (cpu_is_mx6q() && cmdl->format == STD_MPEG4 && enc->mp4_dataPartitionEnable) {
+	if (cpu_is_mx6x() && cmdl->format == STD_MPEG4 && enc->mp4_dataPartitionEnable) {
 		IOFreeVirtMem(&scratch_mem_desc);
 		IOFreePhyMem(&scratch_mem_desc);
 	}
diff --git a/test/mxc_vpu_test/loopback.c b/test/mxc_vpu_test/loopback.c
index 33aa559..b1d0e20 100644
--- a/test/mxc_vpu_test/loopback.c
+++ b/test/mxc_vpu_test/loopback.c
@@ -44,7 +44,7 @@ decode(void)
 	/* Suggest to enable prescan in loopback, then decoder performs scanning stream buffers
 	 * to check whether data is enough to prevent decoder hang.
 	 */
-	if (!cpu_is_mx6q())
+	if (!cpu_is_mx6x())
 		decparam.prescanEnable = dec->cmdl->prescan;
 
 	if (dec->cmdl->format == STD_MJPG) {
@@ -80,7 +80,7 @@ decode(void)
 		return -1;
 	}
 
-	if (cpu_is_mx6q() && (outinfo.decodingSuccess & 0x10)) {
+	if (cpu_is_mx6x() && (outinfo.decodingSuccess & 0x10)) {
 		goto out;
 	}
 
@@ -98,7 +98,7 @@ decode(void)
 			(outinfo.indexFrameDisplay > dec->regfbcount))
 		return -1;
 
-	if (!cpu_is_mx6q() && (outinfo.prescanresult == 0) && (decparam.dispReorderBuf == 0)) {
+	if (!cpu_is_mx6x() && (outinfo.prescanresult == 0) && (decparam.dispReorderBuf == 0)) {
 		warn_msg("Prescan Enable: not enough bs data\n");
 		goto out;
 	}
@@ -244,7 +244,7 @@ encoder_fill_headers(void)
 			free(enc->huffTable);
 		if (enc->qMatTable)
 			free(enc->qMatTable);
-		if (cpu_is_mx6q()) {
+		if (cpu_is_mx6x()) {
 			EncParamSet enchdr_param = {0};
 			enchdr_param.size = STREAM_BUF_SIZE;
 			enchdr_param.pParaSet = malloc(STREAM_BUF_SIZE);
@@ -276,7 +276,7 @@ encode(void)
 	struct v4l2_buffer v4l2_buf;
 	u32 vbuf;
 
-	if (cpu_is_mx6q() && (dec->cmdl->format == STD_MJPG)) {
+	if (cpu_is_mx6x() && (dec->cmdl->format == STD_MJPG)) {
 		ret = encoder_fill_headers();
 		if (ret) {
 			err_msg("fill headers failed\n");
@@ -447,7 +447,7 @@ encdec_test(void *arg)
 
 	/* For MX6 MJPG, header must be inserted before each frame, only need to
 	 * fill header here once for other codecs */
-	if (!(cpu_is_mx6q() && (enc->cmdl->format == STD_MJPG))) {
+	if (!(cpu_is_mx6x() && (enc->cmdl->format == STD_MJPG))) {
 		ret = encoder_fill_headers();
 		if (ret) {
 			err_msg("fill headers failed\n");
diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index 9ca80d0..195081f 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -320,7 +320,7 @@ parse_args(int argc, char *argv[], int i)
 			input_arg[i].cmd.gop = atoi(optarg);
 			break;
 		case 's':
-			if (cpu_is_mx6q())
+			if (cpu_is_mx6x())
 				input_arg[i].cmd.bs_mode = atoi(optarg);
 			else
 				input_arg[i].cmd.prescan = atoi(optarg);
diff --git a/test/mxc_vpu_test/vpu_test.h b/test/mxc_vpu_test/vpu_test.h
index c5790dc..57db05e 100644
--- a/test/mxc_vpu_test/vpu_test.h
+++ b/test/mxc_vpu_test/vpu_test.h
@@ -302,9 +302,9 @@ void decoder_free_framebuffer(struct decode *dec);
 void SaveQpReport(Uint32 *qpReportAddr, int picWidth, int picHeight,
 		  int frameIdx, char *fileName);
 
-static inline int is_mx6q_mjpg(int fmt)
+static inline int is_mx6x_mjpg(int fmt)
 {
-        if (cpu_is_mx6q() && (fmt == STD_MJPG))
+        if (cpu_is_mx6x() && (fmt == STD_MJPG))
                 return true;
         else
                 return false;
-- 
1.8.0

