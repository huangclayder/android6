From e31da50f70ee1c9f9e3191cf9df67ad50ab8713d Mon Sep 17 00:00:00 2001
From: Rob Herring <r.herring@freescale.com>
Date: Mon, 3 Mar 2008 07:50:06 -0600
Subject: [PATCH 007/505] ENGR00065563 Add declaration for
 mxc_dump_dma_register

Fix build for missing declaration of mxc_dump_dma_register.
Remove trailing whitespace.

Signed-off-by: Rob Herring <r.herring@freescale.com>
---
 module_test/mxc_udma_testdriver.c | 74 +++++++++++++++++++--------------------
 1 file changed, 37 insertions(+), 37 deletions(-)

diff --git a/module_test/mxc_udma_testdriver.c b/module_test/mxc_udma_testdriver.c
index 6c93005..c3fa562 100644
--- a/module_test/mxc_udma_testdriver.c
+++ b/module_test/mxc_udma_testdriver.c
@@ -36,7 +36,7 @@ int dma_release(struct inode * inode, struct file * filp);
 ssize_t dma_write(struct file * filp, const char __user  * buf, size_t count, loff_t * offset);
 int dma_ioctl(struct inode * inode,	struct file *filp, unsigned int cmd, unsigned long arg);
 
-
+extern void mxc_dump_dma_register(int channel);
 
 char *g_pDmaSource_Ori,*g_pDmaDest_Ori;
 char *g_pDmaSource,*g_pDmaDest;
@@ -94,16 +94,16 @@ int  Verify(char *p, int size,int rd)
 			if(j<30)
 			{
 				printk("i = %d, Exp %d:%d\n",i,x,p[i]);
-				
+
 			}else
-				return 1;		
-		}	
+				return 1;
+		}
 	}
 
 	if(j>0)
 		return 1;
-	else 
-		return 0;	
+	else
+		return 0;
 }
 
 
@@ -115,7 +115,7 @@ void FillMem_2D(char * p, int x,int y,int w, int rd,int dir)
 		DecOffset=w-x;
 	printk("Fill 2d mem %8x\n",(unsigned int)p);
 	sand(rd);
-       for(j=0;j<y;j++) 
+       for(j=0;j<y;j++)
        	for(i=0;i<x;i++)
 		{*(p+j*w+i+DecOffset)=rand();}
 	return;
@@ -138,22 +138,22 @@ int  Verify_2D(char * p, int x,int y,int w, int rd,int dir)
 		temp=rand();
               if(i==1&&j==2)
 			printk("Verify 2d mem %8x,x=%d,p[%d*%d+%d+%d]=%d\n",(unsigned int)p,temp,j,w,i,DecOffset,p[j*w+i+DecOffset]);
-		
+
 		if(temp!=p[j*w+i+DecOffset])
 		{
 			iCountError++;
 			if(iCountError<30)
 			{
-				printk("i = %d; j =%d ; Exp %d:%d\n",i,j,temp,p[j*w+i+DecOffset]);				
+				printk("i = %d; j =%d ; Exp %d:%d\n",i,j,temp,p[j*w+i+DecOffset]);
 			}
 			else
-				return 1;		
-		}	
+				return 1;
+		}
 	}
 	if(iCountError>0)
 		return 1;
-	else 
-		return 0;	
+	else
+		return 0;
 }
 
 
@@ -183,7 +183,7 @@ static int __do_dma_test_ram2d2ram(void)
 		printk("request dma fail n");
 		return -ENODEV;
 	}
-	
+
 	memory_base = __get_free_pages(GFP_KERNEL|GFP_DMA, 4);
 	if ( memory_base == NULL ) {
 		mxc_dma_free(channel);
@@ -237,7 +237,7 @@ static int __do_dma_test_ram2ram2d(void)
 		printk("request dma fail n");
 		return -ENODEV;
 	}
-	
+
 	memory_base = __get_free_pages(GFP_KERNEL|GFP_DMA, 4);
 	if ( memory_base == NULL ) {
 		mxc_dma_free(channel);
@@ -291,7 +291,7 @@ static int __do_dma_test_ram2d2ram2d(void)
 		printk("request dma fail n");
 		return -ENODEV;
 	}
-	
+
 	memory_base = __get_free_pages(GFP_KERNEL|GFP_DMA, 4);
 	if ( memory_base == NULL ) {
 		mxc_dma_free(channel);
@@ -345,7 +345,7 @@ static int __do_dma_test_ram2ram(void)
 		printk("request dma fail n");
 		return -ENODEV;
 	}
-	
+
 	memory_base = __get_free_pages(GFP_KERNEL|GFP_DMA, 4);
 	if ( memory_base == NULL ) {
 		mxc_dma_free(channel);
@@ -442,17 +442,17 @@ mxc_dma_requestbuf_t *  dma_build_bufferlist(unsigned int iTransTime, char * bas
       	int i;
       	mxc_dma_requestbuf_t * buf;
 
-      	buf =(mxc_dma_requestbuf_t *)kmalloc(iTransTime*sizeof(mxc_dma_requestbuf_t ), GFP_KERNEL); 
+      	buf =(mxc_dma_requestbuf_t *)kmalloc(iTransTime*sizeof(mxc_dma_requestbuf_t ), GFP_KERNEL);
 
 	if ( buf == NULL ) return NULL;
 
-       for(i=0;i<iTransTime;i++)	
+       for(i=0;i<iTransTime;i++)
        {
         	buf[i].src_addr = virt_to_phys(base+(DMA_INTERVAL_MEM*i));
         	buf[i].dst_addr =virt_to_phys(base+(DMA_INTERVAL_MEM*i+DMA_TRANS_SIZE));
-        	buf[i].num_of_bytes = DMA_TRANS_SIZE;	 
+        	buf[i].num_of_bytes = DMA_TRANS_SIZE;
 		printk("%d:: src=%x, dest=%x, length = %x\n",i,  buf[i].src_addr , buf[i].dst_addr , buf[i].num_of_bytes );
-   	}	
+   	}
 	return buf;
 }
 
@@ -463,20 +463,20 @@ mxc_dma_requestbuf_t *  dma_build_speclist(unsigned int iTransTime, char * base)
       	mxc_dma_requestbuf_t * buf;
 	int width, gap;
 
-      	buf =(mxc_dma_requestbuf_t *)kmalloc(iTransTime*sizeof(mxc_dma_requestbuf_t ), GFP_KERNEL); 
+      	buf =(mxc_dma_requestbuf_t *)kmalloc(iTransTime*sizeof(mxc_dma_requestbuf_t ), GFP_KERNEL);
 
 	if ( buf == NULL ) return NULL;
 
 	width = (1024/iTransTime)*PAGE_SIZE;
 	gap = width/2;
 
-       for(i=0;i<iTransTime;i++)	
+       for(i=0;i<iTransTime;i++)
        {
         	buf[i].src_addr = virt_to_phys(base+(width*i));
         	buf[i].dst_addr =virt_to_phys(base+(width*i+gap));
-        	buf[i].num_of_bytes = gap;	 
+        	buf[i].num_of_bytes = gap;
 		printk("%d:: src=%x, dest=%x, length = %x\n",i,  buf[i].src_addr , buf[i].dst_addr , buf[i].num_of_bytes );
-   	}	
+   	}
 	return buf;
 }
 /*This function test linear to linear increase Chainbuffer dma transfer*/
@@ -498,7 +498,7 @@ int Dma_Test_hw_ChainBuffer(unsigned int iTransTime)
 		printk("request dma fail n");
 		return -ENODEV;
 	}
-	
+
 	memory_base = __get_free_pages(GFP_KERNEL|GFP_DMA, 10);
 	if ( memory_base == NULL ) {
 		mxc_dma_free(channel);
@@ -511,17 +511,17 @@ int Dma_Test_hw_ChainBuffer(unsigned int iTransTime)
 		return -ENOMEM;
 	}
 	printk("The buffer list is %x\n", buf);
-	
+
 	mxc_dma_callback_set(channel, dma_complete_fn, NULL);
 
 	width = (1024/iTransTime)*PAGE_SIZE;
 	gap = width/2;
        /*initialize the source and dest memory*/
-	for(i=0; i < iTransTime; i++)	
+	for(i=0; i < iTransTime; i++)
         {
          src  = (char*)(memory_base+width*i);
 	 dest  = (char*)(memory_base+(width*i + gap));
-         
+
 	  /*Only test linear memthod, so fill source with this function*/
          FillMem(src , gap, DMA_SAND+i);
 	 memset(dest,0,gap);
@@ -546,7 +546,7 @@ int Dma_Test_hw_ChainBuffer(unsigned int iTransTime)
 	}
 	{
 	/**************Begin of Set dma para******************************/
-      		for(i=0;i<iTransTime;i++)	
+      		for(i=0;i<iTransTime;i++)
       		{
          		printk("Get chainbuffer %d verify\n",i);
 			 dest  = (char*)(memory_base+(width*i + gap));
@@ -557,7 +557,7 @@ int Dma_Test_hw_ChainBuffer(unsigned int iTransTime)
 		if( i >= iTransTime ) printk("Passed!\n");
 		else printk("Failure!\n");
 	}
-	
+
 	kfree(buf);
 	free_pages(memory_base, 10);
 	printk("\n\n ===========check the status of DMA module \n");
@@ -584,7 +584,7 @@ int Dma_Test_sw_ChainBuffer(unsigned int iTransTime)
 		printk("request dma fail n");
 		return -ENODEV;
 	}
-	
+
 	memory_base = __get_free_pages(GFP_KERNEL|GFP_DMA, 4);
 	if ( memory_base == NULL ) {
 		mxc_dma_free(channel);
@@ -596,15 +596,15 @@ int Dma_Test_sw_ChainBuffer(unsigned int iTransTime)
 		printk("No enought memory \n");
 		return -ENOMEM;
 	}
-	  	
+
 	mxc_dma_callback_set(channel, dma_complete_fn, NULL);
 
        /*initialize the source and dest memory*/
-	for(i=0; i < iTransTime; i++)	
+	for(i=0; i < iTransTime; i++)
       {
          src  = (char*)(memory_base+DMA_INTERVAL_MEM*i);
 	 dest  = (char*)(memory_base+(DMA_INTERVAL_MEM*i + DMA_TRANS_SIZE));
-         
+
 	  /*Only test linear memthod, so fill source with this function*/
          FillMem(src , DMA_TRANS_SIZE, DMA_SAND+i);
 	 memset(dest,0,DMA_TRANS_SIZE);
@@ -628,7 +628,7 @@ int Dma_Test_sw_ChainBuffer(unsigned int iTransTime)
 		mxc_dma_disable(channel);
 	} else {
 	/**************Begin of Set dma para******************************/
-      		for(i=0;i<iTransTime;i++)	
+      		for(i=0;i<iTransTime;i++)
       		{
          		printk("Get chainbuffer %d verify\n",i);
          		dest = (char*)(memory_base+DMA_INTERVAL_MEM*i+DMA_TRANS_SIZE);
@@ -639,7 +639,7 @@ int Dma_Test_sw_ChainBuffer(unsigned int iTransTime)
 		if( i >= iTransTime ) printk("Passed!\n");
 		else printk("Failure!\n");
 	}
-	
+
 	kfree(buf);
 	free_pages(memory_base, 4);
 	printk("\n\n ===========check the status of DMA module \n");
-- 
1.8.0

