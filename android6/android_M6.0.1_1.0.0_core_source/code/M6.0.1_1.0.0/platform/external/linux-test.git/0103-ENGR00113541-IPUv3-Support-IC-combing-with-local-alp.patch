From e54f055108291cd3c84a47aa7144cf0d68cc027c Mon Sep 17 00:00:00 2001
From: Liu Ying <b17645@freescale.com>
Date: Tue, 23 Jun 2009 18:15:55 +0800
Subject: [PATCH 103/505] ENGR00113541 IPUv3:Support IC combing with local
 alpha contained in pixel

Add IC combing unit test with local alpha contained in pixel for IPUv3.

Signed-off-by: Liu Ying <b17645@freescale.com>
---
 test/mxc_ipudev_test/mxc_ipudev_test.c |  11 ++-
 test/mxc_ipudev_test/mxc_ipudev_test.h |   5 +-
 test/mxc_ipudev_test/test_pattern.c    | 170 ++++++++++++++++++++++++++++-----
 3 files changed, 157 insertions(+), 29 deletions(-)

diff --git a/test/mxc_ipudev_test/mxc_ipudev_test.c b/test/mxc_ipudev_test/mxc_ipudev_test.c
index caa4e3a..a9c584c 100644
--- a/test/mxc_ipudev_test/mxc_ipudev_test.c
+++ b/test/mxc_ipudev_test/mxc_ipudev_test.c
@@ -122,11 +122,12 @@ int main(int argc, char *argv[])
 			"2: video pattern with user define dma buffer queue, with two output\n" \
 			"3: hopping block screen save\n" \
 			"4: color bar + hopping block\n" \
-			"5: color bar global alpha overlay\n" \
-			"6: color bar local alpha overlay\n" \
-			"7: ipu dma copy test\n" \
-			"8: 2 screen layer test\n" \
-			"9: 3 screen layer test\n\n");
+			"5: color bar IC global alpha overlay\n" \
+			"6: color bar IC separate local alpha overlay\n" \
+			"7: color bar IC local alpha within pixel overlay\n" \
+			"8: ipu dma copy test\n" \
+			"9: 2 screen layer test\n" \
+			"10: 3 screen layer test\n\n");
 		return -1;
 	}
 
diff --git a/test/mxc_ipudev_test/mxc_ipudev_test.h b/test/mxc_ipudev_test/mxc_ipudev_test.h
index d4fc9be..e4504d1 100644
--- a/test/mxc_ipudev_test/mxc_ipudev_test.h
+++ b/test/mxc_ipudev_test/mxc_ipudev_test.h
@@ -44,8 +44,9 @@ typedef struct {
 
 enum {
 	NO_OV = 0x00,
-	GLB_ALP_OV = 0x01,
-	LOC_ALP_OV = 0x02,
+	IC_GLB_ALP_OV = 0x01,
+	IC_LOC_SEP_ALP_OV = 0x02,
+	IC_LOC_PIX_ALP_OV = 0x03,
 };
 
 extern int parse_config_file(char *file_name, ipu_test_handle_t *test_handle);
diff --git a/test/mxc_ipudev_test/test_pattern.c b/test/mxc_ipudev_test/test_pattern.c
index 1975323..aaf4c51 100644
--- a/test/mxc_ipudev_test/test_pattern.c
+++ b/test/mxc_ipudev_test/test_pattern.c
@@ -429,27 +429,58 @@ int color_bar(int two_output, int overlay, ipu_test_handle_t * test_handle)
 			ov.fmt = v4l2_fourcc('B', 'G', 'R', '3');
 		else
 			ov.fmt = v4l2_fourcc('R', 'G', 'B', 'P');
-		ov.ov_crop_win.pos.x = fb_var.xres/4;
-		ov.ov_crop_win.pos.y = fb_var.yres/4;
-		ov.ov_crop_win.win_w = fb_var.xres/2;
-		ov.ov_crop_win.win_h = fb_var.yres/2;
-		if (overlay == LOC_ALP_OV) {
+
+		if (overlay == IC_LOC_SEP_ALP_OV) {
+			ov.ov_crop_win.pos.x = fb_var.xres/4;
+			ov.ov_crop_win.pos.y = fb_var.yres/4;
+			ov.ov_crop_win.win_w = fb_var.xres/2;
+			ov.ov_crop_win.win_h = fb_var.yres/2;
 			ov.local_alpha_en = 1;
 			ov.global_alpha_en = 0;
-		} else {
+			ov_fake_fb_size = screen_size;
+			ov_alpha_fake_fb_size = ov.width * ov.height;
+
+			test_handle->output0.width = fb_var.xres/2;
+			test_handle->output0.height = fb_var.yres/2;
+			test_handle->output0.fb_disp.pos.x = fb_var.xres/4;
+			test_handle->output0.fb_disp.pos.y = fb_var.yres/4;
+		} else if (overlay == IC_GLB_ALP_OV) {
+			ov.ov_crop_win.pos.x = fb_var.xres/4;
+			ov.ov_crop_win.pos.y = fb_var.yres/4;
+			ov.ov_crop_win.win_w = fb_var.xres/2;
+			ov.ov_crop_win.win_h = fb_var.yres/2;
+			ov.local_alpha_en = 0;
 			ov.global_alpha_en = 1;
+			ov_fake_fb_size = screen_size;
+
+			test_handle->output0.width = fb_var.xres/2;
+			test_handle->output0.height = fb_var.yres/2;
+			test_handle->output0.fb_disp.pos.x = fb_var.xres/4;
+			test_handle->output0.fb_disp.pos.y = fb_var.yres/4;
+		} else if (overlay == IC_LOC_PIX_ALP_OV) {
+			ov.fmt = v4l2_fourcc('R', 'G', 'B', 'A');
+			ov.ov_crop_win.pos.x = 0;
+			ov.ov_crop_win.pos.y = 0;
+			ov.ov_crop_win.win_w = fb_var.xres;
+			ov.ov_crop_win.win_h = fb_var.yres;
+			ov.global_alpha_en = 0;
 			ov.local_alpha_en = 0;
+			ov_fake_fb_size = ov.width * ov.height * 4;
+
+			/*
+			 * RGB32A is not the pixel format of FB0(RGB565),
+			 * so we cannot do memory copy from graphic plane to
+			 * FB0. We choose to set graphic plane and video plane
+			 * to be the same resolution with FB0.
+			 */
+			test_handle->output0.width = fb_var.xres;
+			test_handle->output0.height = fb_var.yres;
+			test_handle->output0.fb_disp.pos.x = 0;
+			test_handle->output0.fb_disp.pos.y = 0;
 		}
 		ov.key_color_en = 0;
 		ov.alpha = 0;
 		ov.key_color = 0x808080;
-		ov_fake_fb_size = screen_size;
-		if (overlay == LOC_ALP_OV)
-			ov_alpha_fake_fb_size = ov.width * ov.height;
-		test_handle->output0.width = fb_var.xres/2;
-		test_handle->output0.height = fb_var.yres/2;
-		test_handle->output0.fb_disp.pos.x = fb_var.xres/4;
-		test_handle->output0.fb_disp.pos.y = fb_var.yres/4;
 	} else {
 		/* one output case -- full screen */
 		test_handle->output0.width = fb_var.xres;
@@ -481,7 +512,7 @@ int color_bar(int two_output, int overlay, ipu_test_handle_t * test_handle)
 		ov.user_def_paddr[0] = ov_fake_fb_paddr;
 		ov.user_def_paddr[1] = ov.user_def_paddr[0];
 
-		if (overlay == LOC_ALP_OV) {
+		if (overlay == IC_LOC_SEP_ALP_OV) {
 			ov_alpha_fake_fb_paddr = ov_alpha_fake_fb_size;
 			if (ioctl(fd_fb, FBIO_ALLOC,
 				  &(ov_alpha_fake_fb_paddr)) < 0) {
@@ -529,7 +560,7 @@ int color_bar(int two_output, int overlay, ipu_test_handle_t * test_handle)
 
 	while((done_cnt < test_handle->fcount) && (ctrl_c_rev == 0)) {
 		if (overlay) {
-			if (overlay == GLB_ALP_OV) {
+			if (overlay == IC_GLB_ALP_OV) {
 				if (done_cnt % 50 == 0) {
 					static int j = 0;
 					if ((j % 3) == 0)
@@ -547,7 +578,98 @@ int color_bar(int two_output, int overlay, ipu_test_handle_t * test_handle)
 				       ov_fake_fb_size);
 				if (mxc_ipu_lib_task_buf_update(test_handle->ipu_handle, paddr[i], ov_fake_fb_paddr, 0, NULL, NULL) < 0)
 					break;
-			} else if (overlay == LOC_ALP_OV) {
+			} else if (overlay == IC_LOC_PIX_ALP_OV) {
+				if (done_cnt == 1) {
+					/* RGBA32 red */
+					/* 2 planes */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 0)
+							memset(ov_fake_fb + k,
+							       0xFF, 1);
+						else
+							memset(ov_fake_fb + k,
+							       0x00, 1);
+
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0x80, 1);
+					}
+				} else if (done_cnt == 1*fcount/9) {
+					/* video plane */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0x00, 1);
+					}
+				} else if (done_cnt == 2*fcount/9) {
+					/* graphic plane */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0xFF, 1);
+					}
+				} else if (done_cnt == fcount/3) {
+					/* RGBA32 green */
+					/* 2 planes */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 1)
+							memset(ov_fake_fb + k,
+							       0xFF, 1);
+						else
+							memset(ov_fake_fb + k,
+							       0x00, 1);
+
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0x80, 1);
+					}
+				} else if (done_cnt == 4*fcount/9) {
+					/* video plane */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0x00, 1);
+					}
+				} else if (done_cnt == 5*fcount/9) {
+					/* graphic plane */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0xFF, 1);
+					}
+				} else if (done_cnt == 2*fcount/3) {
+					/* RGBA32 blue */
+					/* 2 planes */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 2)
+							memset(ov_fake_fb + k,
+							       0xFF, 1);
+						else
+							memset(ov_fake_fb + k,
+							       0x00, 1);
+
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0x80, 1);
+					}
+				} else if (done_cnt == 7*fcount/9) {
+					/* video plane */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0x00, 1);
+					}
+				} else if (done_cnt == 8*fcount/9) {
+					/* graphic plane */
+					for (k = 0; k < ov_fake_fb_size; k++) {
+						if (k % 4 == 3)
+							memset(ov_fake_fb + k,
+							       0xFF, 1);
+					}
+				}
+				if (mxc_ipu_lib_task_buf_update(test_handle->ipu_handle, paddr[i], ov_fake_fb_paddr, 0, NULL, NULL) < 0)
+					break;
+			} else if (overlay == IC_LOC_SEP_ALP_OV) {
 				if (done_cnt == 1) {
 					/* RGB565 red */
 					for (k = 0; k < ov_fake_fb_size; k++) {
@@ -1225,22 +1347,26 @@ int run_test_pattern(int pattern, ipu_test_handle_t * test_handle)
 		return ret;
 	}
 	if (pattern == 5) {
-		printf("Color bar global alpha overlay test:\n");
-		return color_bar(0, GLB_ALP_OV, test_handle);
+		printf("Color bar IC global alpha overlay test:\n");
+		return color_bar(0, IC_GLB_ALP_OV, test_handle);
 	}
 	if (pattern == 6) {
-		printf("Color bar local alpha overlay test:\n");
-		return color_bar(0, LOC_ALP_OV, test_handle);
+		printf("Color bar IC separate local alpha overlay test:\n");
+		return color_bar(0, IC_LOC_SEP_ALP_OV, test_handle);
 	}
 	if (pattern == 7) {
+		printf("Color bar IC local alpha within pixel overlay test:\n");
+		return color_bar(0, IC_LOC_PIX_ALP_OV, test_handle);
+	}
+	if (pattern == 8) {
 		printf("Copy test:\n");
 		return copy_test(test_handle);
 	}
-	if (pattern == 8) {
+	if (pattern == 9) {
 		printf("Screen layer with 2 layers test:\n");
 		return screenlayer_test(0);
 	}
-	if (pattern == 9) {
+	if (pattern == 10) {
 		printf("Screen layer with 3 layers test:\n");
 		return screenlayer_test(1);
 	}
-- 
1.8.0

