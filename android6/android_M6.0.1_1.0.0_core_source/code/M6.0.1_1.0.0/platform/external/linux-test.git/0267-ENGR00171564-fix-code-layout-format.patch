From 7ebfa73970111d2788763e38de6787bc11d0ae97 Mon Sep 17 00:00:00 2001
From: Even Xu <Feng.Xu@freescale.com>
Date: Mon, 9 Jan 2012 17:20:23 +0800
Subject: [PATCH 267/505] ENGR00171564 fix code layout format

fix format

Signed-off-by: Even Xu <b21019@freescale.com>
---
 test/mxc_v4l2_test/mxc_v4l2_tvin.c | 494 ++++++++++++++++++-------------------
 1 file changed, 245 insertions(+), 249 deletions(-)

diff --git a/test/mxc_v4l2_test/mxc_v4l2_tvin.c b/test/mxc_v4l2_test/mxc_v4l2_tvin.c
index 85abdde..9a42951 100644
--- a/test/mxc_v4l2_test/mxc_v4l2_tvin.c
+++ b/test/mxc_v4l2_test/mxc_v4l2_tvin.c
@@ -28,6 +28,7 @@ extern "C"{
 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
+#include <stdint.h>
 #include <sys/types.h>
 #include <stdint.h>
 #include <sys/stat.h>
@@ -35,7 +36,9 @@ extern "C"{
 #include <sys/ioctl.h>
 #include <sys/time.h>
 #include <unistd.h>
+#include <asm/types.h>
 #include <linux/videodev.h>
+#include <linux/videodev2.h>
 #include <sys/mman.h>
 #include <math.h>
 #include <string.h>
@@ -46,7 +49,6 @@ extern "C"{
 #include <linux/mxc_v4l2.h>
 #include <linux/ipu.h>
 
-
 #define TFAIL -1
 #define TPASS 0
 
@@ -88,27 +90,27 @@ struct testbuffer capture_buffers[3];
 
 int start_capturing(void)
 {
-	unsigned int i;
-	struct v4l2_buffer buf;
-	enum v4l2_buf_type type;
-
-	for (i = 0; i < g_capture_num_buffers; i++)
-	{
-		memset(&buf, 0, sizeof (buf));
-		buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-		buf.memory = V4L2_MEMORY_MMAP;
-		buf.index = i;
-		if (ioctl(fd_capture_v4l, VIDIOC_QUERYBUF, &buf) < 0)
-		{
-			printf("VIDIOC_QUERYBUF error\n");
-			return TFAIL;
-		}
-
-		capture_buffers[i].length = buf.length;
-		capture_buffers[i].offset = (size_t) buf.m.offset;
-		capture_buffers[i].start = mmap (NULL, capture_buffers[i].length,
-		PROT_READ | PROT_WRITE, MAP_SHARED,
-		fd_capture_v4l, capture_buffers[i].offset);
+        unsigned int i;
+        struct v4l2_buffer buf;
+        enum v4l2_buf_type type;
+
+        for (i = 0; i < g_capture_num_buffers; i++)
+        {
+                memset(&buf, 0, sizeof (buf));
+                buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+                buf.memory = V4L2_MEMORY_MMAP;
+                buf.index = i;
+                if (ioctl(fd_capture_v4l, VIDIOC_QUERYBUF, &buf) < 0)
+                {
+                        printf("VIDIOC_QUERYBUF error\n");
+                        return TFAIL;
+                }
+
+                capture_buffers[i].length = buf.length;
+                capture_buffers[i].offset = (size_t) buf.m.offset;
+                capture_buffers[i].start = mmap (NULL, capture_buffers[i].length,
+                    PROT_READ | PROT_WRITE, MAP_SHARED,
+                    fd_capture_v4l, capture_buffers[i].offset);
 		memset(capture_buffers[i].start, 0xFF, capture_buffers[i].length);
 	}
 
@@ -182,7 +184,7 @@ int v4l_capture_setup(void)
 					v4l_capture_dev);
 			return TFAIL;
 		} else {
-		fprintf (stderr, "%s isn not V4L device,unknow error\n",
+			fprintf (stderr, "%s isn not V4L device,unknow error\n",
 			v4l_capture_dev);
 			return TFAIL;
 		}
@@ -195,12 +197,12 @@ int v4l_capture_setup(void)
 	}
 
 	if (!(cap.capabilities & V4L2_CAP_STREAMING)) {
-			fprintf (stderr, "%s does not support streaming i/o\n",
-				v4l_capture_dev);
-			return TFAIL;
+		fprintf (stderr, "%s does not support streaming i/o\n",
+			v4l_capture_dev);
+		return TFAIL;
 	}
 
-if (ioctl(fd_capture_v4l, VIDIOC_DBG_G_CHIP_IDENT, &chip))
+	if (ioctl(fd_capture_v4l, VIDIOC_DBG_G_CHIP_IDENT, &chip))
 	{
 		printf("VIDIOC_DBG_G_CHIP_IDENT failed.\n");
 		close(fd_capture_v4l);
@@ -241,20 +243,20 @@ if (ioctl(fd_capture_v4l, VIDIOC_DBG_G_CHIP_IDENT, &chip))
 		crop.c = cropcap.defrect; /* reset to default */
 
 		if (ioctl (fd_capture_v4l, VIDIOC_S_CROP, &crop) < 0) {
-						switch (errno) {
-						case EINVAL:
-								/* Cropping not supported. */
-				fprintf (stderr, "%s  doesn't support crop\n",
-					v4l_capture_dev);
-								break;
-						default:
-								/* Errors ignored. */
-								break;
-						}
-				}
-		} else {
-				/* Errors ignored. */
+			switch (errno) {
+				case EINVAL:
+					/* Cropping not supported. */
+					fprintf (stderr, "%s  doesn't support crop\n",
+						v4l_capture_dev);
+					break;
+				default:
+					/* Errors ignored. */
+					break;
+			}
 		}
+	} else {
+		/* Errors ignored. */
+	}
 
 	parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 	parm.parm.capture.timeperframe.numerator = 1;
@@ -267,30 +269,30 @@ if (ioctl(fd_capture_v4l, VIDIOC_DBG_G_CHIP_IDENT, &chip))
 		return TFAIL;
 	}
 
-	   memset(&fmt, 0, sizeof(fmt));
+	memset(&fmt, 0, sizeof(fmt));
 
-		fmt.type                = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-		fmt.fmt.pix.width       = 0;
-		fmt.fmt.pix.height      = 0;
-		fmt.fmt.pix.pixelformat = g_fmt;
-		fmt.fmt.pix.field       = V4L2_FIELD_INTERLACED;
+	fmt.type                = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	fmt.fmt.pix.width       = 0;
+	fmt.fmt.pix.height      = 0;
+	fmt.fmt.pix.pixelformat = g_fmt;
+	fmt.fmt.pix.field       = V4L2_FIELD_INTERLACED;
 
-		if (ioctl (fd_capture_v4l, VIDIOC_S_FMT, &fmt) < 0){
+	if (ioctl (fd_capture_v4l, VIDIOC_S_FMT, &fmt) < 0){
 		fprintf (stderr, "%s iformat not supported \n",
 			v4l_capture_dev);
 		return TFAIL;
 	}
 
-		/* Note VIDIOC_S_FMT may change width and height. */
+	/* Note VIDIOC_S_FMT may change width and height. */
 
-		/* Buggy driver paranoia. */
-		min = fmt.fmt.pix.width * 2;
-		if (fmt.fmt.pix.bytesperline < min)
-				fmt.fmt.pix.bytesperline = min;
+	/* Buggy driver paranoia. */
+	min = fmt.fmt.pix.width * 2;
+	if (fmt.fmt.pix.bytesperline < min)
+		fmt.fmt.pix.bytesperline = min;
 
 	min = fmt.fmt.pix.bytesperline * fmt.fmt.pix.height;
-		if (fmt.fmt.pix.sizeimage < min)
-				fmt.fmt.pix.sizeimage = min;
+	if (fmt.fmt.pix.sizeimage < min)
+		fmt.fmt.pix.sizeimage = min;
 
 	if (ioctl(fd_capture_v4l, VIDIOC_G_FMT, &fmt) < 0)
 	{
@@ -306,31 +308,29 @@ if (ioctl(fd_capture_v4l, VIDIOC_DBG_G_CHIP_IDENT, &chip))
 
 	memset(&req, 0, sizeof (req));
 
-		req.count               = g_capture_num_buffers;
-		req.type                = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-		req.memory              = V4L2_MEMORY_MMAP;
+	req.count               = g_capture_num_buffers;
+	req.type                = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	req.memory              = V4L2_MEMORY_MMAP;
 
-		if (ioctl (fd_capture_v4l, VIDIOC_REQBUFS, &req) < 0) {
-				if (EINVAL == errno) {
-						fprintf (stderr, "%s does not support "
-								 "memory mapping\n", v4l_capture_dev);
-						return TFAIL;
-				} else {
+	if (ioctl (fd_capture_v4l, VIDIOC_REQBUFS, &req) < 0) {
+		if (EINVAL == errno) {
 			fprintf (stderr, "%s does not support "
-								 "memory mapping, unknow error\n", v4l_capture_dev);
-						return TFAIL;
-				}
-		}
-
-		if (req.count < 2) {
-				fprintf (stderr, "Insufficient buffer memory on %s\n",
-						 v4l_capture_dev);
-				return TFAIL;
+					 "memory mapping\n", v4l_capture_dev);
+			return TFAIL;
+		} else {
+			fprintf (stderr, "%s does not support "
+					 "memory mapping, unknow error\n", v4l_capture_dev);
+			return TFAIL;
 		}
+	}
 
+	if (req.count < 2) {
+		fprintf (stderr, "Insufficient buffer memory on %s\n",
+			 v4l_capture_dev);
+		return TFAIL;
+	}
 
-
-		return 0;
+	return 0;
 }
 
 int v4l_output_setup(void)
@@ -346,68 +346,68 @@ int v4l_output_setup(void)
 
 	if (!ioctl(fd_output_v4l, VIDIOC_QUERYCAP, &cap)) {
 		printf("driver=%s, card=%s, bus=%s, "
-				"version=0x%08x, "
-				"capabilities=0x%08x\n",
-				cap.driver, cap.card, cap.bus_info,
-				cap.version,
-				cap.capabilities);
+			"version=0x%08x, "
+			"capabilities=0x%08x\n",
+			cap.driver, cap.card, cap.bus_info,
+			cap.version,
+			cap.capabilities);
 	}
 
 	fmtdesc.index = 0;
 	fmtdesc.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
 	while (!ioctl(fd_output_v4l, VIDIOC_ENUM_FMT, &fmtdesc)) {
 		printf("fmt %s: fourcc = 0x%08x\n",
-				fmtdesc.description,
-				fmtdesc.pixelformat);
+			fmtdesc.description,
+			fmtdesc.pixelformat);
 		fmtdesc.index++;
 	}
 
-		memset(&cropcap, 0, sizeof(cropcap));
-		cropcap.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
-		if (ioctl(fd_output_v4l, VIDIOC_CROPCAP, &cropcap) < 0)
-		{
-				printf("get crop capability failed\n");
+	memset(&cropcap, 0, sizeof(cropcap));
+	cropcap.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+	if (ioctl(fd_output_v4l, VIDIOC_CROPCAP, &cropcap) < 0)
+	{
+		printf("get crop capability failed\n");
 		close(fd_output_v4l);
-				return TFAIL;
-		}
+		return TFAIL;
+	}
 
-		crop.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
-		crop.c.top = g_display_top;
-		crop.c.left = g_display_left;
-		crop.c.width = g_display_width;
-		crop.c.height = g_display_height;
-		if (ioctl(fd_output_v4l, VIDIOC_S_CROP, &crop) < 0)
-		{
-				printf("set crop failed\n");
+	crop.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+	crop.c.top = g_display_top;
+	crop.c.left = g_display_left;
+	crop.c.width = g_display_width;
+	crop.c.height = g_display_height;
+	if (ioctl(fd_output_v4l, VIDIOC_S_CROP, &crop) < 0)
+	{
+		printf("set crop failed\n");
 		close(fd_output_v4l);
-				return TFAIL;
-		}
+		return TFAIL;
+	}
 
-	   // Set rotation
-		ctrl.id = V4L2_CID_ROTATE;
-		ctrl.value = g_rotate;
-		if (ioctl(fd_output_v4l, VIDIOC_S_CTRL, &ctrl) < 0)
-		{
-				printf("set ctrl rotate failed\n");
-				close(fd_output_v4l);
-				return TFAIL;
-		}
-		ctrl.id = V4L2_CID_VFLIP;
-		ctrl.value = g_vflip;
-		if (ioctl(fd_output_v4l, VIDIOC_S_CTRL, &ctrl) < 0)
-		{
-				printf("set ctrl vflip failed\n");
+	// Set rotation
+	ctrl.id = V4L2_CID_ROTATE;
+	ctrl.value = g_rotate;
+	if (ioctl(fd_output_v4l, VIDIOC_S_CTRL, &ctrl) < 0)
+	{
+		printf("set ctrl rotate failed\n");
 		close(fd_output_v4l);
-				return TFAIL;
-		}
-		ctrl.id = V4L2_CID_HFLIP;
-		ctrl.value = g_hflip;
-		if (ioctl(fd_output_v4l, VIDIOC_S_CTRL, &ctrl) < 0)
-		{
-				printf("set ctrl hflip failed\n");
-				close(fd_output_v4l);
-				return TFAIL;
-		}
+		return TFAIL;
+	}
+	ctrl.id = V4L2_CID_VFLIP;
+	ctrl.value = g_vflip;
+	if (ioctl(fd_output_v4l, VIDIOC_S_CTRL, &ctrl) < 0)
+	{
+		printf("set ctrl vflip failed\n");
+		close(fd_output_v4l);
+		return TFAIL;
+	}
+	ctrl.id = V4L2_CID_HFLIP;
+	ctrl.value = g_hflip;
+	if (ioctl(fd_output_v4l, VIDIOC_S_CTRL, &ctrl) < 0)
+	{
+		printf("set ctrl hflip failed\n");
+		close(fd_output_v4l);
+		return TFAIL;
+	}
 	if (g_vdi_enable) {
 		ctrl.id = V4L2_CID_MXC_MOTION;
 		ctrl.value = g_vdi_motion;
@@ -434,28 +434,28 @@ int v4l_output_setup(void)
 		fmt.fmt.pix.field = V4L2_FIELD_INTERLACED_TB;
 	else
 		fmt.fmt.pix.field = V4L2_FIELD_INTERLACED_BT;
-		if (ioctl(fd_output_v4l, VIDIOC_S_FMT, &fmt) < 0)
-		{
-				printf("set format failed\n");
-				return TFAIL;
-		}
+	if (ioctl(fd_output_v4l, VIDIOC_S_FMT, &fmt) < 0)
+	{
+		printf("set format failed\n");
+		return TFAIL;
+	}
 
-		if (ioctl(fd_output_v4l, VIDIOC_G_FMT, &fmt) < 0)
-		{
-				printf("get format failed\n");
-				return TFAIL;
-		}
-		g_frame_size = fmt.fmt.pix.sizeimage;
+	if (ioctl(fd_output_v4l, VIDIOC_G_FMT, &fmt) < 0)
+	{
+		printf("get format failed\n");
+		return TFAIL;
+	}
+	g_frame_size = fmt.fmt.pix.sizeimage;
 
-		memset(&buf_req, 0, sizeof(buf_req));
-		buf_req.count = g_output_num_buffers;
-		buf_req.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
-		buf_req.memory = V4L2_MEMORY_MMAP;
-		if (ioctl(fd_output_v4l, VIDIOC_REQBUFS, &buf_req) < 0)
-		{
-				printf("request buffers failed\n");
-				return TFAIL;
-		}
+	memset(&buf_req, 0, sizeof(buf_req));
+	buf_req.count = g_output_num_buffers;
+	buf_req.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+	buf_req.memory = V4L2_MEMORY_MMAP;
+	if (ioctl(fd_output_v4l, VIDIOC_REQBUFS, &buf_req) < 0)
+	{
+		printf("request buffers failed\n");
+		return TFAIL;
+	}
 
 	return 0;
 }
@@ -463,12 +463,12 @@ int v4l_output_setup(void)
 int
 mxc_v4l_tvin_test(void)
 {
-		struct v4l2_buffer capture_buf, output_buf;
+	struct v4l2_buffer capture_buf, output_buf;
 	v4l2_std_id id;
-		int i, j;
+	int i, j;
 	enum v4l2_buf_type type;
-		int total_time;
-		struct timeval tv_start, tv_current;
+	int total_time;
+	struct timeval tv_start, tv_current;
 
 	if (prepare_output() < 0)
 	{
@@ -489,7 +489,7 @@ mxc_v4l_tvin_test(void)
 	for (i = 0; ; i++) {
 begin:
 		if (ioctl(fd_capture_v4l, VIDIOC_G_STD, &id)) {
-						printf("VIDIOC_G_STD failed.\n");
+			printf("VIDIOC_G_STD failed.\n");
 			return TFAIL;
 		}
 
@@ -549,33 +549,33 @@ begin:
 			return 0;
 		}
 next:
-				memset(&capture_buf, 0, sizeof(capture_buf));
-				capture_buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-				capture_buf.memory = V4L2_MEMORY_MMAP;
-				if (ioctl(fd_capture_v4l, VIDIOC_DQBUF, &capture_buf) < 0)	{
-						printf("VIDIOC_DQBUF failed.\n");
+		memset(&capture_buf, 0, sizeof(capture_buf));
+		capture_buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+		capture_buf.memory = V4L2_MEMORY_MMAP;
+		if (ioctl(fd_capture_v4l, VIDIOC_DQBUF, &capture_buf) < 0) {
+			printf("VIDIOC_DQBUF failed.\n");
 			return TFAIL;
-				}
-
-				memset(&output_buf, 0, sizeof(output_buf));
-				output_buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
-				output_buf.memory = V4L2_MEMORY_MMAP;
-				if (i < g_output_num_buffers) {
-						output_buf.index = i;
-						if (ioctl(fd_output_v4l, VIDIOC_QUERYBUF, &output_buf) < 0)
-						{
-								printf("VIDIOC_QUERYBUF failed\n");
+		}
+
+		memset(&output_buf, 0, sizeof(output_buf));
+		output_buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+		output_buf.memory = V4L2_MEMORY_MMAP;
+		if (i < g_output_num_buffers) {
+			output_buf.index = i;
+			if (ioctl(fd_output_v4l, VIDIOC_QUERYBUF, &output_buf) < 0)
+			{
+				printf("VIDIOC_QUERYBUF failed\n");
 				return TFAIL;
-						}
-				} else {
-						output_buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
-						output_buf.memory = V4L2_MEMORY_MMAP;
-						if (ioctl(fd_output_v4l, VIDIOC_DQBUF, &output_buf) < 0)
-						{
-								printf("VIDIOC_DQBUF failed\n");
+			}
+		} else {
+			output_buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+			output_buf.memory = V4L2_MEMORY_MMAP;
+			if (ioctl(fd_output_v4l, VIDIOC_DQBUF, &output_buf) < 0)
+			{
+				printf("VIDIOC_DQBUF failed\n");
 				return TFAIL;
-						}
-				}
+			}
+		}
 
 		memcpy(output_buffers[output_buf.index].start, capture_buffers[capture_buf.index].start, g_frame_size);
 		if (ioctl(fd_capture_v4l, VIDIOC_QBUF, &capture_buf) < 0) {
@@ -585,33 +585,32 @@ next:
 
 		output_buf.timestamp.tv_sec = tv_start.tv_sec;
 		output_buf.timestamp.tv_usec = tv_start.tv_usec + (g_frame_period * i);
-				if (ioctl(fd_output_v4l, VIDIOC_QBUF, &output_buf) < 0)
-				{
-						printf("VIDIOC_QBUF failed\n");
+		if (ioctl(fd_output_v4l, VIDIOC_QBUF, &output_buf) < 0)
+		{
+			printf("VIDIOC_QBUF failed\n");
 			return TFAIL;
-				}
-				if (i == 1) {
-
-						type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
-						if (ioctl(fd_output_v4l, VIDIOC_STREAMON, &type) < 0) {
-								printf("Could not start stream\n");
+		}
+		if (i == 1) {
+			type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+			if (ioctl(fd_output_v4l, VIDIOC_STREAMON, &type) < 0) {
+				printf("Could not start stream\n");
 				return TFAIL;
-						}
-				}
+			}
+		}
 	}
-		gettimeofday(&tv_current, 0);
-		total_time = (tv_current.tv_sec - tv_start.tv_sec) * 1000000L;
-		total_time += tv_current.tv_usec - tv_start.tv_usec;
-		printf("total time for %u frames = %u us =  %lld fps\n", i, total_time, (i * 1000000ULL) / total_time);
+	gettimeofday(&tv_current, 0);
+	total_time = (tv_current.tv_sec - tv_start.tv_sec) * 1000000L;
+	total_time += tv_current.tv_usec - tv_start.tv_usec;
+	printf("total time for %u frames = %u us =  %lld fps\n", i, total_time, (i * 1000000ULL) / total_time);
 
 	return 0;
 }
 
 int process_cmdline(int argc, char **argv)
 {
-		int i;
+	int i;
 
-		for (i = 1; i < argc; i++) {
+	for (i = 1; i < argc; i++) {
 		if (strcmp(argv[i], "-ow") == 0) {
 			g_display_width = atoi(argv[++i]);
 		}
@@ -624,30 +623,28 @@ int process_cmdline(int argc, char **argv)
 		else if (strcmp(argv[i], "-ol") == 0) {
 			g_display_left = atoi(argv[++i]);
 		}
-				else if (strcmp(argv[i], "-r") == 0) {
-						g_rotate = atoi(argv[++i]);
-				}
-				else if (strcmp(argv[i], "-f") == 0) {
-						i++;
-						g_fmt = v4l2_fourcc(argv[i][0], argv[i][1],argv[i][2],argv[i][3]);
-
+		else if (strcmp(argv[i], "-r") == 0) {
+			g_rotate = atoi(argv[++i]);
+		}
+		else if (strcmp(argv[i], "-f") == 0) {
+			i++;
+			g_fmt = v4l2_fourcc(argv[i][0], argv[i][1],argv[i][2],argv[i][3]);
 			if ((g_fmt != V4L2_PIX_FMT_NV12) &&
 				(g_fmt != V4L2_PIX_FMT_UYVY) &&
 				(g_fmt != V4L2_PIX_FMT_YUYV) &&
-							(g_fmt != V4L2_PIX_FMT_YUV420))
-						{
-				printf("Default format is used: UYVY\n");
-						}
-				}
-				else if (strcmp(argv[i], "-m") == 0) {
+				(g_fmt != V4L2_PIX_FMT_YUV420))	{
+					printf("Default format is used: UYVY\n");
+			}
+		}
+		else if (strcmp(argv[i], "-m") == 0) {
 			g_vdi_enable = 1;
-						g_vdi_motion = atoi(argv[++i]);
-				}
-				else if (strcmp(argv[i], "-tb") == 0) {
-						g_tb = 1;
-				}
-				else if (strcmp(argv[i], "-help") == 0) {
-						printf("MXC Video4Linux TVin Test\n\n" \
+			g_vdi_motion = atoi(argv[++i]);
+		}
+		else if (strcmp(argv[i], "-tb") == 0) {
+			g_tb = 1;
+		}
+		else if (strcmp(argv[i], "-help") == 0) {
+			printf("MXC Video4Linux TVin Test\n\n" \
 				   "Syntax: mxc_v4l2_tvin.out\n" \
 				   " -ow <capture display width>\n" \
 				   " -oh <capture display height>\n" \
@@ -657,35 +654,34 @@ int process_cmdline(int argc, char **argv)
 				   " -m <motion> 0:medium 1:low 2:high, 0-default\n"
 				   " -tb top field first, bottom field first-default\n"
 				   " -f <format, only YU12, YUYV, UYVY and NV12 are supported> \n");
-						return TFAIL;
-			   }
+			return TFAIL;
 		}
+	}
 
-		if ((g_display_width == 0) || (g_display_height == 0)) {
+	if ((g_display_width == 0) || (g_display_height == 0)) {
 		printf("Zero display width or height\n");
-				return TFAIL;
+		return TFAIL;
 	}
 
-		return 0;
+	return 0;
 }
 
-int
-main(int argc, char **argv)
+int main(int argc, char **argv)
 {
-		char fb_device[100] = "/dev/fb0";
-		int fd_fb = 0, i;
-		struct mxcfb_gbl_alpha alpha;
+	char fb_device[100] = "/dev/fb0";
+	int fd_fb = 0, i;
+	struct mxcfb_gbl_alpha alpha;
 	enum v4l2_buf_type type;
 
-		if (process_cmdline(argc, argv) < 0) {
-				return TFAIL;
-		}
+	if (process_cmdline(argc, argv) < 0) {
+		return TFAIL;
+	}
 
-		if ((fd_capture_v4l = open(v4l_capture_dev, O_RDWR, 0)) < 0)
-		{
-				printf("Unable to open %s\n", v4l_capture_dev);
-				return TFAIL;
-		}
+	if ((fd_capture_v4l = open(v4l_capture_dev, O_RDWR, 0)) < 0)
+	{
+		printf("Unable to open %s\n", v4l_capture_dev);
+		return TFAIL;
+	}
 
 	if ((fd_output_v4l = open(v4l_output_dev, O_RDWR, 0)) < 0)
 	{
@@ -693,26 +689,26 @@ main(int argc, char **argv)
 		return TFAIL;
 	}
 
-		if (v4l_capture_setup() < 0) {
-				printf("Setup v4l capture failed.\n");
-				return TFAIL;
+	if (v4l_capture_setup() < 0) {
+		printf("Setup v4l capture failed.\n");
+		return TFAIL;
 	}
 
-		if (v4l_output_setup() < 0) {
-				printf("Setup v4l output failed.\n");
+	if (v4l_output_setup() < 0) {
+		printf("Setup v4l output failed.\n");
 		close(fd_capture_v4l);
-				return TFAIL;
+		return TFAIL;
 	}
 
-		if ((fd_fb = open(fb_device, O_RDWR )) < 0)	{
+	if ((fd_fb = open(fb_device, O_RDWR )) < 0) {
 		printf("Unable to open frame buffer\n");
 		close(fd_capture_v4l);
 		close(fd_output_v4l);
-				return TFAIL;
-		}
+		return TFAIL;
+	}
 
-		/* Overlay setting */
-		alpha.alpha = 0;
+	/* Overlay setting */
+	alpha.alpha = 0;
 	alpha.enable = 1;
 	if (ioctl(fd_fb, MXCFB_SET_GBL_ALPHA, &alpha) < 0) {
 		printf("Set global alpha failed\n");
@@ -724,20 +720,20 @@ main(int argc, char **argv)
 
 	mxc_v4l_tvin_test();
 
-		type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
-		ioctl(fd_output_v4l, VIDIOC_STREAMOFF, &type);
+	type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+	ioctl(fd_output_v4l, VIDIOC_STREAMOFF, &type);
 
-		type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-		ioctl(fd_capture_v4l, VIDIOC_STREAMOFF, &type);
+	type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	ioctl(fd_capture_v4l, VIDIOC_STREAMOFF, &type);
 
-		for (i = 0; i < g_output_num_buffers; i++)
-		{
-				munmap(output_buffers[i].start, output_buffers[i].length);
-		}
-		for (i = 0; i < g_capture_num_buffers; i++)
-		{
-				munmap(capture_buffers[i].start, capture_buffers[i].length);
-		}
+	for (i = 0; i < g_output_num_buffers; i++)
+	{
+		munmap(output_buffers[i].start, output_buffers[i].length);
+	}
+	for (i = 0; i < g_capture_num_buffers; i++)
+	{
+		munmap(capture_buffers[i].start, capture_buffers[i].length);
+	}
 
 	close(fd_capture_v4l);
 	close(fd_output_v4l);
-- 
1.8.0

