From 65df4d5c26c2ee59065f82b1e95497661eff1901 Mon Sep 17 00:00:00 2001
From: Danny Nold <dannynold@freescale.com>
Date: Thu, 19 Aug 2010 17:45:48 -0500
Subject: [PATCH 173/505] ENGR00126492 - EPDC fb unit test: Update to correct
 virtual x/y parameters

Current unit test draws to the framebuffer using actual x and y resolution values.
This code should be factoring virtual x and y resolution values to ensure
that it is drawing properly into the region that is recognized by the driver
as the usable framebuffer region.

Signed-off-by: Danny Nold <dannynold@freescale.com>
---
 test/mxc_fb_test/mxc_epdc_fb_test.c | 113 +++++++++++++++++++++---------------
 1 file changed, 65 insertions(+), 48 deletions(-)

diff --git a/test/mxc_fb_test/mxc_epdc_fb_test.c b/test/mxc_fb_test/mxc_epdc_fb_test.c
index 0334021..f2d5d8a 100644
--- a/test/mxc_fb_test/mxc_epdc_fb_test.c
+++ b/test/mxc_fb_test/mxc_epdc_fb_test.c
@@ -67,6 +67,8 @@ extern "C"{
 
 #define EPDC_STR_ID		"mxc_epdc_fb"
 
+#define  ALIGN_PIXEL_128(x)  ((x+ 127) & ~127)
+
 int fd_fb = 0;
 unsigned short * fb;
 int g_fb_size;
@@ -95,7 +97,9 @@ static void copy_image_to_buffer(int left, int top, int width, int height, uint
 	if (target_buf == BUFFER_FB)
 		fb_ptr =  (uint *)fb;
 	else if (target_buf == BUFFER_OVERLAY)
-		fb_ptr = (uint *)fb + g_fb_size/2/4;
+		fb_ptr = (uint *)fb +
+			(screen_info->xres_virtual * ALIGN_PIXEL_128(screen_info->yres) *
+			screen_info->bits_per_pixel/8)/4;
 	else {
 		printf("Invalid target buffer specified!\n");
 		return;
@@ -107,9 +111,9 @@ static void copy_image_to_buffer(int left, int top, int width, int height, uint
 	}
 
 	for (i = 0; i < height; i++) {
-		dest = fb_ptr + ((i + top) * screen_info->xres + left) * 2 / 4;
+		dest = fb_ptr + ((i + top) * screen_info->xres_virtual + left) * 2 / 4;
 		src = img_ptr + (i * width) * 2 /4;
-		memcpy(fb_ptr + ((i + top) * screen_info->xres + left) * 2 / 4, img_ptr + (i * width) * 2 /4, width * 2);
+		memcpy(fb_ptr + ((i + top) * screen_info->xres_virtual + left) * 2 / 4, img_ptr + (i * width) * 2 /4, width * 2);
 	}
 }
 
@@ -180,7 +184,8 @@ static void draw_rgb_crosshatch(struct fb_var_screeninfo * var, int mode)
 			/* draw vertical strip */
 			for (i = 0; i < square_area_side; i++) {
 
-				stripe_start = (__u32 *)fb + ((i * var->xres) + stripe_width*2*stripe_cnt)/2;
+				stripe_start = (__u32 *)fb + ((i * var->xres_virtual)
+					+ stripe_width*2*stripe_cnt)/2;
 
 				/* draw stripe */
 				memset_dword(stripe_start, horizontal_color, stripe_width / 2);
@@ -217,7 +222,9 @@ static void draw_rgb_crosshatch(struct fb_var_screeninfo * var, int mode)
 
 			/* draw horizontal strip */
 			for (i = 0; i < stripe_width; i++) {
-				stripe_start = (__u32 *)fb + ((stripe_width*2*stripe_cnt + i) * var->xres)/2;
+				stripe_start = (__u32 *)fb +
+					((stripe_width*2*stripe_cnt + i) *
+					var->xres_virtual)/2;
 
 				/* draw stripe */
 				memset_dword(stripe_start, vertical_color, square_area_side / 2);
@@ -257,7 +264,8 @@ static void draw_rgb_crosshatch(struct fb_var_screeninfo * var, int mode)
 			/* draw vertical strip */
 			for (i = 0; i < square_area_side; i++) {
 
-				stripe_start = (__u32 *)fb + ((i * var->xres) + stripe_width*2*stripe_cnt)/2;
+				stripe_start = (__u32 *)fb + ((i * var->xres_virtual)
+					+ stripe_width*2*stripe_cnt)/2;
 
 				/* draw stripe */
 				memset_dword(stripe_start, horizontal_color, stripe_width / 2);
@@ -290,7 +298,9 @@ static void draw_rgb_crosshatch(struct fb_var_screeninfo * var, int mode)
 
 			/* draw horizontal strip */
 			for (i = 0; i < stripe_width; i++) {
-				stripe_start = (__u32 *)fb + ((stripe_width*2*stripe_cnt + i) * var->xres)/2;
+				stripe_start = (__u32 *)fb +
+					((stripe_width*2*stripe_cnt + i) *
+					var->xres_virtual)/2;
 
 				/* draw stripe */
 				memset_dword(stripe_start, vertical_color, square_area_side / 2);
@@ -334,22 +344,22 @@ static void draw_rgb_color_squares(struct fb_var_screeninfo * var)
 	/* Draw red square */
 	for (i = 50; i < 250; i++)
 		for (j = 50; j < 250; j += 2)
-			fbp[(i*var->xres+j)*2/4] = 0xF800F800;
+			fbp[(i*var->xres_virtual+j)*2/4] = 0xF800F800;
 
 	/* Draw green square */
 	for (i = 50; i < 250; i++)
 		for (j = 350; j < 550; j += 2)
-			fbp[(i*var->xres+j)*2/4] = 0x07E007E0;
+			fbp[(i*var->xres_virtual+j)*2/4] = 0x07E007E0;
 
 	/* Draw blue square */
 	for (i = 350; i < 550; i++)
 		for (j = 50; j < 250; j += 2)
-			fbp[(i*var->xres+j)*2/4] = 0x001F001F;
+			fbp[(i*var->xres_virtual+j)*2/4] = 0x001F001F;
 
 	/* Draw black square */
 	for (i = 350; i < 550; i++)
 		for (j = 350; j < 550; j += 2)
-			fbp[(i*var->xres+j)*2/4] = 0x00000000;
+			fbp[(i*var->xres_virtual+j)*2/4] = 0x00000000;
 }
 
 static void draw_y_colorbar(struct fb_var_screeninfo * var)
@@ -372,12 +382,11 @@ static void draw_y_colorbar(struct fb_var_screeninfo * var)
 
 	/*
 	 * Generate left->right color bar
-	 * with color changed every 100 pixels
 	 */
 	for (stripe_cnt = 0; stripe_cnt < num_stripes; stripe_cnt++) {
 		for (i = 0; i < var->yres; i++) {
 			stripe_start =
-			    upd_buf_ptr + ((i * var->xres) +
+			    upd_buf_ptr + ((i * var->xres_virtual) +
 					   (stripe_width * stripe_cnt)) / 4;
 			if ((stripe_width * (stripe_cnt + 1)) > var->xres)
 				stripe_length =
@@ -401,7 +410,7 @@ static void draw_y_colorbar(struct fb_var_screeninfo * var)
 static int test_updates(void)
 {
 	printf("Blank screen\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 
 	printf("Crosshatch updates\n");
@@ -410,7 +419,7 @@ static int test_updates(void)
 	sleep(3);
 
 	printf("Blank screen\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 
 	printf("Squares update\n");
@@ -423,27 +432,27 @@ static int test_updates(void)
 	update_to_display(350, 350, 200, 200, WAVEFORM_MODE_AUTO, TRUE);
 
 	printf("Blank screen\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 
 	printf("FSL updates\n");
-	memset(fb, 0xFF, 800*600*2);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	copy_image_to_buffer(300, 0, 480, 360, fsl_rgb_480x360, BUFFER_FB, &screen_info);
 	update_to_display(300, 0, 480, 560, WAVEFORM_MODE_AUTO, TRUE);
 
-	memset(fb, 0xFF, 800*600*2);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	copy_image_to_buffer(300, 48, 480, 360, fsl_rgb_480x360, BUFFER_FB, &screen_info);
 	update_to_display(300, 0, 480, 560, WAVEFORM_MODE_AUTO, TRUE);
 
-	memset(fb, 0xFF, 800*600*2);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	copy_image_to_buffer(300, 100, 480, 360, fsl_rgb_480x360, BUFFER_FB, &screen_info);
 	update_to_display(300, 0, 480, 560, WAVEFORM_MODE_AUTO, TRUE);
 
-	memset(fb, 0xFF, 800*600*2);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	copy_image_to_buffer(300, 148, 480, 360, fsl_rgb_480x360, BUFFER_FB, &screen_info);
 	update_to_display(300, 0, 480, 560, WAVEFORM_MODE_AUTO, TRUE);
 
-	memset(fb, 0xFF, 800*600*2);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	copy_image_to_buffer(300, 200, 480, 360, fsl_rgb_480x360, BUFFER_FB, &screen_info);
 	update_to_display(300, 0, 480, 560, WAVEFORM_MODE_AUTO, TRUE);
 
@@ -468,7 +477,7 @@ static int test_rotation(void)
 	int i;
 
 	printf("Blank screen\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 
 	for (i = FB_ROTATE_CW; i <= FB_ROTATE_CCW; i++) {
@@ -481,7 +490,10 @@ static int test_rotation(void)
 			return TFAIL;
 		}
 
-		printf("After rotation...xres = %d, yres = %d\n", screen_info.xres, screen_info.yres);
+		printf("New dimensions: xres = %d, xres_virtual = %d,"
+			"yres = %d, yres_virtual = %d\n",
+			screen_info.xres, screen_info.xres_virtual,
+			screen_info.yres, screen_info.yres_virtual);
 
 		printf("Rotated FSL\n");
 		copy_image_to_buffer(0, 0, 480, 360, fsl_rgb_480x360, BUFFER_FB, &screen_info);
@@ -489,7 +501,7 @@ static int test_rotation(void)
 
 		sleep(3);
 		printf("Blank screen\n");
-		memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+		memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 		update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 
 		printf("Rotated squares\n");
@@ -502,7 +514,7 @@ static int test_rotation(void)
 		sleep(2);
 
 		printf("Blank screen\n");
-		memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+		memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 		update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 
 		printf("Rotated crosshatch updates\n");
@@ -511,7 +523,7 @@ static int test_rotation(void)
 		sleep(4);
 
 		printf("Blank screen\n");
-		memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+		memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 		update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 	}
 
@@ -533,7 +545,7 @@ static int test_y8(void)
 	int iter;
 
 	printf("Blank screen\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_GC16, TRUE);
 
 	/*
@@ -557,7 +569,7 @@ static int test_y8(void)
 		}
 
 		printf("Top-half black\n");
-		memset(fb, 0x00, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8/2);
+		memset(fb, 0x00, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8/2);
 		update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_AUTO, FALSE);
 
 		sleep(3);
@@ -600,18 +612,18 @@ static int test_auto_waveform(void)
 	}
 
 	printf("Blank screen - auto-selected to DU\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_AUTO, TRUE);
 
 	/* Draw 0x5 square */
 	for (i = 10; i < 50; i++)
 		for (j = 10; j < 50; j += 2)
-			*((__u32 *)fb + (i*screen_info.xres+j)*2/4) = 0x50505050;
+			*((__u32 *)fb + (i*screen_info.xres_virtual+j)*2/4) = 0x50505050;
 
 	/* Draw 0xA square */
 	for (i = 60; i < 100; i++)
 		for (j = 60; j < 100; j += 2)
-			*((__u32 *)fb + (i*screen_info.xres+j)*2/4) = 0xA0A0A0A0;
+			*((__u32 *)fb + (i*screen_info.xres_virtual+j)*2/4) = 0xA0A0A0A0;
 
 	printf("Update auto-selected to GC4\n");
 	update_to_display(0, 0, 100, 100, WAVEFORM_MODE_AUTO, FALSE);
@@ -627,7 +639,7 @@ static int test_auto_waveform(void)
 	sleep(3);
 
 	printf("Blank screen\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 
 	sleep(2);
@@ -652,7 +664,7 @@ static int test_auto_update(void)
 	int i;
 
 	printf("Blank screen\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 	update_to_display(0, 0, screen_info.xres, screen_info.yres, WAVEFORM_MODE_DU, TRUE);
 
 	printf("Change to auto-update mode\n");
@@ -665,20 +677,20 @@ static int test_auto_update(void)
 
 	printf("Auto-update 1st 5 lines\n");
 	for (i = 0; i < 5; i++) {
-		memset(fb, 0x00, screen_info.xres*5*screen_info.bits_per_pixel/8);
+		memset(fb, 0x00, screen_info.xres_virtual*5*screen_info.bits_per_pixel/8);
 	}
 
 	sleep(1);
 
 	printf("Auto-update middle and lower stripes\n");
 	for (i = 0; i < 5; i++)
-		memset(fb + screen_info.xres*300*screen_info.bits_per_pixel/8/2, 0x00, screen_info.xres*5*screen_info.bits_per_pixel/8);
+		memset(fb + screen_info.xres_virtual*300*screen_info.bits_per_pixel/8/2, 0x00, screen_info.xres_virtual*5*screen_info.bits_per_pixel/8);
 	for (i = 0; i < 5; i++)
-		memset(fb + screen_info.xres*500*screen_info.bits_per_pixel/8/2, 0x00, screen_info.xres*5*screen_info.bits_per_pixel/8);
+		memset(fb + screen_info.xres_virtual*500*screen_info.bits_per_pixel/8/2, 0x00, screen_info.xres_virtual*5*screen_info.bits_per_pixel/8);
 
 	sleep(1);
 	printf("Auto-update blank screen\n");
-	memset(fb, 0xFF, screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8);
+	memset(fb, 0xFF, screen_info.xres_virtual*screen_info.yres*screen_info.bits_per_pixel/8);
 
 	sleep(1);
 
@@ -723,9 +735,9 @@ static int test_pan(void)
 	printf("Ginger update\n");
 	copy_image_to_buffer(0, 0, 800, 600, ginger_rgb_800x600, BUFFER_FB,
 		&screen_info);
-	update_to_display(0, 0, 800, 600, WAVEFORM_MODE_AUTO, FALSE);
+	update_to_display(0, 0, 800, 600, WAVEFORM_MODE_AUTO, TRUE);
 
-	for (y = 0; y <= screen_info.yres; y+=50) {
+	for (y = 0; y + screen_info.yres <= screen_info.yres_virtual; y+=50) {
 		screen_info.yoffset = y;
 		retval = ioctl(fd_fb, FBIOPAN_DISPLAY, &screen_info);
 		if (retval < 0) {
@@ -770,7 +782,8 @@ static int test_overlay(void)
 	copy_image_to_buffer(0, 0, 800, 600, colorbar_rgb_800x600,
 		BUFFER_OVERLAY, &screen_info);
 
-	ol_phys_addr = fix_screen_info.smem_start + screen_info.xres*screen_info.yres*screen_info.bits_per_pixel/8;
+	ol_phys_addr = fix_screen_info.smem_start +
+		screen_info.xres_virtual*ALIGN_PIXEL_128(screen_info.yres)*screen_info.bits_per_pixel/8;
 
 	upd_data.update_mode = UPDATE_MODE_FULL;
 	upd_data.waveform_mode = WAVEFORM_MODE_AUTO;
@@ -784,8 +797,8 @@ static int test_overlay(void)
 	upd_data.use_alt_buffer = TRUE;
 	/* Overlay buffer data */
 	upd_data.alt_buffer_data.phys_addr = ol_phys_addr;
-	upd_data.alt_buffer_data.width = 800;
-	upd_data.alt_buffer_data.height = 600;
+	upd_data.alt_buffer_data.width = screen_info.xres_virtual;
+	upd_data.alt_buffer_data.height = screen_info.yres;
 	upd_data.alt_buffer_data.alt_update_region.left = 0;
 	upd_data.alt_buffer_data.alt_update_region.width = screen_info.xres;
 	upd_data.alt_buffer_data.alt_update_region.top = 0;
@@ -927,6 +940,12 @@ static int test_overlay(void)
 	copy_image_to_buffer(0, 0, 480, 360, fsl_rgb_480x360,
 		BUFFER_OVERLAY, &screen_info);
 
+	ol_phys_addr = fix_screen_info.smem_start +
+		screen_info.xres_virtual*ALIGN_PIXEL_128(screen_info.yres)*screen_info.bits_per_pixel/8;
+	upd_data.alt_buffer_data.phys_addr = ol_phys_addr;
+	upd_data.alt_buffer_data.width = screen_info.xres_virtual;
+	upd_data.alt_buffer_data.height = screen_info.yres;
+
 	/* Update region of overlay shown */
 	upd_data.update_region.left = (screen_info.xres - 480)/2;
 	upd_data.update_region.width = 480;
@@ -1011,8 +1030,6 @@ main(int argc, char **argv)
 	}
 	printf("Set the background to 16-bpp\n");
 	screen_info.bits_per_pixel = 16;
-	screen_info.xres = 800;
-	screen_info.yres = 600;
 	screen_info.grayscale = 0;
 	screen_info.yoffset = 0;
 	screen_info.rotate = FB_ROTATE_UR;
@@ -1022,10 +1039,10 @@ main(int argc, char **argv)
 	{
 		goto err1;
 	}
-	g_fb_size = screen_info.xres * screen_info.yres_virtual * screen_info.bits_per_pixel / 8;
+	g_fb_size = screen_info.xres_virtual * screen_info.yres_virtual * screen_info.bits_per_pixel / 8;
 
-	printf("screen_info.xres = %d\nscreen_info.yres_virtual = %d\nscreen_info.bits_per_pixel = %d\n",
-		screen_info.xres, screen_info.yres_virtual, screen_info.bits_per_pixel);
+	printf("screen_info.xres_virtual = %d\nscreen_info.yres_virtual = %d\nscreen_info.bits_per_pixel = %d\n",
+		screen_info.xres_virtual, screen_info.yres_virtual, screen_info.bits_per_pixel);
 
 	printf("Mem-Mapping FB0\n");
 
@@ -1067,7 +1084,6 @@ main(int argc, char **argv)
 		printf("\nError: Rotation test failed.\n");
 		goto err2;
 	}
-
 	if (test_y8()) {
 		printf("\nError: Y8 test failed.\n");
 		goto err2;
@@ -1092,6 +1108,7 @@ main(int argc, char **argv)
 		printf("\nError: Auto update test failed.\n");
 		goto err2;
 	}
+
 err2:
 	munmap(fb, g_fb_size);
 err1:
-- 
1.8.0

