From 969de01926b963411e5a3df817dd146577d5b960 Mon Sep 17 00:00:00 2001
From: Jason Chen <b02280@freescale.com>
Date: Thu, 19 Nov 2009 16:28:42 +0800
Subject: [PATCH 134/505] ENGR00118578 ipudev test: remove test case 20

remove test case 20 which use F_FBDIRECT_PRIMARYONLY flag in
enlayer
lib.

Signed-off-by: Jason Chen <b02280@freescale.com>
---
 test/mxc_ipudev_test/mxc_ipudev_test.c |   5 +-
 test/mxc_ipudev_test/test_pattern.c    | 227 ++++-----------------------------
 2 files changed, 29 insertions(+), 203 deletions(-)

diff --git a/test/mxc_ipudev_test/mxc_ipudev_test.c b/test/mxc_ipudev_test/mxc_ipudev_test.c
index 66a93e4..90577d3 100644
--- a/test/mxc_ipudev_test/mxc_ipudev_test.c
+++ b/test/mxc_ipudev_test/mxc_ipudev_test.c
@@ -137,9 +137,8 @@ int main(int argc, char *argv[])
 			"17: 3 screen layer test IPC ProcessA(first_layer + sencond_layer) + ProcessB(third_layer) with globla alpha blending\n" \
 			"18: 3 screen layer test IPC ProcessA(first_layer + sencond_layer) + ProcessB(third_layer) with local alpha blending\n" \
 			"19: 3 screen layer test IPC ProcessA(first_layer) ProcessB(sencond_layer) ProcessC(third_layer) with local alpha blending\n" \
-			"20: 2 screen layer test IPC ProcessA(first_layer) ProcessB(sencond_layer) with DP local alpha blending\n" \
-			"21: 2 screen layer test IPC ProcessA(first_layer) ProcessB(sencond_layer) with local alpha blending plus tv copy\n" \
-			"22: Horizontally splitted video test on TV(support upsizing), assuming the TV uses MEM_DC_SYNC channel\n\n");
+			"20: 2 screen layer test IPC ProcessA(first_layer) ProcessB(sencond_layer) with local alpha blending plus tv copy\n" \
+			"21: Horizontally splitted video test on TV(support upsizing), assuming the TV uses MEM_DC_SYNC channel\n\n");
 		return -1;
 	}
 
diff --git a/test/mxc_ipudev_test/test_pattern.c b/test/mxc_ipudev_test/test_pattern.c
index 05848a4..67b6d54 100644
--- a/test/mxc_ipudev_test/test_pattern.c
+++ b/test/mxc_ipudev_test/test_pattern.c
@@ -1389,12 +1389,6 @@ void * second_layer_thread_func(void *arg)
 	int load_time = 0;
 	int update_time = 0;
 	int bufcnt = BUFCNT_2ND;
-	int blank = FB_BLANK_UNBLANK;
-	int fd_fb = 0;
-	char *alpha_buf0 = NULL;
-	char *alpha_buf1 = NULL;
-	unsigned long loc_alpha_phy_addr0;
-	unsigned long loc_alpha_phy_addr1;
 
 	ret = getFBInfor(&fb_width, &fb_height, &fb_bpp);
 	if(ret == -1)
@@ -1404,93 +1398,22 @@ void * second_layer_thread_func(void *arg)
 	}
 
 	memset(&second_layer, 0, sizeof(ScreenLayer));
-	if (op_type & DP_LOC_SEP_ALP_OV) {
-		struct fb_var_screeninfo fb_var;
-        	struct mxcfb_loc_alpha l_alpha;
 
-		bufcnt = 2;
-		if ((fd_fb = open(OVERLAYFBDEV, O_RDWR, 0)) < 0) {
-			printf("Unable to open /dev/fb2\n");
-		}
-
-		/* set overlay fb */
-		if ( ioctl(fd_fb, FBIOGET_VSCREENINFO, &fb_var) < 0) {
-			printf("Get FB var info failed!\n");
-		}
-		fb_var.xres = fb_width/2;
-		fb_var.xres_virtual = fb_var.xres;
-		fb_var.yres = fb_height/2;
-		fb_var.yres_virtual = 2 * fb_var.yres;
-		if ( ioctl(fd_fb, FBIOPUT_VSCREENINFO, &fb_var) < 0) {
-			printf("Put FB var info failed!\n");
-		}
-
-		if ( ioctl(fd_fb, FBIOGET_VSCREENINFO, &fb_var) < 0) {
-			printf("Get FB var info failed!\n");
-		}
-		fb_width = fb_var.xres;
-		fb_height = fb_var.yres;
-
-		/* DP local alpha */
-		l_alpha.enable = 1;
-		l_alpha.alpha_phy_addr0 = 0;
-		l_alpha.alpha_phy_addr1 = 0;
-		if ( ioctl(fd_fb, MXCFB_SET_LOC_ALPHA, &l_alpha) < 0) {
-			printf("Set local alpha failed!\n");
-		}
-		loc_alpha_phy_addr0 =
-			(unsigned long)(l_alpha.alpha_phy_addr0);
-		loc_alpha_phy_addr1 =
-			(unsigned long)(l_alpha.alpha_phy_addr1);
-
-		alpha_buf_size = fb_var.xres * fb_var.yres;
-
-		alpha_buf0 = (char *)mmap(0, alpha_buf_size,
-					 PROT_READ | PROT_WRITE,
-					 MAP_SHARED, fd_fb,
-					 loc_alpha_phy_addr0);
-		if ((int)alpha_buf0 == -1) {
-			printf("\nError: failed to map alpha buffer 0"
-			       " to memory.\n");
-			close(fd_fb);
-		}
-		alpha_buf1 = (char *)mmap(0, alpha_buf_size,
-					 PROT_READ | PROT_WRITE,
-					 MAP_SHARED, fd_fb,
-					 loc_alpha_phy_addr1);
-		if ((int)alpha_buf1 == -1) {
-			printf("\nError: failed to map alpha buffer 1"
-			       " to memory.\n");
-			munmap((void *)alpha_buf0, alpha_buf_size);
-			close(fd_fb);
-		}
-		ioctl(fd_fb, FBIOBLANK, blank);
-
-		/* The window shows graphics and video planes. */
-		gen_fill_alpha_in_separate_buffer(alpha_buf0, alpha_buf_size, 0x80);
-
-		gen_fill_alpha_in_separate_buffer(alpha_buf1, alpha_buf_size, 0x80);
-
-		memcpy(second_layer.fbdev, OVERLAYFBDEV, strlen(OVERLAYFBDEV)+1);
-		second_layer.pPrimary = NULL;
-		second_layer.flag = F_FBDIRECT_PRIMARYONLY;
-	} else {
-		i=100;
-		while(i)
-		{
-			i--;
-			second_layer.pPrimary = GetPrimarySLHandle(PRIMARYFBDEV);
-			if(second_layer.pPrimary == NULL)
-				usleep(200*1000);
-			else
-				break;
-		}
-		if(i==0)
-		{
-			printf("Should create primary layer firstly. \n");
-			ret = -1;
-			goto err;
-		}
+	i=100;
+	while(i)
+	{
+		i--;
+		second_layer.pPrimary = GetPrimarySLHandle(PRIMARYFBDEV);
+		if(second_layer.pPrimary == NULL)
+			usleep(200*1000);
+		else
+			break;
+	}
+	if(i==0)
+	{
+		printf("Should create primary layer firstly. \n");
+		ret = -1;
+		goto err;
 	}
 
 	alpha_buf_size = 0;
@@ -1504,8 +1427,7 @@ void * second_layer_thread_func(void *arg)
 	SL_height = second_layer.screenRect.bottom - second_layer.screenRect.top;
 	if (op_type & IC_LOC_PIX_ALP_OV)
 		second_layer.fmt = v4l2_fourcc('R', 'G', 'B', 'A');
-	else if ((op_type & DP_LOC_SEP_ALP_OV) ||
-		(op_type & COPY_TV)) /* for better performance */
+	else if (op_type & COPY_TV) /* for better performance */
 		second_layer.fmt = v4l2_fourcc('U', 'Y', 'V', 'Y');
 	else
 		second_layer.fmt = v4l2_fourcc('B', 'G', 'R', '3');
@@ -1560,8 +1482,7 @@ void * second_layer_thread_func(void *arg)
 	param.destRot = 0;
 
 	/* just add third layer to this screenlayer to show the performance*/
-	if ((op_type & DP_LOC_SEP_ALP_OV) ||
-		(op_type & COPY_TV)){
+	if (op_type & COPY_TV){
 		sec_param.srcWidth = 320;
 		sec_param.srcHeight = 240;
 		sec_param.srcFmt = v4l2_fourcc('I', '4', '2', '0');
@@ -1577,8 +1498,7 @@ void * second_layer_thread_func(void *arg)
 	}
 
 	buf_size = param.srcWidth * param.srcHeight * 3/2;
-	if ((op_type & IC_LOC_SEP_ALP_OV) ||
-		(op_type & DP_LOC_SEP_ALP_OV))
+	if (op_type & IC_LOC_SEP_ALP_OV)
 		alpha_buf_size = SL_width * SL_height;
 	ret = dma_memory_alloc(buf_size, bufcnt, paddr_2nd, buf_2nd);
 	if ( ret < 0) {
@@ -1606,8 +1526,7 @@ void * second_layer_thread_func(void *arg)
 			goto err2;
 		}
 
-		if ((op_type & DP_LOC_SEP_ALP_OV) ||
-			(op_type & COPY_TV)){
+		if (op_type & COPY_TV){
 			sec_param.srcPaddr = paddr_2nd[i%bufcnt];
 			if ((ret = LoadScreenLayer(&second_layer, &sec_param, i%bufcnt)) != E_RET_SUCCESS) {
 				printf("LoadScreenLayer sec err %d\n", ret);
@@ -1676,73 +1595,6 @@ void * second_layer_thread_func(void *arg)
 						gen_fill_alpha_in_pixel_for_point(second_layer.bufVaddr[i%bufcnt], second_layer.fmt, SL_width, x, y, alpha_val);
 			}
 		}
-		/* Fill local alpha buffer */
-		else if (op_type & DP_LOC_SEP_ALP_OV) {
-			if (i > FRM_CNT/4 && i <= 2*FRM_CNT/4) {
-				/*
-				 * The middle quarter window shows
-				 * video plane only.
-				 */
-				if (i%2)
-					fill_alpha_buffer(alpha_buf0,
-							  SL_width/4,
-							  SL_height/4,
-							  3*SL_width/4,
-							  3*SL_height/4,
-							  SL_width,
-							  0x00);
-				else
-					fill_alpha_buffer(alpha_buf1,
-							  SL_width/4,
-							  SL_height/4,
-							  3*SL_width/4,
-							  3*SL_height/4,
-							  SL_width,
-							  0x00);
-			} else if (i > 2*FRM_CNT/4 && i <= 3*FRM_CNT/4) {
-				/*
-				 * The middle quarter window shows
-				 * graphics plane only.
-				 */
-				if (i%2)
-					fill_alpha_buffer(alpha_buf0,
-							  SL_width/4,
-							  SL_height/4,
-							  3*SL_width/4,
-							  3*SL_height/4,
-							  SL_width,
-							  0xff);
-				else
-					fill_alpha_buffer(alpha_buf1,
-							  SL_width/4,
-							  SL_height/4,
-							  3*SL_width/4,
-							  3*SL_height/4,
-							  SL_width,
-							  0xff);
-			} else if (i > 3*FRM_CNT/4 && i < FRM_CNT) {
-				/*
-				 * The middle quarter window shows
-				 * graphics and video planes.
-				 */
-				if (i%2)
-					fill_alpha_buffer(alpha_buf0,
-							  SL_width/4,
-							  SL_height/4,
-							  3*SL_width/4,
-							  3*SL_height/4,
-							  SL_width,
-							  0x80);
-				else
-					fill_alpha_buffer(alpha_buf1,
-							  SL_width/4,
-							  SL_height/4,
-							  3*SL_width/4,
-							  3*SL_height/4,
-							  SL_width,
-							  0x80);
-			}
-		}
 
 		gettimeofday(&frame_begin, NULL);
 		gettimeofday(&update_begin, NULL);
@@ -1751,16 +1603,15 @@ void * second_layer_thread_func(void *arg)
 			printf("FlipScreenLayerBuf err %d\n", ret);
 			goto err2;
 		}
-		if ((op_type & DP_LOC_SEP_ALP_OV) == 0) {
-			sem_wait(semIDUnit);
-			if (!vshmUnitTest[2]) {
-				if ((ret = UpdateScreenLayer(&second_layer)) != E_RET_SUCCESS) {
-					printf("UpdateScreenLayer err %d\n",ret);
-					goto err2;
-				}
+
+		sem_wait(semIDUnit);
+		if (!vshmUnitTest[2]) {
+			if ((ret = UpdateScreenLayer(&second_layer)) != E_RET_SUCCESS) {
+				printf("UpdateScreenLayer err %d\n",ret);
+				goto err2;
 			}
-			sem_post(semIDUnit);
 		}
+		sem_post(semIDUnit);
 
 		gettimeofday(&update_end, NULL);
 
@@ -1789,26 +1640,6 @@ void * second_layer_thread_func(void *arg)
 	printf("2nd layer update avg frame time %d us\n", update_time/i);
 	printf("2nd layer avg frame time %d us\n", show_time/i);
 
-	if (op_type & DP_LOC_SEP_ALP_OV) {
-		struct mxcfb_loc_alpha l_alpha;
-
-		/*
-		 * Disable DP local alpha function, otherwise,
-		 * the alpha channel will be enabled even if we
-		 * use DP global alpha next time and this will
-		 * cause display issue.
-		 */
-		l_alpha.enable = 0;
-		l_alpha.alpha_phy_addr0 = 0;
-		l_alpha.alpha_phy_addr1 = 0;
-		if (ioctl(fd_fb, MXCFB_SET_LOC_ALPHA, &l_alpha) < 0) {
-			printf("Set local alpha failed\n");
-		}
-
-		blank = FB_BLANK_POWERDOWN;
-		ioctl(fd_fb, FBIOBLANK, blank);
-		close(fd_fb);
-	}
 err2:
 	dma_memory_free(buf_size, bufcnt, paddr_2nd, buf_2nd);
 err1:
@@ -2322,14 +2153,10 @@ int run_test_pattern(int pattern, ipu_test_handle_t * test_handle)
 		return screenlayer_test_ipc(3, 1, IC_LOC_SEP_ALP_OV);
 	}
 	if (pattern == 20){
-		printf("[No mandatory test]Screen layer IPC(DP local alpha): ProcessA(first_layer fb0) ProcessB(second_layer fb2):\n");
-		return screenlayer_test_ipc(2, 0, DP_LOC_SEP_ALP_OV);
-	}
-	if (pattern == 21){
 		printf("[No mandatory test]Screen layer IPC(local alpha + tvout): ProcessA(first_layer) ProcessB(second_layer):\n");
 		return screenlayer_test_ipc(2, 0, IC_LOC_SEP_ALP_OV | COPY_TV);
 	}
-	if (pattern == 22){
+	if (pattern == 21){
 		printf("Horizontally slipped video test on TV(support upsizing), assuming the TV uses MEM_DC_SYNC channel:\n");
 		return h_splitted_tv_video_playback(test_handle);
 	}
-- 
1.8.0

