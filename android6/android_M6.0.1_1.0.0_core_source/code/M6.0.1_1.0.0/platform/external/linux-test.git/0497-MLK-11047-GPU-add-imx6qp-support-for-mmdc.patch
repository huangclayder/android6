From ffae6fc008fa7358769f2d59c0838b9b0d424e3a Mon Sep 17 00:00:00 2001
From: Shawn Xiao <b49994@freescale.com>
Date: Thu, 4 Jun 2015 16:44:21 +0800
Subject: [PATCH 497/505] MLK-11047: GPU: add imx6qp support for mmdc

Add the reversion check for imx6qp, and modificate some register address
based on the reversion check result.

Signed-off-by: Shawn Xiao <b49994@freescale.com>
---
 test/mmdc/mmdc.c | 136 +++++++++++++++++++++++++++++++++++++++++++++++++------
 test/mmdc/mmdc.h |  26 ++++++++++-
 2 files changed, 147 insertions(+), 15 deletions(-)

diff --git a/test/mmdc/mmdc.c b/test/mmdc/mmdc.c
index fb8e0ce..0b4364f 100644
--- a/test/mmdc/mmdc.c
+++ b/test/mmdc/mmdc.c
@@ -45,44 +45,106 @@ static unsigned long getTickCount(void)
 
 void start_mmdc_profiling(pMMDC_t mmdc)
 {
-
-	mmdc->madpcr0 = 0xA;		// Reset counters and clear Overflow bit
+	/* Reset counters and clear Overflow bit */
+	if(cpu_is_mx6qp() == 1)
+		mmdc->madpcr0 = 0x1A;
+	else if( cpu_is_mx6q() == 1
+		|| cpu_is_mx6dl() == 1
+		|| cpu_is_mx6sl() == 1
+		|| cpu_is_mx6sx() == 1)
+		mmdc->madpcr0 = 0xA;
+	else
+		return;
 	msync(&(mmdc->madpcr0),4,MS_SYNC);
 
-	mmdc->madpcr0 = 0x1;		// Enable counters
+	/* Enable counters */
+	if(cpu_is_mx6qp() == 1)
+		mmdc->madpcr0 = 0x11;
+	else if( cpu_is_mx6q() == 1
+		|| cpu_is_mx6dl() == 1
+		|| cpu_is_mx6sl() == 1
+		|| cpu_is_mx6sx() == 1)
+		mmdc->madpcr0 = 0x1;
+	else
+		return;
 	msync(&(mmdc->madpcr0),4,MS_SYNC);
 
 }
 
 void stop_mmdc_profiling(pMMDC_t mmdc)
 {
-	mmdc->madpcr0 = 0x0;		// Disable counters
+	/* Disable counters */
+	if(cpu_is_mx6qp() == 1)
+		mmdc->madpcr0 = 0x10;
+	else if( cpu_is_mx6q() == 1
+		|| cpu_is_mx6dl() == 1
+		|| cpu_is_mx6sl() == 1
+		|| cpu_is_mx6sx() == 1)
+		mmdc->madpcr0 = 0x0;
+	else
+		return;
 	msync(&(mmdc->madpcr0),4,MS_SYNC);
 
 }
 
 void pause_mmdc_profiling(pMMDC_t mmdc)
 {
-	mmdc->madpcr0 = 0x3;		// PRF_FRZ = 1
+	/* PRF_FRZ = 1 */
+	if(cpu_is_mx6qp() == 1)
+		mmdc->madpcr0 = 0x13;
+	else if( cpu_is_mx6q() == 1
+		|| cpu_is_mx6dl() == 1
+		|| cpu_is_mx6sl() == 1
+		|| cpu_is_mx6sx() == 1)
+		mmdc->madpcr0 = 0x3;
+	else
+		return;
 	msync(&(mmdc->madpcr0),4,MS_SYNC);
 }
 
 void resume_mmdc_profiling(pMMDC_t mmdc)
 {
-	mmdc->madpcr0 = 0x1;		// PRF_FRZ = 0
+	/* PRF_FRZ = 0 */
+	if(cpu_is_mx6qp() == 1)
+		mmdc->madpcr0 = 0x11;
+	else if( cpu_is_mx6q() == 1
+		|| cpu_is_mx6dl() == 1
+		|| cpu_is_mx6sl() == 1
+		|| cpu_is_mx6sx() == 1)
+		mmdc->madpcr0 = 0x1;
+	else
+		return;
 	msync(&(mmdc->madpcr0),4,MS_SYNC);
 }
 void load_mmdc_results(pMMDC_t mmdc)
 {
-	//printf("before : mmdc->madpcr0 0x%x\n",mmdc->madpcr0);
-	mmdc->madpcr0 |= 0x4; //sets the PRF_FRZ bit to 1 in order to load the results into the registers
-	//printf("after : mmdc->madpcr0 0x%x\n",mmdc->madpcr0);
+	/* printf("before : mmdc->madpcr0 0x%x\n",mmdc->madpcr0);*/
+	/* sets the PRF_FRZ bit to 1 in order to load the results into the registers */
+	if(cpu_is_mx6qp() == 1)
+		mmdc->madpcr0 |= 0x14; 
+	else if( cpu_is_mx6q() == 1
+		|| cpu_is_mx6dl() == 1
+		|| cpu_is_mx6sl() == 1
+		|| cpu_is_mx6sx() == 1)
+		mmdc->madpcr0 |= 0x4;
+	else
+		return;
+	/* printf("after : mmdc->madpcr0 0x%x\n",mmdc->madpcr0); */
 	msync(&(mmdc->madpcr0),4,MS_SYNC);
 }
 
 void clear_mmdc_results(pMMDC_t mmdc)
 {
-	mmdc->madpcr0 = 0xA;            // Reset counters and clear Overflow bit
+	/* Reset counters and clear Overflow bit */
+	if(cpu_is_mx6qp() == 1)
+		mmdc->madpcr0 = 0x1A;
+	else if( cpu_is_mx6q() == 1
+		|| cpu_is_mx6dl() == 1
+		|| cpu_is_mx6sl() == 1
+		|| cpu_is_mx6sx() == 1)
+		mmdc->madpcr0 = 0xA;
+	else
+		return;
 	msync(&(mmdc->madpcr0),4,MS_SYNC);
 }
 
@@ -164,6 +226,7 @@ static int get_system_rev(void)
 	char buf[2048];
 	int nread;
 	char *tmp, *rev;
+	int rev_major, rev_minor;
 	int ret = -1;
 
 	fp = fopen("/proc/cpuinfo", "r");
@@ -192,7 +255,7 @@ static int get_system_rev(void)
 		}
 	}
 
-	//cpuinfo is changed in 3.10.9 kernel, new way is used.
+	/* cpuinfo is changed in 3.10.9 kernel, new way is used. */
 	if((ret == 0) && (system_rev ==0))
 	{
 		ret = -1;
@@ -209,11 +272,32 @@ static int get_system_rev(void)
 			return ret;
 		}
 		buf[nread] = '\0';
+		fp = fopen("/sys/devices/soc0/revision", "r");
+		if (fp == NULL) {
+			perror("/sys/devices/soc0/revision");
+			return ret;
+		}
+
+		if (fscanf(fp, "%d.%d", &rev_major, &rev_minor) != 2) {
+			perror("fscanf");
+			fclose(fp);
+			return ret;
+		}
+		fclose(fp);
+
 		if(strncmp(buf,"i.MX6Q",6)==0)
 		{
-			system_rev= 0x63000;
-			ret =0;
-			printf("i.MX6Q detected.\n");
+			if ( rev_major == CHIP_REV_2_0 )
+			{
+				system_rev= 0x65000;
+				ret =0;
+				printf("i.MX6QP detected.\n");
+			}else if( rev_major == CHIP_REV_1_0 )
+			{
+				system_rev= 0x63000;
+				ret =0;
+				printf("i.MX6Q detected.\n");
+			}
 		}else if(strncmp(buf,"i.MX6DL",7)==0){
 			system_rev= 0x61000;
 			ret = 0;
@@ -330,12 +414,18 @@ int main(int argc, char **argv)
 				}else if((strcmp(argv[j], "GPU3D")==0)&&(cpu_is_mx6dl()==1)){
 				  ((pMMDC_t)A)->madpcr1 = axi_gpu3d_6dl;
 				  printf("MMDC GPU3D \n");
+				}else if((strcmp(argv[j], "GPU3D")==0)&&(cpu_is_mx6qp()==1)){
+				  ((pMMDC_t)A)->madpcr1 = axi_gpu3d_6qp;
+				  printf("MMDC GPU3D \n");
 				}else if((strcmp(argv[j], "GPU3D")==0)&&(cpu_is_mx6q()==1)){
 				  ((pMMDC_t)A)->madpcr1 = axi_gpu3d_6q;
 				  printf("MMDC GPU3D \n");
 				}else if((strcmp(argv[j], "GPU2D1")==0)&&(cpu_is_mx6dl()==1)){
 				  ((pMMDC_t)A)->madpcr1 = axi_gpu2d1_6dl;
 				  printf("MMDC GPU2D1 \n");
+				}else if((strcmp(argv[j], "GPU2D")==0)&&(cpu_is_mx6qp()==1)){
+				  ((pMMDC_t)A)->madpcr1 = axi_gpu2d_6qp;
+				  printf("MMDC GPU2D \n");
 				}else if((strcmp(argv[j], "GPU2D")==0)&&(cpu_is_mx6q()==1)){
 				  ((pMMDC_t)A)->madpcr1 = axi_gpu2d_6q;
 				  printf("MMDC GPU2D \n");
@@ -348,9 +438,27 @@ int main(int argc, char **argv)
 				}else if((strcmp(argv[j],"VPU")==0)&&(cpu_is_mx6dl()==1)){
 				  ((pMMDC_t)A)->madpcr1 = axi_vpu_6dl;
 				  printf("MMDC VPU \n");
+				}else if((strcmp(argv[j],"VPU")==0)&&(cpu_is_mx6qp()==1)){
+				   ((pMMDC_t)A)->madpcr1 = axi_vpu_6qp;
+				   printf("MMDC VPU \n");
 				}else if((strcmp(argv[j],"VPU")==0)&&(cpu_is_mx6q()==1)){
 				   ((pMMDC_t)A)->madpcr1 = axi_vpu_6q;
 				   printf("MMDC VPU \n");
+				}else if((strcmp(argv[j],"PRE")==0)&&(cpu_is_mx6qp()==1)){
+				   ((pMMDC_t)A)->madpcr1 = axi_pre_6qp;
+				   printf("MMDC PRE \n");
+				}else if((strcmp(argv[j],"PRE0")==0)&&(cpu_is_mx6qp()==1)){
+				   ((pMMDC_t)A)->madpcr1 = axi_pre0_6qp;
+				   printf("MMDC PRE0 \n");
+				}else if((strcmp(argv[j],"PRE1")==0)&&(cpu_is_mx6qp()==1)){
+				   ((pMMDC_t)A)->madpcr1 = axi_pre1_6qp;
+				   printf("MMDC PRE1 \n");
+				}else if((strcmp(argv[j],"PRE2")==0)&&(cpu_is_mx6qp()==1)){
+				   ((pMMDC_t)A)->madpcr1 = axi_pre2_6qp;
+				   printf("MMDC PRE2 \n");
+				}else if((strcmp(argv[j],"PRE3")==0)&&(cpu_is_mx6qp()==1)){
+				   ((pMMDC_t)A)->madpcr1 = axi_pre3_6qp;
+				   printf("MMDC PRE3 \n");
 				}else if((strcmp(argv[j],"GPUVG")==0)&&(cpu_is_mx6q()==1)){
 				   ((pMMDC_t)A)->madpcr1 = axi_openvg_6q;
 				   printf("MMDC GPUVG \n");
diff --git a/test/mmdc/mmdc.h b/test/mmdc/mmdc.h
index 82e19a3..f9ef56e 100644
--- a/test/mmdc/mmdc.h
+++ b/test/mmdc/mmdc.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013-2014 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2013-2015 Freescale Semiconductor, Inc. All Rights Reserved.
  */
 
 /*
@@ -139,12 +139,26 @@ void print_mmdc_profiling_results(MMDC_PROFILE_RES_t results, MMDC_RES_TYPE_t pr
 
 extern unsigned int system_rev;
 
+#define CHIP_REV_1_0            	0x1
+#define CHIP_REV_2_0			0x2
+
+#define cpu_is_mx6qp()		mxc_is_cpu(0x65)
 #define cpu_is_mx6q()		mxc_is_cpu(0x63)
 #define cpu_is_mx6dl()		mxc_is_cpu(0x61)
 #define cpu_is_mx6sl()		mxc_is_cpu(0x60)
 #define cpu_is_mx6sx()		mxc_is_cpu(0x62)
 #define mxc_is_cpu(part)        ((mxc_cpu() == (unsigned int)part) ? 1 : 0)
 #define mxc_cpu()               (system_rev >> 12)
+#define mxc_cpu_rev()           (system_rev & 0xFF)
+#define mxc_cpu_is_rev(rev)     \
+        ((mxc_cpu_rev() == (unsigned int)rev) ? 1 : ((mxc_cpu_rev() < (unsigned int)rev) ? -1 : 2))
+#define MXC_REV(type)                           \
+static inline int type## _rev (int rev)         \
+{                                               \
+        return (type() ? mxc_cpu_is_rev(rev) : 0);      \
+}
+MXC_REV(cpu_is_mx6q);
+
 #define axi_ipu1                0x00070004
 #define axi_ipu2_6q             0x00070005
 #define axi_gpu3d_6dl           0x003F0002
@@ -170,4 +184,14 @@ extern unsigned int system_rev;
 #define axi_usb_6sx             0x007F0046
 #define axi_default             0x00000000
 
+#define axi_gpu3d_6qp		0x00170006
+#define axi_gpu2d_6qp		0x001F0016
+#define axi_pre_6qp		0x00070007  /* for all PRE */
+#define axi_pre0_6qp		0x001F0007
+#define axi_pre1_6qp		0x001F000F
+#define axi_pre2_6qp		0x001F0017
+#define axi_pre3_6qp		0x001F001F
+#define axi_vpu_6qp		0x003F0002
+
+
 #endif /*MMDC_H_*/
-- 
1.8.0

