From ec62c459ccdda5b6916ec9d42be56f1ad77cf2ec Mon Sep 17 00:00:00 2001
From: Frank Li <Frank.Li@freescale.com>
Date: Thu, 27 Sep 2012 12:49:45 +0800
Subject: [PATCH 352/505] ENGR00226072 Add etm-objdump tools

./etm-objdump.py --trace-decoder=./etm
 --trace-decoder-options="--pft-1.1 --sourceid-match=1"
 --objfile=/home/b20596/nfs/linux-2.6-imx/vmlinux
 --objdump=arm-linux-objdump tracebuf

Signed-off-by: Frank Li <Frank.Li@freescale.com>
---
 test/etm/etm-objdump.py | 177 +++++++++++++++++++++++++++++
 test/etm/objdump.py     | 291 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 468 insertions(+)
 create mode 100755 test/etm/etm-objdump.py
 create mode 100755 test/etm/objdump.py

diff --git a/test/etm/etm-objdump.py b/test/etm/etm-objdump.py
new file mode 100755
index 0000000..2467adb
--- /dev/null
+++ b/test/etm/etm-objdump.py
@@ -0,0 +1,177 @@
+#! /usr/bin/env python3
+#
+# Copyright (C) 2012 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the 'License');
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an 'AS IS' BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+import optparse
+import re
+import subprocess
+import sys
+import objdump
+
+parser = optparse.OptionParser("usage: %prog [options] tracefile")
+parser.add_option("--trace-decoder",
+                  dest="trace_decoder", default="./etm",
+                  help="execute COMMAND to decode trace-file", metavar="COMMAND")
+parser.add_option("--trace-decoder-options", "--tdoption",
+                  action="append", dest="trace_decoder_options", default=[],
+                  help="pass OPTIONS to trace-decoder", metavar="OPTIONS")
+parser.add_option("--objfile",
+                  dest="objfile", default="vmlinux",
+                  help="pass FILE to objdump", metavar="FILE")
+parser.add_option("--objdump",
+                  dest="objdump", default="arm-eabi-objdump",
+                  help="execute COMMAND to decode executable", metavar="COMMAND")
+parser.add_option("-q", "--quiet",
+                  action="store_false", dest="verbose", default=True,
+                  help="don't print status messages to stdout")
+
+(options, args) = parser.parse_args()
+
+if len(args) != 1:
+    parser.error("incorrect number of arguments")
+
+tracefile = args[0]
+tracetool = ' '.join([options.trace_decoder] + options.trace_decoder_options)
+
+if options.verbose:
+    print("trace file:", tracefile)
+    print("trace decoder:", tracetool)
+    print("objdump:", options.objdump)
+    print("objfile:", options.objfile)
+    print()
+
+r_etm_execute = re.compile(r"^\s*([EN])\(([0-9a-f]{8})\)(?:\s*\+(?P<branch_points>\d+) branch points)?(?:\s*Waited\s*(?P<wait>\d+))?$")
+r_etm_branch = re.compile(r"^\s*Branch ([0-9a-f]{8})\s*(.*)$")
+r_etm_isync = re.compile(r"^\s*I-sync Context (?P<context>[0-9a-f]{8}), IB (?P<ib>[0-9a-f]{2}), Addr (?P<addr>[0-9a-f]{8})$")
+
+
+if options.verbose:
+    print("Running objdump")
+    sys.stdout.flush()
+
+instr = objdump.objdump(options.objdump, options.objfile)
+
+if options.verbose:
+    print("objdump done")
+    sys.stdout.flush()
+
+addr_offset = 0
+branch_target = None
+need_branch_target = False
+return_stack = []
+
+p = subprocess.Popen(tracetool + " <" + tracefile, stdout=subprocess.PIPE, shell=True)
+for lineb in p.stdout:
+    line = str(lineb, encoding='utf8')
+    m = r_etm_execute.match(line);
+    if (m):
+        guessed_addr = int(m.group(2), 16)
+
+        if branch_target is not None:
+            addr_offset = branch_target - guessed_addr
+            branch_target = None
+        elif need_branch_target:
+            if len(return_stack):
+                addr_offset = return_stack.pop() - guessed_addr
+                #print("Used return stack")
+            else:
+                print("Missing branch target -- don't trust address")
+        need_branch_target = False;
+
+        adjusted_addr = guessed_addr + addr_offset
+        obj = instr.get(adjusted_addr)
+        if obj is None:
+            print("Unknown adjusted_addr,", hex(adjusted_addr), ", offset", addr_offset, ", try clearing offset")
+            obj = instr.get(guessed_addr)
+            if obj is not None:
+                addr_offset = 0
+                adjusted_addr = guessed_addr
+
+        executed = m.group(1)
+        branch_points = m.group('branch_points')
+
+        if obj is not None and branch_points is not None:
+            while obj is not None and not objdump.is_branch(obj):
+                comment = obj['comment']
+                comment_string = '' if comment is None else comment
+                print("   ({}) {:<35}\t{}\t{:<40}\t{}".format(obj['addr'], obj['label'], obj['instr'], obj['args'], comment_string))
+
+                addr_offset += 4 # TODO: add thumb support
+                adjusted_addr = guessed_addr + addr_offset
+                obj = instr.get(adjusted_addr)
+            addr_offset += 4 # TODO: add thumb support
+
+        waited = m.group('wait')
+        waited_string = '' if waited is None else "\tWaited " + waited
+        if obj is None:
+            print("  {}({}) {}".format(executed, m.group(2), waited_string))
+        else:
+            if objdump.is_branch_and_link(obj):
+                return_stack.append(adjusted_addr + 4) # TODO: add thumb support
+            comment = obj['comment']
+            comment_string = '' if comment is None else comment
+
+            #print('  ' + executed + '(' + obj['addr'] + ') ' + obj['label'], obj['instr'], obj['args'], obj['comment'], sep='\t')
+            if (obj):
+                print("  {}({}) {:<35}\t{}\t{:<40}\t{}{}".format(executed, obj['addr'], obj['label'], obj['instr'], obj['args'], comment_string, waited_string))
+            if executed == 'N' and not objdump.is_conditional(obj):
+                print("Error: Unconditional instruction marked as not executed")
+            #if (executed == 'N' and objdump.is_branch(obj)):
+            #    print("    skipped branch")
+            if (executed == 'E' and objdump.is_branch(obj)):
+                branch_target = objdump.branch_addr(obj)
+                if branch_target is None:
+                    #print("    branch to unknown location:", obj['args'])
+                    addr_offset = 0;
+                    need_branch_target = True
+                #else:
+                #    print("    branch to", hex(branch_target))
+                print()
+
+        #print("instr:", m.group(1), obj)
+    else:
+        m = r_etm_branch.match(line)
+        if m:
+            new_branch_target = int(m.group(1), 16)
+            if branch_target is not None:
+                if branch_target != new_branch_target:
+                    print("Warning: Branch target changed from", hex(branch_target), "to", hex(new_branch_target))
+                else:
+                    print("Unneeded branch")
+            branch_target = new_branch_target
+        else:
+            m = r_etm_isync.match(line)
+            if m:
+                del return_stack[:]
+                new_branch_target = int(m.group('addr'), 16)
+                if branch_target is not None:
+                    if branch_target != new_branch_target:
+                        print("I-sync: Branch target changed from", hex(branch_target), "to", hex(new_branch_target))
+                    else:
+                        print("I-sync")
+                else:
+                    print("I-sync")
+
+                branch_target = new_branch_target
+            else:
+                print(line.rstrip('\n'))
+
+
+p.wait()
+
+
+
+print("done")
diff --git a/test/etm/objdump.py b/test/etm/objdump.py
new file mode 100755
index 0000000..45d13b1
--- /dev/null
+++ b/test/etm/objdump.py
@@ -0,0 +1,291 @@
+# objdump module
+#
+# Copyright (C) 2012 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import re
+import subprocess
+
+r_objdump_label = re.compile(r'^([0-9a-f]{8}) <(.*)>:$')
+r_objdump_instr = re.compile(r'^(?P<addr>[0-9a-f]{8}):'
+                              '\t(?P<opcode>[0-9a-f]{8})'
+                              '\s*(?:\t(?P<instr>[^\t\n]*))?'
+                              '(?:\t(?P<args>[^\t\n]*))?'
+                              '(?:\t(?P<comment>.*))?$')
+r_objdump_branch_addr = re.compile(r'^([0-9a-f]{8}).*$')
+
+instr_condition = frozenset([
+    'eq',  # Equal
+    'ne',  # Not equal
+    'cs',  # Carry set (identical to HS)
+    'hs',  # Unsigned higher or same (identical to CS)
+    'cc',  # Carry clear (identical to LO)
+    'lo',  # Unsigned lower (identical to CC)
+    'mi',  # Minus or negative result
+    'pl',  # Positive or zero result
+    'vs',  # Overflow
+    'vc',  # No overflow
+    'hi',  # Unsigned higher
+    'ls',  # Unsigned lower or same
+    'ge',  # Signed greater than or equal
+    'lt',  # Signed less than
+    'gt',  # Signed greater than
+    'le',  # Signed less than or equal
+    'al',  # Always (this is the default)
+    ])
+
+instr_branch_and_link = frozenset([
+    'bl',
+    'blx',
+    ])
+
+instr_branch_without_link = frozenset([
+    'b',
+    'bx',
+    ])
+
+instr_branch = frozenset(instr_branch_and_link | instr_branch_without_link)
+
+instr_cp = frozenset([
+    'mrc',
+    'mcr',
+    'mcr2',
+    'mcrr',
+    'mcrr2',
+    'mrs',
+    'msr',
+    ])
+
+instr_ignore = frozenset([
+    'cmp',
+    'cmn',
+    'str',
+    'strt',
+    'strb',
+    'strbt',
+    'strh',
+    'strd',
+    'strex',
+    'strexd',
+    'tst',
+    'teq',
+    'nop',
+    'push',
+    'stm',
+    'stmia',
+    'stmib',
+    'stmda',
+    'stmdb',
+    'cpsid',
+    'cpsie',
+    'isb',
+    'dsb',
+    'dmb',
+    'wfi',
+    'wfe',
+    'svc',
+    'fmxr',
+    'fmsr',
+    'vstmia',
+    'vldmia',
+    'pld',
+    'clrex',
+    'sev',
+    '.word',
+    ])
+
+instr_destreg = frozenset([
+    'mov',
+    'movt',
+    'movw',
+    'mvn',
+    'add',
+    'adc',
+    'sub',
+    'sbc',
+    'and',
+    'orr',
+    'ror',
+    'eor',
+    'asr',
+    'lsr',
+    'lsl',
+    'rrx',
+    'rsb',
+    'rsc',
+    'bic',
+    'mul',
+    'mla',
+    'mls',
+    'rev',
+    'ldr',
+    'ldrb',
+    'ldrbt',
+    'ldrh',
+    'ldrht',
+    'ldrd',
+    'ldrt',
+    'ldrsb',
+    'ldrsh',
+    'ldrex',
+    'ldrexd',
+    'clz',
+    'rev',
+    'rev16',
+    'bfc',
+    'bfi',
+    'sxtb16',
+    'sxtb',
+    'sxth',
+    'sxtab16',
+    'sxtab',
+    'sxtah',
+    'uxtb16',
+    'uxtb',
+    'uxth',
+    'uxtab16',
+    'uxtab',
+    'uxtah',
+    'ubfx',
+    'sbfx',
+    'umull',
+    'umlal',
+    'smull',
+    'smulbb',
+    'smlal',
+    'fmrx',
+    'fmrs',
+    'vmov',
+    ])
+
+instr_ldm = frozenset([
+    'ldm',
+    'ldmia',
+    'ldmib',
+    'ldmda',
+    'ldmdb',
+    'pop',
+    ])
+
+instr_all = frozenset(
+    instr_branch |
+    instr_cp |
+    instr_ignore |
+    instr_destreg |
+    instr_ldm
+    )
+
+
+def is_branch(obj):
+    instr = obj['instr']
+
+    if ((instr[:-2] in instr_all or
+         (len(instr) > 3 and instr[-3] == 's' and instr[:-3] in instr_all)
+        ) and instr[-2:] in instr_condition):
+        instr = instr[:-2]
+
+    if instr[-1:] == 's' and instr[:-1] in instr_all:
+        instr = instr[:-1]
+
+    if instr in instr_branch:
+        return True
+
+    if instr in instr_cp:
+        return False
+
+    if instr in instr_ignore:
+        return False
+
+    args = obj['args']
+    if args:
+        args = args.split(',')
+
+    if instr in instr_destreg:
+        #print("check dest reg", args[0])
+        if args[0] == 'pc':
+            return True
+        return False
+
+    if instr in instr_ldm:
+        #args = set(map(lambda arg: arg.strip('{ }'), args))
+        args = set([arg.strip('{ }') for arg in args])
+        #print("check dest reg", args, 'pc' in args)
+        if 'pc' in args:
+            return True
+        return False
+
+    print('unknown instruction', instr, args, obj)
+
+    return False
+
+
+def is_branch_and_link(obj):
+    instr = obj['instr']
+
+    if ((instr[:-2] in instr_all or (len(instr) > 3 and instr[-3] == 's' and
+            instr[:-3] in instr_all)) and instr[-2:] in instr_condition):
+        instr = instr[:-2]
+
+    return instr in instr_branch_and_link
+
+
+def is_conditional(obj):
+    instr = obj['instr']
+
+    return (instr[:-2] in instr_all or (len(instr) > 3 and instr[-3] == 's' and
+            instr[:-3] in instr_all)) and instr[-2:] in instr_condition
+
+
+def branch_addr(obj):
+    branch_target_match = r_objdump_branch_addr.match(obj['args'])
+    if branch_target_match:
+        return int(branch_target_match.group(1), 16)
+    else:
+        return None
+
+
+def objdump(command, filename):
+    instr = dict()
+    label = ''
+    p = subprocess.Popen([command, '-d', filename], stdout=subprocess.PIPE)
+    for lineb in p.stdout:
+        line = str(lineb, encoding='utf8')
+        m = r_objdump_label.match(line)
+        if m:
+            base_addr = int(m.group(1), 16)
+            label = m.group(2)
+            #print("label:", m.group(1), '-', m.group(2))
+        m = r_objdump_instr.match(line)
+        if m:
+            #print("instr:", m.group(1), '-', m.group(2), '-', m.group(3), "-",
+            #      m.group(4), '-', m.group(5))
+            obj = m.groupdict()
+            addr = int(obj['addr'], 16)
+            obj['label'] = label + ' + ' + hex(addr - base_addr)
+            instr[addr] = obj
+            #is_branch(obj) # test all instructions
+
+        #line = line.rstrip('\n')
+        #t = line.split('\t')
+        #print("got line:")
+        #print(line)
+        #print("got components:")
+        #print(t)
+        #if (t[0].endswith(':') and len(t) > 2):
+        #  print('instruction at ', t[0].rstrip(':'), ', opcode ',
+        #        t[1], ' - ', t[2:])
+
+    p.wait()
+    return instr
+
-- 
1.8.0

