From eef2fb977eb74ccd684cb5067faef01dc984d204 Mon Sep 17 00:00:00 2001
From: Jason Chen <b02280@freescale.com>
Date: Mon, 31 May 2010 16:52:17 +0800
Subject: [PATCH 158/505] ENGR00124026 vpu unit test: add ipu lib display
 support

Add ipu lib display support.

Signed-off-by: Jason Chen <b02280@freescale.com>
---
 test/mxc_vpu_test/Makefile   |   4 +-
 test/mxc_vpu_test/dec.c      | 111 ++++++++++------
 test/mxc_vpu_test/display.c  | 303 +++++++++++++++++++++++++++++++++++++++++++
 test/mxc_vpu_test/main.c     |  19 ++-
 test/mxc_vpu_test/vpu_test.h |  42 ++++--
 5 files changed, 425 insertions(+), 54 deletions(-)

diff --git a/test/mxc_vpu_test/Makefile b/test/mxc_vpu_test/Makefile
index 50cbce6..8363683 100644
--- a/test/mxc_vpu_test/Makefile
+++ b/test/mxc_vpu_test/Makefile
@@ -11,7 +11,7 @@ OBJ = main.o \
       loopback.o
 
 # list of platforms which want this test case
-INCLUDE_LIST:=IMX27ADS IMX31ADS IMX37_3STACK IMX51
+INCLUDE_LIST:=IMX27ADS IMX31ADS IMX37_3STACK IMX51 IMX53
 
 ifeq ($(PLATFORM),$(findstring $(PLATFORM),$(INCLUDE_LIST)))
 TARGET = mxc_vpu_test.out
@@ -22,7 +22,7 @@ endif
 all: $(TARGET)
 
 $(TARGET): $(OBJ)
-	$(LINK) -lpthread -o $(TARGET) $(OBJ) -lvpu
+	$(LINK) -lpthread -o $(TARGET) $(OBJ) ${LIBS} -lvpu -lipu
 	mkdir -p $(OBJDIR)
 	mv $(TARGET) $(OBJDIR)
 	cp autorun-vpu.sh $(OBJDIR)
diff --git a/test/mxc_vpu_test/dec.c b/test/mxc_vpu_test/dec.c
index 06cb46b..9410c84 100644
--- a/test/mxc_vpu_test/dec.c
+++ b/test/mxc_vpu_test/dec.c
@@ -669,7 +669,8 @@ decoder_start(struct decode *dec)
 	int disp_clr_index = -1, actual_display_index = -1, field = V4L2_FIELD_NONE;
 	int is_waited_int = 0;
 
-	if ((dec->cmdl->dst_scheme == PATH_V4L2) && (dec->cmdl->ipu_rot_en))
+	if (((dec->cmdl->dst_scheme == PATH_V4L2) || (dec->cmdl->dst_scheme == PATH_IPU))
+			&& (dec->cmdl->ipu_rot_en))
 		rot_en = 0;
 
 	/* deblock_en is zero on mx37 and mx51 since it is cleared in decode_open() function. */
@@ -727,7 +728,7 @@ decoder_start(struct decode *dec)
 		deblock_fb = &fb[dblkid];
 	}
 
-	if (dec->cmdl->dst_scheme == PATH_V4L2) {
+	if ((dec->cmdl->dst_scheme == PATH_V4L2) || (dec->cmdl->dst_scheme == PATH_IPU)) {
 		img_size = dec->stride * dec->picheight;
 	} else {
 		img_size = dec->picwidth * dec->picheight * 3 / 2;
@@ -1025,13 +1026,15 @@ decoder_start(struct decode *dec)
 			warn_msg("VPU doesn't have picture to be displayed.\n"
 				"\toutinfo.indexFrameDisplay = %d\n",
 						outinfo.indexFrameDisplay);
-			if (dec->cmdl->format != STD_MJPG && disp_clr_index >= 0) {
-				err = vpu_DecClrDispFlag(handle, disp_clr_index);
-				if (err)
-					err_msg("vpu_DecClrDispFlag failed Error code"
-							" %d\n", err);
+			if (dec->cmdl->dst_scheme != PATH_IPU) {
+				if (dec->cmdl->format != STD_MJPG && disp_clr_index >= 0) {
+					err = vpu_DecClrDispFlag(handle, disp_clr_index);
+					if (err)
+						err_msg("vpu_DecClrDispFlag failed Error code"
+								" %d\n", err);
+				}
+				disp_clr_index = outinfo.indexFrameDisplay;
 			}
-			disp_clr_index = outinfo.indexFrameDisplay;
 			continue;
 		}
 
@@ -1040,7 +1043,7 @@ decoder_start(struct decode *dec)
 		else
 			actual_display_index = outinfo.indexFrameDisplay;
 
-		if (dec->cmdl->dst_scheme == PATH_V4L2) {
+		if ((dec->cmdl->dst_scheme == PATH_V4L2) || (dec->cmdl->dst_scheme == PATH_IPU)) {
 			if (deblock_en) {
 				deblock_fb->bufY =
 					disp->buffers[disp->buf.index]->offset;
@@ -1050,32 +1053,40 @@ decoder_start(struct decode *dec)
 			}
 
 			if (cpu_is_mx5x())
-				err = v4l_put_data(disp, actual_display_index, field);
+				if (dec->cmdl->dst_scheme == PATH_V4L2)
+					err = v4l_put_data(disp, actual_display_index, field);
+				else
+					err = ipu_put_data(disp, actual_display_index, field);
 			else
-				err = v4l_put_data(disp, actual_display_index, V4L2_FIELD_ANY);
+				if (dec->cmdl->dst_scheme == PATH_V4L2)
+					err = v4l_put_data(disp, actual_display_index, V4L2_FIELD_ANY);
+				else
+					err = ipu_put_data(disp, actual_display_index, V4L2_FIELD_ANY);
 
 			if (err)
 				return -1;
 
-			if (dec->cmdl->format != STD_MJPG && disp_clr_index >= 0) {
-				err = vpu_DecClrDispFlag(handle, disp_clr_index);
-				if (err)
-					err_msg("vpu_DecClrDispFlag failed Error code"
-							" %d\n", err);
-			}
+			if (dec->cmdl->dst_scheme == PATH_V4L2) {
+				if (dec->cmdl->format != STD_MJPG && disp_clr_index >= 0) {
+					err = vpu_DecClrDispFlag(handle, disp_clr_index);
+					if (err)
+						err_msg("vpu_DecClrDispFlag failed Error code"
+								" %d\n", err);
+				}
 
-			if (dec->cmdl->format == STD_MJPG) {
-				rotid++;
-				rotid %= dec->fbcount;
-			} else if (rot_en || dering_en) {
-				disp_clr_index = outinfo.indexFrameDisplay;
-				if (disp->buf.index != -1)
-                                        rotid = disp->buf.index; /* de-queued buffer as next rotation buffer */
-                                else
-                                        rotid++;
+				if (dec->cmdl->format == STD_MJPG) {
+					rotid++;
+					rotid %= dec->fbcount;
+				} else if (rot_en || dering_en) {
+					disp_clr_index = outinfo.indexFrameDisplay;
+					if (disp->buf.index != -1)
+						rotid = disp->buf.index; /* de-queued buffer as next rotation buffer */
+					else
+						rotid++;
+				}
+				else
+					disp_clr_index = disp->buf.index;
 			}
-			else
-				disp_clr_index = disp->buf.index;
 		} else {
 			pfb = pfbpool[actual_display_index];
 
@@ -1152,9 +1163,12 @@ decoder_free_framebuffer(struct decode *dec)
 
 	totalfb = dec->fbcount + dec->extrafb;
 
-	if (dec->cmdl->dst_scheme == PATH_V4L2) {
+	if ((dec->cmdl->dst_scheme == PATH_V4L2) || (dec->cmdl->dst_scheme == PATH_IPU)) {
 		if (dec->disp) {
-			v4l_display_close(dec->disp);
+			if (dec->cmdl->dst_scheme == PATH_V4L2)
+				v4l_display_close(dec->disp);
+			else
+				ipu_display_close(dec->disp);
 			dec->disp = NULL;
 		}
 
@@ -1171,8 +1185,9 @@ decoder_free_framebuffer(struct decode *dec)
 	}
 
 	/* deblock_en is zero on mx37 and mx51 since it is cleared in decode_open() function. */
-	if ((dec->cmdl->dst_scheme != PATH_V4L2) ||
-	    ((dec->cmdl->dst_scheme == PATH_V4L2) && deblock_en)) {
+	if (((dec->cmdl->dst_scheme != PATH_V4L2) && (dec->cmdl->dst_scheme != PATH_IPU)) ||
+			(((dec->cmdl->dst_scheme == PATH_V4L2) || (dec->cmdl->dst_scheme == PATH_IPU))
+			 && deblock_en)) {
 		for (i = 0; i < totalfb; i++) {
 			framebuf_free(dec->pfbpool[i]);
 		}
@@ -1249,7 +1264,8 @@ decoder_allocate_framebuffer(struct decode *dec)
 	vpu_mem_desc *mvcol_md = NULL;
 	Rect rotCrop;
 
-	if ((dec->cmdl->dst_scheme == PATH_V4L2) && (dec->cmdl->ipu_rot_en))
+	if (((dec->cmdl->dst_scheme == PATH_V4L2) || (dec->cmdl->dst_scheme == PATH_IPU))
+			&& (dec->cmdl->ipu_rot_en))
 		rot_en = 0;
 
 	if (rot_en || dering_en) {
@@ -1258,7 +1274,8 @@ decoder_allocate_framebuffer(struct decode *dec)
 		 * are allocated for rotation if path is V4L,then we can delay 1 frame
 		 * de-queue from v4l queue to improve performance.
 		 */
-		dec->rot_buf_count = (dec->cmdl->dst_scheme == PATH_V4L2) ? 2 : 1;
+		dec->rot_buf_count = ((dec->cmdl->dst_scheme == PATH_V4L2) ||
+				(dec->cmdl->dst_scheme == PATH_IPU)) ? 2 : 1;
 		dec->extrafb += dec->rot_buf_count;
 	}
 
@@ -1287,8 +1304,8 @@ decoder_allocate_framebuffer(struct decode *dec)
 		return -1;
 	}
 
-	if ((dst_scheme != PATH_V4L2) ||
-	    ((dst_scheme == PATH_V4L2) && deblock_en)) {
+	if (((dst_scheme != PATH_V4L2) && (dst_scheme != PATH_IPU)) ||
+			(((dst_scheme == PATH_V4L2) || (dst_scheme == PATH_IPU)) && deblock_en)) {
 
 		for (i = 0; i < totalfb; i++) {
 			pfbpool[i] = framebuf_alloc(dec->cmdl->format, dec->mjpg_fmt,
@@ -1307,7 +1324,7 @@ decoder_allocate_framebuffer(struct decode *dec)
 		}
 	}
 
-	if (dst_scheme == PATH_V4L2) {
+	if ((dst_scheme == PATH_V4L2) || (dst_scheme == PATH_IPU)) {
 		rotation.rot_en = dec->cmdl->rot_en;
 		rotation.rot_angle = dec->cmdl->rot_angle;
 
@@ -1317,9 +1334,15 @@ decoder_allocate_framebuffer(struct decode *dec)
 		}
 		if (rotation.rot_en) {
 			swapCropRect(dec, &rotCrop);
-			disp = v4l_display_open(dec, totalfb, rotation, rotCrop);
+			if (dst_scheme == PATH_V4L2)
+				disp = v4l_display_open(dec, totalfb, rotation, rotCrop);
+			else
+				disp = ipu_display_open(dec, totalfb, rotation, rotCrop);
 		} else
-			disp = v4l_display_open(dec, totalfb, rotation, dec->picCropRect);
+			if (dst_scheme == PATH_V4L2)
+				disp = v4l_display_open(dec, totalfb, rotation, dec->picCropRect);
+			else
+				disp = ipu_display_open(dec, totalfb, rotation, dec->picCropRect);
 
 		if (disp == NULL) {
 			goto err;
@@ -1337,7 +1360,10 @@ decoder_allocate_framebuffer(struct decode *dec)
 			}
 
 			for (i = 0; i < totalfb; i++) {
-				fb[i].bufY = disp->buffers[i]->offset;
+				if (dst_scheme == PATH_V4L2)
+					fb[i].bufY = disp->buffers[i]->offset;
+				else
+					fb[i].bufY = disp->ipu_bufs[i].ipu_paddr;
 				fb[i].bufCb = fb[i].bufY + img_size;
 				fb[i].bufCr = fb[i].bufCb + (img_size / divX / divY);
 				/* allocate MvCol buffer here */
@@ -1373,10 +1399,13 @@ err1:
 	if (dst_scheme == PATH_V4L2) {
 		v4l_display_close(disp);
 		dec->disp = NULL;
+	} else if (dst_scheme == PATH_IPU) {
+		ipu_display_close(disp);
+		dec->disp = NULL;
 	}
 
 err:
-	if ((dst_scheme != PATH_V4L2) ||
+	if (((dst_scheme != PATH_V4L2) && (dst_scheme != PATH_IPU))||
 	   ((dst_scheme == PATH_V4L2) && deblock_en )) {
 		for (i = 0; i < totalfb; i++) {
 			framebuf_free(pfbpool[i]);
diff --git a/test/mxc_vpu_test/display.c b/test/mxc_vpu_test/display.c
index cc46dba..8458233 100644
--- a/test/mxc_vpu_test/display.c
+++ b/test/mxc_vpu_test/display.c
@@ -38,6 +38,309 @@
 #define V4L2_MXC_ROTATE_90_RIGHT_HFLIP          6
 #define V4L2_MXC_ROTATE_90_LEFT                 7
 
+static __inline int queue_size(struct ipu_queue * q)
+{
+        if (q->tail >= q->head)
+                return (q->tail - q->head);
+        else
+                return ((q->tail + QUEUE_SIZE) - q->head);
+}
+
+static __inline int queue_buf(struct ipu_queue * q, int idx)
+{
+        if (((q->tail + 1) % QUEUE_SIZE) == q->head)
+                return -1;      /* queue full */
+        q->list[q->tail] = idx;
+        q->tail = (q->tail + 1) % QUEUE_SIZE;
+        return 0;
+}
+
+static __inline int dequeue_buf(struct ipu_queue * q)
+{
+        int ret;
+        if (q->tail == q->head)
+                return -1;      /* queue empty */
+        ret = q->list[q->head];
+        q->head = (q->head + 1) % QUEUE_SIZE;
+        return ret;
+}
+
+static __inline int peek_next_buf(struct ipu_queue * q)
+{
+        if (q->tail == q->head)
+                return -1;      /* queue empty */
+        return q->list[q->head];
+}
+
+int ipu_memory_alloc(int size, int cnt, dma_addr_t paddr[], void * vaddr[], int fd_fb_alloc)
+{
+	int i, ret = 0;
+
+	for (i=0;i<cnt;i++) {
+		/*alloc mem from DMA zone*/
+		/*input as request mem size */
+		paddr[i] = size;
+		if ( ioctl(fd_fb_alloc, FBIO_ALLOC, &(paddr[i])) < 0) {
+			printf("Unable alloc mem from /dev/fb0\n");
+			close(fd_fb_alloc);
+			ret = -1;
+			goto done;
+		}
+
+		vaddr[i] = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED,
+				fd_fb_alloc, paddr[i]);
+		if (vaddr[i] == MAP_FAILED) {
+			printf("mmap failed!\n");
+			ret = -1;
+			goto done;
+		}
+	}
+done:
+	return ret;
+}
+
+void ipu_memory_free(int size, int cnt, dma_addr_t paddr[], void * vaddr[], int fd_fb_alloc)
+{
+	int i;
+
+	for (i=0;i<cnt;i++) {
+		if (vaddr[i])
+			munmap(vaddr[i], size);
+		if (paddr[i])
+			ioctl(fd_fb_alloc, FBIO_FREE, &(paddr[i]));
+	}
+}
+
+static pthread_mutex_t ipu_mutex;
+static pthread_cond_t ipu_cond;
+static int ipu_waiting = 0;
+static int ipu_running = 0;
+static inline void wait_queue()
+{
+	pthread_mutex_lock(&ipu_mutex);
+	ipu_waiting = 1;
+	pthread_cond_wait(&ipu_cond, &ipu_mutex);
+	pthread_mutex_unlock(&ipu_mutex);
+}
+
+static inline void wakeup_queue()
+{
+	pthread_cond_signal(&ipu_cond);
+}
+
+extern int quitflag;
+void * disp_loop_thread(void *arg)
+{
+	struct decode *dec = (struct decode *)arg;
+	DecHandle handle = dec->handle;
+	struct vpu_display *disp = dec->disp;
+	int index = -1, disp_clr_index, err, mode;
+	pthread_attr_t attr;
+
+	ipu_running = 1;
+
+	pthread_attr_init(&attr);
+	pthread_attr_setschedpolicy(&attr, SCHED_RR);
+
+	while(1) {
+		disp_clr_index = index;
+		index = dequeue_buf(&(disp->ipu_q));
+		if (index < 0) {
+			wait_queue();
+			ipu_waiting = 0;
+			index = dequeue_buf(&(disp->ipu_q));
+			if (index < 0) {
+				info_msg("thread is going to finish\n");
+				break;
+			}
+		}
+
+		if (disp->ncount == 0)
+			disp->input.user_def_paddr[0] = disp->ipu_bufs[index].ipu_paddr;
+		else if (disp->ncount == 1) {
+			disp->input.user_def_paddr[1] = disp->ipu_bufs[index].ipu_paddr;
+			mode = OP_STREAM_MODE | TASK_PP_MODE;
+			err = mxc_ipu_lib_task_init(&(disp->input), NULL, &(disp->output), NULL, mode, &(disp->ipu_handle));
+			if (err < 0) {
+				err_msg("mxc_ipu_lib_task_init failed, err %d\n", err);
+				quitflag = 1;
+				return NULL;
+			}
+			/* it only enable ipu task and finish first frame */
+			err = mxc_ipu_lib_task_buf_update(&(disp->ipu_handle), 0, 0, 0, NULL, NULL);
+			if (err < 0) {
+				err_msg("mxc_ipu_lib_task_buf_update failed, err %d\n", err);
+				quitflag = 1;
+				break;
+			}
+		} else {
+			err = mxc_ipu_lib_task_buf_update(&(disp->ipu_handle), disp->ipu_bufs[index].ipu_paddr,
+					0, 0, NULL, NULL);
+			if (err < 0) {
+				err_msg("mxc_ipu_lib_task_buf_update failed, err %d\n", err);
+				quitflag = 1;
+				break;
+			}
+		}
+
+		if ((dec->cmdl->format != STD_MJPG) && (disp_clr_index >= 0) && (!disp->stopping)) {
+			err = vpu_DecClrDispFlag(handle, disp_clr_index);
+			if (err) {
+				err_msg("vpu_DecClrDispFlag failed Error code %d\n", err);
+				quitflag = 1;
+				break;
+			}
+		}
+		disp->ncount++;
+	}
+	mxc_ipu_lib_task_uninit(&(disp->ipu_handle));
+	pthread_attr_destroy(&attr);
+	info_msg("Disp loop thread exit\n");
+	ipu_running = 0;
+	return NULL;
+}
+
+struct vpu_display *
+ipu_display_open(struct decode *dec, int nframes, struct rot rotation, Rect cropRect)
+{
+	int width = dec->picwidth;
+	int height = dec->picheight;
+	int left = cropRect.left;
+	int top = cropRect.top;
+	int right = cropRect.right;
+	int bottom = cropRect.bottom;
+	int disp_width = dec->cmdl->width;
+	int disp_height = dec->cmdl->height;
+	int err = 0, i;
+	struct vpu_display *disp;
+	struct mxcfb_gbl_alpha alpha;
+	struct fb_var_screeninfo fb_var;
+
+	disp = (struct vpu_display *)calloc(1, sizeof(struct vpu_display));
+	if (disp == NULL) {
+		err_msg("falied to allocate vpu_display\n");
+		return NULL;
+	}
+
+	/* set alpha */
+	disp->fd = open("/dev/fb0", O_RDWR, 0);
+	if (disp->fd < 0) {
+		err_msg("unable to open fb0\n");
+		free(disp);
+		return NULL;
+	}
+	alpha.alpha = 0;
+	alpha.enable = 1;
+	if (ioctl(disp->fd, MXCFB_SET_GBL_ALPHA, &alpha) < 0) {
+		err_msg("set alpha blending failed\n");
+		close(disp->fd);
+		free(disp);
+		return NULL;
+	}
+	if ( ioctl(disp->fd, FBIOGET_VSCREENINFO, &fb_var) < 0) {
+		err_msg("Get FB var info failed!\n");
+		close(disp->fd);
+		free(disp);
+		return NULL;
+	}
+	if (!disp_width || !disp_height) {
+		disp_width = fb_var.xres;
+		disp_height = fb_var.yres;
+	}
+
+	if (rotation.rot_en) {
+		if (rotation.rot_angle == 90 || rotation.rot_angle == 270) {
+			i = width;
+			width = height;
+			height = i;
+		}
+		dprintf(3, "VPU rot: width = %d; height = %d\n", width, height);
+	}
+
+	/* allocate buffers, use an extra buf for init buf */
+	disp->nframes = nframes;
+	disp->frame_size = width*height*3/2;
+	for (i=0;i<nframes;i++) {
+		err = ipu_memory_alloc(disp->frame_size, 1, &(disp->ipu_bufs[i].ipu_paddr),
+				&(disp->ipu_bufs[i].ipu_vaddr), disp->fd);
+		if ( err < 0) {
+			err_msg("ipu_memory_alloc failed\n");
+			free(disp);
+			return NULL;
+		}
+	}
+
+	memset(&(disp->ipu_handle), 0, sizeof(ipu_lib_handle_t));
+	memset(&(disp->input), 0, sizeof(ipu_lib_input_param_t));
+	memset(&(disp->output), 0, sizeof(ipu_lib_output_param_t));
+
+        disp->input.width = width;
+        disp->input.height = height;
+	disp->input.input_crop_win.pos.x = left;
+	disp->input.input_crop_win.pos.y = top;
+	disp->input.input_crop_win.win_w = right - left;
+	disp->input.input_crop_win.win_h = bottom - top;
+	if (dec->cmdl->chromaInterleave == 0)
+		disp->input.fmt = V4L2_PIX_FMT_YUV420;
+	else
+		disp->input.fmt = V4L2_PIX_FMT_NV12;
+
+	disp->output.width = disp_width;
+	disp->output.height = disp_height;
+	disp->output.fmt = V4L2_PIX_FMT_UYVY;
+	if (rotation.ipu_rot_en && (rotation.rot_angle != 0)) {
+		if (rotation.rot_angle == 90)
+			disp->output.rot = IPU_ROTATE_90_RIGHT;
+		else if (rotation.rot_angle == 180)
+			disp->output.rot = IPU_ROTATE_180;
+		else if (rotation.rot_angle == 270)
+			disp->output.rot = IPU_ROTATE_90_LEFT;
+	}
+	disp->output.show_to_fb = 1;
+	disp->output.fb_disp.fb_num = 2;
+
+	disp->ipu_q.tail = disp->ipu_q.head = 0;
+	disp->stopping = 0;
+
+	dec->disp = disp;
+	pthread_mutex_init(&ipu_mutex, NULL);
+	pthread_cond_init(&ipu_cond, NULL);
+
+	/* start disp loop thread */
+	pthread_create(&(disp->disp_loop_thread), NULL, disp_loop_thread, (void *)dec);
+
+	return disp;
+}
+
+void ipu_display_close(struct vpu_display *disp)
+{
+	int i;
+
+	disp->stopping = 1;
+	while(ipu_running && ((queue_size(&(disp->ipu_q)) > 0) || !ipu_waiting)) usleep(10000);
+	if (ipu_running) {
+		wakeup_queue();
+		info_msg("Join disp loop thread\n");
+		pthread_join(disp->disp_loop_thread, NULL);
+	}
+	pthread_mutex_destroy(&ipu_mutex);
+	pthread_cond_destroy(&ipu_cond);
+	for (i=0;i<disp->nframes;i++)
+		ipu_memory_free(disp->frame_size, 1, &(disp->ipu_bufs[i].ipu_paddr),
+				&(disp->ipu_bufs[i].ipu_vaddr), disp->fd);
+	close(disp->fd);
+	free(disp);
+}
+
+int ipu_put_data(struct vpu_display *disp, int index, int field)
+{
+	disp->ipu_bufs[index].field = field;
+	queue_buf(&(disp->ipu_q), index);
+	wakeup_queue();
+
+	return 0;
+}
+
 void v4l_free_bufs(int n, struct vpu_display *disp)
 {
 	int i;
diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index fee4e14..ec35583 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2004-2010 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  */
@@ -35,6 +35,7 @@ char *usage = "Usage: ./mxc_vpu_test.out -D \"<decode options>\" "\
 	       "	If no input file is specified, default is network \n "\
 	       "  -o <output file> Write output to file \n "\
 	       "	If no output is specified, default is LCD \n "\
+	       "  -x <output method> V4l2(0) or IPU lib(1) \n "\
 	       "  -f <format> 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1, \n "\
 	       "	4 - MPEG2, 5 - DIV3, 6 - RV, 7 - MJPG, \n "\
 	       "	If no format specified, default is 0 (MPEG4) \n "\
@@ -127,7 +128,7 @@ int encdec_test(void *arg);
 static char *mainopts = "HE:D:L:C:";
 
 /* Options for encode and decode */
-static char *options = "i:o:n:p:r:f:c:w:h:g:b:d:e:m:u:t:s:l:v:";
+static char *options = "i:o:x:n:p:r:f:c:w:h:g:b:d:e:m:u:t:s:l:v:";
 
 int
 parse_config_file(char *file_name)
@@ -237,6 +238,20 @@ parse_args(int argc, char *argv[], int i)
 			strncpy(input_arg[i].cmd.output, optarg, MAX_PATH);
 			input_arg[i].cmd.dst_scheme = PATH_FILE;
 			break;
+		case 'x':
+			if (atoi(optarg) == 0) {
+				input_arg[i].cmd.dst_scheme = PATH_V4L2;
+				info_msg("Display through V4L2\n");
+			} else {
+				input_arg[i].cmd.dst_scheme = PATH_IPU;
+				info_msg("Display through IPU LIB\n");
+			}
+			if (!cpu_is_mx37() && !cpu_is_mx5x() &&
+				(input_arg[i].cmd.dst_scheme == PATH_IPU)) {
+				input_arg[i].cmd.dst_scheme = PATH_V4L2;
+				warn_msg("ipu lib disp only support in ipuv3\n");
+			}
+			break;
 		case 'n':
 			if (input_arg[i].mode == ENCODE) {
 				/* contains the ip address */
diff --git a/test/mxc_vpu_test/vpu_test.h b/test/mxc_vpu_test/vpu_test.h
index 8756759..95e5784 100644
--- a/test/mxc_vpu_test/vpu_test.h
+++ b/test/mxc_vpu_test/vpu_test.h
@@ -19,6 +19,8 @@
 #include <linux/videodev.h>
 #include <pthread.h>
 #include <errno.h>
+#include <stdint.h>
+#include "mxc_ipu_hl_lib.h"
 #include "vpu_lib.h"
 #include "vpu_io.h"
 
@@ -40,15 +42,8 @@
 	printf("[WARN]\t" fmt, ## arg);	\
 	} while (0)
 
-typedef unsigned long u32;
 typedef unsigned short u16;
 typedef unsigned char u8;
-typedef unsigned int  uint32_t;
-typedef unsigned short int  uint16_t;
-typedef unsigned char  uint8_t;
-typedef signed int s32;
-typedef signed short s16;
-typedef signed char s8;
 
 #define STREAM_BUF_SIZE		0x80000
 #define STREAM_FILL_SIZE	0x10000
@@ -61,6 +56,7 @@ typedef signed char s8;
 #define PATH_V4L2	0
 #define PATH_FILE	1
 #define PATH_NET	2
+#define PATH_IPU	3
 
 /* Test operations */
 #define ENCODE		1
@@ -95,6 +91,20 @@ struct v4l_buf {
 	size_t length;
 };
 
+#define MAX_BUF_NUM	32
+#define QUEUE_SIZE	(MAX_BUF_NUM + 1)
+struct ipu_queue {
+	int list[MAX_BUF_NUM + 1];
+	int head;
+	int tail;
+};
+
+struct ipu_buf {
+	int ipu_paddr;
+	void * ipu_vaddr;
+	int field;
+};
+
 struct vpu_display {
 	int fd;
 	int nframes;
@@ -103,8 +113,17 @@ struct vpu_display {
 	int queued_count;
 	suseconds_t usec;
 	struct v4l2_buffer buf;
-	struct v4l_buf *buffers[32];
-} ;
+	struct v4l_buf *buffers[MAX_BUF_NUM];
+
+	int frame_size;
+	ipu_lib_handle_t ipu_handle;
+	ipu_lib_input_param_t input;
+	ipu_lib_output_param_t output;
+	pthread_t disp_loop_thread;
+	struct ipu_queue ipu_q;
+	struct ipu_buf ipu_bufs[MAX_BUF_NUM];
+	int stopping;
+};
 
 struct capture_testbuffer {
 	size_t offset;
@@ -219,6 +238,11 @@ void v4l_display_close(struct vpu_display *disp);
 struct frame_buf *framebuf_alloc(int stdMode, int format, int strideY, int height);
 void framebuf_free(struct frame_buf *fb);
 
+struct vpu_display *
+ipu_display_open(struct decode *dec, int nframes, struct rot rotation, Rect cropRect);
+void ipu_display_close(struct vpu_display *disp);
+int ipu_put_data(struct vpu_display *disp, int index, int field);
+
 int v4l_start_capturing(void);
 void v4l_stop_capturing(void);
 int v4l_capture_setup(struct encode *enc, int width, int height, int fps);
-- 
1.8.0

