From 5f59863dd2577e12695ca6cc67bf5fed361d1dd6 Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Fri, 16 Jan 2009 13:37:22 +0800
Subject: [PATCH 066/505] ENGR00105265 vpu: fix fb alloc in dec rotation and
 dec delay too long in network

1) Update dec rotation case: decrease allocated framebuffer number when display on LCD
   with vpu rotation, all YUV framebuffer for decode and rotation are gotten from v4l ioctl;
2) Fix networking test case of decoder delay too long issue;
3) Add prescan in command option and get options(deblock, dering,etc) value from input
   option parameter: prescan had better be enabled in networking test case to prevent
   vpu hang by scanning streaming buffer to check data is enough or not. It can be disabled
   in normal video playback.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 test/mxc_vpu_test/configs/config_net |  31 ++++++--
 test/mxc_vpu_test/dec.c              | 140 +++++++++++++++++++----------------
 test/mxc_vpu_test/display.c          |  12 +--
 test/mxc_vpu_test/loopback.c         |  10 ++-
 test/mxc_vpu_test/main.c             |  17 +++--
 test/mxc_vpu_test/readme             |  36 +++++++--
 test/mxc_vpu_test/utils.c            |  21 +++++-
 test/mxc_vpu_test/vpu_test.h         |   6 +-
 8 files changed, 176 insertions(+), 97 deletions(-)

diff --git a/test/mxc_vpu_test/configs/config_net b/test/mxc_vpu_test/configs/config_net
index 0e739b6..c074634 100644
--- a/test/mxc_vpu_test/configs/config_net
+++ b/test/mxc_vpu_test/configs/config_net
@@ -1,3 +1,7 @@
+# This configure is for encoding captured data from camera and sending to
+# another side for decoding, then display on LCD with full screen.
+# You can change any setting according to your needs.
+
 # Write your options here!
 
 # Type of operation encode or decode; encode = 1, decode = 2
@@ -13,11 +17,24 @@ output=
 # port number for server to listen. If none specified, default is 5555
 port=
 
-# format; 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1
+# format; 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1, 7 - MJPG
 format=2
 
 # rotation angle (0, 90, 180, 270). Do not specify anything if not needed.
-rotation=
+rotation=90
+
+# ipu_rot, 1 - Enable IPU rotation and disable VPU rotation when output
+# to LCD for display
+ipu_rot=
+
+# chromaInterleave, 1 - CbCr is interleaved.
+# Suggest to enable this option since performance is better.
+chromaInterleave=1
+
+# prescan, 1 - Enable prescan
+# Suggest to enable this option since decoder performs scanning stream buffers
+# to check whether data is enough to preventing decoder hanging.
+prescan=1
 
 # count, number of frames to encode or decode
 count=
@@ -28,10 +45,10 @@ deblock=
 # mirroring (0, 1, 2 , 3)
 mirror=
 
-# width for encoding. This will be the capture/yuv image width
+# width, display width for decoding
 width=
 
-# height for encoding. This will be the capture/yuv image height
+# height, display height for decoding
 height=
 
 # bitrate. default is auto
@@ -56,7 +73,7 @@ input=
 output=
 
 # send encoded data to server. specify server ip address
-ip=10.0.0.1
+ip=127.0.0.1
 
 # port number of server. If none specified, default is 5555.
 port=
@@ -67,6 +84,10 @@ format=2
 # rotation angle (0, 90, 180, 270). Do not specify anything if not needed.
 rotation=
 
+# chromaInterleave, 1 - CbCr is interleaved
+# Suggest to enable this option since performance is better.
+chromaInterleave=1
+
 # count, number of frames to encode or decode
 count=500
 
diff --git a/test/mxc_vpu_test/dec.c b/test/mxc_vpu_test/dec.c
index 8b9feaf..491e66b 100644
--- a/test/mxc_vpu_test/dec.c
+++ b/test/mxc_vpu_test/dec.c
@@ -600,7 +600,6 @@ decoder_start(struct decode *dec)
 	int rot_angle = dec->cmdl->rot_angle;
 	int deblock_en = dec->cmdl->deblock_en;
 	int dering_en = dec->cmdl->dering_en;
-	FrameBuffer *rot_fb = NULL;
 	FrameBuffer *deblock_fb = NULL;
 	FrameBuffer *fb = dec->fb;
 	struct frame_buf **pfbpool = dec->pfbpool;
@@ -611,20 +610,21 @@ decoder_start(struct decode *dec)
 	RetCode ret;
 	int sec, usec;
 	u32 yuv_addr, img_size;
-	float tdec_time = 0, frame_id = 0, total_time=0;
+	double tdec_time = 0, frame_id = 0, total_time=0;
 	int decIndex = 0;
 	int rotid = 0, dblkid = 0, mirror;
 	int count = dec->cmdl->count;
 	int totalNumofErrMbs = 0;
-	int disp_clr_index = -1;
+	int disp_clr_index = -1, actual_display_index = -1;
 
 	if ((dec->cmdl->dst_scheme == PATH_V4L2) && (dec->cmdl->ipu_rot_en))
 		rot_en = 0;
 
+	/* deblock_en is zero on mx37 and mx51 since it is cleared in decode_open() function. */
 	if (rot_en || dering_en) {
 		rotid = dec->fbcount;
 		if (deblock_en) {
-			dblkid = dec->fbcount + 1;
+			dblkid = dec->fbcount + dec->rot_buf_count;
 		}
 	} else if (deblock_en) {
 		dblkid = dec->fbcount;
@@ -632,7 +632,7 @@ decoder_start(struct decode *dec)
 
 	decparam.dispReorderBuf = 0;
 
-	decparam.prescanEnable = 0;
+	decparam.prescanEnable = dec->cmdl->prescan;
 	decparam.prescanMode = 0;
 
 	decparam.skipframeMode = 0;
@@ -653,8 +653,6 @@ decoder_start(struct decode *dec)
 	fheight = ((dec->picheight + 15) & ~15);
 
 	if (rot_en || dering_en) {
-		rot_fb = &fb[rotid];
-
 		/*
 		 * VPU is setting the rotation angle by counter-clockwise.
 		 * We convert it to clockwise, which is consistent with V4L2
@@ -683,12 +681,7 @@ decoder_start(struct decode *dec)
 		img_size = dec->stride * dec->picheight;
 	} else {
 		img_size = dec->picwidth * dec->picheight * 3 / 2;
-		if (rot_en || dering_en) {
-			pfb = pfbpool[rotid];
-			rot_fb->bufY = pfb->addrY;
-			rot_fb->bufCb = pfb->addrCb;
-			rot_fb->bufCr = pfb->addrCr;
-		} else if (deblock_en) {
+		if (deblock_en) {
 			pfb = pfbpool[dblkid];
 			deblock_fb->bufY = pfb->addrY;
 			deblock_fb->bufCb = pfb->addrCb;
@@ -702,7 +695,7 @@ decoder_start(struct decode *dec)
 		
 		if (rot_en || dering_en) {
 			vpu_DecGiveCommand(handle, SET_ROTATOR_OUTPUT,
-						(void *)rot_fb);
+						(void *)&fb[rotid]);
 			if (frame_id == 0) {
 				if (rot_en) {
 					vpu_DecGiveCommand(handle,
@@ -898,14 +891,13 @@ decoder_start(struct decode *dec)
 			continue;
 		}
 
+		if (rot_en || dering_en)
+			actual_display_index = rotid;
+		else
+			actual_display_index = outinfo.indexFrameDisplay;
+
 		if (dec->cmdl->dst_scheme == PATH_V4L2) {
-			if (rot_en || dering_en) {
-				rot_fb->bufY =
-					disp->buffers[outinfo.indexFrameDisplay]->offset;
-				rot_fb->bufCb = rot_fb->bufY + img_size;
-				rot_fb->bufCr = rot_fb->bufCb +
-						(img_size >> 2);
-			} else if (deblock_en) {
+			if (deblock_en) {
 				deblock_fb->bufY =
 					disp->buffers[disp->buf.index]->offset;
 				deblock_fb->bufCb = deblock_fb->bufY + img_size;
@@ -913,7 +905,8 @@ decoder_start(struct decode *dec)
 							(img_size >> 2);
 			}
 
-			err = v4l_put_data(disp, outinfo.indexFrameDisplay);
+			err = v4l_put_data(disp, actual_display_index);
+
 			if (err)
 				return -1;
 
@@ -923,9 +916,17 @@ decoder_start(struct decode *dec)
 					err_msg("vpu_DecClrDispFlag failed Error code"
 							" %d\n", err);
 			}
-			disp_clr_index = disp->buf.index;
+			if (rot_en || dering_en) {
+				disp_clr_index = outinfo.indexFrameDisplay;
+				if (disp->buf.index != -1)
+                                        rotid = disp->buf.index; /* de-queued buffer as next rotation buffer */
+                                else
+                                        rotid++;
+			}
+			else
+				disp_clr_index = disp->buf.index;
 		} else {
-			pfb = pfbpool[outinfo.indexFrameDisplay];
+			pfb = pfbpool[actual_display_index];
 
 			yuv_addr = pfb->addrY + pfb->desc.virt_uaddr -
 					pfb->desc.phy_addr;
@@ -996,36 +997,31 @@ decoder_free_framebuffer(struct decode *dec)
 {
 	int i, totalfb;
 	vpu_mem_desc *mvcol_md = dec->mvcol_memdesc;
-	int rot_en = dec->cmdl->rot_en;
 	int deblock_en = dec->cmdl->deblock_en;
-	int dering_en = dec->cmdl->dering_en;
 
-	if ((dec->cmdl->dst_scheme == PATH_V4L2) && (dec->cmdl->ipu_rot_en))
-		rot_en = 0;
+	totalfb = dec->fbcount + dec->extrafb;
 
 	if (dec->cmdl->dst_scheme == PATH_V4L2) {
-		v4l_display_close(dec->disp);
-		dec->disp = NULL;
+		if (dec->disp) {
+			v4l_display_close(dec->disp);
+			dec->disp = NULL;
+		}
 
-		if ((rot_en == 0) && (deblock_en == 0) && (dering_en == 0)) {
-			if (cpu_is_mx37() || cpu_is_mx51()) {
-				for (i = 0; i < dec->fbcount; i++) {
-					if (mvcol_md[i].phy_addr)
-						IOFreePhyMem(&mvcol_md[i]);
-				}
-				if (dec->mvcol_memdesc) {
-					free(dec->mvcol_memdesc);
-					dec->mvcol_memdesc = NULL;
-				}
+		if (mvcol_md) {
+			for (i = 0; i < totalfb; i++) {
+				if (mvcol_md[i].phy_addr)
+					IOFreePhyMem(&mvcol_md[i]);
+			}
+			if (dec->mvcol_memdesc) {
+				free(dec->mvcol_memdesc);
+				dec->mvcol_memdesc = NULL;
 			}
 		}
 	}
 
+	/* deblock_en is zero on mx37 and mx51 since it is cleared in decode_open() function. */
 	if ((dec->cmdl->dst_scheme != PATH_V4L2) ||
-			((dec->cmdl->dst_scheme == PATH_V4L2) &&
-			 (rot_en || deblock_en ||
-			 ((cpu_is_mx37() || cpu_is_mx51()) && dering_en)))) {
-		totalfb = dec->fbcount + dec->extrafb;
+	    ((dec->cmdl->dst_scheme == PATH_V4L2) && deblock_en)) {
 		for (i = 0; i < totalfb; i++) {
 			framebuf_free(dec->pfbpool[i]);
 		}
@@ -1046,7 +1042,7 @@ int
 decoder_allocate_framebuffer(struct decode *dec)
 {
 	DecBufInfo bufinfo;
-	int i, fbcount = dec->fbcount, extrafb = 0, totalfb, img_size;
+	int i, fbcount = dec->fbcount, totalfb, img_size;
        	int dst_scheme = dec->cmdl->dst_scheme, rot_en = dec->cmdl->rot_en;
 	int deblock_en = dec->cmdl->deblock_en;
 	int dering_en = dec->cmdl->dering_en;
@@ -1058,23 +1054,31 @@ decoder_allocate_framebuffer(struct decode *dec)
 	struct vpu_display *disp = NULL;
 	int stride;
 	vpu_mem_desc *mvcol_md = NULL;
+	Rect rotCrop;
 
 	if ((dec->cmdl->dst_scheme == PATH_V4L2) && (dec->cmdl->ipu_rot_en))
 		rot_en = 0;
 
-	/* 1 extra fb for rotation(or dering) */
 	if (rot_en || dering_en) {
-		extrafb++;
-		dec->extrafb++;
+		/*
+		 * At least 1 extra fb for rotation(or dering) is needed, two extrafb
+		 * are allocated for rotation if path is V4L,then we can delay 1 frame
+		 * de-queue from v4l queue to improve performance.
+		 */
+		dec->rot_buf_count = (dec->cmdl->dst_scheme == PATH_V4L2) ? 2 : 1;
+		dec->extrafb += dec->rot_buf_count;
 	}
 
-	/* 1 extra fb for deblocking */
+	/*
+	 * 1 extra fb for deblocking on MX32, no need extrafb for blocking on MX37 and MX51
+	 * dec->cmdl->deblock_en has been cleared to zero after set it to oparam.mp4DeblkEnable
+	 * in decoder_open() function on MX37 and MX51.
+	 */
 	if (deblock_en) {
-		extrafb++;
 		dec->extrafb++;
 	}
 
-	totalfb = fbcount + extrafb;
+	totalfb = fbcount + dec->extrafb;
 
 	fb = dec->fb = calloc(totalfb, sizeof(FrameBuffer));
 	if (fb == NULL) {
@@ -1085,13 +1089,13 @@ decoder_allocate_framebuffer(struct decode *dec)
 	pfbpool = dec->pfbpool = calloc(totalfb, sizeof(struct frame_buf *));
 	if (pfbpool == NULL) {
 		err_msg("Failed to allocate pfbpool\n");
-		free(fb);
+		free(dec->fb);
+		dec->fb = NULL;
 		return -1;
 	}
 	
 	if ((dst_scheme != PATH_V4L2) ||
-		((dst_scheme == PATH_V4L2) && (rot_en || deblock_en ||
-			((cpu_is_mx37()||cpu_is_mx51()) && dering_en)))) {
+	    ((dst_scheme == PATH_V4L2) && deblock_en)) {
 
 		for (i = 0; i < totalfb; i++) {
 			pfbpool[i] = framebuf_alloc(dec->cmdl->format, dec->stride,
@@ -1118,19 +1122,24 @@ decoder_allocate_framebuffer(struct decode *dec)
 			rotation.rot_en = 0;
 			rotation.ipu_rot_en = 1;
 		}
-		disp = v4l_display_open(dec, fbcount, rotation);
+		if (rotation.rot_en) {
+			swapCropRect(dec, &rotCrop);
+			disp = v4l_display_open(dec, totalfb, rotation, rotCrop);
+		} else
+			disp = v4l_display_open(dec, totalfb, rotation, dec->picCropRect);
+
 		if (disp == NULL) {
 			goto err;
 		}
 
-		if ((rot_en == 0) && (deblock_en == 0) && (dering_en == 0)) {
+		if (deblock_en == 0) {
 			img_size = dec->stride * dec->picheight;
 
 			if (cpu_is_mx37() || cpu_is_mx51()) {
 				mvcol_md = dec->mvcol_memdesc =
-					calloc(fbcount, sizeof(vpu_mem_desc));
+					calloc(totalfb, sizeof(vpu_mem_desc));
 			}
-			for (i = 0; i < fbcount; i++) {
+			for (i = 0; i < totalfb; i++) {
 				fb[i].bufY = disp->buffers[i]->offset;
 				fb[i].bufCb = fb[i].bufY + img_size;
 				fb[i].bufCr = fb[i].bufCb + (img_size >> 2);
@@ -1171,15 +1180,16 @@ err1:
 
 err:
 	if ((dst_scheme != PATH_V4L2) ||
-		((dst_scheme == PATH_V4L2) && (rot_en || deblock_en ||
-			((cpu_is_mx37() || cpu_is_mx51()) && dering_en)))) {
+	   ((dst_scheme == PATH_V4L2) && deblock_en )) {
 		for (i = 0; i < totalfb; i++) {
 			framebuf_free(pfbpool[i]);
 		}
 	}
 
-	free(fb);
-	free(pfbpool);
+	free(dec->fb);
+	free(dec->pfbpool);
+	dec->fb = NULL;
+	dec->pfbpool = NULL;
 	return -1;
 }
 
@@ -1390,7 +1400,7 @@ decode_test(void *arg)
 	vpu_mem_desc ps_mem_desc = {0};
 	vpu_mem_desc slice_mem_desc = {0};
 	struct decode *dec;
-	int ret, eos = 0, fill_end_bs = 0;
+	int ret, eos = 0, fill_end_bs = 0, fillsize = 0;
 
 	dec = (struct decode *)calloc(1, sizeof(struct decode));
 	if (dec == NULL) {
@@ -1435,10 +1445,12 @@ decode_test(void *arg)
 		goto err;
 
 	cmdl->complete = 1;
+	if (dec->cmdl->src_scheme == PATH_NET)
+		fillsize = 1024;
 	ret = dec_fill_bsbuffer(dec->handle, cmdl,
 			dec->virt_bsbuf_addr,
 		        (dec->virt_bsbuf_addr + STREAM_BUF_SIZE),
-			dec->phy_bsbuf_addr, 0, &eos, &fill_end_bs);
+			dec->phy_bsbuf_addr, fillsize, &eos, &fill_end_bs);
 	cmdl->complete = 0;
 	if (ret < 0) {
 		err_msg("dec_fill_bsbuffer failed\n");
diff --git a/test/mxc_vpu_test/display.c b/test/mxc_vpu_test/display.c
index 39bda40..a659781 100644
--- a/test/mxc_vpu_test/display.c
+++ b/test/mxc_vpu_test/display.c
@@ -84,14 +84,14 @@ calculate_ratio(int width, int height, int maxwidth, int maxheight)
 }
 
 struct vpu_display *
-v4l_display_open(struct decode *dec, int nframes, struct rot rotation)
+v4l_display_open(struct decode *dec, int nframes, struct rot rotation, Rect cropRect)
 {
 	int width = dec->picwidth;
 	int height = dec->picheight;
-	int left = dec->picCropRect.left;
-	int top = dec->picCropRect.top;
-	int right = dec->picCropRect.right;
-	int bottom = dec->picCropRect.bottom;
+	int left = cropRect.left;
+	int top = cropRect.top;
+	int right = cropRect.right;
+	int bottom = cropRect.bottom;
 	int disp_width = dec->cmdl->width;
 	int disp_height = dec->cmdl->height;
 	int fd, err, out, i;
@@ -240,7 +240,7 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation)
 	} else if (right || bottom) {
 		fmt.fmt.pix.width = right - left;
 		fmt.fmt.pix.height = bottom - top;
-		fmt.fmt.pix.bytesperline = fmt.fmt.pix.width;
+		fmt.fmt.pix.bytesperline = width;
 		off.u_offset = width * height;
 		off.v_offset = off.u_offset + width * height / 4;
 		fmt.fmt.pix.priv = (unsigned long) &off;
diff --git a/test/mxc_vpu_test/loopback.c b/test/mxc_vpu_test/loopback.c
index 5d5a999..77ec14a 100644
--- a/test/mxc_vpu_test/loopback.c
+++ b/test/mxc_vpu_test/loopback.c
@@ -1,6 +1,5 @@
-
 /*
- * Copyright 2004-2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2004-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  */
@@ -40,7 +39,10 @@ decode()
 	struct vpu_display *disp = dec->disp;
 	RetCode ret;
 	
-	decparam.prescanEnable = 0;
+	/* Suggest to enable prescan in loopback, then decoder performs scanning stream buffers
+	 * to check whether data is enough to prevent decoder hang.
+	 */
+	decparam.prescanEnable = dec->cmdl->prescan;
 
 	ret = vpu_DecStartOneFrame(handle, &decparam);
 	if (ret != RETCODE_SUCCESS) {
@@ -394,7 +396,7 @@ encdec_test(void *arg)
 		goto err4;
 	}
 
-	/* encode 2 frames first */
+	/* encode 10 frames first */
 	for (i = 0; i < 10; i++) {
 		ret = encode();
 		if (ret)
diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index f49b7da..c4b2f8c 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -58,6 +58,8 @@ char *usage = "Usage: ./mxc_vpu_test.out -D \"<decode options>\" "\
 	       "	default is source picture height \n "\
 	       "  -t <chromaInterleave> CbCr interleaved \n "\
 	       "        default is none-interleave(0). \n "\
+	       "  -s <prescan> Enable prescan in decoding - 1. enabled \n "\
+	       "        default is disabled. \n "\
 	       "\n"\
 	       "encode options \n "\
 	       "  -i <input file> Read input from file (yuv) \n "\
@@ -120,7 +122,7 @@ int encdec_test(void *arg);
 static char *mainopts = "HE:D:L:C:";
 
 /* Options for encode and decode */
-static char *options = "i:o:n:p:r:f:c:w:h:g:b:d:e:m:u:t:";
+static char *options = "i:o:n:p:r:f:c:w:h:g:b:d:e:m:u:t:s:";
 
 int
 parse_config_file(char *file_name)
@@ -247,8 +249,10 @@ parse_args(int argc, char *argv[], int i)
 			input_arg[i].cmd.rot_angle = atoi(optarg);
 			break;
 		case 'u':
-			input_arg[i].cmd.ipu_rot_en = 1;
-			input_arg[i].cmd.rot_en = 0;
+			input_arg[i].cmd.ipu_rot_en = atoi(optarg);
+			/* ipu rotation will override vpu rotation */
+			if (input_arg[i].cmd.ipu_rot_en)
+				input_arg[i].cmd.rot_en = 0;
 			break;
 		case 'f':
 			input_arg[i].cmd.format = atoi(optarg);
@@ -265,14 +269,17 @@ parse_args(int argc, char *argv[], int i)
 		case 'g':
 			input_arg[i].cmd.gop = atoi(optarg);
 			break;
+		case 's':
+			input_arg[i].cmd.prescan = atoi(optarg);
+			break;
 		case 'b':
 			input_arg[i].cmd.bitrate = atoi(optarg);
 			break;
 		case 'd':
-			input_arg[i].cmd.deblock_en = 1;
+			input_arg[i].cmd.deblock_en = atoi(optarg);
 			break;
 		case 'e':
-			input_arg[i].cmd.dering_en = 1;
+			input_arg[i].cmd.dering_en = atoi(optarg);
 			break;
 		case 'm':
 			input_arg[i].cmd.mirror = atoi(optarg);
diff --git a/test/mxc_vpu_test/readme b/test/mxc_vpu_test/readme
index 18efb45..35c5d0c 100755
--- a/test/mxc_vpu_test/readme
+++ b/test/mxc_vpu_test/readme
@@ -16,16 +16,19 @@ Doing a simultaneous encode and decode
 ./mxc_vpu_test.out -E "-o enc.264 -w 176 -h 144 -f 0" -D "-i /vectors/vga.264 -f 2"
 
 Using the loopback test (The enocoded image from the camera is decoded immediately)
-./mxc_vpu_test.out -L "-f 2 -w 240 -h 320"
+./mxc_vpu_test.out -L "-f 2 -w 240 -h 320 -t 1"
 
 Network use case:
-
 Board 1 (IP = 10.0.0.1)
-./mxc_vpu_test.out -D "-f 2" -E "-n 10.0.0.2 -w 240 -h 320 -f 2"
+./mxc_vpu_test.out -D "-f 2 -s 1 -t 1" -E "-n 10.0.0.2 -w 240 -h 320 -f 2 -t 1"
 
 Board 2 (IP = 10.0.0.2)
-./mxc_vpu_test.out -D "-f 2" -E "-n 10.0.0.1 -w 240 -h 320 -f 2"
+./mxc_vpu_test.out -D "-f 2 -s 2 -t 1" -E "-n 10.0.0.1 -w 240 -h 320 -f 2 -t 1"
 
+Note:
+1) Please don't select "-u" option on MX27 since there is no IPU rotation on MX27.
+2) Suggest to enable prescan option by "-s 1" in decoder to scan streaming buffer to check data is enough or not to prevent vpu hang in network use case.
+3) Suggest to enable CbCr interleave by "-t 1" since performance is better.
 
 Usage: ./mxc_vpu_test.out -D "<decode options>" -E "<encode options>" -L "<loopback options>" -C <config file> -H display this help
 
@@ -35,17 +38,30 @@ decode options
    -o <output file> Write output to file
         If no output is specified, default is LCD
    -f <format> 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1,
-	4 - MPEG2, 5 - DIVX (4, 5 for MX37)
+        4 - MPEG2, 5 - DIVX, 6 - RV, 7 - MJPG,
         If no format specified, default is 0 (MPEG4)
    -p <port number> UDP port number to bind
         If no port number is secified, 5555 is used
    -c <count> Number of frames to decode
-   -d <deblocking> Enable deblock - 1. Not for MX27
+   -d <deblocking> Enable deblock - 1. enabled
         default deblock is disabled (0).
+   -e <dering> Enable dering - 1. enabled
+        default dering is disabled (0).
    -r <rotation angle> 0, 90, 180, 270
         default rotation is disabled (0)
    -m <mirror direction> 0, 1, 2, 3
         default no mirroring (0)
+   -u <ipu rotation> Using IPU rotation for display - 1. IPU rotation
+         default is VPU rotation(0).
+         This flag is effective when 'r' flag is specified.
+   -w <width> display picture width
+        default is source picture width.
+   -h <height> display picture height
+        default is source picture height
+   -t <chromaInterleave> CbCr interleaved
+         default is none-interleave(0).
+   -s <prescan> Enable prescan in decoding - 1. enabled
+         default is disabled.
 
 encode options
    -i <input file> Read input from file (yuv)
@@ -56,7 +72,7 @@ encode options
    -n <ip address> Send output to this IP address
    -p <port number> UDP port number at server
         If no port number is secified, 5555 is used
-   -f <format> 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1
+   -f <format> 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1, 7 - MJPG
         If no format specified, default is 0 (MPEG4)
    -c <count> Number of frames to encode
    -r <rotation angle> 0, 90, 180, 270
@@ -71,13 +87,17 @@ encode options
         default is auto (0)
    -g <gop size>
         default is 0
+   -t <chromaInterleave> CbCr interleaved
+         default is none-interleave(0).
 
 loopback options
-   -f <format> 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1
+   -f <format> 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1, 7 - MJPG
         If no format specified, default is 0 (MPEG4)
    -w <width> capture image width
         default is 176.
    -h <height>capture image height
         default is 144
+   -t <chromaInterleave> CbCr interleaved
+         default is none-interleave(0).
 
 config file - Use config file for specifying options
diff --git a/test/mxc_vpu_test/utils.c b/test/mxc_vpu_test/utils.c
index e0be397..4e4a019 100644
--- a/test/mxc_vpu_test/utils.c
+++ b/test/mxc_vpu_test/utils.c
@@ -1,4 +1,3 @@
-
 /*
  * Copyright 2004-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
@@ -211,6 +210,7 @@ udp_send(struct cmd_line *cmd, int sd, char *buf, int n)
 	struct nethdr net_h;
 	struct sockaddr_in addr;
 
+	bzero(&addr, sizeof(addr));
 	hdrlen = sizeof(net_h);
 	if ((n + hdrlen) > DEFAULT_PKT_SIZE) {
 		err_msg("panic: increase default udp pkt size! %d\n", n);
@@ -344,6 +344,7 @@ udp_open(struct cmd_line *cmd)
 
 	/* If server, then bind */
 	if (cmd->src_scheme == PATH_NET) {
+		bzero(&addr, sizeof(addr));
 		addr.sin_family = AF_INET;
 		addr.sin_port = htons(cmd->port);
 		addr.sin_addr.s_addr = INADDR_ANY;
@@ -652,8 +653,9 @@ int parse_options(char *buf, struct cmd_line *cmd, int *mode)
 		if (str != NULL) {
 			str++;
 			if (*str != '\0') {
-				cmd->rot_en = 0;
-				cmd->ipu_rot_en = 1;
+				cmd->ipu_rot_en = strtol(str, NULL, 10);
+				if (cmd->ipu_rot_en == 1)
+					cmd->rot_en = 0;
 			}
 		}
 		
@@ -778,6 +780,19 @@ int parse_options(char *buf, struct cmd_line *cmd, int *mode)
 		return 0;
 	}
 
+	str = strstr(buf, "prescan");
+	if (str != NULL) {
+		str = index(buf, '=');
+		if (str != NULL) {
+			str++;
+			if (*str != '\0') {
+				cmd->prescan = strtol(str, NULL, 10);
+			}
+		}
+
+		return 0;
+	}
+
 	str = strstr(buf, "gop");
 	if (str != NULL) {
 		str = index(buf, '=');
diff --git a/test/mxc_vpu_test/vpu_test.h b/test/mxc_vpu_test/vpu_test.h
index 4381888..21e6ade 100644
--- a/test/mxc_vpu_test/vpu_test.h
+++ b/test/mxc_vpu_test/vpu_test.h
@@ -67,7 +67,7 @@ typedef signed char s8;
 #define LOOPBACK	3
 
 #define DEFAULT_PORT		5555
-#define DEFAULT_PKT_SIZE	40960
+#define DEFAULT_PKT_SIZE	0x28000
 
 struct frame_buf {
 	int addrY;
@@ -127,6 +127,7 @@ struct cmd_line {
 	int gop;
 	int save_enc_hdr;
 	int count;
+	int prescan;
 	char *nbuf; /* network buffer */
 	int nlen; /* remaining data in network buffer */
 	int noffset; /* offset into network buffer */
@@ -147,6 +148,7 @@ struct decode {
 	int picheight;
 	int stride;
 	int fbcount;
+	int rot_buf_count;
 	int extrafb;
 	FrameBuffer *fb;
 	struct frame_buf **pfbpool;
@@ -185,7 +187,7 @@ char*skip_unwanted(char *ptr);
 int parse_options(char *buf, struct cmd_line *cmd, int *mode);
 
 struct vpu_display *v4l_display_open(struct decode *dec, int nframes,
-					struct rot rotation);
+					struct rot rotation, Rect rotCrop);
 int v4l_put_data(struct vpu_display *disp, int index);
 void v4l_display_close(struct vpu_display *disp);
 struct frame_buf *framebuf_alloc(int stdMode, int strideY, int height);
-- 
1.8.0

