From 29d2f12069170575576f52518eca8fa6ff0a48b4 Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Fri, 15 Aug 2008 12:54:18 +0800
Subject: [PATCH 042/505] ENGR00087885 MX51: VPU decoder support

Integrate CodaHx14 VPU to MX51,firmware version is V1.0.1.
1. Support vpu decoder feature for MX51.
2. Enhance unit test code to support VPU or IPU rotation,
   display width and height from input option.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 test/mxc_vpu_test/Makefile           |   2 +-
 test/mxc_vpu_test/configs/config_dec |  10 +-
 test/mxc_vpu_test/dec.c              | 180 +++++++++++++++++++----------------
 test/mxc_vpu_test/display.c          |  54 +++++++----
 test/mxc_vpu_test/enc.c              |   4 +-
 test/mxc_vpu_test/fb.c               |  11 ++-
 test/mxc_vpu_test/loopback.c         |   2 +-
 test/mxc_vpu_test/main.c             |  18 +++-
 test/mxc_vpu_test/utils.c            |  48 +++++++---
 test/mxc_vpu_test/vpu_test.h         |  14 +--
 10 files changed, 205 insertions(+), 138 deletions(-)

diff --git a/test/mxc_vpu_test/Makefile b/test/mxc_vpu_test/Makefile
index a04c207..6da9f59 100644
--- a/test/mxc_vpu_test/Makefile
+++ b/test/mxc_vpu_test/Makefile
@@ -11,7 +11,7 @@ OBJ = main.o \
       loopback.o
 
 # list of platforms which want this test case
-INCLUDE_LIST:=IMX27ADS IMX31ADS IMX37_3STACK
+INCLUDE_LIST:=IMX27ADS IMX31ADS IMX37_3STACK IMX51_3STACK
 
 ifeq ($(PLATFORM),$(findstring $(PLATFORM),$(INCLUDE_LIST)))
 TARGET = mxc_vpu_test.out
diff --git a/test/mxc_vpu_test/configs/config_dec b/test/mxc_vpu_test/configs/config_dec
index 5d491a7..ccff6f0 100644
--- a/test/mxc_vpu_test/configs/config_dec
+++ b/test/mxc_vpu_test/configs/config_dec
@@ -11,11 +11,17 @@ input=akiyo.mp4
 output=
 
 # format; 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1, 4 - MPEG2, 5 - DIV3
+# 6 - RV, 7 - MJPG
 format=0
 
 # rotation angle (0, 90, 180, 270). Do not specify anything if not needed.
+# Default is VPU rotation.
 rotation=
 
+# ipu_rot, 1 - Enable IPU rotation and disable VPU rotation when output
+# to LCD for display
+ipu_rot=
+
 # count, number of frames to encode or decode
 count=
 
@@ -28,10 +34,10 @@ dering=
 # mirroring (0, 1, 2 , 3)
 mirror=
 
-# width for encoding. This will be the capture/yuv image width
+# width, display width for decoding or capture/yuv image width for encoding
 width=
 
-# height for encoding. This will be the capture/yuv image height
+# height, display height for decoding or capture/yuv image height for encoding
 height=
 
 # bitrate. default is auto
diff --git a/test/mxc_vpu_test/dec.c b/test/mxc_vpu_test/dec.c
index c6988ed..786cebc 100644
--- a/test/mxc_vpu_test/dec.c
+++ b/test/mxc_vpu_test/dec.c
@@ -528,45 +528,42 @@ decoder_start(struct decode *dec)
 	DecHandle handle = dec->handle;
 	DecOutputInfo outinfo = {0};
 	DecParam decparam = {0};
-	int dst_scheme = dec->cmdl->dst_scheme;
 	int rot_en = dec->cmdl->rot_en, rot_stride, fwidth, fheight;
 	int rot_angle = dec->cmdl->rot_angle;
-	int mp4dblk_en = dec->cmdl->mp4dblk_en;
+	int deblock_en = dec->cmdl->deblock_en;
 	int dering_en = dec->cmdl->dering_en;
 	FrameBuffer *rot_fb = NULL;
-	FrameBuffer *mp4dblk_fb = NULL;
+	FrameBuffer *deblock_fb = NULL;
 	FrameBuffer *fb = dec->fb;
 	struct frame_buf **pfbpool = dec->pfbpool;
 	struct frame_buf *pfb = NULL;
 	struct vpu_display *disp = dec->disp;
 	int err, eos = 0, fill_end_bs = 0, decodefinish = 0;
-	struct timeval tbegin, tend;
+	struct timeval tdec_begin,tdec_end, total_start, total_end;
 	RetCode ret;
 	int sec, usec;
 	u32 yuv_addr, img_size;
-	float total_time = 0, frame_id = 0;
+	float tdec_time = 0, frame_id = 0, total_time=0;
 	int rotid = 0, dblkid = 0, mirror;
 	int count = dec->cmdl->count;
 	int totalNumofErrMbs = 0;
+	int disp_clr_index = -1;
 
-#ifdef USE_IPU_ROTATION
-	if (cpu_is_mx37() && rot_en && (dst_scheme != PATH_FILE)) {
+	if ((dec->cmdl->dst_scheme == PATH_V4L2) && (dec->cmdl->ipu_rot_en))
 		rot_en = 0;
-	}
-#endif
 
 	if (rot_en || dering_en) {
 		rotid = dec->fbcount;
-		if (mp4dblk_en) {
+		if (deblock_en) {
 			dblkid = dec->fbcount + 1;
 		}
-	} else if (mp4dblk_en) {
+	} else if (deblock_en) {
 		dblkid = dec->fbcount;
 	}
 
 	decparam.dispReorderBuf = 0;
 
-	decparam.prescanEnable = 1;
+	decparam.prescanEnable = 0;
 	decparam.prescanMode = 0;
 
 	decparam.skipframeMode = 0;
@@ -605,8 +602,8 @@ decoder_start(struct decode *dec)
 		unlock(dec->cmdl);
 	}
 
-	if (mp4dblk_en) {
-		mp4dblk_fb = &fb[dblkid];
+	if (deblock_en) {
+		deblock_fb = &fb[dblkid];
 	}
 	
 	if (dec->cmdl->dst_scheme == PATH_V4L2) {
@@ -618,14 +615,16 @@ decoder_start(struct decode *dec)
 			rot_fb->bufY = pfb->addrY;
 			rot_fb->bufCb = pfb->addrCb;
 			rot_fb->bufCr = pfb->addrCr;
-		} else if (mp4dblk_en) {
+		} else if (deblock_en) {
 			pfb = pfbpool[dblkid];
-			mp4dblk_fb->bufY = pfb->addrY;
-			mp4dblk_fb->bufCb = pfb->addrCb;
-			mp4dblk_fb->bufCr = pfb->addrCr;
+			deblock_fb->bufY = pfb->addrY;
+			deblock_fb->bufCb = pfb->addrCb;
+			deblock_fb->bufCr = pfb->addrCr;
 		}
 	}
-	
+
+	gettimeofday(&total_start, NULL);
+
 	while (1) {
 		lock(dec->cmdl);
 		
@@ -646,16 +645,17 @@ decoder_start(struct decode *dec)
 			}
 		}
 		
-		if (mp4dblk_en) {
+		if (deblock_en) {
 			ret = vpu_DecGiveCommand(handle, DEC_SET_DEBLOCK_OUTPUT,
-						(void *)mp4dblk_fb);
+						(void *)deblock_fb);
 			if (ret != RETCODE_SUCCESS) {
 				err_msg("Failed to set deblocking output\n");
 				unlock(dec->cmdl);
 				return -1;
 			}
 		}
-		
+
+		gettimeofday(&tdec_begin, NULL);
 		ret = vpu_DecStartOneFrame(handle, &decparam);
 		if (ret != RETCODE_SUCCESS) {
 			err_msg("DecStartOneFrame failed\n");
@@ -663,7 +663,6 @@ decoder_start(struct decode *dec)
 			return -1;
 		}
 
-		gettimeofday(&tbegin, NULL);
 		while (vpu_IsBusy()) {
 			err = dec_fill_bsbuffer(handle, dec->cmdl,
 				      dec->virt_bsbuf_addr,
@@ -682,16 +681,16 @@ decoder_start(struct decode *dec)
 			}
 		}
 
-		gettimeofday(&tend, NULL);
-		sec = tend.tv_sec - tbegin.tv_sec;
-		usec = tend.tv_usec - tbegin.tv_usec;
+		gettimeofday(&tdec_end, NULL);
+		sec = tdec_end.tv_sec - tdec_begin.tv_sec;
+		usec = tdec_end.tv_usec - tdec_begin.tv_usec;
 
 		if (usec < 0) {
 			sec--;
 			usec = usec + 1000000;
 		}
 
-		total_time += (sec * 1000000) + usec;
+		tdec_time += (sec * 1000000) + usec;
 
 		ret = vpu_DecGetOutputInfo(handle, &outinfo);
 		unlock(dec->cmdl);
@@ -776,31 +775,31 @@ decoder_start(struct decode *dec)
 		if (dec->cmdl->dst_scheme == PATH_V4L2) {
 			if (rot_en || dering_en) {
 				rot_fb->bufY =
-					disp->buffers[disp->buf.index]->offset;
+					disp->buffers[outinfo.indexFrameDisplay]->offset;
 				rot_fb->bufCb = rot_fb->bufY + img_size;
 				rot_fb->bufCr = rot_fb->bufCb +
 						(img_size >> 2);
-			} else if (mp4dblk_en) {
-				mp4dblk_fb->bufY =
+			} else if (deblock_en) {
+				deblock_fb->bufY =
 					disp->buffers[disp->buf.index]->offset;
-				mp4dblk_fb->bufCb = mp4dblk_fb->bufY + img_size;
-				mp4dblk_fb->bufCr = mp4dblk_fb->bufCb +
+				deblock_fb->bufCb = deblock_fb->bufY + img_size;
+				deblock_fb->bufCr = deblock_fb->bufCb +
 							(img_size >> 2);
 			}
 
-			err = v4l_put_data(disp);
+			err = v4l_put_data(disp, outinfo.indexFrameDisplay);
 			if (err)
 				return -1;
 
-			err = vpu_DecClrDispFlag(handle, disp->buf.index);
-			if (err)
-				err_msg("vpu_DecClrDispFlag failed Error code"
-						" %d\n", err);
-
+			if (disp_clr_index != -1) {
+				err = vpu_DecClrDispFlag(handle, disp_clr_index);
+				if (err)
+					err_msg("vpu_DecClrDispFlag failed Error code"
+							" %d\n", err);
+                        }
+                        disp_clr_index = disp->buf.index;
 		} else {
-			if (rot_en == 0 && mp4dblk_en == 0 && dering_en == 0) {
-				pfb = pfbpool[outinfo.indexFrameDisplay];
-			}
+			pfb = pfbpool[outinfo.indexFrameDisplay];
 
 			yuv_addr = pfb->addrY + pfb->desc.virt_uaddr -
 					pfb->desc.phy_addr;
@@ -813,24 +812,26 @@ decoder_start(struct decode *dec)
 					Rect rotCrop;
 					swapCropRect(dec, &rotCrop);
 					write_to_file2(dec, (u8 *)yuv_addr,
-								rotCrop);
+							rotCrop);
 				} else {
 					write_to_file2(dec, (u8 *)yuv_addr,
 							dec->picCropRect);
 				}
 			}
 
-			err = vpu_DecClrDispFlag(handle,
-						outinfo.indexFrameDisplay);
-			if (err)
-				err_msg("vpu_DecClrDispFlag failed Error code"
+			if (disp_clr_index != -1) {
+				err = vpu_DecClrDispFlag(handle,disp_clr_index);
+				if (err)
+					err_msg("vpu_DecClrDispFlag failed Error code"
 						" %d\n", err);
+			}
+			disp_clr_index = outinfo.indexFrameDisplay;
 		}
 
-		if (outinfo.numOfErrMBs) {
-			totalNumofErrMbs += outinfo.numOfErrMBs;
+		if (outinfo.numOfErrMBs[0]) {
+			totalNumofErrMbs += outinfo.numOfErrMBs[0];
 			info_msg("Num of Error Mbs : %d, in Frame : %d \n",
-					outinfo.numOfErrMBs, (int)frame_id);
+					outinfo.numOfErrMBs[0], (int)frame_id);
 		}
 
 		frame_id++;
@@ -854,9 +855,19 @@ decoder_start(struct decode *dec)
 		info_msg("Total Num of Error MBs : %d\n", totalNumofErrMbs);
 	}
 
+	gettimeofday(&total_end, NULL);
+	sec = total_end.tv_sec - total_start.tv_sec;
+	usec = total_end.tv_usec - total_start.tv_usec;
+	if (usec < 0) {
+		sec--;
+		usec = usec + 1000000;
+	}
+	total_time = (sec * 1000000) + usec;
+
 	info_msg("%d frames took %d microseconds\n", (int)frame_id,
 						(int)total_time);
-	info_msg("fps = %.2f\n", (frame_id / (total_time / 1000000)));
+	info_msg("dec fps = %.2f\n", (frame_id / (tdec_time / 1000000)));
+	info_msg("total fps= %.2f \n",(frame_id / (total_time / 1000000)));
 	return 0;
 }
 
@@ -865,21 +876,18 @@ decoder_free_framebuffer(struct decode *dec)
 {
 	int i, totalfb;
 	vpu_mem_desc *mvcol_md = dec->mvcol_memdesc;
-       	int rot_en = dec->cmdl->rot_en;
-	int mp4dblk_en = dec->cmdl->mp4dblk_en;
+	int rot_en = dec->cmdl->rot_en;
+	int deblock_en = dec->cmdl->deblock_en;
 	int dering_en = dec->cmdl->dering_en;
 
-#ifdef USE_IPU_ROTATION
-	if (cpu_is_mx37() && rot_en) {
+	if ((dec->cmdl->dst_scheme == PATH_V4L2) && (dec->cmdl->ipu_rot_en))
 		rot_en = 0;
-	}
-#endif
 
 	if (dec->cmdl->dst_scheme == PATH_V4L2) {
 		v4l_display_close(dec->disp);
 
-		if ((rot_en == 0) && (mp4dblk_en == 0) && (dering_en == 0)) {
-			if (cpu_is_mx37()) {
+		if ((rot_en == 0) && (deblock_en == 0) && (dering_en == 0)) {
+			if (cpu_is_mx37() || cpu_is_mx51()) {
 				for (i = 0; i < dec->fbcount; i++) {
 					IOFreePhyMem(&mvcol_md[i]);
 				}
@@ -890,8 +898,8 @@ decoder_free_framebuffer(struct decode *dec)
 
 	if ((dec->cmdl->dst_scheme != PATH_V4L2) ||
 			((dec->cmdl->dst_scheme == PATH_V4L2) &&
-			 (rot_en || mp4dblk_en ||
-			 (cpu_is_mx37() && dering_en)))) {
+			 (rot_en || deblock_en ||
+			 ((cpu_is_mx37() || cpu_is_mx51()) && dering_en)))) {
 		totalfb = dec->fbcount + dec->extrafb;
 		for (i = 0; i < totalfb; i++) {
 			framebuf_free(dec->pfbpool[i]);
@@ -909,7 +917,7 @@ decoder_allocate_framebuffer(struct decode *dec)
 	DecBufInfo bufinfo;
 	int i, fbcount = dec->fbcount, extrafb = 0, totalfb, img_size;
        	int dst_scheme = dec->cmdl->dst_scheme, rot_en = dec->cmdl->rot_en;
-	int mp4dblk_en = dec->cmdl->mp4dblk_en;
+	int deblock_en = dec->cmdl->deblock_en;
 	int dering_en = dec->cmdl->dering_en;
 	struct rot rotation = {0};
 	RetCode ret;
@@ -920,11 +928,8 @@ decoder_allocate_framebuffer(struct decode *dec)
 	int stride;
 	vpu_mem_desc *mvcol_md = NULL;
 
-#ifdef USE_IPU_ROTATION
-	if (cpu_is_mx37() && rot_en && (dst_scheme != PATH_FILE)) {
+	if ((dec->cmdl->dst_scheme == PATH_V4L2) && (dec->cmdl->ipu_rot_en))
 		rot_en = 0;
-	}
-#endif
 
 	/* 1 extra fb for rotation(or dering) */
 	if (rot_en || dering_en) {
@@ -933,7 +938,7 @@ decoder_allocate_framebuffer(struct decode *dec)
 	}
 
 	/* 1 extra fb for deblocking */
-	if (mp4dblk_en) {
+	if (deblock_en) {
 		extrafb++;
 		dec->extrafb++;
 	}
@@ -954,11 +959,11 @@ decoder_allocate_framebuffer(struct decode *dec)
 	}
 	
 	if ((dst_scheme != PATH_V4L2) ||
-		((dst_scheme == PATH_V4L2) && (rot_en || mp4dblk_en ||
-			(cpu_is_mx37() && dering_en)))) {
+		((dst_scheme == PATH_V4L2) && (rot_en || deblock_en ||
+			((cpu_is_mx37()||cpu_is_mx51()) && dering_en)))) {
 
 		for (i = 0; i < totalfb; i++) {
-			pfbpool[i] = framebuf_alloc(dec->stride,
+			pfbpool[i] = framebuf_alloc(dec->cmdl->format, dec->stride,
 						    dec->picheight);
 			if (pfbpool[i] == NULL) {
 				totalfb = i;
@@ -968,7 +973,7 @@ decoder_allocate_framebuffer(struct decode *dec)
 			fb[i].bufY = pfbpool[i]->addrY;
 			fb[i].bufCb = pfbpool[i]->addrCb;
 			fb[i].bufCr = pfbpool[i]->addrCr;
-			if (cpu_is_mx37()) {
+			if (cpu_is_mx37() || cpu_is_mx51()) {
 				fb[i].bufMvCol = pfbpool[i]->mvColBuf;
 			}
 		}
@@ -977,23 +982,20 @@ decoder_allocate_framebuffer(struct decode *dec)
 	if (dst_scheme == PATH_V4L2) {
 		rotation.rot_en = dec->cmdl->rot_en;
 		rotation.rot_angle = dec->cmdl->rot_angle;
-#ifdef USE_IPU_ROTATION
-		/* use the ipu h/w rotation instead of vpu rotaton */
-		if (cpu_is_mx37() && rotation.rot_en) {
+
+		if (dec->cmdl->ipu_rot_en) {
 			rotation.rot_en = 0;
 			rotation.ipu_rot_en = 1;
 		}
-#endif
-
 		disp = v4l_display_open(dec, fbcount, rotation);
 		if (disp == NULL) {
 			goto err;
 		}
 
-		if ((rot_en == 0) && (mp4dblk_en == 0) && (dering_en == 0)) {
+		if ((rot_en == 0) && (deblock_en == 0) && (dering_en == 0)) {
 			img_size = dec->stride * dec->picheight;
 
-			if (cpu_is_mx37()) {
+			if (cpu_is_mx37() || cpu_is_mx51()) {
 				mvcol_md = dec->mvcol_memdesc =
 					calloc(fbcount, sizeof(vpu_mem_desc));
 			}
@@ -1002,7 +1004,7 @@ decoder_allocate_framebuffer(struct decode *dec)
 				fb[i].bufCb = fb[i].bufY + img_size;
 				fb[i].bufCr = fb[i].bufCb + (img_size >> 2);
 				/* allocate MvCol buffer here */
-				if (cpu_is_mx37()) {
+				if (cpu_is_mx37() || cpu_is_mx51()) {
 					memset(&mvcol_md[i], 0,
 							sizeof(vpu_mem_desc));
 					mvcol_md[i].size = img_size >> 2;
@@ -1039,8 +1041,8 @@ err1:
 
 err:
 	if ((dst_scheme != PATH_V4L2) ||
-		((dst_scheme == PATH_V4L2) && (rot_en || mp4dblk_en ||
-			(cpu_is_mx37() && dering_en)))) {
+		((dst_scheme == PATH_V4L2) && (rot_en || deblock_en ||
+			((cpu_is_mx37() || cpu_is_mx51()) && dering_en)))) {
 		for (i = 0; i < totalfb; i++) {
 			framebuf_free(pfbpool[i]);
 		}
@@ -1110,7 +1112,19 @@ decoder_parse(struct decode *dec)
 					initinfo.picCropRect.right,
 					initinfo.picCropRect.bottom);
 
-	dec->fbcount = initinfo.minFrameBufferCount;
+	/*
+	 * We suggest to add two more buffers than minFrameBufferCount:
+	 *
+	 * vpu_DecClrDispFlag is used to control framebuffer whether can be
+	 * used for decoder again. One framebuffer dequeue from IPU is delayed
+	 * for performance improvement and one framebuffer is delayed for
+	 * display flag clear.
+
+	 * Performance is better when more buffers are used if IPU performance
+	 * is bottleneck.
+	 */
+
+	dec->fbcount = initinfo.minFrameBufferCount+2;
 	dec->picwidth = ((initinfo.picWidth + 15) & ~15);
 	dec->picheight = ((initinfo.picHeight + 15) & ~15);
 	if ((dec->picwidth == 0) || (dec->picheight == 0))
@@ -1133,7 +1147,7 @@ decoder_open(struct decode *dec)
 	oparam.bitstreamFormat = dec->cmdl->format;
 	oparam.bitstreamBuffer = dec->phy_bsbuf_addr;
 	oparam.bitstreamBufferSize = STREAM_BUF_SIZE;
-	oparam.mp4DeblkEnable = dec->cmdl->mp4dblk_en;
+	oparam.mp4DeblkEnable = dec->cmdl->deblock_en;
 	oparam.reorderEnable = dec->reorderEnable;
 
 	oparam.psSaveBuffer = dec->phy_ps_buf;
@@ -1185,7 +1199,7 @@ decode_test(void *arg)
 	dec->virt_bsbuf_addr = mem_desc.virt_uaddr;
 
 	dec->chromaInterleave = 0;
-	dec->reorderEnable = 0;
+	dec->reorderEnable = 1;
 	dec->cmdl = cmdl;
 
 	if (cmdl->format == STD_AVC) {
diff --git a/test/mxc_vpu_test/display.c b/test/mxc_vpu_test/display.c
index bc0c325..84386d1 100644
--- a/test/mxc_vpu_test/display.c
+++ b/test/mxc_vpu_test/display.c
@@ -93,6 +93,8 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation)
 	int top = dec->picCropRect.top;
 	int right = dec->picCropRect.right;
 	int bottom = dec->picCropRect.bottom;
+	int disp_width = dec->cmdl->width;
+	int disp_height = dec->cmdl->height;
 	int fd, err, out, i;
 	char v4l_device[32] = "/dev/video16";
 	struct v4l2_cropcap cropcap = {0};
@@ -171,10 +173,14 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation)
 	crop.c.width = width / ratio;
 	crop.c.height = height / ratio;
 
-	if (cpu_is_mx37()) {
+	if ((disp_width != 0) && (disp_height!= 0 )) {
+		crop.c.width = disp_width;
+		crop.c.height = disp_height;
+	} else if (cpu_is_mx37() || cpu_is_mx51()) {
 		crop.c.width = cropcap.bounds.width;
 		crop.c.height = cropcap.bounds.height;
-	}
+         }
+
 	dprintf(1, "crop.c.width/height: %d/%d\n", crop.c.width, crop.c.height);
 
 	err = ioctl(fd, VIDIOC_S_CROP, &crop);
@@ -183,7 +189,7 @@ v4l_display_open(struct decode *dec, int nframes, struct rot rotation)
 		goto err;
 	}
 
-	if (rotation.ipu_rot_en) {
+	if (rotation.ipu_rot_en && (rotation.rot_angle != 0)) {
 		/* Set rotation via V4L2 i/f */
 		struct v4l2_control ctrl;
 		ctrl.id = V4L2_CID_PRIVATE_BASE;
@@ -336,7 +342,7 @@ void v4l_display_close(struct vpu_display *disp)
 	free(disp);
 }
 
-int v4l_put_data(struct vpu_display *disp)
+int v4l_put_data(struct vpu_display *disp, int index)
 {
 	struct timeval tv;
 	int err, type;
@@ -348,25 +354,17 @@ int v4l_put_data(struct vpu_display *disp)
 
 		disp->sec = tv.tv_sec;
 		disp->usec = tv.tv_usec;
-	}
+       }
 
 	disp->buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
 	disp->buf.memory = V4L2_MEMORY_MMAP;
-	if (disp->ncount < disp->nframes) {
-		disp->buf.index = disp->ncount;
-		err = ioctl(disp->fd, VIDIOC_QUERYBUF, &disp->buf);
-		if (err < 0) {
-			err_msg("VIDIOC_QUERYBUF failed\n");
-			goto err;
-		}
-	} else {
-		disp->buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
-		disp->buf.memory = V4L2_MEMORY_MMAP;
-		err = ioctl(disp->fd, VIDIOC_DQBUF, &disp->buf);
-		if (err < 0) {
-			err_msg("VIDIOC_DQBUF failed\n");
-			goto err;
-		}
+
+	/* query buffer info */
+	disp->buf.index = index;
+	err = ioctl(disp->fd, VIDIOC_QUERYBUF, &disp->buf);
+	if (err < 0) {
+		err_msg("VIDIOC_QUERYBUF failed\n");
+		goto err;
 	}
 
 	if (disp->ncount > 0) {
@@ -381,11 +379,13 @@ int v4l_put_data(struct vpu_display *disp)
 
 	}
 
+	disp->buf.index = index;
 	err = ioctl(disp->fd, VIDIOC_QBUF, &disp->buf);
 	if (err < 0) {
 		err_msg("VIDIOC_QBUF failed\n");
 		goto err;
 	}
+	disp->queued_count++;
 
 	if (disp->ncount == 1) {
 		type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
@@ -397,6 +397,20 @@ int v4l_put_data(struct vpu_display *disp)
 	}
 
 	disp->ncount++;
+
+	if (disp->queued_count > 1) {
+		disp->buf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+		disp->buf.memory = V4L2_MEMORY_MMAP;
+		err = ioctl(disp->fd, VIDIOC_DQBUF, &disp->buf);
+		if (err < 0) {
+			err_msg("VIDIOC_DQBUF failed\n");
+			goto err;
+		}
+		disp->queued_count--;
+	}
+	else
+		disp->buf.index = -1;
+
 	return 0;
 
 err:
diff --git a/test/mxc_vpu_test/enc.c b/test/mxc_vpu_test/enc.c
index 6703751..5c0e880 100644
--- a/test/mxc_vpu_test/enc.c
+++ b/test/mxc_vpu_test/enc.c
@@ -197,7 +197,7 @@ encoder_allocate_framebuffer(struct encode *enc)
 	}
 
 	for (i = 0; i < fbcount; i++) {
-		pfbpool[i] = framebuf_alloc(enc->picwidth, enc->picheight);
+		pfbpool[i] = framebuf_alloc(enc->cmdl->format, enc->picwidth, enc->picheight);
 		if (pfbpool[i] == NULL) {
 			fbcount = i;
 			goto err1;
@@ -226,7 +226,7 @@ encoder_allocate_framebuffer(struct encode *enc)
 		}
 	} else {
 		/* Allocate a single frame buffer for source frame */
-		pfbpool[src_fbid] = framebuf_alloc(enc->picwidth,
+		pfbpool[src_fbid] = framebuf_alloc(enc->cmdl->format, enc->picwidth,
 						   enc->picheight);
 		if (pfbpool[src_fbid] == NULL) {
 			err_msg("failed to allocate single framebuf\n");
diff --git a/test/mxc_vpu_test/fb.c b/test/mxc_vpu_test/fb.c
index 81c8757..6c76fce 100644
--- a/test/mxc_vpu_test/fb.c
+++ b/test/mxc_vpu_test/fb.c
@@ -63,7 +63,7 @@ void put_framebuf(struct frame_buf *fb)
 	fbarray[fb_index] = fb;
 }
 
-struct frame_buf *framebuf_alloc(int strideY, int height)
+struct frame_buf *framebuf_alloc(int stdMode, int strideY, int height)
 {
 	struct frame_buf *fb;
 	int err;
@@ -74,7 +74,7 @@ struct frame_buf *framebuf_alloc(int strideY, int height)
 
 	memset(&(fb->desc), 0, sizeof(vpu_mem_desc));
 	fb->desc.size = (strideY * height * 3 / 2);
-	if (cpu_is_mx37())
+	if (cpu_is_mx37() || cpu_is_mx51())
 		fb->desc.size += strideY * height / 4;
 	
 	err = IOGetPhyMem(&fb->desc);
@@ -87,8 +87,11 @@ struct frame_buf *framebuf_alloc(int strideY, int height)
 	fb->addrY = fb->desc.phy_addr;
 	fb->addrCb = fb->addrY + strideY * height;
 	fb->addrCr = fb->addrCb + strideY / 2 * height / 2;
-	if (cpu_is_mx37()) {
-		fb->mvColBuf = fb->addrCr + strideY / 2 * height / 2;
+	if (cpu_is_mx37() || cpu_is_mx51()) {
+		if (stdMode==STD_MJPG)
+			fb->mvColBuf = fb->addrCr;
+		else
+			fb->mvColBuf = fb->addrCr + strideY / 2 * height / 2;
 	}
 	fb->desc.virt_uaddr = IOGetVirtMem(&(fb->desc));
 	if (fb->desc.virt_uaddr <= 0) {
diff --git a/test/mxc_vpu_test/loopback.c b/test/mxc_vpu_test/loopback.c
index 3098560..55804e4 100644
--- a/test/mxc_vpu_test/loopback.c
+++ b/test/mxc_vpu_test/loopback.c
@@ -77,7 +77,7 @@ decode()
 		goto out;
 	}
 
-	ret = v4l_put_data(disp);
+	ret = v4l_put_data(disp, outinfo.indexFrameDisplay);
 	if (ret)
 		return -1;
 	
diff --git a/test/mxc_vpu_test/main.c b/test/mxc_vpu_test/main.c
index 1411d5a..44b0a34 100644
--- a/test/mxc_vpu_test/main.c
+++ b/test/mxc_vpu_test/main.c
@@ -36,7 +36,7 @@ char *usage = "Usage: ./mxc_vpu_test.out -D \"<decode options>\" "\
 	       "  -o <output file> Write output to file \n "\
 	       "	If no output is specified, default is LCD \n "\
 	       "  -f <format> 0 - MPEG4, 1 - H.263, 2 - H.264, 3 - VC1, \n "\
-	       "	4 - MPEG2, 5 - DIVX, \n "\
+	       "	4 - MPEG2, 5 - DIVX, 6 - RV, 7 - MJPG, \n "\
 	       "	If no format specified, default is 0 (MPEG4) \n "\
 	       "  -p <port number> UDP port number to bind \n "\
 	       "	If no port number is secified, 5555 is used \n "\
@@ -49,6 +49,13 @@ char *usage = "Usage: ./mxc_vpu_test.out -D \"<decode options>\" "\
 	       "	default rotation is disabled (0) \n "\
 	       "  -m <mirror direction> 0, 1, 2, 3 \n "\
 	       "	default no mirroring (0) \n "\
+	       "  -u <ipu rotation> Using IPU rotation for display - 1. IPU rotation \n "\
+	       "        default is VPU rotation(0).\n "\
+	       "        This flag is effective when 'r' flag is specified.\n "\
+	       "  -w <width> display picture width \n "\
+	       "	default is source picture width. \n "\
+	       "  -h <height> disiplay picture height \n "\
+	       "	default is source picture height \n "\
 	       "\n"\
 	       "encode options \n "\
 	       "  -i <input file> Read input from file (yuv) \n "\
@@ -108,7 +115,7 @@ int encdec_test(void *arg);
 static char *mainopts = "HE:D:L:C:";
 
 /* Options for encode and decode */
-static char *options = "i:o:n:p:r:f:c:w:h:g:b:d:e:m:";
+static char *options = "i:o:n:p:r:f:c:w:h:g:b:d:e:m:u:";
 
 int
 parse_config_file(char *file_name)
@@ -131,7 +138,6 @@ parse_config_file(char *file_name)
 		}
 
 		ptr = skip_unwanted(line);
-
 		end = parse_options(ptr, &input_arg[instance].cmd,
 					&input_arg[instance].mode);
 		if (end == 100) {
@@ -235,6 +241,10 @@ parse_args(int argc, char *argv[], int i)
 			input_arg[i].cmd.rot_en = 1;
 			input_arg[i].cmd.rot_angle = atoi(optarg);
 			break;
+		case 'u':
+			input_arg[i].cmd.ipu_rot_en = 1;
+			input_arg[i].cmd.rot_en = 0;
+			break;
 		case 'f':
 			input_arg[i].cmd.format = atoi(optarg);
 			break;
@@ -254,7 +264,7 @@ parse_args(int argc, char *argv[], int i)
 			input_arg[i].cmd.bitrate = atoi(optarg);
 			break;
 		case 'd':
-			input_arg[i].cmd.mp4dblk_en = 1;
+			input_arg[i].cmd.deblock_en = 1;
 			break;
 		case 'e':
 			input_arg[i].cmd.dering_en = 1;
diff --git a/test/mxc_vpu_test/utils.c b/test/mxc_vpu_test/utils.c
index 183c522..fefa9da 100644
--- a/test/mxc_vpu_test/utils.c
+++ b/test/mxc_vpu_test/utils.c
@@ -447,6 +447,12 @@ check_params(struct cmd_line *cmd, int op)
 	case STD_DIV3:
 		info_msg("Format: STD_DIV3\n");
 		break;
+	case STD_RV:
+		info_msg("Format: STD_RV\n");
+		break;
+	case STD_MJPG:
+		info_msg("Format: STD_MJPG\n");
+		break;
 	default:
 		err_msg("Unsupported Format!\n");
 		break;
@@ -519,9 +525,9 @@ check_params(struct cmd_line *cmd, int op)
 
 	if (!(cmd->format == STD_MPEG4 || cmd->format == STD_H263 ||
 	    cmd->format == STD_MPEG2 || cmd->format == STD_DIV3) &&
-	    cmd->mp4dblk_en) {
-		warn_msg("Deblocking only for MPEG4. Disabled!\n");
-		cmd->mp4dblk_en = 0;
+	    cmd->deblock_en) {
+		warn_msg("Deblocking only for MPEG4 and MPEG2. Disabled!\n");
+		cmd->deblock_en = 0;
 	}
 
 	return 0;
@@ -599,60 +605,74 @@ int parse_options(char *buf, struct cmd_line *cmd, int *mode)
 		return 0;
 	}
 
-	str = strstr(buf, "ip");
+	str = strstr(buf, "port");
 	if (str != NULL) {
 		str = index(buf, '=');
 		if (str != NULL) {
 			str++;
 			if (*str != '\0') {
-				strncpy(cmd->output, str, 64);
-				cmd->dst_scheme = PATH_NET;
+				cmd->port = strtol(str, NULL, 10);
 			}
 		}
 		
 		return 0;
 	}
 
-	str = strstr(buf, "port");
+	str = strstr(buf, "format");
 	if (str != NULL) {
 		str = index(buf, '=');
 		if (str != NULL) {
 			str++;
 			if (*str != '\0') {
-				cmd->port = strtol(str, NULL, 10);
+				cmd->format = strtol(str, NULL, 10);
 			}
 		}
 		
 		return 0;
 	}
 
-	str = strstr(buf, "format");
+	str = strstr(buf, "rotation");
 	if (str != NULL) {
 		str = index(buf, '=');
 		if (str != NULL) {
 			str++;
 			if (*str != '\0') {
-				cmd->format = strtol(str, NULL, 10);
+				cmd->rot_en = 1;
+				cmd->rot_angle = strtol(str, NULL, 10);
 			}
 		}
 		
 		return 0;
 	}
 
-	str = strstr(buf, "rotation");
+	str = strstr(buf, "ipu_rot");
 	if (str != NULL) {
 		str = index(buf, '=');
 		if (str != NULL) {
 			str++;
 			if (*str != '\0') {
-				cmd->rot_en = 1;
-				cmd->rot_angle = strtol(str, NULL, 10);
+				cmd->rot_en = 0;
+				cmd->ipu_rot_en = 1;
 			}
 		}
 		
 		return 0;
 	}
 
+        str = strstr(buf, "ip");
+        if (str != NULL) {
+                str = index(buf, '=');
+                if (str != NULL) {
+                        str++;
+                        if (*str != '\0') {
+                                strncpy(cmd->output, str, 64);
+                                cmd->dst_scheme = PATH_NET;
+                        }
+                }
+
+                return 0;
+        }
+
 	str = strstr(buf, "count");
 	if (str != NULL) {
 		str = index(buf, '=');
@@ -672,7 +692,7 @@ int parse_options(char *buf, struct cmd_line *cmd, int *mode)
 		if (str != NULL) {
 			str++;
 			if (*str != '\0') {
-				cmd->mp4dblk_en = strtol(str, NULL, 10);
+				cmd->deblock_en = strtol(str, NULL, 10);
 			}
 		}
 		
diff --git a/test/mxc_vpu_test/vpu_test.h b/test/mxc_vpu_test/vpu_test.h
index e2e3c92..cd6903c 100644
--- a/test/mxc_vpu_test/vpu_test.h
+++ b/test/mxc_vpu_test/vpu_test.h
@@ -42,7 +42,6 @@
 
 /*#define TVOUT_ENABLE*/
 /* Available on MX37. If not defined, then use VPU rotation.  */
-#define USE_IPU_ROTATION
 
 typedef unsigned long u32;
 typedef unsigned short u16;
@@ -51,9 +50,9 @@ typedef signed int s32;
 typedef signed short s16;
 typedef signed char s8;
 
-#define STREAM_BUF_SIZE		0x40000
-#define STREAM_FILL_SIZE	0x8000
-#define STREAM_READ_SIZE	(512 * 4)
+#define STREAM_BUF_SIZE		0x80000
+#define STREAM_FILL_SIZE	0x10000
+#define STREAM_READ_SIZE	(512 * 8)
 #define STREAM_END_SIZE		0
 #define PS_SAVE_SIZE		0x028000
 #define SLICE_SAVE_SIZE		0x02D800
@@ -91,6 +90,7 @@ struct vpu_display {
 	int nframes;
 	int ncount;
 	time_t sec;
+	int queued_count;
 	suseconds_t usec;
 	struct v4l2_buffer buf;
 	struct v4l_buf *buffers[32];
@@ -118,7 +118,7 @@ struct cmd_line {
 	int width;
 	int height;
 	int format;
-	int mp4dblk_en;
+	int deblock_en;
 	int dering_en;
 	int rot_en;
 	int ipu_rot_en;
@@ -186,9 +186,9 @@ int parse_options(char *buf, struct cmd_line *cmd, int *mode);
 
 struct vpu_display *v4l_display_open(struct decode *dec, int nframes,
 					struct rot rotation);
-int v4l_put_data(struct vpu_display *disp);
+int v4l_put_data(struct vpu_display *disp, int index);
 void v4l_display_close(struct vpu_display *disp);
-struct frame_buf *framebuf_alloc(int strideY, int height);
+struct frame_buf *framebuf_alloc(int stdMode, int strideY, int height);
 void framebuf_free(struct frame_buf *fb);
 
 int v4l_start_capturing(void);
-- 
1.8.0

