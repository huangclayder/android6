From d041dcc4657d06adcdcd4d08e624932588c33a99 Mon Sep 17 00:00:00 2001
From: Dong Aisheng <b29396@freescale.com>
Date: Mon, 9 Apr 2012 14:57:34 +0800
Subject: [PATCH 306/505] ENGR00179161 add flexcan test doc

Add flexcan test doc.

Signed-off-by: Dong Aisheng <b29396@freescale.com>
---
 test/can/doc/FSL-UT-CAN-001.txt | 36 ++++++++++++++++++++++
 test/can/doc/FSL-UT-CAN-002.txt | 43 ++++++++++++++++++++++++++
 test/can/doc/FSL-UT-CAN-003.txt | 68 +++++++++++++++++++++++++++++++++++++++++
 test/can/doc/FSL-UT-CAN-004.txt | 56 +++++++++++++++++++++++++++++++++
 test/doc/ut_um.toc              |  7 +++++
 5 files changed, 210 insertions(+)
 create mode 100644 test/can/doc/FSL-UT-CAN-001.txt
 create mode 100644 test/can/doc/FSL-UT-CAN-002.txt
 create mode 100644 test/can/doc/FSL-UT-CAN-003.txt
 create mode 100644 test/can/doc/FSL-UT-CAN-004.txt

diff --git a/test/can/doc/FSL-UT-CAN-001.txt b/test/can/doc/FSL-UT-CAN-001.txt
new file mode 100644
index 0000000..3aca002
--- /dev/null
+++ b/test/can/doc/FSL-UT-CAN-001.txt
@@ -0,0 +1,36 @@
+FSL-UT-CAN-001
+~~~~~~~~~~~~~~~
+
+[cols=">s,6a",frame="topbot",options="header"]
+|====================================================================
+|Name | Description
+
+| Summary |
+CAN driver suspend and resume
+
+| Automated |
+No
+
+| Kernel Config Option |
+
+| Software Dependency |
+N/A
+
+| Non-default Hardware Configuration |
+N/A
+
+| Test Procedure |
+. Ensure CAN can enter suspend
+
+  echo standby > /sys/power/state
+
+. Press one key to resume
+
+. Retest CAN function again
+
+| Expected Result |
+Those operations should be successful.
+
+|====================================================================
+
+<<<
diff --git a/test/can/doc/FSL-UT-CAN-002.txt b/test/can/doc/FSL-UT-CAN-002.txt
new file mode 100644
index 0000000..f5ffd2a
--- /dev/null
+++ b/test/can/doc/FSL-UT-CAN-002.txt
@@ -0,0 +1,43 @@
+FSL-UT-CAN-002
+~~~~~~~~~~~~~~~
+
+[cols=">s,6a",frame="topbot",options="header"]
+|====================================================================
+|Name | Description
+
+| Summary |
+CAN wakeup
+
+| Automated |
+No
+
+| Kernel Config Option |
+
+| Software Dependency |
+N/A
+
+| Non-default Hardware Configuration |
+N/A
+
+| Test Procedure |
+
+Note: The CAN self-wakeup function is enabled by default.
+
+. Active CAN interface
+
+  ip link set can0 up type can bitrate 125000
+
+. Enter Low power mode
+
+  echo mem > /sys/power/state
+
+. Tie CAN's Tx to GND to wakeup the systerm.
+
+  Alternatively user can use another CAN to send frames to the sleep can to wakeup it.
+
+| Expected Result |
+Those operations should be successful.
+
+|====================================================================
+
+<<<
diff --git a/test/can/doc/FSL-UT-CAN-003.txt b/test/can/doc/FSL-UT-CAN-003.txt
new file mode 100644
index 0000000..55f920f
--- /dev/null
+++ b/test/can/doc/FSL-UT-CAN-003.txt
@@ -0,0 +1,68 @@
+FSL-UT-CAN-003
+~~~~~~~~~~~~~~~
+
+[cols=">s,6a",frame="topbot",options="header"]
+|====================================================================
+|Name | Description
+
+| Summary |
+CAN send message
+
+| Automated |
+No
+
+| Kernel Config Option |
+
+| Software Dependency |
+N/A
+
+| Non-default Hardware Configuration |
+N/A
+
+| Test Procedure |
+
+.Note
+. If there's no KVASER CAN, can protocal analyzer, user can use
+procedure B for test.
+
+. For kernel earlier than 2.6.38, user still needs use the old way as
+before to test can.
+
+.Procedure A
+
+. Connect CAN interface(can0) on board with KVASER CAN
+
+. Active CAN interface
+
+  ip link set can0 up type can bitrate 125000
+
+. Run cansend to transmit one message.
+
+  cantest can0 1F334455#1122334455667788
+
+. Check the data that KVASER CAN recieved.
+
+.Procedure B
+. Get a FlexCAN loop-back connector or cable lines and connect it between CAN1 and CAN2.
+
+. Active CAN interface
+
+  ip link set can0 up type can bitrate 125000
+
+  ip link set can1 up type can bitrate 125000
+
+. Put can0 into receive mode in a background process
+
+  cantest can0&
+
+. Send test packet from CAN1 to CAN0
+
+  cantest can1 1F334455#1122334455667788
+
+| Expected Result |
+The can0 should print the received frame 1F334455#1122334455667788
+from can1.
+
+|====================================================================
+
+<<<
diff --git a/test/can/doc/FSL-UT-CAN-004.txt b/test/can/doc/FSL-UT-CAN-004.txt
new file mode 100644
index 0000000..93a7b43
--- /dev/null
+++ b/test/can/doc/FSL-UT-CAN-004.txt
@@ -0,0 +1,56 @@
+FSL-UT-CAN-004
+~~~~~~~~~~~~~~~
+
+[cols=">s,6a",frame="topbot",options="header"]
+|====================================================================
+|Name | Description
+
+| Summary |
+CAN receive message
+
+| Automated |
+No
+
+| Kernel Config Option |
+
+| Software Dependency |
+N/A
+
+| Non-default Hardware Configuration |
+N/A
+
+| Test Procedure |
+
+.Note
+. If there's no KVASER CAN, can protocal analyzer, user can use procedure B for test.
+
+. For kernel earlier than 2.6.38, user still needs use the old way as
+before to test can.
+
+.Procedure A
+. Connect CAN interface(can0) on board with KVASER CAN
+
+. Active CAN interface
+
+  ip link set can0 up type can bitrate 125000
+
+. Running cantest to receive messages
+
+  cantest can0&
+
+. Configure KVASER CAN to send data to can0
+
+. Check the data received.
+
+  The can0 should output the data received.
+
+.Procedure B
+
+The same as FSL-UT-CAN-003 procedure B.
+
+| Expected Result |
+The can should receive data successfully.
+
+|====================================================================
+
+<<<
diff --git a/test/doc/ut_um.toc b/test/doc/ut_um.toc
index 10de2eb..8d8707c 100644
--- a/test/doc/ut_um.toc
+++ b/test/doc/ut_um.toc
@@ -145,3 +145,10 @@ include::../mxc_v4l2_test/doc/FSL-UT-V4L2-006.txt[]
 include::../mxc_v4l2_test/doc/FSL-UT-V4L2-007.txt[]
 include::../mxc_v4l2_test/doc/FSL-UT-V4L2-008.txt[]
 include::../mxc_v4l2_test/doc/FSL-UT-V4L2-009.txt[]
+
+CAN
+---
+include::../can/doc/FSL-UT-CAN-001.txt[]
+include::../can/doc/FSL-UT-CAN-002.txt[]
+include::../can/doc/FSL-UT-CAN-003.txt[]
+include::../can/doc/FSL-UT-CAN-004.txt[]
-- 
1.8.0

