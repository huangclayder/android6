From e865bd3ede9ce6f96d6db1a3062dc76183bbb39e Mon Sep 17 00:00:00 2001
From: Danny Nold <dannynold@freescale.com>
Date: Fri, 3 Dec 2010 13:30:14 -0600
Subject: [PATCH 197/505] ENGR00135045 - EPDC fb unit test: Add kernel test
 driver for EPDC

- Created EPDC kernel test driver module to route EPDC ioctl calls
- Modified EPDC Unit test to use the EPDC kernel test driver
if it exists.

Signed-off-by: Danny Nold <dannynold@freescale.com>
---
 module_test/Makefile                |   3 +
 module_test/epdc_test_driver.c      | 202 ++++++++++++++++++++++++++++++++++++
 test/mxc_fb_test/mxc_epdc_fb_test.c |  73 +++++++------
 3 files changed, 248 insertions(+), 30 deletions(-)
 create mode 100644 module_test/epdc_test_driver.c

diff --git a/module_test/Makefile b/module_test/Makefile
index f79dae9..4790b78 100644
--- a/module_test/Makefile
+++ b/module_test/Makefile
@@ -18,6 +18,9 @@ endif
 ifeq ($(CONFIG_MXC_SDMA_API),y)
 module_list-y += mxc_sdma_mem_test.o
 endif
+ifeq ($(CONFIG_FB_MXC_EINK_PANEL),y)
+module_list-y += epdc_test_driver.o
+endif
 
 # sahara uses common files for both test application and test module
 SAHARA_TEST_SOURCE=../test/mxc_sahara_test/
diff --git a/module_test/epdc_test_driver.c b/module_test/epdc_test_driver.c
new file mode 100644
index 0000000..dc2caef
--- /dev/null
+++ b/module_test/epdc_test_driver.c
@@ -0,0 +1,202 @@
+/*
+ * Copyright (C) 2010 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ */
+
+/*
+ * @file epdc_test_driver.c
+ *
+ * @brief Kernel Test module for MXC EPDC framebuffer driver
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/mman.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/version.h>
+#include <linux/delay.h>
+#include <linux/uaccess.h>
+
+#include <linux/device.h>
+#include <linux/mxcfb.h>
+#include <linux/mxcfb_epdc_kernel.h>
+
+/* major number of device */
+static int gMajor;
+static struct class *epdc_tm_class;
+
+static int epdc_test_open(struct inode * inode, struct file * filp)
+{
+	/* Open handle to actual EPDC FB driver */
+	printk("Opening EPDC test handle\n");
+	try_module_get(THIS_MODULE);
+
+	return 0;
+}
+
+static int epdc_test_release(struct inode * inode, struct file * filp)
+{
+	/* Close handle to EPDC FB driver */
+	printk("Closing EPDC test handle\n");
+	module_put(THIS_MODULE);
+	return 0;
+}
+
+static int epdc_test_ioctl(struct file *file, unsigned int cmd,
+							unsigned long arg)
+{
+	void __user *argp = (void __user *)arg;
+	int ret = -EINVAL;
+
+	switch (cmd) {
+	case MXCFB_SET_WAVEFORM_MODES:
+		{
+			struct mxcfb_waveform_modes modes;
+			if (!copy_from_user(&modes, argp, sizeof(modes))) {
+				mxc_epdc_fb_set_waveform_modes(&modes, NULL);
+				ret = 0;
+			}
+			break;
+		}
+	case MXCFB_SET_TEMPERATURE:
+		{
+			int temperature;
+			if (!get_user(temperature, (int32_t __user *) arg))
+				ret =
+				    mxc_epdc_fb_set_temperature(temperature,
+					NULL);
+			break;
+		}
+	case MXCFB_SET_AUTO_UPDATE_MODE:
+		{
+			u32 auto_mode = 0;
+			if (!get_user(auto_mode, (__u32 __user *) arg))
+				ret =
+				    mxc_epdc_fb_set_auto_update(auto_mode,
+					NULL);
+			break;
+		}
+	case MXCFB_SEND_UPDATE:
+		{
+			struct mxcfb_update_data upd_data;
+			if (!copy_from_user(&upd_data, argp,
+				sizeof(upd_data))) {
+				ret = mxc_epdc_fb_send_update(&upd_data, NULL);
+				if (ret == 0 && copy_to_user(argp, &upd_data,
+					sizeof(upd_data)))
+					ret = -EFAULT;
+			} else {
+				ret = -EFAULT;
+			}
+
+			break;
+		}
+	case MXCFB_WAIT_FOR_UPDATE_COMPLETE:
+		{
+			u32 update_marker = 0;
+			if (!get_user(update_marker, (__u32 __user *) arg))
+				ret =
+				    mxc_epdc_fb_wait_update_complete(update_marker,
+					NULL);
+			break;
+		}
+
+	case MXCFB_SET_PWRDOWN_DELAY:
+		{
+			int delay = 0;
+			if (!get_user(delay, (__u32 __user *) arg))
+				ret =
+				    mxc_epdc_fb_set_pwrdown_delay(delay, NULL);
+			break;
+		}
+
+	case MXCFB_GET_PWRDOWN_DELAY:
+		{
+			int pwrdown_delay = mxc_epdc_get_pwrdown_delay(NULL);
+			if (put_user(pwrdown_delay,
+				(int __user *)argp))
+				ret = -EFAULT;
+			ret = 0;
+			break;
+		}
+	default:
+		printk("Invalid ioctl for epdc test driver.  ioctl = 0x%x\n",
+			cmd);
+		break;
+	}
+
+	return ret;
+}
+
+static struct file_operations epdc_test_fops = {
+	open:		epdc_test_open,
+	release:	epdc_test_release,
+	unlocked_ioctl:	epdc_test_ioctl,
+};
+
+static int __init epdc_test_init_module(void)
+{
+	struct device *temp_class;
+	int error;
+
+	/* register a character device */
+	error = register_chrdev(0, "epdc_test", &epdc_test_fops);
+	if (error < 0) {
+		printk("EPDC test driver can't get major number\n");
+		return error;
+	}
+	gMajor = error;
+
+	epdc_tm_class = class_create(THIS_MODULE, "epdc_test");
+	if (IS_ERR(epdc_tm_class)) {
+		printk(KERN_ERR "Error creating epdc test module class.\n");
+		unregister_chrdev(gMajor, "epdc_test");
+		return PTR_ERR(epdc_tm_class);
+	}
+
+	temp_class = device_create(epdc_tm_class, NULL,
+				   MKDEV(gMajor, 0), NULL, "epdc_test");
+	if (IS_ERR(temp_class)) {
+		printk(KERN_ERR "Error creating epdc test class device.\n");
+		class_destroy(epdc_tm_class);
+		unregister_chrdev(gMajor, "epdc_test");
+		return -1;
+	}
+
+	printk("EPDC test Driver Module loaded\n");
+	return 0;
+}
+
+static void epdc_test_cleanup_module(void)
+{
+	unregister_chrdev(gMajor, "epdc_test");
+	device_destroy(epdc_tm_class, MKDEV(gMajor, 0));
+	class_destroy(epdc_tm_class);
+
+	printk("EPDC test Driver Module Unloaded\n");
+}
+
+
+module_init(epdc_test_init_module);
+module_exit(epdc_test_cleanup_module);
+
+MODULE_AUTHOR("Freescale Semiconductor");
+MODULE_DESCRIPTION("EPDC test driver");
+MODULE_LICENSE("GPL");
diff --git a/test/mxc_fb_test/mxc_epdc_fb_test.c b/test/mxc_fb_test/mxc_epdc_fb_test.c
index c7ff4fb..4e4984d 100644
--- a/test/mxc_fb_test/mxc_epdc_fb_test.c
+++ b/test/mxc_fb_test/mxc_epdc_fb_test.c
@@ -83,7 +83,8 @@ int test_map[NUM_TESTS];
 typedef int (*testfunc)();
 testfunc testfunc_array[NUM_TESTS] = {NULL};
 
-int fd_fb = 0;
+int fd_fb;
+int fd_fb_ioctl;
 unsigned short * fb;
 int g_fb_size;
 struct fb_var_screeninfo screen_info;
@@ -151,12 +152,12 @@ static void update_to_display(int left, int top, int width, int height, int wave
 		upd_data.update_marker = 0;
 	}
 
-	retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	while (retval < 0) {
 		/* We have limited memory available for updates, so wait and
 		 * then try again after some updates have completed */
 		sleep(1);
-		retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+		retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	}
 
 /*
@@ -166,7 +167,7 @@ static void update_to_display(int left, int top, int width, int height, int wave
 
 	if (wait_for_complete) {
 		/* Wait for update to complete */
-		retval = ioctl(fd_fb, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
+		retval = ioctl(fd_fb_ioctl, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
 		if (retval < 0) {
 			printf("Wait for update complete failed.  Error = 0x%x", retval);
 		}
@@ -219,7 +220,7 @@ static void draw_rgb_crosshatch(struct fb_var_screeninfo * var, int mode)
 					sleep(1);
 					printf("Retrying update\n");
 				}
-				retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+				retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 				ioctl_tries++;
 			} while ((retval < 0) && (ioctl_tries < 5));
 			if (retval < 0)
@@ -258,7 +259,7 @@ static void draw_rgb_crosshatch(struct fb_var_screeninfo * var, int mode)
 					sleep(1);
 					printf("Retrying update\n");
 				}
-				retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+				retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 				ioctl_tries++;
 			} while ((retval < 0) && (ioctl_tries < 5));
 			if (retval < 0)
@@ -301,7 +302,7 @@ static void draw_rgb_crosshatch(struct fb_var_screeninfo * var, int mode)
 					sleep(1);
 					printf("Retrying update\n");
 				}
-				retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+				retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 				ioctl_tries++;
 			} while ((retval < 0) && (ioctl_tries < 5));
 			if (retval < 0)
@@ -336,7 +337,7 @@ static void draw_rgb_crosshatch(struct fb_var_screeninfo * var, int mode)
 					sleep(1);
 					printf("Retrying update\n");
 				}
-				retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+				retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 				ioctl_tries++;
 			} while ((retval < 0) && (ioctl_tries < 5));
 			if (retval < 0)
@@ -695,7 +696,7 @@ static int test_auto_update(void)
 
 	printf("Change to auto-update mode\n");
 	auto_update_mode = AUTO_UPDATE_MODE_AUTOMATIC_MODE;
-	retval = ioctl(fd_fb, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode);
 	if (retval < 0)
 	{
 		return TFAIL;
@@ -727,7 +728,7 @@ static int test_auto_update(void)
 
 	printf("Change to region update mode\n");
 	auto_update_mode = AUTO_UPDATE_MODE_REGION_MODE;
-	retval = ioctl(fd_fb, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode);
 	if (retval < 0)
 	{
 		return TFAIL;
@@ -834,16 +835,16 @@ static int test_overlay(void)
 
 	printf("Show full-screen overlay\n");
 
-	retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	while (retval < 0) {
 		/* We have limited memory available for updates, so wait and
 		 * then try again after some updates have completed */
 		sleep(1);
-		retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+		retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	}
 
 	/* Wait for update to complete */
-	retval = ioctl(fd_fb, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
+	retval = ioctl(fd_fb_ioctl, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
 	if (retval < 0) {
 		printf("Wait for update complete failed.  Error = 0x%x", retval);
 	}
@@ -870,16 +871,16 @@ static int test_overlay(void)
 	upd_data.alt_buffer_data.alt_update_region.top = 0;
 	upd_data.alt_buffer_data.alt_update_region.height = screen_info.yres/2;
 
-	retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	while (retval < 0) {
 		/* We have limited memory available for updates, so wait and
 		 * then try again after some updates have completed */
 		sleep(1);
-		retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+		retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	}
 
 	/* Wait for update to complete */
-	retval = ioctl(fd_fb, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
+	retval = ioctl(fd_fb_ioctl, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
 	if (retval < 0) {
 		printf("Wait for update complete failed.  Error = 0x%x", retval);
 	}
@@ -906,16 +907,16 @@ static int test_overlay(void)
 	upd_data.alt_buffer_data.alt_update_region.top = screen_info.yres/4;
 	upd_data.alt_buffer_data.alt_update_region.height = screen_info.yres/2;
 
-	retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	while (retval < 0) {
 		/* We have limited memory available for updates, so wait and
 		 * then try again after some updates have completed */
 		sleep(1);
-		retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+		retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	}
 
 	/* Wait for update to complete */
-	retval = ioctl(fd_fb, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
+	retval = ioctl(fd_fb_ioctl, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
 	if (retval < 0) {
 		printf("Wait for update complete failed.  Error = 0x%x", retval);
 	}
@@ -935,16 +936,16 @@ static int test_overlay(void)
 	upd_data.alt_buffer_data.alt_update_region.top = screen_info.yres/4;
 	upd_data.alt_buffer_data.alt_update_region.height = screen_info.yres/2;
 
-	retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	while (retval < 0) {
 		/* We have limited memory available for updates, so wait and
 		 * then try again after some updates have completed */
 		sleep(1);
-		retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+		retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	}
 
 	/* Wait for update to complete */
-	retval = ioctl(fd_fb, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
+	retval = ioctl(fd_fb_ioctl, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
 	if (retval < 0) {
 		printf("Wait for update complete failed.  Error = 0x%x", retval);
 	}
@@ -988,16 +989,16 @@ static int test_overlay(void)
 	upd_data.alt_buffer_data.alt_update_region.top = 0;
 	upd_data.alt_buffer_data.alt_update_region.height = 360;
 
-	retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	while (retval < 0) {
 		/* We have limited memory available for updates, so wait and
 		 * then try again after some updates have completed */
 		sleep(1);
-		retval = ioctl(fd_fb, MXCFB_SEND_UPDATE, &upd_data);
+		retval = ioctl(fd_fb_ioctl, MXCFB_SEND_UPDATE, &upd_data);
 	}
 
 	/* Wait for update to complete */
-	retval = ioctl(fd_fb, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
+	retval = ioctl(fd_fb_ioctl, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
 	if (retval < 0) {
 		printf("Wait for update complete failed.  Error = 0x%x", retval);
 	}
@@ -1352,9 +1353,19 @@ main(int argc, char **argv)
 			break;
 
 		fb_num++;
+
+		printf("Opened EPDC fb device %s\n", fb_dev);
 	}
 
-	printf("Opened EPDC fb device %s\n", fb_dev);
+	/*
+	 * If kernel test driver exists, we default
+	 * to using it for EPDC ioctls
+	 */
+	fd_fb_ioctl = open("/dev/epdc_test", O_RDWR, 0);
+	if (fd_fb_ioctl >= 0)
+		printf("\n****Using EPDC kernel module test driver!****\n\n");
+	else
+		fd_fb_ioctl = fd_fb;
 
 	retval = ioctl(fd_fb, FBIOGET_VSCREENINFO, &screen_info);
 	if (retval < 0)
@@ -1389,7 +1400,7 @@ main(int argc, char **argv)
 
 	printf("Set to region update mode\n");
 	auto_update_mode = AUTO_UPDATE_MODE_REGION_MODE;
-	retval = ioctl(fd_fb, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode);
 	if (retval < 0)
 	{
 		goto err2;
@@ -1402,7 +1413,7 @@ main(int argc, char **argv)
 	wv_modes.mode_gc8 = 2;
 	wv_modes.mode_gc16 = 2;
 	wv_modes.mode_gc32 = 2;
-	retval = ioctl(fd_fb, MXCFB_SET_WAVEFORM_MODES, &wv_modes);
+	retval = ioctl(fd_fb_ioctl, MXCFB_SET_WAVEFORM_MODES, &wv_modes);
 	if (retval < 0)
 	{
 		goto err2;
@@ -1422,13 +1433,15 @@ main(int argc, char **argv)
 		if (test_map[i])
 			if ((*testfunc_array[i])()) {
 				printf("\nError: Updates test failed.\n");
-		goto err2;
-	}
+				goto err2;
+			}
 
 err2:
 	munmap(fb, g_fb_size);
 err1:
 	close(fd_fb);
+	if (fd_fb != fd_fb_ioctl)
+		close(fd_fb_ioctl);
 err0:
 	return retval;
 }
-- 
1.8.0

