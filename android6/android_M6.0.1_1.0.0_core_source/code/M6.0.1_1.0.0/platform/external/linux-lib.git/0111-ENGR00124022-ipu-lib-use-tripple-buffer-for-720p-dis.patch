From 2f7f072a02b0d0e775b99f206f29c1d9b081b741 Mon Sep 17 00:00:00 2001
From: Jason Chen <b02280@freescale.com>
Date: Tue, 1 Jun 2010 12:47:47 +0800
Subject: [PATCH 111/280] ENGR00124022 ipu lib: use tripple buffer for 720p
 display

We used to use double buffer to support 2-resizing for 720p display, it
must wait for a vsync to avoid the tearing issue. This patch uses
tripple buffer to avoid tearing issue and removes the vsync wait. It
improves the 720p display performance.

Signed-off-by: Jason Chen <b02280@freescale.com>
---
 ipu/mxc_ipu_hl_lib.c | 91 ++++++++++++++++++++++++++++++++++++----------------
 1 file changed, 63 insertions(+), 28 deletions(-)

diff --git a/ipu/mxc_ipu_hl_lib.c b/ipu/mxc_ipu_hl_lib.c
index 19fbac0..3da2790 100644
--- a/ipu/mxc_ipu_hl_lib.c
+++ b/ipu/mxc_ipu_hl_lib.c
@@ -99,6 +99,9 @@ typedef struct {
         int irq;
 	int output_bufnum;
 	int update_bufnum;
+	/* only used for display tripple buf case
+	 * only under split mode*/
+	int tri_update_bufnum;
         ipu_mem_info i_minfo[2];
         ipu_mem_info ov_minfo[2];
 	ipu_mem_info ov_alpha_minfo[2];
@@ -141,7 +144,9 @@ typedef struct {
 		ipu_channel_t end_chan;
 
 		ipu_mem_info r_minfo[2];
-		ipu_mem_info o_minfo[2];
+		/*the o_minfo 3rd buffer only used for display tripple buf case
+ 		 * only under split mode*/
+		ipu_mem_info o_minfo[3];
 
 		int show_to_fb;
 		int fd_fb;
@@ -800,11 +805,12 @@ done:
 	return ret;
 }
 
-int fit_fb_setting(struct fb_var_screeninfo * var, int width, int height, int fmt, ipu_channel_t fb_chan)
+int fit_fb_setting(struct fb_var_screeninfo * var, int width,
+	int height, int fmt, ipu_channel_t fb_chan, int bufs)
 {
 	if (fb_chan == MEM_BG_SYNC)
 		return ((var->xres_virtual == var->xres) &&
-			(var->yres_virtual == 2*var->yres));
+			(var->yres_virtual == bufs*var->yres));
 
 	if ((colorspaceofpixel(fmt) == YUV_CS) &&
 			(var->nonstd != fmt))
@@ -815,12 +821,12 @@ int fit_fb_setting(struct fb_var_screeninfo * var, int width, int height, int fm
 		return 0;
 	if (fb_chan == MEM_DC_SYNC)
 		return ((var->xres_virtual == var->xres) &&
-			(var->yres_virtual == 2*var->yres));
+			(var->yres_virtual == bufs*var->yres));
 	if (fb_chan == MEM_FG_SYNC) {
 		return ((var->xres == width) &&
 			(var->xres_virtual == width) &&
 			(var->yres == height) &&
-			(var->yres_virtual == 2*height) &&
+			(var->yres_virtual == bufs*height) &&
 			(var->bits_per_pixel == fmt_to_bpp(fmt)));
 	}
 
@@ -1008,6 +1014,7 @@ static int _ipu_mem_alloc(ipu_lib_input_param_t * input,
 			struct fb_var_screeninfo fb_var;
 			int offset = 0;
 			int blank;
+			int fbbufs;
 			char *fbdev;
 
 			if (output->fb_disp.fb_num == 0)
@@ -1052,25 +1059,30 @@ static int _ipu_mem_alloc(ipu_lib_input_param_t * input,
 			owidth = ipu_priv_handle->output[j].owidth;
 			oheight = ipu_priv_handle->output[j].oheight;
 
-			if (!fit_fb_setting(&fb_var, owidth, oheight, output->fmt, ipu_priv_handle->output[j].fb_chan)) {
+			if (ipu_priv_handle->split_mode)
+				fbbufs = 3;
+			else
+				fbbufs = 2;
+			if (!fit_fb_setting(&fb_var, owidth, oheight, output->fmt,
+				ipu_priv_handle->output[j].fb_chan, fbbufs)) {
 				dbg(DBG_INFO,"reconfig fb setting\n");
 				if (ipu_priv_handle->output[j].fb_chan == MEM_FG_SYNC) {
 					fb_var.xres = owidth;
 					fb_var.xres_virtual = fb_var.xres;
 					fb_var.yres = oheight;
-					fb_var.yres_virtual = fb_var.yres * 2;
+					fb_var.yres_virtual = fb_var.yres * fbbufs;
 					fb_var.activate |= FB_ACTIVATE_FORCE;
 					fb_var.nonstd = output->fmt;
 					fb_var.bits_per_pixel = fmt_to_bpp(output->fmt);
 				} else if (ipu_priv_handle->output[j].fb_chan == MEM_DC_SYNC) {
 					fb_var.xres_virtual = fb_var.xres;
-					fb_var.yres_virtual = fb_var.yres * 2;
+					fb_var.yres_virtual = fb_var.yres * fbbufs;
 					fb_var.activate |= FB_ACTIVATE_FORCE;
 					fb_var.nonstd = output->fmt;
 					fb_var.bits_per_pixel = fmt_to_bpp(output->fmt);
 				} else {
 					fb_var.xres_virtual = fb_var.xres;
-					fb_var.yres_virtual = fb_var.yres * 2;
+					fb_var.yres_virtual = fb_var.yres * fbbufs;
 				}
 
 				if ( ioctl(ipu_priv_handle->output[j].fd_fb, FBIOPUT_VSCREENINFO, &fb_var) < 0) {
@@ -1124,11 +1136,15 @@ static int _ipu_mem_alloc(ipu_lib_input_param_t * input,
 
 			ipu_priv_handle->output[j].o_minfo[0].paddr = fb_fix.smem_start +
 					ipu_priv_handle->output[j].screen_size + offset;
-			if (bufcnt > 1)
+			if (bufcnt > 1) {
 				ipu_priv_handle->output[j].o_minfo[1].paddr = fb_fix.smem_start + offset;
+				if (ipu_priv_handle->split_mode)
+					ipu_priv_handle->output[j].o_minfo[2].paddr = fb_fix.smem_start
+						+ 2*ipu_priv_handle->output[j].screen_size + offset;
+			}
 
 			ipu_priv_handle->output[j].fb_mem = mmap(0,
-					2*ipu_priv_handle->output[j].screen_size,
+					fbbufs*ipu_priv_handle->output[j].screen_size,
 					PROT_READ | PROT_WRITE, MAP_SHARED,
 					ipu_priv_handle->output[j].fd_fb, 0);
 			if (ipu_priv_handle->output[j].fb_mem == MAP_FAILED) {
@@ -1145,11 +1161,18 @@ static int _ipu_mem_alloc(ipu_lib_input_param_t * input,
 						ipu_priv_handle->output[j].screen_size,
 						ipu_priv_handle->output[j].fb_mem,
 						ipu_priv_handle->output[j].screen_size);
+				if (ipu_priv_handle->split_mode)
+					memcpy(ipu_priv_handle->output[j].fb_mem +
+							2*ipu_priv_handle->output[j].screen_size,
+							ipu_priv_handle->output[j].fb_mem,
+							ipu_priv_handle->output[j].screen_size);
 
 			dbg(DBG_INFO, "fb stride %d\n", ipu_priv_handle->output[j].fb_stride);
 			dbg(DBG_INFO, "fb screen_size %d\n", ipu_priv_handle->output[j].screen_size);
 			dbg(DBG_INFO, "fb phyaddr0 0x%x\n", ipu_priv_handle->output[j].o_minfo[0].paddr);
 			dbg(DBG_INFO, "fb phyaddr1 0x%x\n", ipu_priv_handle->output[j].o_minfo[1].paddr);
+			if (ipu_priv_handle->split_mode)
+				dbg(DBG_INFO, "fb phyaddr2 0x%x\n", ipu_priv_handle->output[j].o_minfo[2].paddr);
 
 			blank = FB_BLANK_UNBLANK;
 			if ( ioctl(ipu_priv_handle->output[j].fd_fb, FBIOBLANK, blank) < 0) {
@@ -1241,8 +1264,12 @@ static void _ipu_mem_free(ipu_lib_handle_t * ipu_handle)
 			fb_var.activate |= FB_ACTIVATE_FORCE;
 			ioctl(ipu_priv_handle->output[j].fd_fb, FBIOPUT_VSCREENINFO, &fb_var);
 
-			if (ipu_priv_handle->output[j].fb_mem)
-				munmap(ipu_priv_handle->output[j].fb_mem, 2*ipu_priv_handle->output[j].screen_size);
+			if (ipu_priv_handle->output[j].fb_mem) {
+				if (ipu_priv_handle->split_mode)
+					munmap(ipu_priv_handle->output[j].fb_mem, 3*ipu_priv_handle->output[j].screen_size);
+				else
+					munmap(ipu_priv_handle->output[j].fb_mem, 2*ipu_priv_handle->output[j].screen_size);
+			}
 
 			if (ipu_priv_handle->output[j].fb_chan == MEM_FG_SYNC) {
 				int blank = FB_BLANK_POWERDOWN;
@@ -2382,8 +2409,10 @@ int pan_display(ipu_lib_priv_handle_t * ipu_priv_handle, int idx)
 
 	if (idx == 0)
 		fb_var.yoffset = 0;
-	else
+	else if (idx == 1)
 		fb_var.yoffset = fb_var.yres;
+	else
+		fb_var.yoffset = 2*fb_var.yres;
 
 	if (ioctl(ipu_priv_handle->output[0].fd_fb, FBIOPAN_DISPLAY, &fb_var) < 0) {
 		dbg(DBG_ERR, "Get FB var info failed!\n");
@@ -2391,12 +2420,6 @@ int pan_display(ipu_lib_priv_handle_t * ipu_priv_handle, int idx)
 		goto done;
 	}
 
-	/* make sure display buffer begin to refresh */
-	if (ioctl(ipu_priv_handle->output[0].fd_fb, MXCFB_WAIT_FOR_VSYNC, NULL) < 0) {
-		dbg(DBG_ERR, "MXCFB_WAIT_FOR_VSYNC error!\n");
-		ret = -1;
-		goto done;
-	}
 done:
 	return ret;
 }
@@ -2499,6 +2522,8 @@ int mxc_ipu_lib_task_buf_update(ipu_lib_handle_t * ipu_handle,
 
 			_ipu_split_mode_set_stripe(ipu_priv_handle, ipu_priv_handle->i_minfo[1].paddr,
 						ipu_priv_handle->output[0].o_minfo[1].paddr, RIGHT_STRIPE, 1);
+
+			ipu_priv_handle->tri_update_bufnum = 2;
 		}
 
 		ipu_priv_handle->output_fr_cnt = 1;
@@ -2516,8 +2541,16 @@ int mxc_ipu_lib_task_buf_update(ipu_lib_handle_t * ipu_handle,
 			if (output_callback)
 				output_callback(output_cb_arg, ipu_priv_handle->output_bufnum);
 
-			if (ipu_priv_handle->split_mode && ipu_priv_handle->output[0].show_to_fb)
-				pan_display(ipu_priv_handle, ipu_priv_handle->update_bufnum);
+			if (ipu_priv_handle->split_mode && ipu_priv_handle->output[0].show_to_fb) {
+				int disp_idx;
+				if (ipu_priv_handle->tri_update_bufnum == 2)
+					disp_idx = 0;
+				else if (ipu_priv_handle->tri_update_bufnum == 0)
+					disp_idx = 2;
+				else
+					disp_idx = 1;
+				pan_display(ipu_priv_handle, disp_idx);
+			}
 		}
 
 		for (i=0;i<output_num;i++)
@@ -2532,20 +2565,20 @@ int mxc_ipu_lib_task_buf_update(ipu_lib_handle_t * ipu_handle,
 						ipu_priv_handle->update_bufnum, new_inbuf_paddr);
 			else {
 				_ipu_split_mode_set_stripe(ipu_priv_handle, new_inbuf_paddr,
-						ipu_priv_handle->output[0].o_minfo[ipu_priv_handle->update_bufnum].paddr,
+						ipu_priv_handle->output[0].o_minfo[ipu_priv_handle->tri_update_bufnum].paddr,
 						LEFT_STRIPE, 1);
 				if (_ipu_wait_for_irq(ipu_priv_handle->irq, 1)) {
 					dbg(DBG_ERR, "wait for irq %d time out!\n", ipu_priv_handle->irq);
 					return -1;
 				}
 				_ipu_split_mode_set_stripe(ipu_priv_handle, new_inbuf_paddr,
-						ipu_priv_handle->output[0].o_minfo[ipu_priv_handle->update_bufnum].paddr,
+						ipu_priv_handle->output[0].o_minfo[ipu_priv_handle->tri_update_bufnum].paddr,
 						RIGHT_STRIPE, 1);
 			}
 		} else if (ipu_priv_handle->split_mode) {
 				_ipu_split_mode_set_stripe(ipu_priv_handle,
 						ipu_priv_handle->i_minfo[ipu_priv_handle->update_bufnum].paddr,
-						ipu_priv_handle->output[0].o_minfo[ipu_priv_handle->update_bufnum].paddr,
+						ipu_priv_handle->output[0].o_minfo[ipu_priv_handle->tri_update_bufnum].paddr,
 						LEFT_STRIPE, 1);
 				if (_ipu_wait_for_irq(ipu_priv_handle->irq, 1)) {
 					dbg(DBG_ERR, "wait for irq %d time out!\n", ipu_priv_handle->irq);
@@ -2553,7 +2586,7 @@ int mxc_ipu_lib_task_buf_update(ipu_lib_handle_t * ipu_handle,
 				}
 				_ipu_split_mode_set_stripe(ipu_priv_handle,
 						ipu_priv_handle->i_minfo[ipu_priv_handle->update_bufnum].paddr,
-						ipu_priv_handle->output[0].o_minfo[ipu_priv_handle->update_bufnum].paddr,
+						ipu_priv_handle->output[0].o_minfo[ipu_priv_handle->tri_update_bufnum].paddr,
 						RIGHT_STRIPE, 1);
 		}
 
@@ -2578,9 +2611,11 @@ int mxc_ipu_lib_task_buf_update(ipu_lib_handle_t * ipu_handle,
 			ipu_select_buffer(ipu_priv_handle->output[0].begin_chan, IPU_INPUT_BUFFER,
 					ipu_priv_handle->update_bufnum);
 
-		if (ipu_priv_handle->mode & OP_STREAM_MODE)
+		if (ipu_priv_handle->mode & OP_STREAM_MODE) {
+			if (ipu_priv_handle->split_mode)
+				ipu_priv_handle->tri_update_bufnum = (++ipu_priv_handle->tri_update_bufnum) % 3;
 			ipu_priv_handle->update_bufnum = ipu_priv_handle->update_bufnum ? 0 : 1;
-		else {
+		} else {
 			if (_ipu_wait_for_irq(ipu_priv_handle->irq, 1)) {
 				dbg(DBG_ERR, "wait for irq %d time out!\n", ipu_priv_handle->irq);
 				return -1;
-- 
1.8.0

