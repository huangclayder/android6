From 2059a38b007e4240be9e9736c61e93f7d6ea77c4 Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Wed, 31 Mar 2010 17:31:16 +0800
Subject: [PATCH 104/280] ENGR00122182 Fix slice report info is wrong in
 encoder

Encoder slice report info is wrong when decoding and encoding are
run simulataenously. This patch fixed it.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 vpu/vpu_lib.c  | 102 +++++++++++++++++++++++++++++----------------------------
 vpu/vpu_lib.h  |   2 +-
 vpu/vpu_util.c |   9 ++++-
 3 files changed, 61 insertions(+), 52 deletions(-)

diff --git a/vpu/vpu_lib.c b/vpu/vpu_lib.c
index 6367d61..32dc9d5 100644
--- a/vpu/vpu_lib.c
+++ b/vpu/vpu_lib.c
@@ -1105,9 +1105,9 @@ RetCode vpu_EncStartOneFrame(EncHandle handle, EncParam * param)
 
 	if (pEncInfo->encReportMBInfo.enable || pEncInfo->encReportMVInfo.enable ||
 	    pEncInfo->encReportSliceInfo.enable) {
-		if (!pEncInfo->picParaBaseMem.phy_addr) {
-			Uint32 *virt_addr, phy_addr;
+		Uint32 *virt_addr, phy_addr;
 
+		if (!pEncInfo->picParaBaseMem.phy_addr) {
 			pEncInfo->picParaBaseMem.size = ENC_ADDR_END_OF_RPT_BUF;
 			ret = IOGetPhyMem(&pEncInfo->picParaBaseMem);
 			if (ret) {
@@ -1120,22 +1120,23 @@ RetCode vpu_EncStartOneFrame(EncHandle handle, EncParam * param)
 				err_msg("Unable to obtain virtual mem\n");
 				return RETCODE_FAILURE;
 			}
-			VpuWriteReg(CMD_ENC_PIC_PARA_BASE_ADDR, pEncInfo->picParaBaseMem.phy_addr);
+		}
 
-			virt_addr = (Uint32 *)pEncInfo->picParaBaseMem.virt_uaddr;
-			phy_addr = pEncInfo->picParaBaseMem.phy_addr;
-			/* Set mbParam buffer address */
-			if (pEncInfo->encReportMBInfo.enable) {
-				*virt_addr = phy_addr + ADDR_MB_BASE_OFFSET;
-			}
-			/* Set mvParam buffer address */
-			if (pEncInfo->encReportMVInfo.enable) {
-				*(virt_addr + 2) = phy_addr + ADDR_MV_BASE_OFFSET;
-			}
-			/* Set slice info address */
-			if (pEncInfo->encReportSliceInfo.enable) {
-				*(virt_addr + 4) = phy_addr + ADDR_SLICE_BASE_OFFSET;
-			}
+		VpuWriteReg(CMD_ENC_PIC_PARA_BASE_ADDR, pEncInfo->picParaBaseMem.phy_addr);
+
+		virt_addr = (Uint32 *)pEncInfo->picParaBaseMem.virt_uaddr;
+		phy_addr = pEncInfo->picParaBaseMem.phy_addr;
+		/* Set mbParam buffer address */
+		if (pEncInfo->encReportMBInfo.enable) {
+			*virt_addr = phy_addr + ADDR_MB_BASE_OFFSET;
+		}
+		/* Set mvParam buffer address */
+		if (pEncInfo->encReportMVInfo.enable) {
+			*(virt_addr + 2) = phy_addr + ADDR_MV_BASE_OFFSET;
+		}
+		/* Set slice info address */
+		if (pEncInfo->encReportSliceInfo.enable) {
+			*(virt_addr + 4) = phy_addr + ADDR_SLICE_BASE_OFFSET;
 		}
 	}
 
@@ -2670,43 +2671,44 @@ RetCode vpu_DecStartOneFrame(DecHandle handle, DecParam * param)
 				UnlockVpu(vpu_semap);
 				return RETCODE_FAILURE;
 			}
-			VpuWriteReg(CMD_DEC_PIC_PARA_BASE_ADDR, pDecInfo->picParaBaseMem.phy_addr);
+		}
 
-			if (cpu_is_mx5x()) {
-				Uint32 *virt_addr, phy_addr;
+		VpuWriteReg(CMD_DEC_PIC_PARA_BASE_ADDR, pDecInfo->picParaBaseMem.phy_addr);
 
-				virt_addr = (Uint32 *)pDecInfo->picParaBaseMem.virt_uaddr;
-				phy_addr = pDecInfo->picParaBaseMem.phy_addr;
-				/* Set frameStat buffer address */
-				if (pDecInfo->decReportFrameBufStat.enable) {
-					*virt_addr = phy_addr + ADDR_FRAME_BUF_STAT_BASE_OFFSET;
-				}
-				/* Set mbParam buffer address */
-				if (pDecInfo->decReportMBInfo.enable) {
-					*(virt_addr + 2) = phy_addr + ADDR_MB_BASE_OFFSET;
-				}
-				/* Set mvParam buffer address */
-				if (pDecInfo->decReportMVInfo.enable) {
-					*(virt_addr + 4) = phy_addr + ADDR_MV_BASE_OFFSET;
-				}
+		if (cpu_is_mx5x()) {
+			Uint32 *virt_addr, phy_addr;
+
+			virt_addr = (Uint32 *)pDecInfo->picParaBaseMem.virt_uaddr;
+			phy_addr = pDecInfo->picParaBaseMem.phy_addr;
+			/* Set frameStat buffer address */
+			if (pDecInfo->decReportFrameBufStat.enable) {
+				*virt_addr = phy_addr + ADDR_FRAME_BUF_STAT_BASE_OFFSET;
 			}
-			if (cpu_is_mx37()) {
-				Uint32 *virt_addr, phy_addr;
+			/* Set mbParam buffer address */
+			if (pDecInfo->decReportMBInfo.enable) {
+				*(virt_addr + 2) = phy_addr + ADDR_MB_BASE_OFFSET;
+			}
+			/* Set mvParam buffer address */
+			if (pDecInfo->decReportMVInfo.enable) {
+				*(virt_addr + 4) = phy_addr + ADDR_MV_BASE_OFFSET;
+			}
+		}
+		if (cpu_is_mx37()) {
+			Uint32 *virt_addr, phy_addr;
 
-				virt_addr = (Uint32 *)pDecInfo->picParaBaseMem.virt_uaddr;
-				phy_addr = pDecInfo->picParaBaseMem.phy_addr;
-				/* Set frameStat buffer address */
-				if (pDecInfo->decReportFrameBufStat.enable) {
-					*(virt_addr + 1) = swab32(phy_addr + ADDR_FRAME_BUF_STAT_BASE_OFFSET);
-				}
-				/* Set mbParam buffer address */
-				if (pDecInfo->decReportMBInfo.enable) {
-					*(virt_addr + 3) = swab32(phy_addr + ADDR_MB_BASE_OFFSET);
-				}
-				/* Set mvParam buffer address */
-				if (pDecInfo->decReportMVInfo.enable) {
-					*(virt_addr + 5) = swab32(phy_addr + ADDR_MV_BASE_OFFSET);
-				}
+			virt_addr = (Uint32 *)pDecInfo->picParaBaseMem.virt_uaddr;
+			phy_addr = pDecInfo->picParaBaseMem.phy_addr;
+			/* Set frameStat buffer address */
+			if (pDecInfo->decReportFrameBufStat.enable) {
+				*(virt_addr + 1) = swab32(phy_addr + ADDR_FRAME_BUF_STAT_BASE_OFFSET);
+			}
+			/* Set mbParam buffer address */
+			if (pDecInfo->decReportMBInfo.enable) {
+				*(virt_addr + 3) = swab32(phy_addr + ADDR_MB_BASE_OFFSET);
+			}
+			/* Set mvParam buffer address */
+			if (pDecInfo->decReportMVInfo.enable) {
+				*(virt_addr + 5) = swab32(phy_addr + ADDR_MV_BASE_OFFSET);
 			}
 		}
 	}
diff --git a/vpu/vpu_lib.h b/vpu/vpu_lib.h
index 9a9dcae..06d8788 100644
--- a/vpu/vpu_lib.h
+++ b/vpu/vpu_lib.h
@@ -500,7 +500,7 @@ typedef struct vpu_versioninfo {
  * v4.1.2 [2008.08.22] update MX37 VPU firmware to V1.0.5
  * v4.0.2 [2008.08.21] add the IOClkGateSet() for power saving.
  */
-#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(5, 0, 2)
+#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(5, 0, 3)
 
 extern unsigned int system_rev;
 
diff --git a/vpu/vpu_util.c b/vpu/vpu_util.c
index f70f5e8..74a67af 100644
--- a/vpu/vpu_util.c
+++ b/vpu/vpu_util.c
@@ -870,7 +870,14 @@ void SetEncSecondAXIIRAM(SecAxiUse *psecAxiIramInfo, int width)
 
 	IOGetIramBase(&iram);
 	if (width > ENC_MAX_WIDTH_IRAM_SUPPORT ||
-	   (iram.end - iram.start) < VPU_ENC_TOTAL_IRAM_SIZE) {
+	   (iram.end - iram.start + 1) < VPU_ENC_TOTAL_IRAM_SIZE) {
+		/* Only search ram use iram */
+		if ((iram.end - iram.start + 1) < VPU_ENC_SEARCH_IRAM_SIZE)
+			err_msg("vpu iram is less than search ram size.\n");
+		else {
+			psecAxiIramInfo->searchRamAddr = iram.start;
+			psecAxiIramInfo->searchRamSize = VPU_ENC_SEARCH_IRAM_SIZE;
+		}
 		warn_msg("VPU iram is less than needed, not use iram\n");
 	} else {
 		if (cpu_is_mx51()) {
-- 
1.8.0

