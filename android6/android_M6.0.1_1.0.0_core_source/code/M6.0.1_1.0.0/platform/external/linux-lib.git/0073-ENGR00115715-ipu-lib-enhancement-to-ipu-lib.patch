From 7c10cb10fa081e0882285309043009bec21ef8d5 Mon Sep 17 00:00:00 2001
From: Jason Chen <b02280@freescale.com>
Date: Thu, 27 Aug 2009 13:35:25 +0800
Subject: [PATCH 073/280] ENGR00115715 ipu lib: enhancement to ipu lib.

1. enhancement to ipu/screenlayer library.
2. add direct show to framebuffer feature to screenlayer.
3. add copy to tvout feature to screenlayer.

Signed-off-by: Jason Chen <b02280@freescale.com>
---
 ipu/mxc_ipu_hl_lib.c      |  49 +++--
 screenlayer/ScreenLayer.c | 464 +++++++++++++++++++++++++++++++++++++++-------
 screenlayer/ScreenLayer.h |  17 ++
 3 files changed, 448 insertions(+), 82 deletions(-)

diff --git a/ipu/mxc_ipu_hl_lib.c b/ipu/mxc_ipu_hl_lib.c
index 947f627..7ed5895 100644
--- a/ipu/mxc_ipu_hl_lib.c
+++ b/ipu/mxc_ipu_hl_lib.c
@@ -56,7 +56,8 @@ static int debug_level = DBG_ERR;
 
 /* this mutex only can protect within same process context,
  * for different process, pls add other mutex*/
-pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
+pthread_mutex_t prp_mutex = PTHREAD_MUTEX_INITIALIZER;
+pthread_mutex_t pp_mutex = PTHREAD_MUTEX_INITIALIZER;
 int g_task_in_use = 0;
 
 int _ipu_task_enable(ipu_lib_handle_t * ipu_handle);
@@ -1828,6 +1829,30 @@ static int _ipu_task_setup(ipu_lib_input_param_t * input,
 	return ret;
 }
 
+void mxc_ipu_lib_lock(ipu_lib_handle_t * ipu_handle)
+{
+	ipu_lib_priv_handle_t * ipu_priv_handle = (ipu_lib_priv_handle_t *)ipu_handle->priv;
+	unsigned int task = ipu_priv_handle->output[0].ipu_task |
+                                ipu_priv_handle->output[1].ipu_task;
+
+	if (task & (IC_ENC | ROT_ENC | IC_VF | ROT_VF))
+		pthread_mutex_lock(&prp_mutex);
+	if (task & (IC_PP | ROT_PP))
+		pthread_mutex_lock(&pp_mutex);
+}
+
+void mxc_ipu_lib_unlock(ipu_lib_handle_t * ipu_handle)
+{
+	ipu_lib_priv_handle_t * ipu_priv_handle = (ipu_lib_priv_handle_t *)ipu_handle->priv;
+	unsigned int task = ipu_priv_handle->output[0].ipu_task |
+                                ipu_priv_handle->output[1].ipu_task;
+
+	if (task & (IC_ENC | ROT_ENC | IC_VF | ROT_VF))
+		pthread_mutex_unlock(&prp_mutex);
+	if (task & (IC_PP | ROT_PP))
+		pthread_mutex_unlock(&pp_mutex);
+}
+
 /*!
  * This function init the ipu task according to param setting.
  *
@@ -1866,8 +1891,6 @@ int mxc_ipu_lib_task_init(ipu_lib_input_param_t * input,
 		return -1;
 	}
 
-	pthread_mutex_lock(&mutex);
-
 	memset(ipu_handle, 0, sizeof(ipu_lib_handle_t));
 
 	ipu_priv_handle = (ipu_lib_priv_handle_t *)malloc(sizeof(ipu_lib_priv_handle_t));
@@ -1876,8 +1899,8 @@ int mxc_ipu_lib_task_init(ipu_lib_input_param_t * input,
 		ret = -1;
 		goto done;
 	}
-
 	ipu_handle->priv = ipu_priv_handle;
+
 	memset(ipu_priv_handle, 0, sizeof(ipu_lib_priv_handle_t));
 
 	ipu_priv_handle->mode = mode;
@@ -1890,14 +1913,18 @@ int mxc_ipu_lib_task_init(ipu_lib_input_param_t * input,
 		goto done;
 	}
 
+	mxc_ipu_lib_lock(ipu_handle);
+
 	if (ipu_priv_handle->output[0].task_mode & COPY_MODE) {
 		if ((ret = _ipu_copy_setup(input, output0, ipu_handle)) < 0) {
 			ipu_close();
+			mxc_ipu_lib_unlock(ipu_handle);
 			goto done;
 		}
 	} else {
 		if ((ret = _ipu_task_setup(input, overlay, output0, output1, ipu_handle)) < 0) {
 			ipu_close();
+			mxc_ipu_lib_unlock(ipu_handle);
 			goto done;
 		}
 	}
@@ -1905,8 +1932,9 @@ int mxc_ipu_lib_task_init(ipu_lib_input_param_t * input,
 	g_task_in_use |= (ipu_priv_handle->output[0].ipu_task | ipu_priv_handle->output[1].ipu_task);
 
 	dbg(DBG_INFO, "g_task_in_use 0x%x\n", g_task_in_use);
+
+	mxc_ipu_lib_unlock(ipu_handle);
 done:
-	pthread_mutex_unlock(&mutex);
 
 	return ret;
 }
@@ -1934,7 +1962,7 @@ void mxc_ipu_lib_task_uninit(ipu_lib_handle_t * ipu_handle)
 			ipu_priv_handle->output_fr_cnt++;
 	}
 
-	pthread_mutex_lock(&mutex);
+	mxc_ipu_lib_lock(ipu_handle);
 
 	if (ipu_priv_handle->output[1].ipu_task)
 		output_num = 2;
@@ -1994,7 +2022,7 @@ void mxc_ipu_lib_task_uninit(ipu_lib_handle_t * ipu_handle)
 
 	free((void *)ipu_priv_handle);
 
-	pthread_mutex_unlock(&mutex);
+	mxc_ipu_lib_unlock(ipu_handle);
 }
 
 int _ipu_task_enable(ipu_lib_handle_t * ipu_handle)
@@ -2140,7 +2168,6 @@ int _ipu_wait_for_irq(int irq, int times)
 
 	while (ipu_get_interrupt_event(&info) < 0) {
 		dbg(DBG_INFO, "Can not get wait irq %d, try again!\n", irq);
-		usleep(1000);
 		wait += 1;
 		if (wait >= times)
 			break;
@@ -2201,14 +2228,14 @@ int mxc_ipu_lib_task_buf_update(ipu_lib_handle_t * ipu_handle,
 		output_num = 1;
 
 	if (ipu_priv_handle->enabled == 0) {
-		pthread_mutex_lock(&mutex);
+		mxc_ipu_lib_lock(ipu_handle);
 
 		if ((ret = _ipu_task_enable(ipu_handle)) < 0) {
-			pthread_mutex_unlock(&mutex);
+			mxc_ipu_lib_unlock(ipu_handle);
 			return ret;
 		}
 
-		pthread_mutex_unlock(&mutex);
+		mxc_ipu_lib_unlock(ipu_handle);
 
 		dbg(DBG_INFO, "\033[0;34mipu task begin:\033[0m\n");
 
diff --git a/screenlayer/ScreenLayer.c b/screenlayer/ScreenLayer.c
index 1ed3751..250ad7d 100644
--- a/screenlayer/ScreenLayer.c
+++ b/screenlayer/ScreenLayer.c
@@ -38,7 +38,7 @@ extern "C"{
 #define DBG_WARNING		1
 #define DBG_ERR			0
 
-static int debug_level = DBG_ERR;
+static int debug_level = DBG_WARNING;
 #define dbg(flag, fmt, args...)	{ if(flag <= debug_level)  printf("%s:%d "fmt, __FILE__, __LINE__,##args); }
 
 /* Indicates the max number which will be supported in the CreateScreenLayer */
@@ -65,6 +65,10 @@ typedef struct {
 	u8		keyColorEnable;
 	u32		keyColor;
 	u8		layerEnable;
+	u8		tvMode;
+	u8		tvEnabled;
+	u32		tvRotation;
+	ipu_lib_handle_t tvHandle;
 	s32		fdIpu;
         ipu_mem_info 	* bufMinfo;
 	ipu_mem_info 	* bufAlphaMinfo;
@@ -75,6 +79,7 @@ typedef struct {
 	bool		supportSepLocalAlpha;
 	dma_addr_t 	bufPaddr[BUF_POOL_NUMBER];
 	dma_addr_t 	bufAlphaPaddr[BUF_POOL_NUMBER];
+	u32		flag;
 	char		fbdev[32];
 
 	int		layerID;
@@ -82,8 +87,12 @@ typedef struct {
 	int		nextLayerId;
 } ScreenLayerPriv;
 /* variables for semaphore */
-sem_t * 	semID;
-const  char* 	semName="IPU_SL_SEM_NAME";
+sem_t * 	semMainID;
+sem_t * 	semLoadID;
+sem_t * 	semDispID;
+const  char* 	semMainName="IPU_SL_SEM_MAIN";
+const  char* 	semLoadName="IPU_SL_SEM_LOAD";
+const  char* 	semDispName="IPU_SL_SEM_DISP";
 static char	shmName[12]="shm_fb0";
 
 /* Indicates how many threads in the current process */
@@ -91,6 +100,150 @@ static int pthread_counter=0;
 
 /* virtual address of shared memory in current Process */
 static ScreenLayerPriv  * vshmSLPriv = NULL;
+SLRetCode _UpdateFramebuffer(ScreenLayerPriv *pSLPriv);
+
+int tvmode_system(char *pFileName, char *value)
+{
+    FILE *fp = NULL;
+    fp = fopen(pFileName, "w");
+    if(fp == NULL) {
+        dbg(DBG_ERR, "Open %s failed.\n", pFileName);
+        return -1;
+    }
+    fwrite(value, 1, strlen(value), fp);
+    fflush(fp);
+    fclose(fp);
+    return 0;
+}
+
+int copy_to_tv_init(ScreenLayerPriv *pSLPriv)
+{
+	ScreenLayerPriv *pPriSLPriv = vshmSLPriv;
+	int fd_SLfb = 0, fd_TVfb = 0, ret = 0, screen_size0;
+        struct fb_var_screeninfo SLfb_var, TVfb_var;
+        struct fb_fix_screeninfo SLfb_fix, TVfb_fix;
+        ipu_lib_input_param_t input;
+        ipu_lib_output_param_t output;
+        int mode;
+
+        dbg(DBG_DEBUG, "copy_to_tv_init\n");
+
+	tvmode_system("/sys/class/graphics/fb1/blank", "1\n");
+
+	switch (pSLPriv->tvMode) {
+	case TVOUT_PAL:
+		tvmode_system("/sys/class/graphics/fb1/mode", "U:720x576i-50\n");
+		break;
+	case TVOUT_NTSC:
+		tvmode_system("/sys/class/graphics/fb1/mode", "U:720x480i-60\n");
+		break;
+	default:
+		dbg(DBG_ERR, "not support tvout mode %d\n", pSLPriv->tvMode);
+		ret = -1;
+		goto done;
+	}
+
+        if ((fd_SLfb = open(pPriSLPriv->fbdev, O_RDWR, 0)) < 0) {
+                dbg(DBG_ERR, "Unable to open %s\n", pPriSLPriv->fbdev);
+                ret = -1;
+                goto done;
+        }
+        if ((fd_TVfb = open("/dev/fb1", O_RDWR, 0)) < 0) {
+                dbg(DBG_ERR, "Unable to open tv fb /dev/fb1\n");
+                ret = -1;
+                goto done;
+        }
+
+        if ( ioctl(fd_SLfb, FBIOGET_FSCREENINFO, &SLfb_fix) < 0) {
+                dbg(DBG_ERR, "Get FB fix info failed!\n");
+                ret = -1;
+                goto done;
+        }
+
+        if ( ioctl(fd_SLfb, FBIOGET_VSCREENINFO, &SLfb_var) < 0) {
+                dbg(DBG_ERR, "Get FB var info failed!\n");
+                ret = -1;
+                goto done;
+        }
+        if ( ioctl(fd_TVfb, FBIOGET_VSCREENINFO, &TVfb_var) < 0) {
+                dbg(DBG_ERR, "Get FB var info failed!\n");
+                ret = -1;
+                goto done;
+        }
+
+	if ((TVfb_var.yres == TVfb_var.yres_virtual)) {
+		TVfb_var.yres_virtual = TVfb_var.yres * 2;
+	}
+	TVfb_var.nonstd = v4l2_fourcc('U', 'Y', 'V', 'Y');
+	TVfb_var.bits_per_pixel = 16;
+	if ( ioctl(fd_TVfb, FBIOPUT_VSCREENINFO, &TVfb_var) < 0) {
+		dbg(DBG_ERR, "Set FB var info failed!\n");
+		ret = -1;
+		goto done;
+	}
+	tvmode_system("/sys/class/graphics/fb1/blank", "0\n");
+
+        if ( ioctl(fd_TVfb, FBIOGET_FSCREENINFO, &TVfb_fix) < 0) {
+                dbg(DBG_ERR, "Get FB fix info failed!\n");
+                ret = -1;
+                goto done;
+        }
+
+        memset(&(pSLPriv->tvHandle), 0, sizeof(ipu_lib_handle_t));
+        memset(&input, 0, sizeof(ipu_lib_input_param_t));
+        memset(&output, 0, sizeof(ipu_lib_output_param_t));
+
+	mode = OP_STREAM_MODE | TASK_PP_MODE;
+        input.width = SLfb_var.xres;
+        input.height = SLfb_var.yres;
+	if (SLfb_var.nonstd)
+		input.fmt = SLfb_var.nonstd;
+	else if (SLfb_var.bits_per_pixel == 24)
+                input.fmt = v4l2_fourcc('B', 'G', 'R', '3');
+        else
+                input.fmt = v4l2_fourcc('R', 'G', 'B', 'P');
+        screen_size0 = SLfb_var.yres * SLfb_fix.line_length;
+	if (SLfb_var.yoffset) {
+		input.user_def_paddr[0] = SLfb_fix.smem_start + screen_size0;
+		input.user_def_paddr[1] = SLfb_fix.smem_start + screen_size0;
+	} else {
+		input.user_def_paddr[0] = SLfb_fix.smem_start;
+		input.user_def_paddr[1] = SLfb_fix.smem_start;
+	}
+
+        output.width = TVfb_var.xres;
+        output.height = TVfb_var.yres;
+        output.fmt = v4l2_fourcc('U', 'Y', 'V', 'Y');
+        output.rot = pSLPriv->tvRotation;
+	output.show_to_fb = 1;
+	output.fb_disp.fb_num = 1;
+
+	if (mxc_ipu_lib_task_init(&input, NULL, &output, NULL, mode, &(pSLPriv->tvHandle)) < 0) {
+		ret = -1;
+		goto done;
+	}
+
+done:
+	if (fd_SLfb)
+		close(fd_SLfb);
+	if (fd_TVfb)
+		close(fd_TVfb);
+	return ret;
+}
+
+int copy_to_tv_update(ScreenLayerPriv *pSLPriv, dma_addr_t new_addr)
+{
+        dbg(DBG_DEBUG, "copy_to_tv_update\n");
+	if (mxc_ipu_lib_task_buf_update(&(pSLPriv->tvHandle), new_addr, 0, 0, 0, 0) < 0)
+		return -1;
+	return 0;
+}
+
+void copy_to_tv_deinit(ScreenLayerPriv *pSLPriv)
+{
+        dbg(DBG_DEBUG, "copy_to_tv_deinit\n");
+	mxc_ipu_lib_task_uninit(&(pSLPriv->tvHandle));
+}
 
 static u32 fmt_to_bpp(u32 pixelformat)
 {
@@ -132,11 +285,6 @@ static u32 fmt_to_bpp(u32 pixelformat)
 	return bpp;
 }
 
-void yield(void)
-{
-	usleep(1);
-}
-
 SLRetCode _MemAllocSL(ScreenLayer *pSL)
 {
 	SLRetCode ret = E_RET_SUCCESS;
@@ -212,17 +360,42 @@ SLRetCode _MemAllocSL(ScreenLayer *pSL)
 			}
 		}
 
-		if ( ioctl(fd_fb, FBIOGET_FSCREENINFO, &fb_fix) < 0) {
+		if ( ioctl(fd_fb, FBIOGET_VSCREENINFO, &fb_var) < 0) {
 			ret = E_RET_DEV_FAIL;
 			close(fd_fb);
 			goto done;
 		}
+
+		if ((pSL->fmt == v4l2_fourcc('U', 'Y', 'V', 'Y')) ||
+			(pSL->fmt == v4l2_fourcc('Y', '4', '4', '4'))) {
+			fb_var.nonstd = pSL->fmt;
+			if (pSL->fmt == v4l2_fourcc('U', 'Y', 'V', 'Y'))
+				fb_var.bits_per_pixel = 16;
+			else
+				fb_var.bits_per_pixel = 24;
+		} else {
+			fb_var.nonstd = 0;
+			fb_var.bits_per_pixel = fmt_to_bpp(pSL->fmt);
+		}
+
+		if ( ioctl(fd_fb, FBIOPUT_VSCREENINFO, &fb_var) < 0) {
+			ret = E_RET_DEV_FAIL;
+			close(fd_fb);
+			goto done;
+		}
+
 		if ( ioctl(fd_fb, FBIOGET_VSCREENINFO, &fb_var) < 0) {
 			ret = E_RET_DEV_FAIL;
 			close(fd_fb);
 			goto done;
 		}
 
+		if ( ioctl(fd_fb, FBIOGET_FSCREENINFO, &fb_fix) < 0) {
+			ret = E_RET_DEV_FAIL;
+			close(fd_fb);
+			goto done;
+		}
+
 		if (fb_var.bits_per_pixel != fmt_to_bpp(pSL->fmt)) {
 			dbg(DBG_ERR, "request format should be the same as fb dev!\n");
 			ret = E_RET_WRONG_FMT;
@@ -238,6 +411,16 @@ SLRetCode _MemAllocSL(ScreenLayer *pSL)
 		pSLPriv->dispPaddr[0] = fb_fix.smem_start;
 		pSLPriv->dispPaddr[1] = fb_fix.smem_start + screen_size;
 
+		if (pSL->flag & F_FBDIRECT_PRIMARYONLY) {
+			pSL->bufPaddr = (dma_addr_t *)malloc(pSLPriv->bufNum * sizeof(dma_addr_t));
+			pSL->bufPaddr[0] =  pSLPriv->dispPaddr[0];
+			pSL->bufPaddr[1] =  pSLPriv->dispPaddr[1];
+			dbg(DBG_DEBUG, "screen layer directly display to %s, dispPaddr 0x%x 0x%x\n",
+				pSL->fbdev, pSLPriv->dispPaddr[0], pSLPriv->dispPaddr[1]);
+			close(fd_fb);
+			goto done;
+		}
+
 		dbg(DBG_DEBUG, "screen layer display to %s, dispPaddr 0x%x 0x%x\n", pSL->fbdev, pSLPriv->dispPaddr[0], pSLPriv->dispPaddr[1]);
 
 		close(fd_fb);
@@ -324,6 +507,9 @@ void _MemFreeSL(ScreenLayer *pSL)
 	ScreenLayerPriv *pSLPriv = (ScreenLayerPriv *)(vshmSLPriv +(int)pSL->pPriv-1);
 	u8 i;
 
+	if (pSL->flag & F_FBDIRECT_PRIMARYONLY)
+		goto done;
+
 	for (i=0;i<pSLPriv->bufNum;i++) {
 		dbg(DBG_DEBUG, "free %d memory paddr 0x%x, mmap to %p for current layer\n", pSLPriv->bufMinfo[i].size, pSL->bufPaddr[i], pSL->bufVaddr[i]);
 		if (pSL->bufVaddr[i])
@@ -365,6 +551,20 @@ void _MemFreeSL(ScreenLayer *pSL)
 		}
 	}
 
+done:
+	if (pSLPriv->isPrimary) {
+		s32 fd_fb;
+		struct fb_var_screeninfo fb_var;
+
+		/* go back to RGB mode */
+		fd_fb = open(pSL->fbdev, O_RDWR, 0);
+		ioctl(fd_fb, FBIOGET_VSCREENINFO, &fb_var);
+		if(fb_var.nonstd) {
+			fb_var.nonstd = 0;
+			ioctl(fd_fb, FBIOPUT_VSCREENINFO, &fb_var);
+		}
+		close(fd_fb);
+	}
 	if (pSL->bufPaddr)
 		free(pSL->bufPaddr);
 	if (pSL->bufVaddr)
@@ -389,14 +589,29 @@ SLRetCode PreScreenLayerIPC(char *pFbdev)
 
 	dbg(DBG_DEBUG, "PreScreenLayerIPC begin!\n");
 	/* Create one new semaphore or opens an existing semaphore */
-	semID = sem_open(semName, O_CREAT, 0666, 1);
-	if(SEM_FAILED == semID){
-		dbg(DBG_ERR, "can not open the semaphore for : IPU_SL_SEM_NAME!\n");
+	semMainID = sem_open(semMainName, O_CREAT, 0666, 1);
+	if(SEM_FAILED == semMainID){
+		dbg(DBG_ERR, "can not open the semaphore for : %s!\n", semMainName);
 		ret = E_RET_IPC_SEM_OPEN_FAILED;
 		goto pre_err0;
 	}
+	semLoadID = sem_open(semLoadName, O_CREAT, 0666, 1);
+	if(SEM_FAILED == semLoadID){
+		dbg(DBG_ERR, "can not open the semaphore for : %s!\n", semLoadName);
+		ret = E_RET_IPC_SEM_OPEN_FAILED;
+		sem_close(semMainID);
+		goto pre_err0;
+	}
+	semDispID = sem_open(semDispName, O_CREAT, 0666, 1);
+	if(SEM_FAILED == semDispID){
+		dbg(DBG_ERR, "can not open the semaphore for : %s!\n", semDispName);
+		ret = E_RET_IPC_SEM_OPEN_FAILED;
+		sem_close(semMainID);
+		sem_close(semLoadID);
+		goto pre_err0;
+	}
 
-	sem_wait(semID);
+	sem_wait(semMainID);
 
 	/* Create one new shm or get one existing shm object's ID */
 	if(strstr(pFbdev,"fb1"))
@@ -408,8 +623,11 @@ SLRetCode PreScreenLayerIPC(char *pFbdev)
 	if(shmID == -1){
 		dbg(DBG_ERR, "can not open the shared memory for : %s!\n",pFbdev);
 		ret = E_RET_IPC_SHM_FAILED;
-		sem_unlink(semName);
-		goto pre_err1;
+		sem_post(semMainID);
+		sem_close(semMainID);
+		sem_close(semLoadID);
+		sem_close(semDispID);
+		goto pre_err0;
 	}
 	/* Get special size shm */
 	ftruncate(shmID,3 * sizeof(ScreenLayerPriv));
@@ -425,11 +643,14 @@ SLRetCode PreScreenLayerIPC(char *pFbdev)
 	if(vshmSLPriv == MAP_FAILED || vshmSLPriv ==NULL){
 		dbg(DBG_ERR, "shm mmap failed!\n");
 		ret = E_RET_IPC_SHM_FAILED;
-		sem_unlink(semName);
-		goto pre_err1;
+		sem_post(semMainID);
+		sem_close(semMainID);
+		sem_close(semLoadID);
+		sem_close(semDispID);
+		goto pre_err0;
 	}
-pre_err1:
-	sem_post(semID);
+
+	sem_post(semMainID);
 	dbg(DBG_DEBUG, "PreScreenLayerIPC end!\n");
 pre_err0:
 	return ret;
@@ -454,7 +675,7 @@ SLRetCode CreateScreenLayer(ScreenLayer *pSL, u8 nBufNum)
 		dbg(DBG_ERR, "Prepared semaphore & shm failed !\n");
 		goto done;
 	}
-	sem_wait(semID);
+	sem_wait(semMainID);
 	pthread_counter++;
 
 	/* Alloc shared memory for current Layer private struct */
@@ -471,6 +692,12 @@ SLRetCode CreateScreenLayer(ScreenLayer *pSL, u8 nBufNum)
 		ScreenLayerPriv *pPriSLPriv = vshmSLPriv;
 		ScreenLayerPriv *pCurSLPriv;
 
+		if (pPriSLPriv->flag & F_FBDIRECT_PRIMARYONLY) {
+			dbg(DBG_ERR, "Can not create SL for primary which direct use framebuffer!\n");
+			ret = E_RET_PRIMARY_ERR;
+			goto err;
+		}
+
 		if(pPriSLPriv->nextLayerId == 0){
 			/* The seconde layer*/
 			pSLPriv = vshmSLPriv + 1;
@@ -526,7 +753,11 @@ SLRetCode CreateScreenLayer(ScreenLayer *pSL, u8 nBufNum)
 		pSLPriv->isPrimary = 1;
 	}
 
-	pSLPriv->bufNum = nBufNum;
+	if ((pSL->flag & F_FBDIRECT_PRIMARYONLY) && (nBufNum > 2)) {
+		dbg(DBG_WARNING, "Only support 2 buffers for direct use framebuffer!\n");
+		pSLPriv->bufNum = 2;
+	} else
+		pSLPriv->bufNum = nBufNum;
 
 	ret = _MemAllocSL(pSL);
 	/* Back up SL infor from external to private struct */
@@ -537,6 +768,7 @@ SLRetCode CreateScreenLayer(ScreenLayer *pSL, u8 nBufNum)
 	pSLPriv->fmt = pSL->fmt;
 	pSLPriv->supportSepLocalAlpha = pSL->supportSepLocalAlpha;
 	strcpy(pSLPriv->fbdev, pSL->fbdev);
+	pSLPriv->flag = pSL->flag;
 	for(i=0;i<nBufNum;i++)
 	{
 		pSLPriv->bufPaddr[i]      = pSL->bufPaddr[i];
@@ -544,7 +776,7 @@ SLRetCode CreateScreenLayer(ScreenLayer *pSL, u8 nBufNum)
 			pSLPriv->bufAlphaPaddr[i] = pSL->bufAlphaPaddr[i];
 	}
 err:
-	sem_post(semID);
+	sem_post(semMainID);
 done:
 	return ret;
 }
@@ -555,13 +787,7 @@ SLRetCode DestoryScreenLayer(ScreenLayer *pSL)
 	ScreenLayerPriv *pSLPriv = (ScreenLayerPriv *)(vshmSLPriv + (int)pSL->pPriv-1);
 	ScreenLayerPriv *pPreSLPriv, *pNextSLPriv;
 
-	if (pSLPriv->isPrimary && pSLPriv->nextLayerId) {
-		dbg(DBG_ERR, "Err: destory primary with sub layer, pls destory sub layer first!\n");
-		ret = E_RET_DESTORY_PRI_WITH_SUBSL;
-		goto done;
-	}
-
-	sem_wait(semID);
+	sem_wait(semMainID);
 
 	_MemFreeSL(pSL);
 
@@ -576,28 +802,22 @@ SLRetCode DestoryScreenLayer(ScreenLayer *pSL)
 			pPreSLPriv->nextLayerId = 0;
 		}
 	}
+
+	if (pSLPriv->tvEnabled) {
+		copy_to_tv_deinit(pSLPriv);
+		pSLPriv->tvEnabled = 0;
+		pSLPriv->tvMode = TVOUT_DISABLE;
+	}
+
 	pthread_counter--;
-	if(pthread_counter == 0)
-	{
-		if(pSLPriv->isPrimary)
-		{
-			munmap(vshmSLPriv, 3*sizeof(ScreenLayerPriv));
-			vshmSLPriv = NULL;
-			sem_post(semID);
-			sem_close(semID);
-			shm_unlink(shmName);
-		}
-		else
-		{
+	if(pthread_counter == 0) {
+		if (vshmSLPriv)
 			munmap(vshmSLPriv, 3*sizeof(ScreenLayerPriv));
-			vshmSLPriv = NULL;
-			sem_post(semID);
-		}
-		goto done;
+		vshmSLPriv = NULL;
 	}
 
-	sem_post(semID);
-done:
+	sem_post(semMainID);
+
 	return ret;
 }
 
@@ -609,17 +829,20 @@ SLRetCode LoadScreenLayer(ScreenLayer *pSL, LoadParam *pParam, u8 nBufIdx)
 	ipu_lib_input_param_t input;
 	ipu_lib_output_param_t output;
 	int mode;
+	int total_time = 0;
+	struct timeval total_begin,total_end;
+	int sec, usec;
 
 	memset(&ipu_handle, 0, sizeof(ipu_lib_handle_t));
 	memset(&input, 0, sizeof(ipu_lib_input_param_t));
 	memset(&output, 0, sizeof(ipu_lib_output_param_t));
 
+	sem_wait(semMainID);
 	if (nBufIdx >= pSLPriv->bufNum) {
 		ret = E_RET_BUFIDX_ERR;
 		goto done;
 	}
 
-
 	if ((pParam->srcRect.left >=  pParam->srcWidth) ||
 		(pParam->srcRect.right > pParam->srcWidth) ||
 		(pParam->srcRect.top >= pParam->srcHeight) ||
@@ -642,7 +865,7 @@ SLRetCode LoadScreenLayer(ScreenLayer *pSL, LoadParam *pParam, u8 nBufIdx)
 		pParam->destRect.bottom = pSL->screenRect.bottom - pSL->screenRect.top;
 	}
 
-	mode = OP_NORMAL_MODE | TASK_PP_MODE;
+	mode = OP_NORMAL_MODE | TASK_VF_MODE;
         input.width = pParam->srcWidth;
         input.height = pParam->srcHeight;
 	input.input_crop_win.pos.x = pParam->srcRect.left;
@@ -662,7 +885,8 @@ SLRetCode LoadScreenLayer(ScreenLayer *pSL, LoadParam *pParam, u8 nBufIdx)
 	output.rot = pParam->destRot;
 	output.user_def_paddr[0] = pSL->bufPaddr[nBufIdx];
 
-	sem_wait(semID);
+	sem_wait(semLoadID);
+	gettimeofday(&total_begin, NULL);
 	if (mxc_ipu_lib_task_init(&input, NULL, &output, NULL, mode, &ipu_handle) < 0) {
 		ret = E_RET_TASK_SETUP_ERR;
 		goto done;
@@ -674,9 +898,21 @@ SLRetCode LoadScreenLayer(ScreenLayer *pSL, LoadParam *pParam, u8 nBufIdx)
 	}
 
 	mxc_ipu_lib_task_uninit(&ipu_handle);
-	sem_post(semID);
 
-	yield();
+	gettimeofday(&total_end, NULL);
+
+        sec = total_end.tv_sec - total_begin.tv_sec;
+        usec = total_end.tv_usec - total_begin.tv_usec;
+
+        if (usec < 0) {
+                sec--;
+                usec = usec + 1000000;
+        }
+        total_time += (sec * 1000000) + usec;
+
+        dbg(DBG_DEBUG, "Load time %d us\n", total_time);
+	sem_post(semLoadID);
+	sem_post(semMainID);
 done:
 	return ret;
 }
@@ -719,9 +955,14 @@ SLRetCode FlipScreenLayerBuf(ScreenLayer *pSL, u8 nBufIdx)
 	if (nBufIdx >= pSLPriv->bufNum)
 		return E_RET_FLIP_ERR;
 
-	sem_wait(semID);
+	sem_wait(semDispID);
 	pSLPriv->curBufIdx = nBufIdx;
-	sem_post(semID);
+	sem_post(semDispID);
+
+	if (pSL->flag & F_FBDIRECT_PRIMARYONLY) {
+		pSLPriv->curDispIdx = nBufIdx;
+		return _UpdateFramebuffer(pSLPriv);
+	}
 
 	return E_RET_SUCCESS;
 }
@@ -734,6 +975,11 @@ SLRetCode _CopyScreenLayer(ScreenLayerPriv *pSrcSLPriv, ScreenLayerPriv *pTgtSLP
 	ipu_lib_input_param_t input;
 	ipu_lib_output_param_t output;
 	s32 mode;
+	int total_time = 0;
+	struct timeval total_begin,total_end;
+	int sec, usec;
+
+	gettimeofday(&total_begin, NULL);
 
 	memset(&ipu_handle, 0, sizeof(ipu_lib_handle_t));
 	memset(&input, 0, sizeof(ipu_lib_input_param_t));
@@ -745,7 +991,17 @@ SLRetCode _CopyScreenLayer(ScreenLayerPriv *pSrcSLPriv, ScreenLayerPriv *pTgtSLP
 
 	pPriSLPriv = vshmSLPriv;
 
-	mode = OP_NORMAL_MODE | TASK_PP_MODE;
+	/* ignore copy when target layer is the same size as primary*/
+	if ((pSrcSLPriv != pTgtSLPriv) &&
+		(pTgtSLPriv->screenRect.right == pPriSLPriv->screenRect.right) &&
+		(pTgtSLPriv->screenRect.left == pPriSLPriv->screenRect.left) &&
+		(pTgtSLPriv->screenRect.bottom == pPriSLPriv->screenRect.bottom) &&
+		(pTgtSLPriv->screenRect.top == pPriSLPriv->screenRect.top)) {
+		dbg(DBG_DEBUG, "ignore copy process!\n");
+		goto done;
+	}
+
+	mode = OP_NORMAL_MODE | TASK_VF_MODE;
         input.width = output.width = pPriSLPriv->screenRect.right - pPriSLPriv->screenRect.left;
         input.height = output.height = pPriSLPriv->screenRect.bottom - pPriSLPriv->screenRect.top;
         input.fmt = output.fmt = pPriSLPriv->fmt;
@@ -767,6 +1023,18 @@ SLRetCode _CopyScreenLayer(ScreenLayerPriv *pSrcSLPriv, ScreenLayerPriv *pTgtSLP
 
 	mxc_ipu_lib_task_uninit(&ipu_handle);
 
+	gettimeofday(&total_end, NULL);
+
+        sec = total_end.tv_sec - total_begin.tv_sec;
+        usec = total_end.tv_usec - total_begin.tv_usec;
+
+        if (usec < 0) {
+                sec--;
+                usec = usec + 1000000;
+        }
+        total_time += (sec * 1000000) + usec;
+
+        dbg(DBG_DEBUG, "Copy time %d us\n", total_time);
 	dbg(DBG_DEBUG, "Copy screen layer in %d %d, from 0x%x to 0x%x\n", input.width, input.height,
 			input.user_def_paddr[0], output.user_def_paddr[0]);
 done:
@@ -782,6 +1050,11 @@ SLRetCode _CombScreenLayers(ScreenLayerPriv *pBotSLPriv, ScreenLayerPriv *pTopSL
 	ipu_lib_overlay_param_t overlay;
 	ipu_lib_output_param_t output;
 	s32 mode;
+	int total_time = 0;
+	struct timeval total_begin,total_end;
+	int sec, usec;
+
+	gettimeofday(&total_begin, NULL);
 
 	memset(&ipu_handle, 0, sizeof(ipu_lib_handle_t));
 	memset(&input, 0, sizeof(ipu_lib_input_param_t));
@@ -795,7 +1068,7 @@ SLRetCode _CombScreenLayers(ScreenLayerPriv *pBotSLPriv, ScreenLayerPriv *pTopSL
 		/* this case we can do copy directly, no combination needed*/
 		dbg(DBG_DEBUG, "Do copy directly for Comb!\n");
 
-		mode = OP_NORMAL_MODE | TASK_PP_MODE;
+		mode = OP_NORMAL_MODE | TASK_VF_MODE;
 
 		/* top/overlay layer (graphic) */
 		input.width = pTopSLPriv->screenRect.right - pTopSLPriv->screenRect.left;
@@ -820,7 +1093,7 @@ SLRetCode _CombScreenLayers(ScreenLayerPriv *pBotSLPriv, ScreenLayerPriv *pTopSL
 	} else {
 		dbg(DBG_DEBUG, "Use IC Comb!\n");
 
-		mode = OP_NORMAL_MODE | TASK_PP_MODE;
+		mode = OP_NORMAL_MODE | TASK_VF_MODE;
 		/* bottom layer */
 		input.width = pPriSLPriv->screenRect.right - pPriSLPriv->screenRect.left;
 		input.height = pPriSLPriv->screenRect.bottom - pPriSLPriv->screenRect.top;
@@ -872,6 +1145,18 @@ SLRetCode _CombScreenLayers(ScreenLayerPriv *pBotSLPriv, ScreenLayerPriv *pTopSL
 
 	mxc_ipu_lib_task_uninit(&ipu_handle);
 
+	gettimeofday(&total_end, NULL);
+
+        sec = total_end.tv_sec - total_begin.tv_sec;
+        usec = total_end.tv_usec - total_begin.tv_usec;
+
+        if (usec < 0) {
+                sec--;
+                usec = usec + 1000000;
+        }
+        total_time += (sec * 1000000) + usec;
+
+        dbg(DBG_DEBUG, "Comb time %d us\n", total_time);
 	dbg(DBG_DEBUG, "Comb screen layer in [(%d,%d),(%d,%d)]\n", pTopSLPriv->screenRect.left,
 		pTopSLPriv->screenRect.top, pTopSLPriv->screenRect.right, pTopSLPriv->screenRect.bottom);
 done:
@@ -882,10 +1167,9 @@ SLRetCode _UpdateFramebuffer(ScreenLayerPriv *pSLPriv)
 {
 	s32 fd_fb = 0;
 	SLRetCode ret = E_RET_SUCCESS;
-	ScreenLayerPriv *pPriSLPriv;
+	ScreenLayerPriv *pPriSLPriv = vshmSLPriv;
 	struct fb_var_screeninfo fb_var;
-
-	pPriSLPriv = vshmSLPriv;
+        struct fb_fix_screeninfo fb_fix;
 
 	if ((fd_fb = open(pPriSLPriv->fbdev, O_RDWR, 0)) < 0) {
 		ret = E_RET_DEV_FAIL;
@@ -907,9 +1191,32 @@ SLRetCode _UpdateFramebuffer(ScreenLayerPriv *pSLPriv)
 		goto done;
 	}
 	dbg(DBG_DEBUG, "update fb: pan display offset %d\n", fb_var.yoffset);
+
+	if (pSLPriv->tvMode != TVOUT_DISABLE) {
+		dma_addr_t new_addr;
+
+		if (!pSLPriv->tvEnabled) {
+			copy_to_tv_init(pSLPriv);
+			pSLPriv->tvEnabled = 1;
+		}
+		if ( ioctl(fd_fb, FBIOGET_FSCREENINFO, &fb_fix) < 0) {
+			ret = E_RET_DEV_FAIL;
+			goto done;
+		}
+		if (pSLPriv->curDispIdx == 0)
+			new_addr = fb_fix.smem_start;
+		else
+			new_addr = fb_fix.smem_start + fb_var.yres * fb_fix.line_length;
+		copy_to_tv_update(pSLPriv, new_addr);
+	} else if (pSLPriv->tvEnabled) {
+		copy_to_tv_deinit(pSLPriv);
+		pSLPriv->tvEnabled = 0;
+	}
+
 done:
 	if (fd_fb)
 		close(fd_fb);
+
 	return ret;
 }
 
@@ -919,7 +1226,13 @@ SLRetCode UpdateScreenLayer(ScreenLayer *pSL)
 	ScreenLayerPriv *pSLPriv = (ScreenLayerPriv *)(vshmSLPriv + (int)pSL->pPriv-1);
 	ScreenLayerPriv *pCurSLPriv;
 
-	sem_wait(semID);
+	if (pSL->flag & F_FBDIRECT_PRIMARYONLY) {
+		dbg(DBG_DEBUG, "Do nothing to update for direct framebuffer SL!\n");
+		goto done;
+	}
+
+	sem_wait(semMainID);
+	sem_wait(semDispID);
 	/* primary update? */
 	if (pSLPriv->isPrimary && !pSLPriv->nextLayerId) {
 		/* there is only primary, update it only */
@@ -934,21 +1247,23 @@ SLRetCode UpdateScreenLayer(ScreenLayer *pSL)
 
 		pCurSLPriv = vshmSLPriv;
 		while(pCurSLPriv->nextLayerId) {
-			ret = _CopyScreenLayer(pCurSLPriv, (vshmSLPriv + pCurSLPriv->nextLayerId-1));
+			ScreenLayerPriv *pNextSLPriv = (ScreenLayerPriv *)(vshmSLPriv + pCurSLPriv->nextLayerId-1);
+
+			ret = _CopyScreenLayer(pCurSLPriv, pNextSLPriv);
 			if (ret != E_RET_SUCCESS)
 				goto done;
 
-			ret = _CombScreenLayers(pCurSLPriv, (vshmSLPriv + pCurSLPriv->nextLayerId -1));
+			ret = _CombScreenLayers(pCurSLPriv, pNextSLPriv);
 			if (ret != E_RET_SUCCESS)
 				goto done;
-			pCurSLPriv = (ScreenLayerPriv *)(vshmSLPriv + pCurSLPriv->nextLayerId -1);
+			pCurSLPriv = pNextSLPriv;
 		}
 	}
 
 	ret = _UpdateFramebuffer(pCurSLPriv);
-	sem_post(semID);
+	sem_post(semDispID);
+	sem_post(semMainID);
 
-	yield();
 done:
 	return ret;
 }
@@ -958,7 +1273,7 @@ SLRetCode SetScreenLayer(ScreenLayer *pSL, SetMethodType eType, void *setData)
 	SLRetCode ret = E_RET_SUCCESS;
 	ScreenLayerPriv *pSLPriv = (ScreenLayerPriv *)(vshmSLPriv + (int)pSL->pPriv-1);
 
-	sem_wait(semID);
+	sem_wait(semMainID);
 	switch (eType) {
 	case E_SET_ALPHA:
 	{
@@ -983,11 +1298,18 @@ SLRetCode SetScreenLayer(ScreenLayer *pSL, SetMethodType eType, void *setData)
 	case E_ENABLE_LAYER:
 		pSLPriv->layerEnable = *((u8 *)setData);
 		break;
+	case E_COPY_TVOUT:
+	{
+		MethodTvoutData *data = (MethodTvoutData *)setData;
+		pSLPriv->tvMode = data->tvMode;
+		pSLPriv->tvRotation = data->lcd2tvRotation;
+		break;
+	}
 	default:
 		ret = E_RET_NOSUCH_METHODTYPE;
 	}
 err:
-	sem_post(semID);
+	sem_post(semMainID);
 	return ret;
 }
 
@@ -1009,17 +1331,17 @@ void* GetPrimarySLHandle(char * pFbdev)
 		return (void*)0;
 	}
 
-	sem_wait(semID);
+	sem_wait(semMainID);
 	if(vshmSLPriv->isPrimary)
 	{
 		dbg(DBG_DEBUG, "GetPrimarySLHandle is OK!\n");
-		sem_post(semID);
+		sem_post(semMainID);
 		return	(void *)1;
 	}
 	else
 	{
 		dbg(DBG_ERR, "GetPrimarySLHandle Error!\n");
-		sem_post(semID);
+		sem_post(semMainID);
 		return  (void *)0;
 	}
 }
diff --git a/screenlayer/ScreenLayer.h b/screenlayer/ScreenLayer.h
index 2ef7df0..bbc53ae 100644
--- a/screenlayer/ScreenLayer.h
+++ b/screenlayer/ScreenLayer.h
@@ -46,9 +46,20 @@ typedef enum {
 } SLRetCode;
 
 typedef enum {
+	F_FBDIRECT_PRIMARYONLY = 0x1,
+} SLFlag;
+
+typedef enum {
+	TVOUT_DISABLE = 0,
+	TVOUT_PAL,
+	TVOUT_NTSC,
+} TvMode;
+
+typedef enum {
 	E_SET_ALPHA,
 	E_SET_COLORKEY,
 	E_ENABLE_LAYER,
+	E_COPY_TVOUT,
 } SetMethodType;
 
 typedef struct {
@@ -63,6 +74,11 @@ typedef struct {
 } MethodColorKeyData;
 
 typedef struct {
+	u8	tvMode;
+	u32	lcd2tvRotation;
+} MethodTvoutData;
+
+typedef struct {
 	u16		left;
 	u16		top;
 	u32		right;
@@ -81,6 +97,7 @@ typedef struct {
 	dma_addr_t 	* bufAlphaPaddr;
 	void	 	* pPrimary;
 	char		fbdev[32];
+	u32		flag;
 	void 		* pPriv;
 } ScreenLayer;
 
-- 
1.8.0

