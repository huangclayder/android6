From dd3f347bf7a42eb6b87d1befe2a680debd23b8fc Mon Sep 17 00:00:00 2001
From: Terry Lv <r65388@freescale.com>
Date: Thu, 13 Dec 2012 15:10:31 +0800
Subject: [PATCH 225/280] ENGR00233866: SAHARA4 RNG fails to auto-seed

Problem description:
The SAHARA driver hangs when more than 8192x1024 bytes of random data
are generated.

Explanation:
When auto-seed is enabled, SAHARA generates a seed every 4094x1024bytes.
The first seed is generated when auto-seed is set during the
initialization. At the same time, a second seed is generated, and will
replace the first one when 4094x1024bytes of random data are generated.
When it reaches that required number of bytes, a third seed should be
generated in anticipation to replace the second seed.
That seed is never generated, and the status bit request for
seed is set.
The next time the number of generated bytes reaches 4094x1024, the
descriptor that requests random data cannot be processed.
The driver hangs there waiting for the descriptor to finish, and this
never occurs. A reset of SAHARA does not recover from there, and a reset
of the chip is necessary.

* Tried board:
i.MX51 EVK
This shouldn't be related to a board, just need a chip with SAHARA4 such
i.MX51.
i.MX53 might be affected too, but I did not verify it.

* Detailed reproduce steps:
(1) Replace the attached rand.c in place of the default in the imx-test
package. It requests more than 8192x1024bytes which is the limit when it
hangs. It displays the amount of generated bytes every 4096x1024bytes.
(2) Use the attached 'go' script to only run the random data test in the
unit_tests.
The test will hang.

Solution:
After discussing with STC design team, there is no evidence of an IC
bug, but there is obviously a problem.
I provided a patch that allows to disable the auto-seed, and in the
fsl_shw_get_random function, a seed is generated manually through a
descriptor every 16Mbytes. This number is higher than default auto-seed,
but was suggested by design team. There is no need to re-seed too ofter.
Alternative could be to do that every XX hours, or every YY requests to
that function, ...

The default schedule method to wait for events has been
replaced by "wait_event_interruptible_timeout" as in case
there is problem with SAHARA, such that issue, the driver
does not hang, and can report a problem.

Signed-off-by: Terry Lv <r65388@freescale.com>
---
 sahara2/fsl_shw_rand.c | 34 +++++++++++++++++++++++++++++++---
 1 file changed, 31 insertions(+), 3 deletions(-)

diff --git a/sahara2/fsl_shw_rand.c b/sahara2/fsl_shw_rand.c
index 301df0a..54c0d87 100644
--- a/sahara2/fsl_shw_rand.c
+++ b/sahara2/fsl_shw_rand.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright 2005-2009, 2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2005-2012 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
@@ -32,6 +32,8 @@
 EXPORT_SYMBOL(fsl_shw_get_random);
 #endif
 
+unsigned int g_gen_rnd_bytes = 0;
+
 /* REQ-S2LRD-PINTFC-API-BASIC-RNG-002 */
 /*!
  * Get a random number
@@ -54,8 +56,34 @@ fsl_shw_return_t fsl_shw_get_random(fsl_shw_uco_t * user_ctx,
 		goto out;
 	}
 
-	header = SAH_HDR_RNG_GENERATE;	/* Desc. #18 */
-	DESC_OUT_OUT(header, length, data, 0, NULL);
+    /* There is a possible problem with the auto-seed that automatically
+     * reseeds every 4094x1024 bytes (2^20 words).
+     * The third generation does not occur for an unknown reason so far.
+     * Different method for manual reseed could be used, such every XXhours,
+     * or every YY calls of this function a seed is generated.
+     * The choosen method counts the number of generated random bytes, and
+     * transparently reseed every 16MB.
+     * Note that if the auto-seed is not disabled in the SAHARA driver, the
+     * manual seed should be done after less generated bytes (see below).
+     */
+    g_gen_rnd_bytes += length;
+#ifndef DISABLE_AUTOSEED
+    /* use that value if auto-reseed is set */
+    if(!(g_gen_rnd_bytes % (4094*1024))) {
+#else
+    /* otherwise use a larger but still satisfying value */
+    if(!(g_gen_rnd_bytes % (0x1000000))) {
+#endif //DISABLE_AUTOSEED
+        header = SAH_HDR_FORCE_SEED;
+    	DESC_OUT_OUT(header, 0, NULL, 0, NULL);
+
+    	SAH_SF_EXECUTE();
+
+    	SAH_SF_DESC_CLEAN();
+    }
+
+    header = SAH_HDR_RNG_GENERATE;	/* Desc. #18 */
+    DESC_OUT_OUT(header, length, data, 0, NULL);
 
 	SAH_SF_EXECUTE();
 
-- 
1.8.0

