From ac8dfd03ca0813dbe2fe1ff44d53b31d5ab63afa Mon Sep 17 00:00:00 2001
From: Robby Cai <r63905@freescale.com>
Date: Thu, 19 Mar 2009 15:54:45 +0800
Subject: [PATCH 044/280] ENGR00109498 update i.MX37 firmware to v1.1.0, vpu
 package to v1.5.0

add mv/mb/userdata/framebuffer status info reporting.

Signed-off-by: Robby Cai <r63905@freescale.com>
---
 vpu/vpu_fw/vpu_fw_imx37.bin | Bin 98320 -> 98320 bytes
 vpu/vpu_lib.c               | 207 ++++++++++++++++----------------------------
 vpu/vpu_lib.h               |   3 +-
 vpu/vpu_util.c              |  59 +++++++++++++
 vpu/vpu_util.h              |  11 +++
 5 files changed, 149 insertions(+), 131 deletions(-)

diff --git a/vpu/vpu_fw/vpu_fw_imx37.bin b/vpu/vpu_fw/vpu_fw_imx37.bin
index d2606f55eafbe8b645ddf1340990624e0b99e7f0..e9c336bdf6d183d4a3c1432e3a598b9753b69592 100644
GIT binary patch
delta 16754
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

delta 15961
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

diff --git a/vpu/vpu_lib.c b/vpu/vpu_lib.c
index 0982bf9..2bd32f7 100644
--- a/vpu/vpu_lib.c
+++ b/vpu/vpu_lib.c
@@ -40,16 +40,6 @@
 #define STREAM_ENDIAN			0
 #endif
 
-/* Stolen from linux/include/linux/byteorder/swab.h */
-#define swab32(x) \
-	((Uint32)( \
-		(((Uint32)(x) & (Uint32)0x000000ffUL) << 24) | \
-		(((Uint32)(x) & (Uint32)0x0000ff00UL) <<  8) | \
-		(((Uint32)(x) & (Uint32)0x00ff0000UL) >>  8) | \
-		(((Uint32)(x) & (Uint32)0xff000000UL) >> 24) ))
-
-#define ARRAY_SIZE(x)	(sizeof(x) / sizeof((x)[0]))
-
 static PhysicalAddress rdPtrRegAddr[] = {
 	BIT_RD_PTR_0,
 	BIT_RD_PTR_1,
@@ -74,6 +64,7 @@ static PhysicalAddress disFlagRegAddr[] = {
 /* If a frame is started, pendingInst is set to the proper instance. */
 static CodecInst **ppendingInst;
 
+Uint32 virt_codeBuf;
 unsigned long *virt_paraBuf;
 unsigned long *virt_paraBuf2;
 
@@ -121,9 +112,8 @@ int vpu_WaitForInt(int timeout_in_ms)
  */
 RetCode vpu_Init(void *cb)
 {
-	int i, size, err;
+	int i, err;
 	volatile Uint32 data;
-	Uint32 virt_codeBuf;
 	CodecInst *pCodecInst;
 	Uint16 *bit_code = NULL;
 	PhysicalAddress workBuffer, codeBuffer, paraBuffer;
@@ -151,37 +141,12 @@ RetCode vpu_Init(void *cb)
 
 	if (!isVpuInitialized()) {
 		bit_code = malloc(MAX_FW_BINARY_LEN * sizeof(Uint16));
-		if (bit_code == NULL) {
-			err_msg("Failed to allocate bit_code\n");
-			return RETCODE_FAILURE;
-		}
-		memset(bit_code, 0, MAX_FW_BINARY_LEN * sizeof(Uint16));
-		if (LoadBitCodeTable(bit_code, &size) != RETCODE_SUCCESS) {
+		if (DownloadBitCodeTable((unsigned long *)virt_codeBuf,
+				bit_code) != RETCODE_SUCCESS) {
 			free(bit_code);
 			return RETCODE_FAILURE;
 		}
 
-		/* Copy full Microcode to Code Buffer allocated on SDRAM */
-		if (cpu_is_mx51()) {
-			for (i = 0; i < size; i += 4) {
-				data =
-				    (bit_code[i + 0] << 16) | bit_code[i + 1];
-				((unsigned int *)virt_codeBuf)[i / 2 + 1] =
-				    data;
-				data =
-				    (bit_code[i + 2] << 16) | bit_code[i + 3];
-				((unsigned int *)virt_codeBuf)[i / 2] = data;
-			}
-		} else {
-			for (i = 0; i < size; i += 2) {
-				data = (unsigned int)((bit_code[i] << 16) |
-						      bit_code[i + 1]);
-				if (cpu_is_mx37())
-					data = swab32(data);
-				((unsigned int *)virt_codeBuf)[i / 2] = data;
-			}
-		}
-
 		IOClkGateSet(true);
 		VpuWriteReg(BIT_WORK_BUF_ADDR, workBuffer);
 		VpuWriteReg(BIT_PARA_BUF_ADDR, paraBuffer);
@@ -1116,8 +1081,9 @@ RetCode vpu_EncGetOutputInfo(EncHandle handle, EncOutputInfo * info)
 	}
 
 	if (pEncInfo->encReportMBInfo.enable) {
-		int size = 0, i = 0;
-		Uint32 tempBuf[2], val = 0, address = 0, *dst_addr = NULL, *src_addr = NULL;
+		int size = 0;
+		Uint32 tempBuf[2], val = 0, address = 0;
+		Uint8 *dst_addr = NULL, *src_addr = NULL;
 		Uint32 virt_addr = pEncInfo->picParaBaseMem.virt_uaddr;
 
 		memcpy((char *)tempBuf, (void *)virt_addr, 8);
@@ -1128,19 +1094,16 @@ RetCode vpu_EncGetOutputInfo(EncHandle handle, EncOutputInfo * info)
 		info->mbInfo.addr = pEncInfo->encReportMBInfo.addr;
 		if (info->mbInfo.addr && info->mbInfo.size) {
 			size = (info->mbInfo.size + 7) / 8 * 8;
-			dst_addr = (Uint32 *)info->mbInfo.addr;
-			src_addr = (Uint32 *)(virt_addr + ADDR_MB_BASE_OFFSET);
-			for (i = 0; i < size / 2; i += 2) {
-				/* swab odd and even words for mx51 */
-				*(dst_addr + i * 2) = *(src_addr + i * 2 + 1);
-				*(dst_addr + i * 2 + 1) = *(src_addr + i * 2);
-			}
+			dst_addr = (Uint8 *)info->mbInfo.addr;
+			src_addr = (Uint8 *)(virt_addr + ADDR_MB_BASE_OFFSET);
+			CopyBufferData(dst_addr, src_addr, size);
 		}
 	}
 
 	if (pEncInfo->encReportMVInfo.enable) {
-		int size = 0, i = 0;
-		Uint32 tempBuf[2], val = 0, address = 0, *dst_addr = NULL, *src_addr = NULL;
+		int size = 0;
+		Uint32 tempBuf[2], val = 0, address = 0;
+		Uint8 *dst_addr = NULL, *src_addr = NULL;
 		Uint32 virt_addr = pEncInfo->picParaBaseMem.virt_uaddr;
 
 		memcpy((char *)tempBuf, (void *)virt_addr + 8, 8);
@@ -1152,19 +1115,16 @@ RetCode vpu_EncGetOutputInfo(EncHandle handle, EncOutputInfo * info)
 		info->mvInfo.addr = pEncInfo->encReportMVInfo.addr;
 		if (info->mvInfo.addr && info->mvInfo.size) {
 			size = (info->mvInfo.size + 7) / 8 * 8;
-			dst_addr = (Uint32 *)info->mvInfo.addr;
-			src_addr = (Uint32 *)(virt_addr + ADDR_MB_BASE_OFFSET);
-			for (i = 0; i < size / 2; i += 2) {
-				/* swab odd and even words for mx51 */
-				*(dst_addr + i * 2) = *(src_addr + i * 2 + 1);
-				*(dst_addr + i * 2 + 1) = *(src_addr + i * 2);
-			}
+			dst_addr = (Uint8 *)info->mvInfo.addr;
+			src_addr = (Uint8 *)(virt_addr + ADDR_MB_BASE_OFFSET);
+			CopyBufferData(dst_addr, src_addr, size);
 		}
 	}
 
 	if (pEncInfo->encReportSliceInfo.enable) {
-		int size = 0, i = 0;
-		Uint32 tempBuf[2], val = 0, address = 0, *dst_addr = NULL, *src_addr = NULL;
+		int size = 0;
+		Uint32 tempBuf[2], val = 0, address = 0;
+		Uint8 *dst_addr = NULL, *src_addr = NULL;
 		Uint32 virt_addr = pEncInfo->picParaBaseMem.virt_uaddr;
 
 		memcpy((char *)tempBuf, (void *)virt_addr + 16, 8);
@@ -1176,13 +1136,9 @@ RetCode vpu_EncGetOutputInfo(EncHandle handle, EncOutputInfo * info)
 		info->sliceInfo.addr = pEncInfo->encReportMBInfo.addr;
 		if (info->sliceInfo.addr && info->sliceInfo.size) {
 			size = (info->sliceInfo.size + 7) / 8 * 8;
-			dst_addr = (Uint32 *)info->sliceInfo.addr;
-			src_addr = (Uint32 *)(virt_addr + ADDR_SLICE_BASE_OFFSET);
-			for (i = 0; i < size / 2; i += 2) {
-				/* swab odd and even words for mx51 */
-				*(dst_addr + i * 2) = *(src_addr + i * 2 + 1);
-				*(dst_addr + i * 2 + 1) = *(src_addr + i * 2);
-			}
+			dst_addr = (Uint8 *)info->sliceInfo.addr;
+			src_addr = (Uint8 *)(virt_addr + ADDR_SLICE_BASE_OFFSET);
+			CopyBufferData(dst_addr, src_addr, size);
 		}
 	}
 
@@ -2395,6 +2351,24 @@ RetCode vpu_DecStartOneFrame(DecHandle handle, DecParam * param)
 					*(virt_addr + 5) = 0;
 				}
 			}
+			if (cpu_is_mx37()) {
+				Uint32 *virt_addr, phy_addr;
+
+				virt_addr = (Uint32 *)pDecInfo->picParaBaseMem.virt_uaddr;
+				phy_addr = pDecInfo->picParaBaseMem.phy_addr;
+				/* Set frameStat buffer address */
+				if (pDecInfo->decReportFrameBufStat.enable) {
+					*(virt_addr + 1) = swab32(phy_addr + ADDR_FRAME_BUF_STAT_BASE_OFFSET);
+				}
+				/* Set mbParam buffer address */
+				if (pDecInfo->decReportMBInfo.enable) {
+					*(virt_addr + 3) = swab32(phy_addr + ADDR_MB_BASE_OFFSET);
+				}
+				/* Set mvParam buffer address */
+				if (pDecInfo->decReportMVInfo.enable) {
+					*(virt_addr + 5) = swab32(phy_addr + ADDR_MV_BASE_OFFSET);
+				}
+			}
 		}
 	}
 
@@ -2579,7 +2553,7 @@ RetCode vpu_DecGetOutputInfo(DecHandle handle, DecOutputInfo * info)
 	}
 
 	if (pDecInfo->decReportFrameBufStat.enable) {
-		int size = 0, paraInfo = 0, address = 0, i = 0;
+		int size = 0, paraInfo = 0, address = 0;
 		Uint32 tempBuf[2], virt_addr;
 
 		virt_addr = pDecInfo->picParaBaseMem.virt_uaddr;
@@ -2600,29 +2574,19 @@ RetCode vpu_DecGetOutputInfo(DecHandle handle, DecOutputInfo * info)
 			info->frameBufStat.size = size;
 			info->frameBufStat.addr = pDecInfo->decReportFrameBufStat.addr;
 			size = (size + 7) / 8 * 8;
-			if (info->frameBufStat.size && pDecInfo->decReportFrameBufStat.addr) {
-				if (cpu_is_mx37()) {
-					memcpy(pDecInfo->decReportFrameBufStat.addr,
-						(void *)(address + (bit_work_addr.virt_uaddr -
-						 bit_work_addr.phy_addr)), size);
-				} else {
-					Uint32 *dst_addr, *src_addr;
-					dst_addr = (Uint32 *)pDecInfo->decReportFrameBufStat.addr;
-					src_addr = (Uint32 *)(virt_addr +
-							 ADDR_FRAME_BUF_STAT_BASE_OFFSET);
-					for (i = 0; i < size / 2; i += 2) {
-						/* swab odd and even words for mx51 */
-						*(dst_addr + i * 2) = *(src_addr + i * 2 + 1);
-						*(dst_addr + i * 2 + 1) = *(src_addr + i * 2);
-					}
-				}
+			if (info->frameBufStat.size && info->frameBufStat.addr) {
+				Uint8 *dst_addr, *src_addr;
+				dst_addr = (Uint8 *)info->frameBufStat.addr;
+				src_addr = (Uint8 *)(virt_addr +
+					 ADDR_FRAME_BUF_STAT_BASE_OFFSET);
+				CopyBufferData(dst_addr, src_addr, size);
 			}
 		}
 	}
 
 	/* Mb Param */
 	if (pDecInfo->decReportMBInfo.enable) {
-		int size = 0, paraInfo = 0, address = 0, i = 0;
+		int size = 0, paraInfo = 0, address = 0;
 		Uint32 tempBuf[2], virt_addr;
 
 		virt_addr = pDecInfo->picParaBaseMem.virt_uaddr;
@@ -2644,28 +2608,24 @@ RetCode vpu_DecGetOutputInfo(DecHandle handle, DecOutputInfo * info)
 			info->mbInfo.size = size;
 			info->mbInfo.addr = pDecInfo->decReportMBInfo.addr;
 			size = (size + 7) / 8 * 8;
-			if (info->mbInfo.size && pDecInfo->decReportMBInfo.addr) {
-				if (cpu_is_mx37()) {
-					memcpy(pDecInfo->decReportMBInfo.addr,
-						(void *)(address + (bit_work_addr.virt_uaddr -
-							 bit_work_addr.phy_addr)), size);
-				} else {
-					Uint32 *dst_addr, *src_addr;
-					dst_addr = (Uint32 *)pDecInfo->decReportMBInfo.addr;
-					src_addr = (Uint32 *)(virt_addr + ADDR_MB_BASE_OFFSET);
-					for (i = 0; i < size / 2; i += 2) {
-						/* swab odd and even words for mx51 */
-						*(dst_addr + i * 2) = *(src_addr + i * 2 + 1);
-						*(dst_addr + i * 2 + 1) = *(src_addr + i * 2);
-					}
-				}
+			if (info->mbInfo.size && info->mbInfo.addr) {
+				Uint8 *dst_addr, *src_addr;
+				dst_addr = (Uint8 *)info->mbInfo.addr;
+				src_addr = (Uint8 *)(virt_addr +
+						ADDR_MB_BASE_OFFSET);
+				CopyBufferData(dst_addr, src_addr, size);
 			}
+		} else {
+			/* VPU does not write data */
+			info->mbInfo.size = 0;
+			info->mbInfo.addr = 0;
 		}
+
 	}
 
 	/* Motion Vector */
 	if (pDecInfo->decReportMVInfo.enable) {
-		int size = 0, paraInfo = 0, address = 0, mvNumPerMb = 0, i = 0;
+		int size = 0, paraInfo = 0, address = 0, mvNumPerMb = 0;
 		Uint32 tempBuf[2], virt_addr;
 
 		virt_addr = pDecInfo->picParaBaseMem.virt_uaddr;
@@ -2683,33 +2643,29 @@ RetCode vpu_DecGetOutputInfo(DecHandle handle, DecOutputInfo * info)
 		size		= (val >>  0) & 0xFFFF;
 		info->mvInfo.enable = 1;
 		if (paraInfo == PARA_TYPE_MV) {
-			size = (size + 7) / 8 * 8 * mvNumPerMb * 4;
 
 			info->mvInfo.size = size;
 			info->mvInfo.mvNumPerMb = mvNumPerMb;
 			info->mvInfo.addr = pDecInfo->decReportMVInfo.addr;
-			if (info->mvInfo.size && pDecInfo->decReportMVInfo.addr) {
-				if (cpu_is_mx37()) {
-					memcpy(pDecInfo->decReportMVInfo.addr,
-						(void *)(address + (bit_work_addr.virt_uaddr -
-							 bit_work_addr.phy_addr)), size);
-				} else {
-					Uint32 *dst_addr, *src_addr;
-					dst_addr = (Uint32 *)pDecInfo->decReportMVInfo.addr;
-					src_addr = (Uint32 *)(virt_addr + ADDR_MV_BASE_OFFSET);
-					for (i = 0; i < size / 2; i += 2) {
-						/* swab odd and even words for mx51 */
-						*(dst_addr + i * 2) = *(src_addr + i * 2 + 1);
-						*(dst_addr + i * 2 + 1) = *(src_addr + i * 2);
-					}
-				}
+			if (info->mvInfo.size && info->mvInfo.addr) {
+				Uint8 *dst_addr, *src_addr;
+				dst_addr = (Uint8 *)info->mvInfo.addr;
+				src_addr = (Uint8 *)(virt_addr +
+						ADDR_MV_BASE_OFFSET);
+				size = (size + 7) / 8 * 8 * mvNumPerMb * 4;
+				CopyBufferData(dst_addr, src_addr, size);
 			}
+
+		} else {
+			/* VPU does not write data */
+			info->mvInfo.mvNumPerMb = 0;
+			info->mvInfo.addr = 0;
 		}
 	}
 
 	/* User Data */
 	if (pDecInfo->decReportUserData.enable) {
-		int userDataNum = 0, userDataSize = 0, i = 0;
+		int userDataNum = 0, userDataSize = 0;
 		Uint32 tempBuf[2], virt_addr;
 
 		virt_addr = pDecInfo->userDataBufMem.virt_uaddr;
@@ -2734,19 +2690,10 @@ RetCode vpu_DecGetOutputInfo(DecHandle handle, DecOutputInfo * info)
 		info->userData.enable = 1;
 		if (userDataSize && pDecInfo->decReportUserData.addr) {
 			int size = (userDataSize + 7) / 8 * 8 + USER_DATA_INFO_OFFSET;
-			if (cpu_is_mx37()) {
-				memcpy(pDecInfo->decReportUserData.addr,
-					(void *)virt_addr, size);
-			} else {
-				Uint32 *dst_addr, *src_addr;
-				dst_addr = (Uint32 *)pDecInfo->decReportUserData.addr;
-				src_addr = (Uint32 *)virt_addr;
-				for (i = 0; i < size / 2; i += 2) {
-					/* swab odd and even words for mx51 */
-					*(dst_addr + i * 2) = *(src_addr + i * 2 + 1);
-					*(dst_addr + i * 2 + 1) = *(src_addr + i * 2);
-				}
-			}
+			Uint8 *dst_addr, *src_addr;
+			dst_addr = (Uint8 *)pDecInfo->decReportUserData.addr;
+			src_addr = (Uint8 *)virt_addr;
+			CopyBufferData(dst_addr, src_addr, size);
 		}
 	}
 
diff --git a/vpu/vpu_lib.h b/vpu/vpu_lib.h
index e8f1e5b..356d7d7 100644
--- a/vpu/vpu_lib.h
+++ b/vpu/vpu_lib.h
@@ -464,6 +464,7 @@ typedef struct vpu_versioninfo {
 
 /*
  * Revision History:
+ * v4.5.4 [2009.03.19] upgrade mx37 fw to v1.1.0
  * v4.4.4 [2009.02.27] support data report and change VPU APIs
  * v4.4.3 [2009.01.19] support chromaInterleave of encoder on MX51
  * v4.3.2 [2008.10.28] support loopback on MX51
@@ -471,7 +472,7 @@ typedef struct vpu_versioninfo {
  * v4.1.2 [2008.08.22] update MX37 VPU firmware to V1.0.5
  * v4.0.2 [2008.08.21] add the IOClkGateSet() for power saving.
  */
-#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(4, 4, 4)
+#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(4, 5, 4)
 
 extern unsigned int system_rev;
 
diff --git a/vpu/vpu_util.c b/vpu/vpu_util.c
index f41a724..726cd42 100644
--- a/vpu/vpu_util.c
+++ b/vpu/vpu_util.c
@@ -103,6 +103,47 @@ RetCode LoadBitCodeTable(Uint16 * pBitCode, int *size)
 	return RETCODE_FAILURE;
 }
 
+RetCode DownloadBitCodeTable(unsigned long *virtCodeBuf, Uint16 *bit_code)
+{
+	int i, size;
+	volatile Uint32 data;
+	unsigned long *virt_codeBuf = NULL;
+
+	if (virtCodeBuf == NULL || bit_code == NULL) {
+		err_msg("Failed to allocate bit_code\n");
+		return RETCODE_FAILURE;
+	}
+
+	memset(bit_code, 0, MAX_FW_BINARY_LEN * sizeof(Uint16));
+	if (LoadBitCodeTable(bit_code, &size) != RETCODE_SUCCESS) {
+		return RETCODE_FAILURE;
+	}
+
+	virt_codeBuf = virtCodeBuf;
+	/* Copy full Microcode to Code Buffer allocated on SDRAM */
+	if (cpu_is_mx51()) {
+		for (i = 0; i < size; i += 4) {
+			data =
+			    (bit_code[i + 0] << 16) | bit_code[i + 1];
+			((unsigned int *)virt_codeBuf)[i / 2 + 1] =
+			    data;
+			data =
+			    (bit_code[i + 2] << 16) | bit_code[i + 3];
+			((unsigned int *)virt_codeBuf)[i / 2] = data;
+		}
+	} else {
+		for (i = 0; i < size; i += 2) {
+			data = (unsigned int)((bit_code[i] << 16) |
+					      bit_code[i + 1]);
+			if (cpu_is_mx37())
+				data = swab32(data);
+			((unsigned int *)virt_codeBuf)[i / 2] = data;
+		}
+	}
+
+	return RETCODE_SUCCESS;
+}
+
 /*
  * GetCodecInstance() obtains an instance.
  * It stores a pointer to the allocated instance in *ppInst
@@ -541,6 +582,24 @@ int DecBitstreamBufEmpty(DecInfo * pDecInfo)
 	return rdPtr == wrPtr;
 }
 
+RetCode CopyBufferData(Uint8 *dst, Uint8 *src, int size)
+{
+	if (!dst || !src || !size)
+		return RETCODE_FAILURE;
+
+	if (cpu_is_mx37())
+		memcpy(dst, src, size);
+	else if (cpu_is_mx51()) {
+		int i;
+		for (i = 0; i < size / 8; i += 2) {
+			/* swab odd and even words for mx51 */
+			*((Uint32 *)dst + i * 2) = *((Uint32 *)src + i * 2 + 1);
+			*((Uint32 *)dst + i * 2 + 1) = *((Uint32 *)src + i * 2);
+		}
+	}
+	return RETCODE_SUCCESS;
+}
+
 void GetParaSet(EncHandle handle, int paraSetType, EncParamSet * para)
 {
 	CodecInst *pCodecInst;
diff --git a/vpu/vpu_util.h b/vpu/vpu_util.h
index e9791c9..e20200a 100644
--- a/vpu/vpu_util.h
+++ b/vpu/vpu_util.h
@@ -201,6 +201,7 @@ typedef struct {
 void BitIssueCommand(int instIdx, int cdcMode, int cmd);
 
 RetCode LoadBitCodeTable(Uint16 * pBitCode, int *size);
+RetCode DownloadBitCodeTable(unsigned long *virtCodeBuf, Uint16 *bit_code);
 
 RetCode GetCodecInstance(CodecInst ** ppInst);
 void FreeCodecInstance(CodecInst * pCodecInst);
@@ -216,6 +217,7 @@ RetCode CheckDecInstanceValidity(DecHandle handle);
 RetCode CheckDecOpenParam(DecOpenParam * pop);
 int DecBitstreamBufEmpty(DecInfo * pDecInfo);
 void SetParaSet(DecHandle handle, int paraSetType, DecParamSet * para);
+RetCode CopyBufferData(Uint8 *dst, Uint8 *src, int size);
 
 RetCode SetGopNumber(EncHandle handle, Uint32 *gopNumber);
 RetCode SetIntraQp(EncHandle handle, Uint32 *intraQp);
@@ -242,4 +244,13 @@ static inline void UnlockVpu(semaphore_t *semap)
 	IOClkGateSet(0);
 }
 
+#define swab32(x) \
+	((Uint32)( \
+		(((Uint32)(x) & (Uint32)0x000000ffUL) << 24) | \
+		(((Uint32)(x) & (Uint32)0x0000ff00UL) <<  8) | \
+		(((Uint32)(x) & (Uint32)0x00ff0000UL) >>  8) | \
+		(((Uint32)(x) & (Uint32)0xff000000UL) >> 24) ))
+
+#define ARRAY_SIZE(x)	(sizeof(x) / sizeof((x)[0]))
+
 #endif
-- 
1.8.0

