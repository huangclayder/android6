From 53c5a703a9af3001305d776a030417d2f88b78f7 Mon Sep 17 00:00:00 2001
From: Raj Rajasekaran <b10872@freescale.com>
Date: Mon, 20 Jul 2009 10:52:39 -0500
Subject: [PATCH 063/280] ENGR00113270:Copyright in linux-lib is not up to
 date.

Updated copyright in RNG,SAHARA2 and VPU files.

Signed-off-by: Raj Rajasekaran <b10872@freescale.com>
---
 rng/fsl_shw_auth.c     |   2 +-
 rng/fsl_shw_hash.c     |   2 +-
 rng/fsl_shw_hmac.c     |   2 +-
 rng/fsl_shw_rand.c     |   2 +-
 rng/fsl_shw_sym.c      |   2 +-
 rng/fsl_shw_user.c     |   2 +-
 sahara2/fsl_shw_auth.c |  32 ++++-----
 sahara2/fsl_shw_hash.c |   2 +-
 sahara2/fsl_shw_rand.c |   2 +-
 sahara2/fsl_shw_sym.c  |   2 +-
 sahara2/fsl_shw_user.c |   2 +-
 sahara2/fsl_shw_wrap.c | 176 ++++++++++++++++++++++++-------------------------
 sahara2/sf_util.c      |  18 ++---
 sahara2/um_adaptor.c   |   4 +-
 vpu/vpu_debug.h        |   2 +-
 15 files changed, 126 insertions(+), 126 deletions(-)

diff --git a/rng/fsl_shw_auth.c b/rng/fsl_shw_auth.c
index cf861e5..85abc95 100644
--- a/rng/fsl_shw_auth.c
+++ b/rng/fsl_shw_auth.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2008 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/rng/fsl_shw_hash.c b/rng/fsl_shw_hash.c
index c1556c2..6aa5294 100644
--- a/rng/fsl_shw_hash.c
+++ b/rng/fsl_shw_hash.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2008 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/rng/fsl_shw_hmac.c b/rng/fsl_shw_hmac.c
index b1d9115..ef5e170 100644
--- a/rng/fsl_shw_hmac.c
+++ b/rng/fsl_shw_hmac.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2008 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/rng/fsl_shw_rand.c b/rng/fsl_shw_rand.c
index 6b6dcdd..0f47e6a 100644
--- a/rng/fsl_shw_rand.c
+++ b/rng/fsl_shw_rand.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2008 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/rng/fsl_shw_sym.c b/rng/fsl_shw_sym.c
index bed939f..bdcfb1f 100644
--- a/rng/fsl_shw_sym.c
+++ b/rng/fsl_shw_sym.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2008 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/rng/fsl_shw_user.c b/rng/fsl_shw_user.c
index 16ef734..9bc37fa 100644
--- a/rng/fsl_shw_user.c
+++ b/rng/fsl_shw_user.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2008 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/sahara2/fsl_shw_auth.c b/sahara2/fsl_shw_auth.c
index 9226830..185ef77 100644
--- a/sahara2/fsl_shw_auth.c
+++ b/sahara2/fsl_shw_auth.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright 2005-2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
@@ -306,7 +306,7 @@ static inline fsl_shw_return_t add_assoc_preamble(sah_Head_Desc ** desc_chain,
 	uint32_t header = SAH_HDR_SKHA_ENC_DEC;
 	uint32_t temp_buf_flag;
 	unsigned chain_s2 = 1;
-	
+
 #if defined (FSL_HAVE_SAHARA4) && !defined (USE_S2_CCM_DECRYPT_CHAIN)
 	if (!encrypt) {
 		chain_s2 = 0;
@@ -340,7 +340,7 @@ static inline fsl_shw_return_t add_assoc_preamble(sah_Head_Desc ** desc_chain,
 								auth_data,
 								auth_data_length,
 								&temp_buf);
-			
+
 			if (status != FSL_RETURN_OK_S) {
 				goto out;
 			}
@@ -360,12 +360,12 @@ static inline fsl_shw_return_t add_assoc_preamble(sah_Head_Desc ** desc_chain,
 			}
 			/* for next/first use of temp_buf */
 			temp_buf_flag = SAH_OWNS_LINK_DATA;
-			
+
 			cbc_data_length = auth_data_length;
 		}		/* else not NIST */
 #if defined (FSL_HAVE_SAHARA2) || defined (USE_S2_CCM_ENCRYPT_CHAIN)   \
 	|| defined (USE_S2_CCM_DECRYPT_CHAIN)
-		
+
 	if (!chain_s2) {
 		header = SAH_HDR_SKHA_CBC_ICV
 				^ sah_insert_skha_mode_cbc ^ sah_insert_skha_aux0
@@ -417,7 +417,7 @@ static inline fsl_shw_return_t add_assoc_preamble(sah_Head_Desc ** desc_chain,
 		/* Crank through auth data */
 		status = sah_Append_Desc(user_ctx->mem_util, desc_chain,
 					 header, link1, link2);
-		
+
 out:
 
 		if (status != FSL_RETURN_OK_S) {
@@ -428,7 +428,7 @@ out:
 				sah_Destroy_Link(user_ctx->mem_util, link2);
 			}
 		}
-	
+
     (void)encrypt;
 
 	return status;
@@ -673,7 +673,7 @@ fsl_shw_return_t fsl_shw_gen_encrypt(fsl_shw_uco_t * user_ctx,
 		ret = FSL_RETURN_BAD_FLAG_S;
 		goto out;
 	}
-	
+
 	/* Load CTR0 and Key */
 	header = (SAH_HDR_SKHA_SET_MODE_IV_KEY
 		  ^ sah_insert_skha_mode_ctr
@@ -687,7 +687,7 @@ fsl_shw_return_t fsl_shw_gen_encrypt(fsl_shw_uco_t * user_ctx,
 	header = SAH_HDR_SKHA_ENC_DEC;
 	DESC_IN_OUT(header, auth_ctx->mac_length, garbage_output,
 		auth_ctx->mac_length, garbage_output);
-	
+
 #if defined(FSL_HAVE_SAHARA2) || defined(USE_S2_CCM_ENCRYPT_CHAIN)
 #ifndef NO_ZERO_IV_LOAD
 	header = (SAH_HDR_SKHA_SET_MODE_IV_KEY
@@ -718,7 +718,7 @@ fsl_shw_return_t fsl_shw_gen_encrypt(fsl_shw_uco_t * user_ctx,
 #if defined (FSL_HAVE_SAHARA4) && !defined (USE_S2_CCM_ENCRYPT_CHAIN)
 
 	/* Pull out the CBC-MAC value. */
-	
+
 	DESC_OUT_OUT(SAH_HDR_SKHA_READ_CONTEXT_IV, 0, NULL,
 				 auth_ctx->mac_length, auth_value);
 #else
@@ -727,14 +727,14 @@ fsl_shw_return_t fsl_shw_gen_encrypt(fsl_shw_uco_t * user_ctx,
 		0, NULL, auth_ctx->mac_length, auth_ctx->unencrypted_mac);
 
 	/* Now load CTR0 in, and encrypt the MAC */
-	
+
 	header = SAH_HDR_SKHA_SET_MODE_IV_KEY
 			^ sah_insert_skha_encrypt
 			^ sah_insert_skha_mode_ctr ^ sah_insert_skha_modulus_128;
 		DESC_IN_IN(header,
 			   auth_ctx->cipher_ctx_info.block_size_bytes,
 			   auth_ctx->cipher_ctx_info.context, 0, NULL);
-	
+
 		header = SAH_HDR_SKHA_ENC_DEC;	/* Desc. #4 SKHA Enc/Dec */
 		DESC_IN_OUT(header,
 				auth_ctx->mac_length, auth_ctx->unencrypted_mac,
@@ -790,7 +790,7 @@ fsl_shw_return_t fsl_shw_auth_decrypt(fsl_shw_uco_t * user_ctx,
 		ret = FSL_RETURN_BAD_MODE_S;
 		goto out;
 	}
-	
+
 	/* Only support INIT and FINALIZE flags right now. */
 	if ((auth_ctx->flags & (FSL_ACCO_CTX_INIT | FSL_ACCO_CTX_LOAD |
 				FSL_ACCO_CTX_SAVE | FSL_ACCO_CTX_FINALIZE))
@@ -807,7 +807,7 @@ fsl_shw_return_t fsl_shw_auth_decrypt(fsl_shw_uco_t * user_ctx,
 	DESC_IN_KEY(header,
 		    auth_ctx->cipher_ctx_info.block_size_bytes,
 			auth_ctx->cipher_ctx_info.context, cipher_key_info);
-	
+
 	/* Decrypt the MAC which the user passed in */
 	header = SAH_HDR_SKHA_ENC_DEC;
 	DESC_IN_OUT(header,
@@ -831,7 +831,7 @@ fsl_shw_return_t fsl_shw_auth_decrypt(fsl_shw_uco_t * user_ctx,
 		}
 	}
 	/* if auth_data_length > 0 */
-	
+
 	/* Process the payload */
 	header = (SAH_HDR_SKHA_SET_MODE_ENC_DEC
 		^ sah_insert_skha_mode_ccm ^ sah_insert_skha_modulus_128);
@@ -839,7 +839,7 @@ fsl_shw_return_t fsl_shw_auth_decrypt(fsl_shw_uco_t * user_ctx,
 	header ^= sah_insert_skha_aux0;
 #endif
 	DESC_IN_OUT(header, payload_length, ct, payload_length, payload);
-	
+
 #if defined (FSL_HAVE_SAHARA2) || defined (USE_S2_CCM_DECRYPT_CHAIN)
 
 	/* Now pull CBC context (unencrypted MAC) out for comparison. */
diff --git a/sahara2/fsl_shw_hash.c b/sahara2/fsl_shw_hash.c
index 749aaa4..db33811 100644
--- a/sahara2/fsl_shw_hash.c
+++ b/sahara2/fsl_shw_hash.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2006 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/sahara2/fsl_shw_rand.c b/sahara2/fsl_shw_rand.c
index 4f8e5f3..423f3c5 100644
--- a/sahara2/fsl_shw_rand.c
+++ b/sahara2/fsl_shw_rand.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2006 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/sahara2/fsl_shw_sym.c b/sahara2/fsl_shw_sym.c
index c9f32b1..4d7f410 100644
--- a/sahara2/fsl_shw_sym.c
+++ b/sahara2/fsl_shw_sym.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2006 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/sahara2/fsl_shw_user.c b/sahara2/fsl_shw_user.c
index 5f015e1..a2ded23 100644
--- a/sahara2/fsl_shw_user.c
+++ b/sahara2/fsl_shw_user.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright (C) 2005-2006 written by Freescale Semiconductor
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
diff --git a/sahara2/fsl_shw_wrap.c b/sahara2/fsl_shw_wrap.c
index b988bdb..d5ebf90 100644
--- a/sahara2/fsl_shw_wrap.c
+++ b/sahara2/fsl_shw_wrap.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright 2005-2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
@@ -74,14 +74,14 @@
 #include "sahara.h"
 #include "fsl_platform.h"
 #include "fsl_shw_keystore.h"
- 
+
 #include "sf_util.h"
 #include "adaptor.h"
- 
+
 #if defined(DIAG_SECURITY_FUNC)
 #include "diagnostic.h"
 #endif
- 
+
 #if defined(NEED_CTR_WORKAROUND)
  /* CTR mode needs block-multiple data in/out */
 #define LENGTH_PATCH  16
@@ -90,7 +90,7 @@
 #define LENGTH_PATCH  4
 #define LENGTH_PATCH_MASK  3
 #endif
- 
+
 #if LENGTH_PATCH
 #define ROUND_LENGTH(len)                                                  \
  ({ 																		\
@@ -109,26 +109,26 @@
 #else
 #define ROUND_LENGTH(len) (len)
 #endif
- 
+
 #ifdef __KERNEL__
  EXPORT_SYMBOL(fsl_shw_establish_key);
  EXPORT_SYMBOL(fsl_shw_extract_key);
  EXPORT_SYMBOL(fsl_shw_release_key);
 #endif
- 
+
 #define ICV_LENGTH 16
 #define T_LENGTH 16
 #define KEK_LENGTH 16
 #define LENGTH_LENGTH 1
 #define ALGORITHM_LENGTH 1
- 
+
  /* ICV | T' | LEN | ALG | KEY' */
 #define ICV_OFFSET       0
 #define T_PRIME_OFFSET   (ICV_OFFSET + ICV_LENGTH)
 #define LENGTH_OFFSET    (T_PRIME_OFFSET + T_LENGTH)
 #define ALGORITHM_OFFSET (LENGTH_OFFSET + LENGTH_LENGTH)
 #define KEY_PRIME_OFFSET (ALGORITHM_OFFSET + ALGORITHM_LENGTH)
- 
+
  /*
   * For testing of the algorithm implementation,, the DO_REPEATABLE_WRAP flag
   * causes the T_block to go into the T field during a wrap operation.	This
@@ -147,7 +147,7 @@
 	 0x42, 0, 0, 0x42, 0x42, 0, 0, 0x42
  };
 #endif
- 
+
  /*
   * Insert descriptors to calculate ICV = HMAC(key=T, data=LEN|ALG|KEY')
   *
@@ -172,7 +172,7 @@
 	 uint32_t header;
 	 sah_Link *link1 = NULL;
 	 sah_Link *link2 = NULL;
- 
+
 	 /* Load up T as key for the HMAC */
 	 header = (SAH_HDR_MDHA_SET_MODE_MD_KEY  /* #6 */
 		   ^ sah_insert_mdha_algorithm_sha1
@@ -183,10 +183,10 @@
 	 if (sah_code != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 /* Previous step loaded key; Now set up to hash the data */
 	 header = SAH_HDR_MDHA_HASH; /* #10 */
- 
+
 	 /* Input - start with ownerid */
 	 sah_code = sah_Create_Link(user_ctx->mem_util, &link1,
 					(void *)&t_key_info->userid,
@@ -195,14 +195,14 @@
 	 if (sah_code != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 /* Still input  - Append black-key fields len, alg, key' */
 	 sah_code = sah_Append_Link(user_ctx->mem_util, link1,
 					(void *)black_key + LENGTH_OFFSET,
 					(LENGTH_LENGTH
 					 + ALGORITHM_LENGTH
 					 + key_length), SAH_USES_LINK_DATA);
- 
+
 	 if (sah_code != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
@@ -213,19 +213,19 @@
 	 if (sah_code != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 sah_code = sah_Append_Desc(user_ctx->mem_util, desc_chain,
 					header, link1, link2);
- 
+
 	   out:
 	 if (sah_code != FSL_RETURN_OK_S) {
 		 (void)sah_Destroy_Link(user_ctx->mem_util, link1);
 		 (void)sah_Destroy_Link(user_ctx->mem_util, link2);
 	 }
- 
+
 	 return sah_code;
  }				 /* create_icv_calc */
- 
+
  /*!
   * Perform unwrapping of a black key into a RED slot
   *
@@ -248,9 +248,9 @@
 	 unsigned i;
 	 unsigned rounded_key_length;
 	 unsigned original_key_length = key_info->key_length;
- 
+
 	 hmac = DESC_TEMP_ALLOC(ICV_LENGTH);
- 
+
 	 /* Set up key_info for "T" - use same slot as eventual key */
 	 fsl_shw_sko_init(&t_key_info, FSL_KEY_ALG_AES);
 	 t_key_info.userid = key_info->userid;
@@ -258,7 +258,7 @@
 	 t_key_info.flags = key_info->flags;
 	 t_key_info.key_length = T_LENGTH;
 	 t_key_info.keystore = key_info->keystore;
- 
+
 	 /* Compute T = SLID_decrypt(T'); leave in RED slot */
 	 if (key_info->keystore == NULL) {
 		 /* Key goes in system keystore */
@@ -266,7 +266,7 @@
 					 key_info->userid,
 					 t_key_info.handle,
 					 T_LENGTH, black_key + T_PRIME_OFFSET);
-	 
+
 	 } else {
 			 /* Key goes in user keystore */
 			 ret = keystore_slot_decrypt(user_ctx,
@@ -279,7 +279,7 @@
 	 if (ret != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 /* Compute ICV = HMAC(T, ownerid | len | alg | key' */
 	 ret = create_icv_calc(user_ctx, &desc_chain, &t_key_info,
 				   black_key, original_key_length, hmac);
@@ -298,13 +298,13 @@
 		 goto out;
 	 }
 	 SAH_SF_DESC_CLEAN();
- 
+
 	 /* Check computed ICV against value in Black Key */
 	 for (i = 0; i < ICV_LENGTH; i++) {
 		 if (black_key[ICV_OFFSET + i] != hmac[i]) {
 #ifdef DIAG_SECURITY_FUNC
 			 LOG_DIAG_ARGS("computed ICV fails at offset %i\n", i);
- 
+
 			 {
 				 char buff[300];
 				 int a;
@@ -313,7 +313,7 @@
 						 black_key[ICV_OFFSET + a]);
 				 buff[a * 2 + 1] = 0;
 				 LOG_DIAG_ARGS("black key: %s", buff);
- 
+
 				 for (a = 0; a < ICV_LENGTH; a++)
 					 sprintf(&(buff[a * 2]), "%02x",
 						 hmac[a]);
@@ -325,21 +325,21 @@
 			 goto out;
 		 }
 	 }
- 
+
 	 /* This is no longer needed. */
 	 DESC_TEMP_FREE(hmac);
- 
+
 	 /* Compute KEK = SHA1(T | ownerid).  Rewrite slot with value */
 	 header = (SAH_HDR_MDHA_SET_MODE_HASH	 /* #8 */
 		   ^ sah_insert_mdha_init
 		   ^ sah_insert_mdha_algorithm_sha1 ^ sah_insert_mdha_pdata);
- 
+
 	 /* Input - Start with T */
 	 ret = sah_Create_Key_Link(user_ctx->mem_util, &link1, &t_key_info);
 	 if (ret != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 /* Still input - append ownerid */
 	 ret = sah_Append_Link(user_ctx->mem_util, link1,
 				   (void *)&key_info->userid,
@@ -347,20 +347,20 @@
 	 if (ret != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 /* Output - KEK goes into RED slot */
 	 ret = sah_Create_Key_Link(user_ctx->mem_util, &link2, &t_key_info);
 	 if (ret != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 /* Put the Hash calculation into the chain. */
 	 ret = sah_Append_Desc(user_ctx->mem_util, &desc_chain,
 				   header, link1, link2);
 	 if (ret != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 /* Compute KEY = AES-decrypt(KEK, KEY') */
 	 header = (SAH_HDR_SKHA_SET_MODE_IV_KEY  /* #1 */
 		   ^ sah_insert_skha_mode_ctr
@@ -368,34 +368,34 @@
 		   ^ sah_insert_skha_modulus_128);
 	 /* Load KEK in as the key to use */
 	 DESC_IN_KEY(header, 0, NULL, &t_key_info);
- 
+
 	 rounded_key_length = ROUND_LENGTH(original_key_length);
 	 key_info->key_length = rounded_key_length;
- 
+
 	 /* Now set up for computation.  Result in RED */
 	 header = SAH_HDR_SKHA_ENC_DEC;  /* #4 */
 	 DESC_IN_KEY(header, rounded_key_length, black_key + KEY_PRIME_OFFSET,
 			 key_info);
- 
+
 	 /* Perform the operation */
 #ifdef DIAG_SECURITY_FUNC
 	 LOG_DIAG("Decrypting key with KEK");
 #endif
 	 SAH_SF_EXECUTE();
- 
+
 	   out:
 	 key_info->key_length = original_key_length;
 	 SAH_SF_DESC_CLEAN();
- 
+
 	 DESC_TEMP_FREE(hmac);
- 
+
 	 /* Erase tracks */
 	 t_key_info.userid = 0xdeadbeef;
 	 t_key_info.handle = 0xdeadbeef;
- 
+
 	 return ret;
  }				 /* unwrap */
- 
+
  /*!
   * Perform wrapping of a black key from a RED slot
   *
@@ -417,23 +417,23 @@
 	 unsigned rounded_key_length;
 	 sah_Link *link1;
 	 sah_Link *link2;
- 
+
 	 black_key[LENGTH_OFFSET] = key_info->key_length;
 	 black_key[ALGORITHM_OFFSET] = key_info->algorithm;
- 
+
 	 memcpy(&T_key_info, key_info, sizeof(T_key_info));
 	 fsl_shw_sko_set_key_length(&T_key_info, T_LENGTH);
 	 T_key_info.algorithm = FSL_KEY_ALG_HMAC;
- 
+
 	 memcpy(&KEK_key_info, &T_key_info, sizeof(KEK_key_info));
 	 KEK_key_info.algorithm = FSL_KEY_ALG_AES;
- 
+
 	 if (key_info->keystore == NULL) {
 		 /* Key goes in system keystore */
 		 ret = do_system_keystore_slot_alloc(user_ctx,
 				 T_LENGTH, key_info->userid,
 				 &T_key_info.handle);
-	 
+
 	 } else {
 		 /* Key goes in user keystore */
 		 ret = keystore_slot_alloc(key_info->keystore,
@@ -443,20 +443,20 @@
 	 if (ret != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
- 
+
 	 if (key_info->keystore == NULL) {
 		 /* Key goes in system keystore */
 		 ret = do_system_keystore_slot_alloc(user_ctx,
 				 KEK_LENGTH, key_info->userid,
 				 &KEK_key_info.handle);
-		 
+
 	 } else {
 		 /* Key goes in user keystore */
 		 ret = keystore_slot_alloc(key_info->keystore,
 			   KEK_LENGTH,	key_info->userid,
 			   &KEK_key_info.handle);
 	 }
- 
+
 	 if (ret != FSL_RETURN_OK_S) {
 #ifdef DIAG_SECURITY_FUNC
 		 LOG_DIAG("do_scc_slot_alloc() failed");
@@ -465,7 +465,7 @@
 			 /* Key goes in system keystore */
 			 ret = do_system_keystore_slot_dealloc(user_ctx,
 				 key_info->userid, T_key_info.handle);
-	 
+
 		 } else {
 			 /* Key goes in user keystore */
 			 ret = keystore_slot_dealloc(key_info->keystore,
@@ -474,7 +474,7 @@
 	 } else {
 		 slots_allocated = 1;
 	 }
- 
+
 	 /* Set up to compute everything except T' ... */
 #ifndef DO_REPEATABLE_WRAP
 	 /* Compute T = RND() */
@@ -494,12 +494,12 @@
 				  T_key_info.handle,
 				  T_block, T_key_info.key_length);
 	 }
- 
+
 	 if (ret != FSL_RETURN_OK_S) {
 		 goto out;
 	 }
 #endif
- 
+
 	 /* Compute KEK = SHA1(T | Ownerid) */
 	 header = (SAH_HDR_MDHA_SET_MODE_HASH	 /* #8 */
 		   ^ sah_insert_mdha_init
@@ -544,7 +544,7 @@
 	 header = SAH_HDR_SKHA_ENC_DEC;
 	 DESC_KEY_OUT(header, key_info,
 			  key_info->key_length, black_key + KEY_PRIME_OFFSET);
- 
+
 	 /* Compute and store ICV into Black Key */
 	 ret = create_icv_calc(user_ctx, &desc_chain, &T_key_info,
 				   black_key, original_key_length,
@@ -556,7 +556,7 @@
 #endif				/*DIAG_SECURITY_FUNC */
 		 goto out;
 	 }
- 
+
 	 /* Now get Sahara to do the work. */
 #ifdef DIAG_SECURITY_FUNC
 	 LOG_DIAG("Encrypting key with KEK");
@@ -568,7 +568,7 @@
 #endif
 		 goto out;
 	 }
- 
+
 	 /* Compute T' = SLID_encrypt(T); Result goes to Black Key */
 	 if (key_info->keystore == NULL) {
 		 /* Key goes in system keystore */
@@ -584,17 +584,17 @@
 						 T_LENGTH,
 						 black_key + T_PRIME_OFFSET);
 	 }
- 
+
 	 if (ret != FSL_RETURN_OK_S) {
 #ifdef DIAG_SECURITY_FUNC
 		 LOG_DIAG("do_scc_slot_encrypt() failed");
 #endif
 		 goto out;
 	 }
- 
+
 	   out:
 	 key_info->key_length = original_key_length;
- 
+
 	 SAH_SF_DESC_CLEAN();
 	 if (slots_allocated) {
 		 if (key_info->keystore == NULL) {
@@ -617,10 +617,10 @@
 					 KEK_key_info.handle);
 		 }
 	 }
- 
+
 	 return ret;
  }				 /* wrap */
- 
+
  /*!
   * Place a key into a protected location for use only by cryptographic
   * algorithms.
@@ -667,11 +667,11 @@
 	 unsigned rounded_key_length;
 	 unsigned slot_allocated = 0;
 	 uint32_t old_flags;
- 
+
 	 header = SAH_HDR_RNG_GENERATE;  /* Desc. #18 for rand */
 
  	 /* TODO: THIS STILL NEEDS TO BE REFACTORED */
- 
+
 	 /* Write operations into SCC memory require word-multiple number of
 	  * bytes.	For ACCEPT and CREATE functions, the key length may need
 	  * to be rounded up.  Calculate. */
@@ -681,9 +681,9 @@
 	 } else {
 		 rounded_key_length = original_key_length;
 	 }
- 
+
 	 SAH_SF_USER_CHECK();
- 
+
 	 if (key_info->keystore == NULL) {
 		 /* Key goes in system keystore */
 		 ret = do_system_keystore_slot_alloc(user_ctx,
@@ -696,7 +696,7 @@
 			  key_info->key_length, key_info->handle,
 			  rounded_key_length);
 #endif
- 
+
 	 } else {
 		 /* Key goes in user keystore */
 		 ret = keystore_slot_alloc(key_info->keystore,
@@ -711,7 +711,7 @@
 		 goto out;
 	 }
 	 slot_allocated = 1;
- 
+
 	 key_info->flags |= FSL_SKO_KEY_ESTABLISHED;
 	 switch (establish_type) {
 	 case FSL_KEY_WRAP_CREATE:
@@ -724,7 +724,7 @@
 		 DESC_KEY_OUT(header, key_info, 0, NULL);
 		 /* Restore actual, desired key length */
 		 key_info->key_length = original_key_length;
- 
+
 		 old_flags = user_ctx->flags;
 		 /* Now put random value into key */
 		 SAH_SF_EXECUTE();
@@ -738,7 +738,7 @@
 		 }
 #endif
 		 break;
- 
+
 	 case FSL_KEY_WRAP_ACCEPT:
 #ifdef DIAG_SECURITY_FUNC
 		 LOG_DIAG("Accepting plaintext key\n");
@@ -765,7 +765,7 @@
 								  key_info->key_length);
 		 }
 		 break;
- 
+
 	 case FSL_KEY_WRAP_UNWRAP:
 #ifdef DIAG_SECURITY_FUNC
 		 LOG_DIAG("Unwrapping wrapped key\n");
@@ -779,16 +779,16 @@
 			 ret = unwrap(user_ctx, key_info, key);
 		 }
 		 break;
- 
+
 	 default:
 		 ret = FSL_RETURN_BAD_FLAG_S;
 		 break;
 	 }			 /* switch */
- 
+
 	   out:
 	 if (slot_allocated && (ret != FSL_RETURN_OK_S)) {
 		 fsl_shw_return_t scc_err;
-		 
+
 		 if (key_info->keystore == NULL) {
 			 /* Key goes in system keystore */
 			 scc_err = do_system_keystore_slot_dealloc(user_ctx,
@@ -799,15 +799,15 @@
 			 scc_err = keystore_slot_dealloc(key_info->keystore,
 						 key_info->userid,	key_info->handle);
 		 }
-		 
+
 		 key_info->flags &= ~FSL_SKO_KEY_ESTABLISHED;
 	 }
-	 
+
 	 SAH_SF_DESC_CLEAN();
- 
+
 	 return ret;
  }				 /* fsl_shw_establish_key() */
- 
+
  /*!
   * Wrap a key and retrieve the wrapped value.
   *
@@ -833,9 +833,9 @@
 					  uint8_t * covered_key)
  {
 	 SAH_SF_DCLS;
- 
+
 	 SAH_SF_USER_CHECK();
- 
+
 	 /* For now, only blocking mode calls are supported */
 	 if (user_ctx->flags & FSL_UCO_BLOCKING_MODE) {
 		 if (key_info->flags & FSL_SKO_KEY_ESTABLISHED) {
@@ -843,7 +843,7 @@
 			 if (ret != FSL_RETURN_OK_S) {
 				 goto out;
 			 }
- 
+
 			 /* Need to deallocate on successful extraction */
 			 if (key_info->keystore == NULL) {
 				 /* Key goes in system keystore */
@@ -859,13 +859,13 @@
 				 ~(FSL_SKO_KEY_ESTABLISHED | FSL_SKO_KEY_PRESENT);
 		 }
 	 }
- 
+
  out:
 	 SAH_SF_DESC_CLEAN();
- 
+
 	 return ret;
  }
- 
+
  /*!
   * De-establish a key so that it can no longer be accessed.
   *
@@ -883,9 +883,9 @@
 					  fsl_shw_sko_t * key_info)
  {
 	 SAH_SF_DCLS;
- 
+
 	 SAH_SF_USER_CHECK();
- 
+
 	 if (key_info->flags & FSL_SKO_KEY_ESTABLISHED) {
 		 if (key_info->keystore == NULL) {
 			 /* Key goes in system keystore */
@@ -901,9 +901,9 @@
 		 key_info->flags &= ~(FSL_SKO_KEY_ESTABLISHED |
 					  FSL_SKO_KEY_PRESENT);
 	 }
- 
+
  out:
 	 SAH_SF_DESC_CLEAN();
- 
+
 	 return ret;
  }
diff --git a/sahara2/sf_util.c b/sahara2/sf_util.c
index be0588a..25ef6ab 100644
--- a/sahara2/sf_util.c
+++ b/sahara2/sf_util.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright 2005-2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2005-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
@@ -565,7 +565,7 @@ fsl_shw_return_t sah_Create_Key_Link(
             status = FSL_RETURN_OK_S;
         } else {
             if (key_info->flags & FSL_SKO_KEY_ESTABLISHED) {
-				
+
 				if (key_info->keystore == NULL) {
 					/* System Keystore */
                 	(*link)->slot = key_info->handle;
@@ -585,14 +585,14 @@ fsl_shw_return_t sah_Create_Key_Link(
 					(*link)->data =
 						keystore->slot_get_address(keystore->user_data,
 												 key_info->handle);
-				
+
 					flags |= SAH_IN_USER_KEYSTORE;
 					status = FSL_RETURN_OK_S;
 #else
 					/* User keystores only supported in SCC2 */
 					status = FSL_RETURN_BAD_FLAG_S;
 #endif				/* FSL_HAVE_SCC2 */
-				
+
 				}
             } else {
                 /* the flag is bad. Should never get here */
@@ -958,13 +958,13 @@ fsl_shw_return_t sah_add_in_key_desc(uint32_t header,
 
     status = sah_Create_Key_Link(mu, &link2, key_info);
 
-	
+
 	if (status != FSL_RETURN_OK_S) {
 		goto out;
 	}
 
 	status = sah_Append_Desc(mu, desc_chain, header, link1, link2);
-	
+
 out:
     if (status != FSL_RETURN_OK_S) {
         if (link1 != NULL) {
@@ -1059,7 +1059,7 @@ fsl_shw_return_t sah_add_in_keyout_desc(uint32_t header,
     }
 
 	status = sah_Create_Key_Link(mu, &link2, key_info);
-    
+
 	if (status != FSL_RETURN_OK_S) {
 		goto out;
 	}
@@ -1269,7 +1269,7 @@ fsl_shw_return_t sah_add_key_out_desc(uint32_t header,
 	if (status != FSL_RETURN_OK_S) {
 		goto out;
 	}
-    
+
 
     if (out != NULL)  {
         status = sah_Create_Link(mu, &link2,
@@ -1281,7 +1281,7 @@ fsl_shw_return_t sah_add_key_out_desc(uint32_t header,
 	   }
     }
 status = sah_Append_Desc(mu, desc_chain, header, link1, link2);
-	
+
 out:
     if (status != FSL_RETURN_OK_S) {
         if (link1 != NULL) {
diff --git a/sahara2/um_adaptor.c b/sahara2/um_adaptor.c
index 6043128..c39deeb 100644
--- a/sahara2/um_adaptor.c
+++ b/sahara2/um_adaptor.c
@@ -1,6 +1,6 @@
 /*
  * User Space library to access the Security hardware
- * Copyright 2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
@@ -1484,7 +1484,7 @@ void um_Dump_Chain(const sah_Desc * chain)
 
 		output_bytes += snprintf(desc_name + output_bytes,
 					 buf_size - output_bytes, ")\nDesc  ");
-		
+
 		um_Dump_Words(desc_name, (unsigned *)chain,
 			      6 /*sizeof(*chain)/sizeof(unsigned) */ );
 		/* place this definition elsewhere */
diff --git a/vpu/vpu_debug.h b/vpu/vpu_debug.h
index fb87852..0e5892a 100644
--- a/vpu/vpu_debug.h
+++ b/vpu/vpu_debug.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2004-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  */
 
-- 
1.8.0

