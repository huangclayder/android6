From 6b055ff7bc466510af6a7bf3eaa7a4aabbc9771c Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Sat, 23 Oct 2010 00:46:29 +0800
Subject: [PATCH 129/280] ENGR00132889 vpu: avoid to use memcpy in
 EncGetInitialInfo funcion.

This is workaround for gcc 4.4.4 toolchain. This memcpy will cause
unhandled fault.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 vpu/vpu_lib.c | 92 +++++++++++++++++++++++++++++------------------------------
 vpu/vpu_lib.h |  2 +-
 2 files changed, 47 insertions(+), 47 deletions(-)

diff --git a/vpu/vpu_lib.c b/vpu/vpu_lib.c
index 99ec31f..38d8700 100644
--- a/vpu/vpu_lib.c
+++ b/vpu/vpu_lib.c
@@ -576,7 +576,7 @@ RetCode vpu_EncGetInitialInfo(EncHandle handle, EncInitialInfo * info)
 {
 	CodecInst *pCodecInst;
 	EncInfo *pEncInfo;
-	EncOpenParam encOP;
+	EncOpenParam *pEncOP;
 	int picWidth;
 	int picHeight;
 	Uint32 data, *tableBuf;
@@ -596,52 +596,52 @@ RetCode vpu_EncGetInitialInfo(EncHandle handle, EncInitialInfo * info)
 
 	pCodecInst = handle;
 	pEncInfo = &pCodecInst->CodecInfo.encInfo;
-	encOP = pEncInfo->openParam;
+	pEncOP = &pEncInfo->openParam;
 
 	if (pEncInfo->initialInfoObtained) {
 		return RETCODE_CALLED_BEFORE;
 	}
 
-	picWidth = encOP.picWidth;
-	picHeight = encOP.picHeight;
+	picWidth = pEncOP->picWidth;
+	picHeight = pEncOP->picHeight;
 
 	if (!LockVpu(vpu_semap))
 		return RETCODE_FAILURE_TIMEOUT;
 
 	data = (picWidth << BIT_PIC_WIDTH_OFFSET) | picHeight;
 	VpuWriteReg(CMD_ENC_SEQ_SRC_SIZE, data);
-	VpuWriteReg(CMD_ENC_SEQ_SRC_F_RATE, encOP.frameRateInfo);
+	VpuWriteReg(CMD_ENC_SEQ_SRC_F_RATE, pEncOP->frameRateInfo);
 
-	if (encOP.bitstreamFormat == STD_MPEG4) {
+	if (pEncOP->bitstreamFormat == STD_MPEG4) {
 		VpuWriteReg(CMD_ENC_SEQ_COD_STD, 0);
-		data = encOP.EncStdParam.mp4Param.mp4_intraDcVlcThr << 2 |
-		    encOP.EncStdParam.mp4Param.mp4_reversibleVlcEnable << 1 |
-		    encOP.EncStdParam.mp4Param.mp4_dataPartitionEnable;
-		data |= ((encOP.EncStdParam.mp4Param.mp4_hecEnable > 0)
+		data = pEncOP->EncStdParam.mp4Param.mp4_intraDcVlcThr << 2 |
+		    pEncOP->EncStdParam.mp4Param.mp4_reversibleVlcEnable << 1 |
+		    pEncOP->EncStdParam.mp4Param.mp4_dataPartitionEnable;
+		data |= ((pEncOP->EncStdParam.mp4Param.mp4_hecEnable > 0)
 			 ? 1 : 0) << 5;
-		data |= ((encOP.EncStdParam.mp4Param.mp4_verid == 2)
+		data |= ((pEncOP->EncStdParam.mp4Param.mp4_verid == 2)
 			 ? 0 : 1) << 6;
 		VpuWriteReg(CMD_ENC_SEQ_MP4_PARA, data);
-	} else if (encOP.bitstreamFormat == STD_H263) {
+	} else if (pEncOP->bitstreamFormat == STD_H263) {
 		if (cpu_is_mx5x())
 			VpuWriteReg(CMD_ENC_SEQ_COD_STD, 8);
 		else
 			VpuWriteReg(CMD_ENC_SEQ_COD_STD, 1);
-		data = encOP.EncStdParam.h263Param.h263_annexJEnable << 2 |
-		    encOP.EncStdParam.h263Param.h263_annexKEnable << 1 |
-		    encOP.EncStdParam.h263Param.h263_annexTEnable;
+		data = pEncOP->EncStdParam.h263Param.h263_annexJEnable << 2 |
+		    pEncOP->EncStdParam.h263Param.h263_annexKEnable << 1 |
+		    pEncOP->EncStdParam.h263Param.h263_annexTEnable;
 		VpuWriteReg(CMD_ENC_SEQ_263_PARA, data);
-	} else if (encOP.bitstreamFormat == STD_AVC) {
+	} else if (pEncOP->bitstreamFormat == STD_AVC) {
 		VpuWriteReg(CMD_ENC_SEQ_COD_STD, 2);
-		data = (encOP.EncStdParam.avcParam.avc_deblkFilterOffsetBeta &
+		data = (pEncOP->EncStdParam.avcParam.avc_deblkFilterOffsetBeta &
 			15) << 12 |
-		    (encOP.EncStdParam.avcParam.avc_deblkFilterOffsetAlpha
+		    (pEncOP->EncStdParam.avcParam.avc_deblkFilterOffsetAlpha
 		     & 15) << 8 |
-		    encOP.EncStdParam.avcParam.avc_disableDeblk << 6 |
-		    encOP.EncStdParam.avcParam.avc_constrainedIntraPredFlag
-		    << 5 | (encOP.EncStdParam.avcParam.avc_chromaQpOffset & 31);
+		    pEncOP->EncStdParam.avcParam.avc_disableDeblk << 6 |
+		    pEncOP->EncStdParam.avcParam.avc_constrainedIntraPredFlag
+		    << 5 | (pEncOP->EncStdParam.avcParam.avc_chromaQpOffset & 31);
 		VpuWriteReg(CMD_ENC_SEQ_264_PARA, data);
-	} else if (encOP.bitstreamFormat == STD_MJPG) {
+	} else if (pEncOP->bitstreamFormat == STD_MJPG) {
 		VpuWriteReg(CMD_ENC_SEQ_JPG_PARA,
 			    pEncInfo->openParam.EncStdParam.mjpgParam.
 			    mjpg_sourceFormat);
@@ -677,57 +677,57 @@ RetCode vpu_EncGetInitialInfo(EncHandle handle, EncInitialInfo * info)
 		}
 	}
 
-	if (encOP.bitstreamFormat != STD_MJPG) {
-		data = encOP.slicemode.sliceSize << 2 |
-		    encOP.slicemode.sliceSizeMode << 1 | encOP.slicemode.
+	if (pEncOP->bitstreamFormat != STD_MJPG) {
+		data = pEncOP->slicemode.sliceSize << 2 |
+		    pEncOP->slicemode.sliceSizeMode << 1 | pEncOP->slicemode.
 		    sliceMode;
 
 		VpuWriteReg(CMD_ENC_SEQ_SLICE_MODE, data);
-		VpuWriteReg(CMD_ENC_SEQ_GOP_NUM, encOP.gopSize);
+		VpuWriteReg(CMD_ENC_SEQ_GOP_NUM, pEncOP->gopSize);
 	}
 
-	if (encOP.bitRate) {	/* rate control enabled */
-		data = encOP.initialDelay << 16 | encOP.bitRate << 1 | 1;
+	if (pEncOP->bitRate) {	/* rate control enabled */
+		data = pEncOP->initialDelay << 16 | pEncOP->bitRate << 1 | 1;
 		VpuWriteReg(CMD_ENC_SEQ_RC_PARA, data);
 	} else {
 		VpuWriteReg(CMD_ENC_SEQ_RC_PARA, 0);
 	}
 
-	VpuWriteReg(CMD_ENC_SEQ_RC_BUF_SIZE, encOP.vbvBufferSize);
-	VpuWriteReg(CMD_ENC_SEQ_INTRA_REFRESH, encOP.intraRefresh);
+	VpuWriteReg(CMD_ENC_SEQ_RC_BUF_SIZE, pEncOP->vbvBufferSize);
+	VpuWriteReg(CMD_ENC_SEQ_INTRA_REFRESH, pEncOP->intraRefresh);
 
 	VpuWriteReg(CMD_ENC_SEQ_BB_START, pEncInfo->streamBufStartAddr);
 	VpuWriteReg(CMD_ENC_SEQ_BB_SIZE, pEncInfo->streamBufSize / 1024);
 
 	data = 0;
 	if (cpu_is_mx27()) {
-		data |= (encOP.sliceReport << 1) | encOP.mbReport;
-		data |= (encOP.mbQpReport << 3);
+		data |= (pEncOP->sliceReport << 1) | pEncOP->mbReport;
+		data |= (pEncOP->mbQpReport << 3);
 	}
-	if (encOP.rcIntraQp >= 0) {
+	if (pEncOP->rcIntraQp >= 0) {
 		data |= (1 << 5);
-		VpuWriteReg(CMD_ENC_SEQ_INTRA_QP, encOP.rcIntraQp);
+		VpuWriteReg(CMD_ENC_SEQ_INTRA_QP, pEncOP->rcIntraQp);
 	}
 	if (pCodecInst->codecMode == AVC_ENC) {
-		data |= (encOP.EncStdParam.avcParam.avc_audEnable << 2);
-		data |= (encOP.EncStdParam.avcParam.avc_fmoEnable << 4);
+		data |= (pEncOP->EncStdParam.avcParam.avc_audEnable << 2);
+		data |= (pEncOP->EncStdParam.avcParam.avc_fmoEnable << 4);
 	}
-	if (encOP.userQpMinEnable) {
+	if (pEncOP->userQpMinEnable) {
 		data |= (1 << 6);
 		VpuWriteReg(CMD_ENC_SEQ_RC_QP_MIN_MAX,
-			    (encOP.userQpMin << 8) | (encOP.userQpMax & 0xFF));
+			    (pEncOP->userQpMin << 8) | (pEncOP->userQpMax & 0xFF));
 	}
-	if (encOP.userQpMaxEnable) {
+	if (pEncOP->userQpMaxEnable) {
 		data |= (1 << 7);
 		VpuWriteReg(CMD_ENC_SEQ_RC_QP_MIN_MAX,
-			    (encOP.userQpMin << 8) | (encOP.userQpMax & 0xFF));
+			    (pEncOP->userQpMin << 8) | (pEncOP->userQpMax & 0xFF));
 	}
-	if (encOP.userGamma) {
+	if (pEncOP->userGamma) {
 		data |= (1 << 8);
-		VpuWriteReg(CMD_ENC_SEQ_RC_GAMMA, encOP.userGamma);
+		VpuWriteReg(CMD_ENC_SEQ_RC_GAMMA, pEncOP->userGamma);
 	}
 	if (pCodecInst->codecMode == AVC_ENC) {
-		if (encOP.avcIntra16x16OnlyModeEnable)
+		if (pEncOP->avcIntra16x16OnlyModeEnable)
 			data |= (1 << 9);
 	}
 
@@ -738,14 +738,14 @@ RetCode vpu_EncGetInitialInfo(EncHandle handle, EncInitialInfo * info)
 			pEncInfo->openParam.RcIntervalMode);
 
 	if (cpu_is_mx27() && (pCodecInst->codecMode == AVC_ENC)) {
-		data = (encOP.EncStdParam.avcParam.avc_fmoType << 4) |
-		    (encOP.EncStdParam.avcParam.avc_fmoSliceNum & 0x0f);
+		data = (pEncOP->EncStdParam.avcParam.avc_fmoType << 4) |
+		    (pEncOP->EncStdParam.avcParam.avc_fmoSliceNum & 0x0f);
 		data |= (FMO_SLICE_SAVE_BUF_SIZE << 7);
 		VpuWriteReg(CMD_ENC_SEQ_FMO, data);
 	}
 
 	/* Set secondAXI IRAM */
-	iramParam.width = encOP.picWidth;
+	iramParam.width = pEncOP->picWidth;
 	SetEncSecondAXIIRAM(&pEncInfo->secAxiUse, &iramParam);
 
 	VpuWriteReg(CMD_ENC_SEARCH_BASE, pEncInfo->secAxiUse.searchRamAddr);
diff --git a/vpu/vpu_lib.h b/vpu/vpu_lib.h
index ec0cecb..dc583dc 100644
--- a/vpu/vpu_lib.h
+++ b/vpu/vpu_lib.h
@@ -511,7 +511,7 @@ typedef struct vpu_versioninfo {
  * v4.1.2 [2008.08.22] update MX37 VPU firmware to V1.0.5
  * v4.0.2 [2008.08.21] add the IOClkGateSet() for power saving.
  */
-#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(5, 1, 2)
+#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(5, 1, 3)
 
 extern unsigned int system_rev;
 
-- 
1.8.0

