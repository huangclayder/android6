From f9e53d3deb6f5a886301270b2d094b8300f52e93 Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Wed, 2 Nov 2011 20:21:31 +0800
Subject: [PATCH 167/280] ENGR00161215 vpu: support using pmem for buffer
 allocation on android

Support using pmem interface for buffer allocation, then
DMA zone can be removed on android.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 vpu/Android.mk |   2 +-
 vpu/vpu_io.c   | 119 +++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 vpu/vpu_io.h   |   2 +
 vpu/vpu_util.c |   1 -
 4 files changed, 118 insertions(+), 6 deletions(-)

diff --git a/vpu/Android.mk b/vpu/Android.mk
index 7dabec2..0565113 100755
--- a/vpu/Android.mk
+++ b/vpu/Android.mk
@@ -11,7 +11,7 @@ LOCAL_SRC_FILES := \
 	vpu_gdi.c
 LOCAL_CFLAGS += -DBUILD_FOR_ANDROID -D$(BOARD_SOC_TYPE)
 LOCAL_C_INCLUDES += $(LOCAL_PATH)
-LOCAL_SHARED_LIBRARIES := libutils libc
+LOCAL_SHARED_LIBRARIES := libutils libc liblog
 LOCAL_MODULE := libvpu
 LOCAL_LD_FLAGS += -nostartfiles
 LOCAL_PRELINK_MODULE := false
diff --git a/vpu/vpu_io.c b/vpu/vpu_io.c
index 8343043..2427a57 100644
--- a/vpu/vpu_io.c
+++ b/vpu/vpu_io.c
@@ -40,6 +40,11 @@
 #include "vpu_lib.h"
 #include "vpu_util.h"
 
+#ifdef BUILD_FOR_ANDROID
+#include <utils/Log.h>
+#include <linux/android_pmem.h>
+#endif
+
 static int vpu_fd = -1;
 static unsigned long vpu_reg_base;
 static int vpu_active_num = 0;
@@ -171,9 +176,35 @@ int IOSystemInit(void *callback)
 	vpu_active_num++;
 
 	IOClkGateSet(true);
-	bit_work_addr.size = TEMP_BUF_SIZE + PARA_BUF_SIZE +
-	    					CODE_BUF_SIZE + PARA_BUF2_SIZE;
+#ifdef BUILD_FOR_ANDROID
+	if (ioctl(vpu_fd, VPU_IOC_QUERY_BITWORK_MEM, &bit_work_addr) < 0) {
+		LOGE("Query bitwork memory failed!");
+		goto err;
+	}
 
+	if (bit_work_addr.cpu_addr == 0) {
+		bit_work_addr.size = TEMP_BUF_SIZE + PARA_BUF_SIZE +
+				     CODE_BUF_SIZE + PARA_BUF2_SIZE;
+		/* Allocate bitwork memory by pmem */
+		if (IOGetPhyMem(&bit_work_addr) < 0) {
+			LOGE("Get bitwork address failed!");
+			goto err;
+		}
+		if (IOGetVirtMem(&bit_work_addr) <= 0) {
+			IOFreePhyMem(&bit_work_addr);
+			goto err;
+		}
+		/* Make sure to save bitwork memory info to vpu driver */
+		if (ioctl(vpu_fd, VPU_IOC_SET_BITWORK_MEM, &bit_work_addr) < 0) {
+			LOGE("Store bitwork memory failed!");
+			IOFreeVirtMem(&bit_work_addr);
+			IOFreePhyMem(&bit_work_addr);
+			goto err;
+		}
+	}
+#else
+	bit_work_addr.size = TEMP_BUF_SIZE + PARA_BUF_SIZE +
+			     CODE_BUF_SIZE + PARA_BUF2_SIZE;
 	if (_IOGetPhyMem(VPU_IOC_GET_WORK_ADDR, &bit_work_addr) < 0) {
 		err_msg("Get bitwork address failed!\n");
 		goto err;
@@ -181,7 +212,7 @@ int IOSystemInit(void *callback)
 
 	if (IOGetVirtMem(&bit_work_addr) <= 0)
 		goto err;
-
+#endif
 	UnlockVpu(vpu_semap);
 	return 0;
 
@@ -284,6 +315,59 @@ unsigned long VpuReadReg(unsigned long addr)
 static unsigned int sz_alloc;
 int _IOGetPhyMem(int which, vpu_mem_desc *buff)
 {
+#ifdef BUILD_FOR_ANDROID
+	/* Get memory from pmem space for android */
+	int err;
+	const size_t pagesize = getpagesize();
+	struct pmem_region region;
+	int fd_pem = 0;
+
+	if ((!buff) || (!buff->size)) {
+		LOGE("Error!_IOGetPhyMem:Invalid parameters");
+		return -1;
+	}
+
+	buff->cpu_addr = 0;
+	buff->phy_addr = 0;
+	buff->virt_uaddr = 0;
+
+	if (which != VPU_IOC_PHYMEM_ALLOC) {
+		LOGE("Error!_IOGetPhyMem unsupported memtyp: %d", which);
+		return -1;
+	}
+
+	buff->size = (buff->size + pagesize-1) & ~(pagesize - 1);
+	fd_pem = (unsigned long)open("/dev/pmem_adsp", O_RDWR);
+	if (fd_pem < 0) {
+		LOGE("Error!_IOGetPhyMem Error,cannot open pmem");
+		return -1;
+	}
+
+	err = ioctl(fd_pem, PMEM_GET_TOTAL_SIZE, &region);
+
+	buff->virt_uaddr = (unsigned long)mmap(0, buff->size,
+			    PROT_READ|PROT_WRITE, MAP_SHARED, fd_pem, 0);
+
+	if (buff->virt_uaddr == (unsigned long)MAP_FAILED) {
+		LOGE("Error!mmap(fd=%d, size=%u) failed (%s)",
+			fd_pem, buff->size, strerror(errno));
+		close(fd_pem);
+		return -1;
+	}
+
+	memset(&region, 0, sizeof(region));
+
+	if (ioctl(fd_pem, PMEM_GET_PHYS, &region) == -1) {
+		LOGE("Error!Failed to get physical address of source!");
+		munmap((void *)buff->virt_uaddr, buff->size);
+		close(fd_pem);
+		return -1;
+	}
+
+	buff->phy_addr = (unsigned long)region.offset;
+	buff->cpu_addr = (unsigned long)fd_pem;
+	memset((void*)buff->virt_uaddr, 0, buff->size);
+#else
 	if (ioctl(vpu_fd, which, buff) < 0) {
 		err_msg("mem allocation failed!\n");
 		buff->phy_addr = 0;
@@ -293,6 +377,7 @@ int _IOGetPhyMem(int which, vpu_mem_desc *buff)
 	sz_alloc += buff->size;
 	dprintf(3, "%s: phy addr = %08lx\n", __func__, buff->phy_addr);
 	dprintf(3, "%s: alloc=%d, total=%d\n", __func__, buff->size, sz_alloc);
+#endif
 
 	return 0;
 }
@@ -322,6 +407,26 @@ int IOGetPhyShareMem(vpu_mem_desc * buff)
  */
 int _IOFreePhyMem(int which, vpu_mem_desc * buff)
 {
+#ifdef BUILD_FOR_ANDROID
+	int fd_pmem;
+
+	if (!buff || !(buff->size) || ((int)buff->cpu_addr <= 0)) {
+		LOGE("Error!_IOFreePhyMem:Invalid parameters");
+		return -1;
+	}
+
+	if (which != VPU_IOC_PHYMEM_FREE) {
+		LOGE("Error!_IOFreePhyMem unsupported memtyp: %d",which);
+		return -1;
+	}
+
+	fd_pmem = (int)buff->cpu_addr;
+	if(fd_pmem) {
+		munmap((void *)buff->virt_uaddr, buff->size);
+		close(fd_pmem);
+	}
+	memset((void*)buff, 0, sizeof(*buff));
+#else
 	if (buff->phy_addr != 0) {
 		dprintf(3, "%s: phy addr = %08lx\n", __func__, buff->phy_addr);
 		ioctl(vpu_fd, which, buff);
@@ -330,7 +435,7 @@ int _IOFreePhyMem(int which, vpu_mem_desc * buff)
 	sz_alloc -= buff->size;
 	dprintf(3, "%s: total=%d\n", __func__, sz_alloc);
 	memset(buff, 0, sizeof(*buff));
-
+#endif
 	return 0;
 }
 
@@ -348,6 +453,9 @@ int IOFreePhyMem(vpu_mem_desc * buff)
  */
 int IOGetVirtMem(vpu_mem_desc * buff)
 {
+#ifdef BUILD_FOR_ANDROID
+       return buff->virt_uaddr;
+#else
 	unsigned long va_addr;
 
 	va_addr = (unsigned long)mmap(NULL, buff->size, PROT_READ | PROT_WRITE,
@@ -360,6 +468,7 @@ int IOGetVirtMem(vpu_mem_desc * buff)
 	buff->virt_uaddr = va_addr;
 	dprintf(3, "%s: virt addr = %08lx\n", __func__, buff->virt_uaddr);
 	return va_addr;
+#endif
 }
 
 /*!
@@ -373,12 +482,14 @@ int IOGetVirtMem(vpu_mem_desc * buff)
  */
 int IOFreeVirtMem(vpu_mem_desc * buff)
 {
+#ifndef BUILD_FOR_ANDROID
 	if (buff->virt_uaddr != 0) {
 		if (munmap((void *)buff->virt_uaddr, buff->size) != 0)
 			err_msg("munmap failed\n");
 	}
 
 	buff->virt_uaddr = 0;
+#endif
 	return 0;
 }
 
diff --git a/vpu/vpu_io.h b/vpu/vpu_io.h
index 2c29ac6..d6c3fe6 100644
--- a/vpu/vpu_io.h
+++ b/vpu/vpu_io.h
@@ -59,6 +59,8 @@ typedef struct iram_t {
 #define VPU_IOC_REQ_VSHARE_MEM  _IO(VPU_IOC_MAGIC, 9)
 #define VPU_IOC_SYS_SW_RESET	_IO(VPU_IOC_MAGIC, 11)
 #define VPU_IOC_GET_SHARE_MEM   _IO(VPU_IOC_MAGIC, 12)
+#define VPU_IOC_QUERY_BITWORK_MEM  _IO(VPU_IOC_MAGIC, 13)
+#define VPU_IOC_SET_BITWORK_MEM    _IO(VPU_IOC_MAGIC, 14)
 
 typedef void (*vpu_callback) (int status);
 
diff --git a/vpu/vpu_util.c b/vpu/vpu_util.c
index f15ff42..0b6ac17 100644
--- a/vpu/vpu_util.c
+++ b/vpu/vpu_util.c
@@ -57,7 +57,6 @@ typedef struct {
 extern unsigned long *virt_paraBuf;
 extern semaphore_t *vpu_semap;
 static int mutex_timeout;
-static vpu_mem_desc share_mem;
 
 RetCode LoadBitCodeTable(Uint16 * pBitCode, int *size)
 {
-- 
1.8.0

