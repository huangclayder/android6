From 253df39ad17eb5089d7c39e1504a47dfac408449 Mon Sep 17 00:00:00 2001
From: Hongzhang Yang <Hongzhang.Yang@freescale.com>
Date: Tue, 5 Jan 2016 13:47:15 +0800
Subject: [PATCH 279/280] MLK-12116 Adapt to firmware format change

VPU lib v5.4.33

VPU firmware has been changed to the format of Linux coda driver
firmware. Change VPU lib to adapt to firmware format change.

Signed-off-by: Hongzhang Yang <Hongzhang.Yang@freescale.com>
---
 vpu/vpu_lib.c  | 21 +++++++++++---
 vpu/vpu_lib.h  |  4 +--
 vpu/vpu_util.c | 86 +++++++++++++++++++++++++++++++++-------------------------
 3 files changed, 68 insertions(+), 43 deletions(-)

diff --git a/vpu/vpu_lib.c b/vpu/vpu_lib.c
index 92d4e19..1a9cf1f 100644
--- a/vpu/vpu_lib.c
+++ b/vpu/vpu_lib.c
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  *
- * Copyright (C) 2004-2015 Freescale Semiconductor, Inc.
+ * Copyright (C) 2004-2016 Freescale Semiconductor, Inc.
  */
 
 /* The following programs are the sole property of Freescale Semiconductor Inc.,
@@ -333,9 +333,22 @@ RetCode vpu_Init(void *cb)
 		VpuWriteReg(BIT_CODE_RUN, 0);
 
 		/* Download BIT Microcode to Program Memory */
-		for (i = 0; i < 2048; ++i) {
-			data = bit_code[i];
-			VpuWriteReg(BIT_CODE_DOWN, (i << 16) | data);
+		if (cpu_is_mx6x()) {
+			for (i = 0; i < 2048; i += 4) {
+				data = bit_code[i+3];
+				VpuWriteReg(BIT_CODE_DOWN, (i << 16) | data);
+				data = bit_code[i+2];
+				VpuWriteReg(BIT_CODE_DOWN, ((i+1) << 16) | data);
+				data = bit_code[i+1];
+				VpuWriteReg(BIT_CODE_DOWN, ((i+2) << 16) | data);
+				data = bit_code[i];
+				VpuWriteReg(BIT_CODE_DOWN, ((i+3) << 16) | data);
+			}
+		} else {
+			for (i = 0; i < 2048; ++i) {
+				data = bit_code[i];
+				VpuWriteReg(BIT_CODE_DOWN, (i << 16) | data);
+			}
 		}
 
 		data =
diff --git a/vpu/vpu_lib.h b/vpu/vpu_lib.h
index 87b84c3..98b7220 100644
--- a/vpu/vpu_lib.h
+++ b/vpu/vpu_lib.h
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  *
- * Copyright (C) 2004-2015 Freescale Semiconductor, Inc.
+ * Copyright (C) 2004-2016 Freescale Semiconductor, Inc.
  */
 
 /* The following programs are the sole property of Freescale Semiconductor Inc.,
@@ -729,7 +729,7 @@ static const SocInfo soc_info[] = {
  * v4.2.2 [2008.09.03] support encoder on MX51
  * v4.0.2 [2008.08.21] add the IOClkGateSet() for power saving.
  */
-#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(5, 4, 32)
+#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(5, 4, 33)
 
 extern unsigned int system_rev;
 
diff --git a/vpu/vpu_util.c b/vpu/vpu_util.c
index aa13063..68d84b0 100644
--- a/vpu/vpu_util.c
+++ b/vpu/vpu_util.c
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  *
- * Copyright (C) 2004-2015 Freescale Semiconductor, Inc.
+ * Copyright (C) 2004-2016 Freescale Semiconductor, Inc.
  */
 
 /* The following programs are the sole property of Freescale Semiconductor Inc.,
@@ -175,34 +175,42 @@ RetCode LoadBitCodeTable(Uint16 * pBitCode, int *size)
 		return RETCODE_FAILURE;
 	}
 
-	ret = fread(&info, sizeof(headerInfo), 1, fp);
+	if (cpu_is_mx6x()) {
+		ret = fread(pBitCode, sizeof(Uint16), MAX_FW_BINARY_LEN, fp);
+		fclose(fp);
 
-	if (info.size > MAX_FW_BINARY_LEN) {
-		err_msg("Size in VPU header is too large.Size: %d\n",
-			(Uint16) info.size);
-		goto err;
+		*size = ret;
 	}
+	else {
+		ret = fread(&info, sizeof(headerInfo), 1, fp);
 
-	ret = fread(pBitCode, sizeof(Uint16), info.size, fp);
-	if (ret < (int)info.size) {
-		err_msg("VPU firmware binary file is wrong or corrupted.\n");
-		goto err;
-	}
-	fclose(fp);
+		if (info.size > MAX_FW_BINARY_LEN) {
+			err_msg("Size in VPU header is too large.Size: %d\n",
+					(Uint16) info.size);
+			goto err;
+		}
 
-	memset(temp_str, 0, 64);
-	sprintf(temp_str, "%2x", mxc_cpu());
-	if (strcmp(temp_str, "63") == 0)
-		strcpy(temp_str, "6Q");
-	else if (strcmp(temp_str, "61") == 0)
-		strcpy(temp_str, "6D");
+		ret = fread(pBitCode, sizeof(Uint16), info.size, fp);
+		if (ret < (int)info.size) {
+			err_msg("VPU firmware binary file is wrong or corrupted.\n");
+			goto err;
+		}
+		fclose(fp);
 
-	if (strstr((char *)info.platform, temp_str) == NULL) {
-		err_msg("VPU firmware platform version isn't matched\n");
-		goto err;
-	}
+		memset(temp_str, 0, 64);
+		sprintf(temp_str, "%2x", mxc_cpu());
+		if (strcmp(temp_str, "63") == 0)
+			strcpy(temp_str, "6Q");
+		else if (strcmp(temp_str, "61") == 0)
+			strcpy(temp_str, "6D");
 
-	*size = (int)info.size;
+		if (strstr((char *)info.platform, temp_str) == NULL) {
+			err_msg("VPU firmware platform version isn't matched\n");
+			goto err;
+		}
+
+		*size = (int)info.size;
+	}
 	return RETCODE_SUCCESS;
 
       err:
@@ -228,21 +236,25 @@ RetCode DownloadBitCodeTable(unsigned long *virtCodeBuf, Uint16 *bit_code)
 
 	virt_codeBuf = virtCodeBuf;
 	/* Copy full Microcode to Code Buffer allocated on SDRAM */
-	if (!cpu_is_mx27()) {
-		for (i = 0; i < size; i += 4) {
-			data =
-			    (bit_code[i + 0] << 16) | bit_code[i + 1];
-			((unsigned int *)virt_codeBuf)[i / 2 + 1] =
-			    data;
-			data =
-			    (bit_code[i + 2] << 16) | bit_code[i + 3];
-			((unsigned int *)virt_codeBuf)[i / 2] = data;
-		}
+	if (cpu_is_mx6x()) {
+		memcpy(virt_codeBuf, bit_code, size*2);
 	} else {
-		for (i = 0; i < size; i += 2) {
-			data = (unsigned int)((bit_code[i] << 16) |
-					      bit_code[i + 1]);
-			((unsigned int *)virt_codeBuf)[i / 2] = data;
+		if (!cpu_is_mx27()) {
+			for (i = 0; i < size; i += 4) {
+				data =
+					(bit_code[i + 0] << 16) | bit_code[i + 1];
+				((unsigned int *)virt_codeBuf)[i / 2 + 1] =
+					data;
+				data =
+					(bit_code[i + 2] << 16) | bit_code[i + 3];
+				((unsigned int *)virt_codeBuf)[i / 2] = data;
+			}
+		} else {
+			for (i = 0; i < size; i += 2) {
+				data = (unsigned int)((bit_code[i] << 16) |
+						bit_code[i + 1]);
+				((unsigned int *)virt_codeBuf)[i / 2] = data;
+			}
 		}
 	}
 
-- 
1.8.0

