From 40145dbbe28b161771602bc2562b5cb26e929580 Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Mon, 30 Jan 2012 09:42:15 +0800
Subject: [PATCH 192/280] ENGR00172204 vpu: use environment variable to
 control debug level

Use VPU_LIB_DBG environment variable to control vpu lib debug level.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 vpu/vpu_debug.h | 13 ++++++-------
 vpu/vpu_lib.c   |  8 ++++++++
 2 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/vpu/vpu_debug.h b/vpu/vpu_debug.h
index 0e5892a..e5eb528 100644
--- a/vpu/vpu_debug.h
+++ b/vpu/vpu_debug.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2004-2012 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  */
 
@@ -23,21 +23,20 @@
 #ifndef __VPU_DEBUG_H
 #define __VPU_DEBUG_H
 
+extern int vpu_lib_dbg_level;
 
-#define	DEBUG_LEVEL	0
-
-#define dprintf(level, fmt, arg...)     if (DEBUG_LEVEL >= level) \
+#define dprintf(level, fmt, arg...)     if (vpu_lib_dbg_level >= level) \
         printf("[DEBUG]\t%s:%d " fmt, __FILE__, __LINE__, ## arg)
 
-#define err_msg(fmt, arg...) do { if (DEBUG_LEVEL >= 1)		\
+#define err_msg(fmt, arg...) do { if (vpu_lib_dbg_level >= 1)		\
 	printf("[ERR]\t%s:%d " fmt,  __FILE__, __LINE__, ## arg); else \
 	printf("[ERR]\t" fmt, ## arg);	\
 	} while (0)
-#define info_msg(fmt, arg...) do { if (DEBUG_LEVEL >= 1)		\
+#define info_msg(fmt, arg...) do { if (vpu_lib_dbg_level >= 1)		\
 	printf("[INFO]\t%s:%d " fmt,  __FILE__, __LINE__, ## arg); else \
 	printf("[INFO]\t" fmt, ## arg);	\
 	} while (0)
-#define warn_msg(fmt, arg...) do { if (DEBUG_LEVEL >= 1)		\
+#define warn_msg(fmt, arg...) do { if (vpu_lib_dbg_level >= 1)		\
 	printf("[WARN]\t%s:%d " fmt,  __FILE__, __LINE__, ## arg); else \
 	printf("[WARN]\t" fmt, ## arg);	\
 	} while (0)
diff --git a/vpu/vpu_lib.c b/vpu/vpu_lib.c
index c72a7e1..930c647 100644
--- a/vpu/vpu_lib.c
+++ b/vpu/vpu_lib.c
@@ -39,6 +39,7 @@
 
 /* If a frame is started, pendingInst is set to the proper instance. */
 static CodecInst **ppendingInst;
+int vpu_lib_dbg_level = 0;
 
 Uint32 virt_codeBuf;
 unsigned long *virt_paraBuf;
@@ -193,6 +194,13 @@ RetCode vpu_Init(void *cb)
 	volatile Uint32 data;
 	Uint16 *bit_code = NULL;
 	PhysicalAddress tempBuffer, codeBuffer, paraBuffer;
+	char *dbg_env;
+
+	dbg_env = getenv("VPU_LIB_DBG");
+        if (dbg_env)
+                vpu_lib_dbg_level = atoi(dbg_env);
+	else
+		vpu_lib_dbg_level = 0;
 
 	ENTER_FUNC();
 
-- 
1.8.0

