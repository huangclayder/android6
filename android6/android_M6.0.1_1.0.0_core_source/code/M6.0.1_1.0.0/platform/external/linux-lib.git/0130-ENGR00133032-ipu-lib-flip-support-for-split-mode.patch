From a23e85f9d838f64b1203d246eedb0b101a84d70b Mon Sep 17 00:00:00 2001
From: Jason Chen <b02280@freescale.com>
Date: Mon, 1 Nov 2010 11:05:12 +0800
Subject: [PATCH 130/280] ENGR00133032 ipu lib: flip support for split mode

Add flip support for split mode.

Signed-off-by: Jason Chen <b02280@freescale.com>
---
 ipu/mxc_ipu_hl_lib.c | 253 ++++++++++++++++++++++++++++++++-------------------
 1 file changed, 160 insertions(+), 93 deletions(-)

diff --git a/ipu/mxc_ipu_hl_lib.c b/ipu/mxc_ipu_hl_lib.c
index 6faa3f7..58757ac 100644
--- a/ipu/mxc_ipu_hl_lib.c
+++ b/ipu/mxc_ipu_hl_lib.c
@@ -133,6 +133,11 @@ typedef struct {
 	struct stripe_param up_stripe;
 	struct stripe_param down_stripe;
 
+	int ic_iw;
+	int ic_ih;
+	int ic_ow;
+	int ic_oh;
+
 	ipu_motion_sel motion_sel;
 	dma_addr_t last_inbuf_paddr;
 
@@ -153,6 +158,7 @@ typedef struct {
 		ipu_mem_info o_minfo[3];
 
 		int show_to_fb;
+		int rot;
 		int fd_fb;
 		int fb_num;
 		int fb_stride;
@@ -318,7 +324,7 @@ static int get_system_rev(unsigned int * system_rev)
                 }
         }
 
-	dbg(DBG_INFO, "system_rev is 0x%x\n", ret);
+	dbg(DBG_INFO, "system_rev is 0x%x\n", *system_rev);
 
         return ret;
 }
@@ -456,33 +462,61 @@ static int _ipu_split_mode_set_stripe(ipu_lib_priv_handle_t * ipu_priv_handle, d
 				dma_addr_t out_buf_paddr, int stripe, int select_buf)
 {
 	int i_hoff = 0, i_voff = 0, o_hoff = 0, o_voff = 0, i_eoff = 0, o_eoff = 0;
-	int buf_idx = 0, ret = 0;
+	int buf_idx = 0, ret = 0, out_v_switch = 0, out_h_switch = 0;
+
+	/* output v/h switch should only work when just IC_MODE enable*/
+	if (ipu_priv_handle->output.task_mode == IC_MODE) {
+		if (ipu_priv_handle->output.rot == IPU_ROTATE_VERT_FLIP)
+			out_v_switch = 1;
+		if (ipu_priv_handle->output.rot == IPU_ROTATE_HORIZ_FLIP)
+			out_h_switch = 1;
+		if (ipu_priv_handle->output.rot == IPU_ROTATE_180) {
+			out_v_switch = 1;
+			out_h_switch = 1;
+		}
+	}
 
 	if (stripe & LEFT_STRIPE) {
 		dbg(DBG_DEBUG, "split mode set buffer for left\n");
 		i_hoff = ipu_priv_handle->left_stripe.input_column *
 			bytes_per_pixel(ipu_priv_handle->ifmt);
-		o_hoff = ipu_priv_handle->left_stripe.output_column *
-			bytes_per_pixel(ipu_priv_handle->output.ofmt);
+		if (out_h_switch)
+			o_hoff = ipu_priv_handle->right_stripe.output_column *
+				bytes_per_pixel(ipu_priv_handle->output.ofmt);
+		else
+			o_hoff = ipu_priv_handle->left_stripe.output_column *
+				bytes_per_pixel(ipu_priv_handle->output.ofmt);
 		if (stripe & UP_STRIPE) {
 			dbg(DBG_DEBUG, "-up stripe!\n");
 			buf_idx = 0;
 			i_eoff = i_hoff + ipu_priv_handle->up_stripe.input_column *
 				ipu_priv_handle->istride;
-			o_eoff = o_hoff + ipu_priv_handle->up_stripe.output_column *
-				ipu_priv_handle->output.ostride;
 			i_voff = ipu_priv_handle->up_stripe.input_column;
-			o_voff = ipu_priv_handle->up_stripe.output_column;
+			if (out_v_switch) {
+				o_eoff = o_hoff + ipu_priv_handle->down_stripe.output_column *
+					ipu_priv_handle->output.ostride;
+				o_voff = ipu_priv_handle->down_stripe.output_column;
+			} else {
+				o_eoff = o_hoff + ipu_priv_handle->up_stripe.output_column *
+					ipu_priv_handle->output.ostride;
+				o_voff = ipu_priv_handle->up_stripe.output_column;
+			}
 		} else if (stripe & DOWN_STRIPE) {
 			dbg(DBG_DEBUG, "-down stripe!\n");
 			buf_idx = 1;
 			i_eoff = i_hoff +
 				ipu_priv_handle->down_stripe.input_column *
 				ipu_priv_handle->istride;
-			o_eoff = o_hoff + ipu_priv_handle->down_stripe.output_column *
-				ipu_priv_handle->output.ostride;
 			i_voff = ipu_priv_handle->down_stripe.input_column;
-			o_voff = ipu_priv_handle->down_stripe.output_column;
+			if (out_v_switch) {
+				o_eoff = o_hoff + ipu_priv_handle->up_stripe.output_column *
+					ipu_priv_handle->output.ostride;
+				o_voff = ipu_priv_handle->up_stripe.output_column;
+			} else {
+				o_eoff = o_hoff + ipu_priv_handle->down_stripe.output_column *
+					ipu_priv_handle->output.ostride;
+				o_voff = ipu_priv_handle->down_stripe.output_column;
+			}
 		} else {
 			dbg(DBG_DEBUG, "stripe!\n");
 			buf_idx = 0;
@@ -494,26 +528,42 @@ static int _ipu_split_mode_set_stripe(ipu_lib_priv_handle_t * ipu_priv_handle, d
 		dbg(DBG_DEBUG, "split mode set buffer for right\n");
 		i_hoff = ipu_priv_handle->right_stripe.input_column *
 			bytes_per_pixel(ipu_priv_handle->ifmt);
-		o_hoff = ipu_priv_handle->right_stripe.output_column *
-			bytes_per_pixel(ipu_priv_handle->output.ofmt);
+		if (out_h_switch)
+			o_hoff = ipu_priv_handle->left_stripe.output_column *
+				bytes_per_pixel(ipu_priv_handle->output.ofmt);
+		else
+			o_hoff = ipu_priv_handle->right_stripe.output_column *
+				bytes_per_pixel(ipu_priv_handle->output.ofmt);
 		if (stripe & UP_STRIPE) {
 			dbg(DBG_DEBUG, "-up stripe!\n");
 			buf_idx = 0;
 			i_eoff = i_hoff + ipu_priv_handle->up_stripe.input_column *
 				ipu_priv_handle->istride;
-			o_eoff = o_hoff + ipu_priv_handle->up_stripe.output_column *
-				ipu_priv_handle->output.ostride;
 			i_voff = ipu_priv_handle->up_stripe.input_column;
-			o_voff = ipu_priv_handle->up_stripe.output_column;
+			if (out_v_switch) {
+				o_eoff = o_hoff + ipu_priv_handle->down_stripe.output_column *
+					ipu_priv_handle->output.ostride;
+				o_voff = ipu_priv_handle->down_stripe.output_column;
+			} else {
+				o_eoff = o_hoff + ipu_priv_handle->up_stripe.output_column *
+					ipu_priv_handle->output.ostride;
+				o_voff = ipu_priv_handle->up_stripe.output_column;
+			}
 		} else if (stripe & DOWN_STRIPE) {
 			dbg(DBG_DEBUG, "-down stripe!\n");
 			buf_idx = 1;
 			i_eoff = i_hoff + ipu_priv_handle->down_stripe.input_column *
 				ipu_priv_handle->istride;
-			o_eoff = o_hoff + ipu_priv_handle->down_stripe.output_column *
-				ipu_priv_handle->output.ostride;
 			i_voff = ipu_priv_handle->down_stripe.input_column;
-			o_voff = ipu_priv_handle->down_stripe.output_column;
+			if (out_v_switch) {
+				o_eoff = o_hoff + ipu_priv_handle->up_stripe.output_column *
+					ipu_priv_handle->output.ostride;
+				o_voff = ipu_priv_handle->up_stripe.output_column;
+			} else {
+				o_eoff = o_hoff + ipu_priv_handle->down_stripe.output_column *
+					ipu_priv_handle->output.ostride;
+				o_voff = ipu_priv_handle->down_stripe.output_column;
+			}
 		} else {
 			dbg(DBG_DEBUG, "stripe!\n");
 			buf_idx = 1;
@@ -527,20 +577,32 @@ static int _ipu_split_mode_set_stripe(ipu_lib_priv_handle_t * ipu_priv_handle, d
 		i_hoff = o_hoff = 0;
 		i_eoff = ipu_priv_handle->up_stripe.input_column *
 			ipu_priv_handle->istride;
-		o_eoff = ipu_priv_handle->up_stripe.output_column *
-			ipu_priv_handle->output.ostride;
 		i_voff = ipu_priv_handle->up_stripe.input_column;
-		o_voff = ipu_priv_handle->up_stripe.output_column;
+		if (out_v_switch) {
+			o_eoff = ipu_priv_handle->down_stripe.output_column *
+				ipu_priv_handle->output.ostride;
+			o_voff = ipu_priv_handle->down_stripe.output_column;
+		} else {
+			o_eoff = ipu_priv_handle->up_stripe.output_column *
+				ipu_priv_handle->output.ostride;
+			o_voff = ipu_priv_handle->up_stripe.output_column;
+		}
 	} else if (stripe & DOWN_STRIPE){
 		dbg(DBG_DEBUG, "split mode set buffer for down stripe!\n");
 		buf_idx = 1;
 		i_hoff = o_hoff = 0;
 		i_eoff = ipu_priv_handle->down_stripe.input_column *
 			ipu_priv_handle->istride;
-		o_eoff = ipu_priv_handle->down_stripe.output_column *
-			ipu_priv_handle->output.ostride;
 		i_voff = ipu_priv_handle->down_stripe.input_column;
-		o_voff = ipu_priv_handle->down_stripe.output_column;
+		if (out_v_switch) {
+			o_eoff = ipu_priv_handle->up_stripe.output_column *
+				ipu_priv_handle->output.ostride;
+			o_voff = ipu_priv_handle->up_stripe.output_column;
+		} else {
+			o_eoff = ipu_priv_handle->down_stripe.output_column *
+				ipu_priv_handle->output.ostride;
+			o_voff = ipu_priv_handle->down_stripe.output_column;
+		}
 	}
 
 	ret = ipu_update_channel_buffer(ipu_priv_handle->output.ic_chan,
@@ -586,25 +648,22 @@ static int _ipu_split_mode_set_stripe(ipu_lib_priv_handle_t * ipu_priv_handle, d
 
 static task_mode_t __ipu_task_check(ipu_lib_priv_handle_t * ipu_priv_handle,
 		ipu_lib_input_param_t * input,
-		ipu_lib_output_param_t * output)
+		ipu_lib_output_param_t * output,
+		ipu_lib_overlay_param_t * overlay)
 {
 	task_mode_t task_mode = NULL_MODE;
 	int tmp;
 
-	if(output->rot >= _ipu_get_arch_rot_begin()){
-		if(output->rot >= IPU_ROTATE_90_RIGHT){
-			/*output swap*/
-			tmp = ipu_priv_handle->output.owidth;
-			ipu_priv_handle->output.owidth =
-				ipu_priv_handle->output.oheight;
-			ipu_priv_handle->output.oheight = tmp;
-		}
-		task_mode |= ROT_MODE;
+	if(output->rot >= IPU_ROTATE_90_RIGHT){
+		/*output swap*/
+		tmp = ipu_priv_handle->output.owidth;
+		ipu_priv_handle->output.owidth =
+			ipu_priv_handle->output.oheight;
+		ipu_priv_handle->output.oheight = tmp;
 	}
 
-	/* make sure width is 8 pixel align*/
-	if (task_mode & ROT_MODE)
-		ipu_priv_handle->output.oheight -= ipu_priv_handle->output.oheight%8;
+	if(output->rot >= _ipu_get_arch_rot_begin())
+		task_mode |= ROT_MODE;
 
 	/*need resize or CSC?*/
 	if((ipu_priv_handle->iwidth != ipu_priv_handle->output.owidth) ||
@@ -620,16 +679,38 @@ static task_mode_t __ipu_task_check(ipu_lib_priv_handle_t * ipu_priv_handle,
 	if((task_mode == NULL_MODE) && (input->fmt != output->fmt))
 		task_mode |= IC_MODE;
 
-	if(output->rot >= _ipu_get_arch_rot_begin()){
-		if(output->rot >= IPU_ROTATE_90_RIGHT){
-			/*output swap*/
-			tmp = ipu_priv_handle->output.owidth;
-			ipu_priv_handle->output.owidth =
-				ipu_priv_handle->output.oheight;
-			ipu_priv_handle->output.oheight = tmp;
+	if (overlay)
+		task_mode |= IC_MODE;
+
+	if (task_mode == (ROT_MODE | IC_MODE)) {
+		if (output->rot >= IPU_ROTATE_90_RIGHT) {
+			/* make sure width is 8 pixel align*/
+			ipu_priv_handle->output.owidth -= ipu_priv_handle->output.owidth%8;
 		}
 	}
 
+	/* it could be COPY mode which may use IC module */
+	if ((task_mode & IC_MODE) || (task_mode == NULL_MODE)) {
+		ipu_priv_handle->ic_iw = ipu_priv_handle->iwidth;
+		ipu_priv_handle->ic_ih = ipu_priv_handle->iheight;
+		ipu_priv_handle->ic_ow = ipu_priv_handle->output.owidth;
+		ipu_priv_handle->ic_oh = ipu_priv_handle->output.oheight;
+
+		/* whether output size is too big, if so, enable split mode */
+		if (ipu_priv_handle->ic_ow > _ipu_get_arch_ic_out_max_width())
+			ipu_priv_handle->split_mode |= SPLIT_MODE_RL;
+		if (ipu_priv_handle->ic_oh > _ipu_get_arch_ic_out_max_height())
+			ipu_priv_handle->split_mode |= SPLIT_MODE_UD;
+	}
+
+	if(output->rot >= IPU_ROTATE_90_RIGHT){
+		/*output swap*/
+		tmp = ipu_priv_handle->output.owidth;
+		ipu_priv_handle->output.owidth =
+			ipu_priv_handle->output.oheight;
+		ipu_priv_handle->output.oheight = tmp;
+	}
+
 	if (ipu_priv_handle->mode & TASK_VDI_VF_MODE) {
 		task_mode &= ~IC_MODE;
 		task_mode |= VDI_IC_MODE;
@@ -716,6 +797,7 @@ static int _ipu_task_check(ipu_lib_input_param_t * input,
 	}
 
 	ipu_priv_handle->output.ofmt = output->fmt;
+	ipu_priv_handle->output.rot = output->rot;
 	if ((output->output_win.win_w > 0) || (output->output_win.win_h > 0)) {
 		if ((output->output_win.win_w + output->output_win.pos.x) > output->width)
 			output->output_win.win_w = output->width - output->output_win.pos.x;
@@ -742,25 +824,17 @@ static int _ipu_task_check(ipu_lib_input_param_t * input,
 		if (output->show_to_fb)
 			ipu_priv_handle->output.oheight -= ipu_priv_handle->output.oheight % 8;
 	}
-	/* whether output size is too big, if so, enable split mode */
-	if (ipu_priv_handle->output.owidth > _ipu_get_arch_ic_out_max_width())
-		ipu_priv_handle->split_mode |= SPLIT_MODE_RL;
-	if (ipu_priv_handle->output.oheight > _ipu_get_arch_ic_out_max_height())
-		ipu_priv_handle->split_mode |= SPLIT_MODE_UD;
+
+	ipu_priv_handle->output.task_mode = __ipu_task_check(ipu_priv_handle, input, output, overlay);
 
 	if (overlay) {
-		if ((ipu_priv_handle->ovwidth != ipu_priv_handle->output.owidth) ||
-				(ipu_priv_handle->ovheight != ipu_priv_handle->output.oheight)) {
-			dbg(DBG_ERR, "width/height of overlay and output should be same!\n");
+		if ((ipu_priv_handle->ovwidth != ipu_priv_handle->ic_ow) ||
+				(ipu_priv_handle->ovheight != ipu_priv_handle->ic_oh)) {
+			dbg(DBG_ERR, "width/height of overlay and ic output should be same!\n");
 			ret = -1;
 			goto done;
 		}
-	}
 
-	ipu_priv_handle->output.task_mode = __ipu_task_check(ipu_priv_handle, input, output);
-
-	if (overlay) {
-		ipu_priv_handle->output.task_mode |= IC_MODE;
 		ipu_priv_handle->overlay_en = 1;
 		if (overlay->local_alpha_en)
 			ipu_priv_handle->overlay_local_alpha_en = 1;
@@ -783,8 +857,8 @@ static int _ipu_task_check(ipu_lib_input_param_t * input,
 			goto done;
 		}
 		if (ipu_priv_handle->split_mode & SPLIT_MODE_RL)
-			ipu_calc_stripes_sizes(ipu_priv_handle->iwidth,
-					ipu_priv_handle->output.owidth,
+			ipu_calc_stripes_sizes(ipu_priv_handle->ic_iw,
+					ipu_priv_handle->ic_ow,
 					_ipu_get_arch_ic_out_max_width(),
 					(((unsigned long long)1) << 32), /* 32bit for fractional*/
 					1, /* equal stripes */
@@ -793,8 +867,8 @@ static int _ipu_task_check(ipu_lib_input_param_t * input,
 					&ipu_priv_handle->left_stripe,
 					&ipu_priv_handle->right_stripe);
 		if (ipu_priv_handle->split_mode & SPLIT_MODE_UD)
-			ipu_calc_stripes_sizes(ipu_priv_handle->iheight,
-					ipu_priv_handle->output.oheight,
+			ipu_calc_stripes_sizes(ipu_priv_handle->ic_ih,
+					ipu_priv_handle->ic_oh,
 					_ipu_get_arch_ic_out_max_height(),
 					(((unsigned long long)1) << 32), /* 32bit for fractional*/
 					1, /* equal stripes */
@@ -1406,7 +1480,7 @@ static int _ipu_channel_setup(ipu_lib_input_param_t * input,
 		ipu_lib_handle_t * ipu_handle)
 {
 	ipu_channel_params_t params;
-	int tmp, ret = 0;
+	int ret = 0;
 	unsigned int task_mode;
 	ipu_lib_priv_handle_t * ipu_priv_handle = (ipu_lib_priv_handle_t *)ipu_handle->priv;
 	dma_addr_t buf0 = 0, buf1 = 0, buf0_p = 0, buf1_p = 0, buf0_n = 0, buf1_n = 0;
@@ -1570,16 +1644,16 @@ static int _ipu_channel_setup(ipu_lib_input_param_t * input,
 			params.mem_prp_vf_mem.out_width = ipu_priv_handle->left_stripe.output_width;
 			params.mem_prp_vf_mem.outh_resize_ratio = ipu_priv_handle->left_stripe.irr;
 		} else {
-			params.mem_prp_vf_mem.in_width = ipu_priv_handle->iwidth;
-			params.mem_prp_vf_mem.out_width = ipu_priv_handle->output.owidth;
+			params.mem_prp_vf_mem.in_width = ipu_priv_handle->ic_iw;
+			params.mem_prp_vf_mem.out_width = ipu_priv_handle->ic_ow;
 		}
 		if (ipu_priv_handle->split_mode & SPLIT_MODE_UD) {
 			params.mem_prp_vf_mem.in_height = ipu_priv_handle->up_stripe.input_width;
 			params.mem_prp_vf_mem.out_height = ipu_priv_handle->up_stripe.output_width;
 			params.mem_prp_vf_mem.outv_resize_ratio = ipu_priv_handle->up_stripe.irr;
 		} else {
-			params.mem_prp_vf_mem.in_height = ipu_priv_handle->iheight;
-			params.mem_prp_vf_mem.out_height = ipu_priv_handle->output.oheight;
+			params.mem_prp_vf_mem.in_height = ipu_priv_handle->ic_ih;
+			params.mem_prp_vf_mem.out_height = ipu_priv_handle->ic_oh;
 		}
 		params.mem_prp_vf_mem.in_pixel_fmt = input->fmt;
 		params.mem_prp_vf_mem.out_pixel_fmt = output->fmt;
@@ -1862,21 +1936,14 @@ static int _ipu_channel_setup(ipu_lib_input_param_t * input,
 			dbg(DBG_INFO, "\t\tMEM_ROT_PP_MEM\n");
 		}
 
-		if(output->rot >= IPU_ROTATE_90_RIGHT){
-			/*output swap*/
-			tmp = ipu_priv_handle->output.owidth;
-			ipu_priv_handle->output.owidth = ipu_priv_handle->output.oheight;
-			ipu_priv_handle->output.oheight = tmp;
-		}
-
 		memset(&params, 0, sizeof (params));
 
-		params.mem_prp_vf_mem.in_width = ipu_priv_handle->iwidth;
-		params.mem_prp_vf_mem.in_height = ipu_priv_handle->iheight;
+		params.mem_prp_vf_mem.in_width = ipu_priv_handle->ic_iw;
+		params.mem_prp_vf_mem.in_height = ipu_priv_handle->ic_ih;
 		params.mem_prp_vf_mem.in_pixel_fmt = input->fmt;
 
-		params.mem_prp_vf_mem.out_width = ipu_priv_handle->output.owidth;
-		params.mem_prp_vf_mem.out_height = ipu_priv_handle->output.oheight;
+		params.mem_prp_vf_mem.out_width = ipu_priv_handle->ic_ow;
+		params.mem_prp_vf_mem.out_height = ipu_priv_handle->ic_oh;
 		params.mem_prp_vf_mem.out_pixel_fmt = output->fmt;
 
 		params.mem_prp_vf_mem.motion_sel = ipu_priv_handle->motion_sel;
@@ -1925,8 +1992,8 @@ static int _ipu_channel_setup(ipu_lib_input_param_t * input,
 		ret = ipu_init_channel_buffer(ipu_priv_handle->output.ic_chan,
 				IPU_INPUT_BUFFER,
 				input->fmt,
-				ipu_priv_handle->iwidth,
-				ipu_priv_handle->iheight,
+				params.mem_prp_vf_mem.in_width,
+				params.mem_prp_vf_mem.in_height,
 				ipu_priv_handle->istride,
 				IPU_ROTATE_NONE,
 				buf0,
@@ -2009,9 +2076,9 @@ static int _ipu_channel_setup(ipu_lib_input_param_t * input,
 		ret = ipu_init_channel_buffer(ipu_priv_handle->output.ic_chan,
 				IPU_OUTPUT_BUFFER,
 				output->fmt,
-				ipu_priv_handle->output.owidth,
-				ipu_priv_handle->output.oheight,
-				ipu_priv_handle->output.owidth*bytes_per_pixel(output->fmt),
+				params.mem_prp_vf_mem.out_width,
+				params.mem_prp_vf_mem.out_height,
+				params.mem_prp_vf_mem.out_width*bytes_per_pixel(output->fmt),
 				IPU_ROTATE_NONE,
 				ipu_priv_handle->output.r_minfo[0].paddr,
 				ipu_priv_handle->mode & OP_STREAM_MODE ?
@@ -2031,9 +2098,9 @@ static int _ipu_channel_setup(ipu_lib_input_param_t * input,
 		ret = ipu_init_channel_buffer(ipu_priv_handle->output.rot_chan,
 				IPU_INPUT_BUFFER,
 				output->fmt,
-				ipu_priv_handle->output.owidth,
-				ipu_priv_handle->output.oheight,
-				ipu_priv_handle->output.owidth*bytes_per_pixel(output->fmt),
+				ipu_priv_handle->ic_ow,
+				ipu_priv_handle->ic_oh,
+				ipu_priv_handle->ic_ow*bytes_per_pixel(output->fmt),
 				output->rot,
 				ipu_priv_handle->output.r_minfo[0].paddr,
 				ipu_priv_handle->mode & OP_STREAM_MODE ?
@@ -2045,13 +2112,6 @@ static int _ipu_channel_setup(ipu_lib_input_param_t * input,
 			goto done;
 		}
 
-		if(output->rot >= IPU_ROTATE_90_RIGHT){
-			/*output swap*/
-			tmp = ipu_priv_handle->output.owidth;
-			ipu_priv_handle->output.owidth = ipu_priv_handle->output.oheight;
-			ipu_priv_handle->output.oheight = tmp;
-		}
-
 		if (output->show_to_fb) {
 			ipu_priv_handle->output.ostride = ipu_priv_handle->output.fb_stride;
 		} else
@@ -2329,7 +2389,14 @@ static void * _get_shm(char *name, int size, int *first)
 		}
 		*first = 1;
 	}
-	ftruncate(fd, size);
+
+	if (ftruncate(fd, size) < 0) {
+		dbg(DBG_ERR, "Can not truncate the shared memory for %s!\n",
+				shm_name);
+		close(fd);
+		return NULL;
+	}
+
 	fstat(fd, &stat);
 	buf = mmap(NULL, stat.st_size, PROT_READ | PROT_WRITE,
 			MAP_SHARED, fd, 0);
-- 
1.8.0

