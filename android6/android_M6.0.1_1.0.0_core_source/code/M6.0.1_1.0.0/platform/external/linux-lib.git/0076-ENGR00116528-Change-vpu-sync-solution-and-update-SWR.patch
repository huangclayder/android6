From d1bccb1aa6ed7e9b9e1a7c21e401cc5ae1ab776b Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Tue, 15 Sep 2009 15:57:29 +0800
Subject: [PATCH 076/280] ENGR00116528 Change vpu sync solution and update
 SWReset function in lib

1. Remove file as shared memory for multi-instances, but use
memory allocated from driver;
2. Update SWReset function: If handle isn't NULL, vpu will do real
software reset; if handle is NULL, vpu will only free instance info
per index.

Signed-off-by: Sammy He <r62914@freescale.com>
---
 vpu/vpu_io.c   | 50 ++++++++++++++++++----------------
 vpu/vpu_io.h   |  3 +-
 vpu/vpu_lib.c  | 73 ++++++++++++++++++++++---------------------------
 vpu/vpu_util.c | 86 ++++++++++++++++++++++++++++++----------------------------
 vpu/vpu_util.h |  7 +++--
 5 files changed, 109 insertions(+), 110 deletions(-)

diff --git a/vpu/vpu_io.c b/vpu/vpu_io.c
index 05dece9..fe71e9b 100644
--- a/vpu/vpu_io.c
+++ b/vpu/vpu_io.c
@@ -212,25 +212,10 @@ inline unsigned long *reg_map(unsigned long offset)
 int IOSystemInit(void *callback)
 {
 	int ret;
-	char *shm_path, shm_file[256];
 
-	shm_path = getenv("VPU_SHM_PATH");
-
-	if (shm_path == NULL)
-		strcpy(shm_file, "/dev/shm");	/* default path */
-	else
-		strcpy(shm_file, shm_path);
-
-	strcat(shm_file, "/");
-	strcat(shm_file, "vpu.shm");
-
-	vpu_semap = vpu_semaphore_open(shm_file);
-
-	if (vpu_semap == NULL) {
-		err_msg("Error: Unable to open vpu shared memory file\n");
-		err_msg("Please export VPU_SHM_PATH env for putting vpu shared memory file\n");
-		return -1;
-	}
+	/* Exit directly if already initialized */
+	if (vpu_fd > 0)
+		return 0;
 
 	ret = get_system_rev();
 	if (ret == -1) {
@@ -238,14 +223,22 @@ int IOSystemInit(void *callback)
 		return -1;
 	}
 
-	semaphore_wait(vpu_semap);
 	vpu_fd = open("/dev/mxc_vpu", O_RDWR);
 	if (vpu_fd < 0) {
 		err_msg("Can't open /dev/mxc_vpu\n");
-		semaphore_post(vpu_semap);
 		return -1;
 	}
 
+	vpu_semap = vpu_semaphore_open();
+	if (vpu_semap == NULL) {
+		err_msg("Error: Unable to open vpu shared memory file\n");
+		close(vpu_fd);
+		vpu_fd = -1;
+		return -1;
+	}
+
+	semaphore_wait(vpu_semap);
+
 	vpu_reg_base = (unsigned long)mmap(NULL, BIT_REG_MARGIN,
 					   PROT_READ | PROT_WRITE,
 					   MAP_SHARED, vpu_fd, 0);
@@ -310,6 +303,11 @@ void vpu_setting_iram()
  */
 int IOSystemShutdown(void)
 {
+
+	/* Exit directly if already shutdown */
+	if (vpu_fd == -1)
+		return 0;
+
 	semaphore_wait(vpu_semap);
 
 	/*
@@ -323,14 +321,14 @@ int IOSystemShutdown(void)
 	if (munmap((void *)vpu_reg_base, BIT_REG_MARGIN) != 0)
 		err_msg("munmap failed\n");
 
+	semaphore_post(vpu_semap);
+	vpu_semaphore_close(vpu_semap);
+
 	if (vpu_fd >= 0) {
 		close(vpu_fd);
 		vpu_fd = -1;
 	}
 
-	semaphore_post(vpu_semap);
-	vpu_semaphore_close(vpu_semap);
-
 	return 0;
 }
 
@@ -383,6 +381,12 @@ int IOGetPhyMem(vpu_mem_desc * buff)
 	return _IOGetPhyMem(VPU_IOC_PHYMEM_ALLOC, buff);
 }
 
+/* User cannot free physical share memory, this is done in driver */
+int IOGetPhyShareMem(vpu_mem_desc * buff)
+{
+        return _IOGetPhyMem(VPU_IOC_GET_SHARE_MEM, buff);
+}
+
 int IOGetPhyPicParaMem(vpu_mem_desc * buff)
 {
 	return _IOGetPhyMem(VPU_IOC_GET_PIC_PARA_ADDR, buff);
diff --git a/vpu/vpu_io.h b/vpu/vpu_io.h
index 0440c95..92f52f1 100644
--- a/vpu/vpu_io.h
+++ b/vpu/vpu_io.h
@@ -60,7 +60,7 @@ typedef struct iram_t {
 #define VPU_IOC_GET_PIC_PARA_ADDR   _IO(VPU_IOC_MAGIC, 9)
 #define VPU_IOC_GET_USER_DATA_ADDR   _IO(VPU_IOC_MAGIC, 10)
 #define VPU_IOC_SYS_SW_RESET	_IO(VPU_IOC_MAGIC, 11)
-
+#define VPU_IOC_GET_SHARE_MEM   _IO(VPU_IOC_MAGIC, 12)
 
 typedef void (*vpu_callback) (int status);
 
@@ -73,6 +73,7 @@ int IOFreeVirtMem(vpu_mem_desc * buff);
 int IOWaitForInt(int timeout_in_ms);
 int IOGetIramBase(iram_t * iram);
 int IOClkGateSet(int on);
+int IOGetPhyShareMem(vpu_mem_desc * buff);
 int IOFreePhyPicParaMem(vpu_mem_desc * buff);
 int IOFreePhyUserDataMem(vpu_mem_desc * buff);
 int IOSysSWReset(void);
diff --git a/vpu/vpu_lib.c b/vpu/vpu_lib.c
index d61fb12..48fb2a0 100644
--- a/vpu/vpu_lib.c
+++ b/vpu/vpu_lib.c
@@ -115,7 +115,6 @@ RetCode vpu_Init(void *cb)
 {
 	int i, err;
 	volatile Uint32 data;
-	CodecInst *pCodecInst;
 	Uint16 *bit_code = NULL;
 	PhysicalAddress workBuffer, codeBuffer, paraBuffer;
 
@@ -156,12 +155,6 @@ RetCode vpu_Init(void *cb)
 		if (!cpu_is_mx51())
 			VpuWriteReg(BIT_RESET_CTRL, 0);
 
-		for (i = 0; i < MAX_NUM_INSTANCE; ++i) {
-			pCodecInst =
-			    (CodecInst *) (&vpu_semap->codecInstPool[i]);
-			pCodecInst->instIndex = i;
-			pCodecInst->inUse = 0;
-		}
 		VpuWriteReg(BIT_BIT_STREAM_PARAM, 0);
 
 		if (!cpu_is_mx27()) {
@@ -224,52 +217,60 @@ void vpu_UnInit(void)
 /*
  * This function resets the VPU instance specified by handle or index that
  * exists in the current thread. If handle is not NULL, the index will be
- * ignored and the instance of handle will be reset; otherwise, the
- * instance of index will be reset.
+ * ignored and the instance of handle will be reset; otherwise, vpu will only
+ * clean the instance record per index, not do real vpu reset.
  */
 RetCode vpu_SWReset(DecHandle handle, int index)
 {
 	static unsigned int regBk[64];
 	int i = 0;
 	CodecInst *pCodecInst;
-	DecInfo *pDecInfo;
 	RetCode ret;
 
 	ENTER_FUNC();
 
-	if ((handle == NULL) && (index < 0 || index > MAX_NUM_INSTANCE))
-		return RETCODE_FAILURE;
-
+	info_msg("vpu_SWReset");
 	if (handle == NULL) {
-		LockVpu(vpu_semap);
+		if (index < 0 || index >= MAX_NUM_INSTANCE)
+			return RETCODE_FAILURE;
 
-		handle = (CodecInst *) (&vpu_semap->codecInstPool[i]);
-		if (handle == NULL) {
+		/* Free instance info per index */
+		pCodecInst = (CodecInst *)(&vpu_semap->codecInstPool[index]);
+		if (pCodecInst == NULL)
+			warn_msg("The instance is freed\n");
+		else {
+			LockVpu(vpu_semap);
+			FreeCodecInstance(pCodecInst);
 			UnlockVpu(vpu_semap);
-			return RETCODE_FAILURE;
 		}
+		return RETCODE_SUCCESS;
 	}
+
 	ret = CheckDecInstanceValidity(handle);
-	if (ret != RETCODE_SUCCESS)
-		return ret;
+	if (ret != RETCODE_SUCCESS) {
+		ret = CheckEncInstanceValidity(handle);
+		if (ret != RETCODE_SUCCESS)
+			return ret;
+	}
 
 	pCodecInst = handle;
 
-	pDecInfo = &pCodecInst->CodecInfo.decInfo;
+	if (*ppendingInst && (pCodecInst != *ppendingInst))
+		return RETCODE_FAILURE;
+	else {
+		/* Need to unlock VPU since mutex is locked when StartOneFrame */
+		UnlockVpu(vpu_semap);
+	}
 
-	IOClkGateSet(true);
+	LockVpu(vpu_semap);
 	for (i = 0 ; i < 64 ; i++)
 		regBk[i] = VpuReadReg(BIT_CODE_BUF_ADDR + (i * 4));
-
 	IOSysSWReset();
-
 	for (i = 0 ; i < 64 ; i++)
 		VpuWriteReg(BIT_CODE_BUF_ADDR + (i * 4), regBk[i]);
-
-	VpuWriteReg(BIT_RESET_CTRL, 0);
 	VpuWriteReg(BIT_CODE_RUN, 0);
 
-	Uint32 *p = (Uint32 *) virt_codeBuf;
+	Uint32 *p = (Uint32 *)virt_codeBuf;
 	Uint32 data;
 	Uint16 data_hi;
 	Uint16 data_lo;
@@ -303,26 +304,14 @@ RetCode vpu_SWReset(DecHandle handle, int index)
 
 	VpuWriteReg(BIT_BUSY_FLAG, 1);
 	VpuWriteReg(BIT_CODE_RUN, 1);
-
 	while (vpu_IsBusy());
 
 	BitIssueCommand(0, 0, VPU_WAKE);
 	while (vpu_IsBusy());
 
-	if (pDecInfo->initialInfoObtained) {
-		if (cpu_is_mx51()) {
-			if (pDecInfo->openParam.bitstreamFormat == STD_DIV3)
-				VpuWriteReg(BIT_RUN_AUX_STD, 1);
-			else
-				VpuWriteReg(BIT_RUN_AUX_STD, 0);
-		}
-		BitIssueCommand(pCodecInst->instIndex, pCodecInst->codecMode,
-				SEQ_END);
-		while (VpuReadReg(BIT_BUSY_FLAG)) ;
-	}
-
-	FreeCodecInstance(pCodecInst);
+	/* The handle cannot be used after restore */
 	UnlockVpu(vpu_semap);
+
 	return RETCODE_SUCCESS;
 }
 
@@ -2417,7 +2406,6 @@ RetCode vpu_DecStartOneFrame(DecHandle handle, DecParam * param)
 	pDecParam = &pCodecInst->CodecParam.decParam;
 	memcpy(pDecParam, param, sizeof(*pDecParam));
 
-
 	/* This means frame buffers have not been registered. */
 	if (pDecInfo->frameBufPool == 0) {
 		return RETCODE_WRONG_CALL_SEQUENCE;
@@ -3007,6 +2995,9 @@ RetCode vpu_DecGetOutputInfo(DecHandle handle, DecOutputInfo * info)
 	*ppendingInst = 0;
 	UnlockVpu(vpu_semap);
 
+	/* Workaround for multi-instances competition */
+	usleep(10);
+
 	return RETCODE_SUCCESS;
 }
 
diff --git a/vpu/vpu_util.c b/vpu/vpu_util.c
index 415d74d..9ca448f 100644
--- a/vpu/vpu_util.c
+++ b/vpu/vpu_util.c
@@ -21,13 +21,12 @@
 #include <unistd.h>
 #include <sys/mman.h>
 #include <errno.h>
+#include <pthread.h>
 
 #include "vpu_util.h"
 #include "vpu_io.h"
 #include "vpu_debug.h"
 
-#define TIMEOUT  10		/* condition timeout is 10s */
-
 /*
  * VPU binary file header format:
  * 12-byte: platform version, eg, MX27, MX37, and so on.
@@ -40,6 +39,8 @@ typedef struct {
 
 extern unsigned long *virt_paraBuf;
 extern semaphore_t *vpu_semap;
+static int mutex_timeout;
+static vpu_mem_desc share_mem;
 
 RetCode LoadBitCodeTable(Uint16 * pBitCode, int *size)
 {
@@ -814,66 +815,67 @@ RetCode SetHecMode(EncHandle handle, int mode)
 	return RETCODE_SUCCESS;
 }
 
-semaphore_t *vpu_semaphore_open(char *semaphore_name)
+semaphore_t *vpu_semaphore_open(void)
 {
-	int fd;
 	semaphore_t *semap;
 	pthread_mutexattr_t psharedm;
-	pthread_condattr_t psharedc;
-
-	fd = open(semaphore_name, O_RDWR, 0666);
-	if (fd < 0) {
-		fd = open(semaphore_name, O_RDWR | O_CREAT | O_EXCL, 0666);
-		if (fd < 0)
-			return NULL;
-		ftruncate(fd, sizeof(semaphore_t));
+	CodecInst *pCodecInst;
+	char *timeout_env;
+	int i;
+
+	share_mem.size = sizeof(semaphore_t);
+	if (IOGetPhyShareMem(&share_mem)) {
+		err_msg("Unable to obtain physical of share memory\n");
+		return NULL;
+	}
+	semap = (semaphore_t *)IOGetVirtMem(&share_mem);
+	if (semap == NULL) {
+		err_msg("Unable to map physical of share memory\n");
+		return NULL;
+	}
+	if (!semap->is_initialized) {
 		pthread_mutexattr_init(&psharedm);
 		pthread_mutexattr_setpshared(&psharedm, PTHREAD_PROCESS_SHARED);
-		semap = (semaphore_t *) mmap(NULL, sizeof(semaphore_t),
-					     PROT_READ | PROT_WRITE, MAP_SHARED,
-					     fd, 0);
 		pthread_mutex_init(&semap->lock, &psharedm);
-		pthread_cond_init(&semap->nonzero, &psharedc);
-		semap->count = 1;
-	} else {
-		semap = (semaphore_t *) mmap(NULL, sizeof(semaphore_t),
-					     PROT_READ | PROT_WRITE, MAP_SHARED,
-					     fd, 0);
+		for (i = 0; i < MAX_NUM_INSTANCE; ++i) {
+			pCodecInst = (CodecInst *) (&semap->codecInstPool[i]);
+			pCodecInst->instIndex = i;
+			pCodecInst->inUse = 0;
+		}
+		semap->is_initialized = 1;
 	}
-	close(fd);
+
+	timeout_env = getenv("VPU_MUTEX_TIMEOUT");
+	if (timeout_env == NULL)
+		mutex_timeout = 10;
+	else
+		mutex_timeout = atoi(timeout_env);
+
 	return semap;
 }
 
-void semaphore_post(semaphore_t * semap)
+void semaphore_post(semaphore_t *semap)
 {
-	pthread_mutex_lock(&semap->lock);
-	if (semap->count == 0)
-		pthread_cond_signal(&semap->nonzero);
-	semap->count++;
 	pthread_mutex_unlock(&semap->lock);
 }
 
-void semaphore_wait(semaphore_t * semap)
+void semaphore_wait(semaphore_t *semap)
 {
+#ifdef ANDROID
+	pthread_mutex_lock(&semap->lock);
+#else
 	struct timespec ts;
 
-	ts.tv_sec = time(NULL) + TIMEOUT;
+	ts.tv_sec = time(NULL) + mutex_timeout;
 	ts.tv_nsec = 0;
-	pthread_mutex_lock(&semap->lock);
-	while (semap->count == 0) {
-		if (pthread_cond_timedwait(&semap->nonzero, &semap->lock, &ts)
-		    == ETIMEDOUT) {
-			pthread_mutex_unlock(&semap->lock);
-			printf
-			    ("VPU: Another thread/task is possibly exited abnormally.\n");
-			return;
-		}
-	}
-	semap->count--;
-	pthread_mutex_unlock(&semap->lock);
+	if (pthread_mutex_timedlock(&semap->lock, &ts) == ETIMEDOUT)
+		warn_msg("VPU mutex couldn't be locked before timeout expired\n");
+#endif
 }
 
 void vpu_semaphore_close(semaphore_t * semap)
 {
-	munmap((void *)semap, sizeof(semaphore_t));
+	if (munmap((void *)semap, sizeof(semaphore_t)) != 0)
+		err_msg("munmap share mem failed\n");
+
 }
diff --git a/vpu/vpu_util.h b/vpu/vpu_util.h
index 1b11aed..8a9d831 100644
--- a/vpu/vpu_util.h
+++ b/vpu/vpu_util.h
@@ -18,6 +18,7 @@
 
 #include <sys/types.h>
 #include <pthread.h>
+#include <errno.h>
 
 #include "vpu_reg.h"
 #include "vpu_lib.h"
@@ -191,9 +192,9 @@ typedef struct CodecInst {
 } CodecInst;
 
 typedef struct {
+	int is_initialized;
 	pthread_mutex_t lock;
-	pthread_cond_t nonzero;
-	unsigned count;
+
 	/* VPU data for sharing */
 	CodecInst codecInstPool[MAX_NUM_INSTANCE];
 	CodecInst *pendingInst;
@@ -228,7 +229,7 @@ RetCode SetIntraRefreshNum(EncHandle handle, Uint32 *pIntraRefreshNum);
 RetCode SetSliceMode(EncHandle handle, EncSliceMode *pSliceMode);
 RetCode SetHecMode(EncHandle handle, int mode);
 
-semaphore_t *vpu_semaphore_open(char *semaphore_name);
+semaphore_t *vpu_semaphore_open(void);
 void semaphore_post(semaphore_t *semap);
 void semaphore_wait(semaphore_t *semap);
 void vpu_semaphore_close(semaphore_t *semap);
-- 
1.8.0

