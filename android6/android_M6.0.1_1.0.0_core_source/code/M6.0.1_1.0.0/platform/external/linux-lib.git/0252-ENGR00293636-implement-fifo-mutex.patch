From 6c6697f203f7437f439c4563f38835d022fdd2b2 Mon Sep 17 00:00:00 2001
From: Hongzhang Yang <Hongzhang.Yang@freescale.com>
Date: Tue, 7 Jan 2014 17:42:22 +0800
Subject: [PATCH 252/280] ENGR00293636 implement fifo mutex

Using default mutex, some instance may not have chance to lock mutex for
a long time, depending on kernel scheduler.

Fifo mutex is an alternative to default mutex. Mutex is locked in a
predefined sequential order.

We associate each instance with a time stamp (ts) when it requests the
mutex.
- if ts of inst A is much greater than inst B (exceeds MAX_REORDER),
  inst B is guaranteed to lock the mutex first
- if ts of inst A is greater than inst B but within MAX_REORDER, inst
  A may lock the mutex first

Rebuild vpu lib with FIFO_MUTEX macro to evaluate fifo mutex. Change
MAX_REORDER as you like. There is overhead to regulate mutex locking order.
So performance drops while MAX_REORDER decreasing.

Signed-off-by: Hongzhang Yang <Hongzhang.Yang@freescale.com>
---
 vpu/vpu_util.c | 147 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 vpu/vpu_util.h |  33 ++++++++++++-
 2 files changed, 178 insertions(+), 2 deletions(-)

diff --git a/vpu/vpu_util.c b/vpu/vpu_util.c
index dba076a..a62b352 100644
--- a/vpu/vpu_util.c
+++ b/vpu/vpu_util.c
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  *
- * Copyright (C) 2004-2013 Freescale Semiconductor, Inc.
+ * Copyright (C) 2004-2014 Freescale Semiconductor, Inc.
  */
 
 /* The following programs are the sole property of Freescale Semiconductor Inc.,
@@ -1175,6 +1175,9 @@ semaphore_t *vpu_semaphore_open(void)
 {
 	semaphore_t *semap;
 	pthread_mutexattr_t psharedm;
+#ifdef FIFO_MUTEX
+	pthread_condattr_t psharedc;
+#endif
 	CodecInst *pCodecInst;
 	char *timeout_env;
 	int i;
@@ -1192,7 +1195,20 @@ semaphore_t *vpu_semaphore_open(void)
 		dprintf(4, "sema not init\n");
 		pthread_mutexattr_init(&psharedm);
 		pthread_mutexattr_setpshared(&psharedm, PTHREAD_PROCESS_SHARED);
+#ifdef FIFO_MUTEX
+		pthread_mutex_init(&semap->api_lock.mutex, &psharedm);
+		pthread_condattr_init(&psharedc);
+		pthread_condattr_setpshared(&psharedc, PTHREAD_PROCESS_SHARED);
+		pthread_cond_init(&semap->api_lock.cond, &psharedc);
+		semap->api_lock.ts_late = 0;
+		semap->api_lock.locked = 0;
+		semap->api_lock.buf_head = 0;
+		semap->api_lock.buf_tail = -1;
+		for (i=0; i<MAX_ITEM_NUM; i++)
+			semap->api_lock.ts_buf[i].inUse = 0;
+#else
 		pthread_mutex_init(&semap->api_lock, &psharedm);
+#endif
 		pthread_mutex_init(&semap->reg_lock, &psharedm);
 		for (i = 0; i < MAX_NUM_INSTANCE; ++i) {
 			pCodecInst = (CodecInst *) (&semap->codecInstPool[i]);
@@ -1214,10 +1230,135 @@ semaphore_t *vpu_semaphore_open(void)
 	return semap;
 }
 
+#ifdef FIFO_MUTEX
+static inline int get_free_idx(ts_item_t *ts_buf)
+{
+	int i;
+
+	for (i=0; i<MAX_ITEM_NUM; i++) {
+		if (!ts_buf[i].inUse)
+			break;
+	}
+	if (i == MAX_ITEM_NUM) {
+		err_msg("no free idx\n");
+		i = -1;
+	}
+	return i;
+}
+
+static inline int get_ts_early(fifo_mutex_t *fifo_mutex)
+{
+	int ts = -1;
+
+	if (fifo_mutex->buf_tail != -1)
+		ts = fifo_mutex->ts_buf[fifo_mutex->buf_head].ts;
+	return ts;
+}
+
+static inline int is_ts_ok(int ts, fifo_mutex_t *fifo_mutex)
+{
+	int ts_early;
+	int ret = 0;
+
+	ts_early = get_ts_early(fifo_mutex);
+	if (ts_early == -1)
+		ret = 1;
+	else if (ts_early <= ts) {
+		if (ts - ts_early < MAX_REORDER)
+			ret = 1;
+	} else {
+		if (ts + MAX_TS - ts_early < MAX_REORDER)
+			ret = 1;
+	}
+	return ret;
+}
+
+static inline int enqueue_ts(int ts, fifo_mutex_t *fifo_mutex)
+{
+	int idx;
+
+	if (fifo_mutex->buf_tail == -1) {
+		idx = fifo_mutex->buf_head;
+	} else {
+		idx = get_free_idx(fifo_mutex->ts_buf);
+		if (idx < 0)
+			return -1;
+		fifo_mutex->ts_buf[fifo_mutex->buf_tail].next = idx;
+	}
+	fifo_mutex->ts_buf[idx].ts = ts;
+	fifo_mutex->ts_buf[idx].inUse = 1;
+	fifo_mutex->ts_buf[idx].prev = fifo_mutex->buf_tail;
+	fifo_mutex->ts_buf[idx].next = -1;
+	fifo_mutex->buf_tail = idx;
+	return idx;
+}
+
+static inline void dequeue_ts(int index, fifo_mutex_t *fifo_mutex)
+{
+	int prev;
+	int next;
+
+	fifo_mutex->ts_buf[index].inUse = 0;
+	prev = fifo_mutex->ts_buf[index].prev;
+	next = fifo_mutex->ts_buf[index].next;
+
+	if ((prev == -1) && (next != -1))
+		fifo_mutex->buf_head = next;
+
+	if (index == fifo_mutex->buf_tail)
+		fifo_mutex->buf_tail = prev;
+
+	if (prev != -1)
+		fifo_mutex->ts_buf[prev].next = next;
+
+	if (next != -1)
+		fifo_mutex->ts_buf[next].prev = prev;
+}
+
+static int fifo_mutex_timedlock(fifo_mutex_t *fifo_mutex, struct timespec *ts)
+{
+	int ret = 0;
+	int ts_curr;
+	int idx = -1;
+
+	pthread_mutex_lock(&fifo_mutex->mutex);
+	ts_curr = fifo_mutex->ts_late++;
+	if (fifo_mutex->ts_late == MAX_TS)
+		fifo_mutex->ts_late = 0;
+
+	while (fifo_mutex->locked || !is_ts_ok(ts_curr, fifo_mutex)) {
+		if (idx == -1) {
+			idx = enqueue_ts(ts_curr, fifo_mutex);
+			if (idx < 0)
+				return -1;
+		}
+		pthread_cond_wait(&fifo_mutex->cond, &fifo_mutex->mutex);
+	}
+
+	if (idx != -1)
+		dequeue_ts(idx, fifo_mutex);
+	fifo_mutex->locked = 1;
+	pthread_mutex_unlock(&fifo_mutex->mutex);
+	return ret;
+}
+
+static void fifo_mutex_unlock(fifo_mutex_t *fifo_mutex)
+{
+	pthread_mutex_lock(&fifo_mutex->mutex);
+	fifo_mutex->locked = 0;
+	pthread_cond_broadcast(&fifo_mutex->cond);
+	pthread_mutex_unlock(&fifo_mutex->mutex);
+}
+#endif
+
 void semaphore_post(semaphore_t *semap, int mutex)
 {
 	if (mutex == API_MUTEX)
+#ifdef FIFO_MUTEX
+		fifo_mutex_unlock(&semap->api_lock);
+#else
 		pthread_mutex_unlock(&semap->api_lock);
+#endif
 	else if (mutex == REG_MUTEX)
 		pthread_mutex_unlock(&semap->reg_lock);
 }
@@ -1246,7 +1387,11 @@ unsigned char semaphore_wait(semaphore_t *semap, int mutex)
 	ts.tv_sec = time(NULL) + mutex_timeout;
 	ts.tv_nsec = 0;
 	if (mutex == API_MUTEX)
+#ifdef FIFO_MUTEX
+		ret = fifo_mutex_timedlock(&semap->api_lock, &ts);
+#else
 		ret = pthread_mutex_timedlock(&semap->api_lock, &ts);
+#endif
 	else if (mutex == REG_MUTEX)
 		ret = pthread_mutex_timedlock(&semap->reg_lock, &ts);
 	else
diff --git a/vpu/vpu_util.h b/vpu/vpu_util.h
index 0f4f599..d61e702 100644
--- a/vpu/vpu_util.h
+++ b/vpu/vpu_util.h
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
  *
- * Copyright (C) 2004-2013 Freescale Semiconductor, Inc.
+ * Copyright (C) 2004-2014 Freescale Semiconductor, Inc.
  */
 
 /* The following programs are the sole property of Freescale Semiconductor Inc.,
@@ -545,9 +545,40 @@ typedef struct CodecInst {
 	} CodecParam;
 } CodecInst;
 
+#ifdef BUILD_FOR_ANDROID
+#undef FIFO_MUTEX
+#endif
+
+#ifdef FIFO_MUTEX
+#define MAX_TS 128
+#define MAX_REORDER 10
+#define MAX_ITEM_NUM MAX_NUM_INSTANCE
+
+typedef struct ts_item {
+	int ts;
+	int inUse;
+	int next;
+	int prev;
+} ts_item_t;
+
+typedef struct fifo_mutex {
+	pthread_mutex_t mutex;
+	pthread_cond_t cond;
+	int locked;
+	int ts_late;
+	int buf_head;
+	int buf_tail;
+	ts_item_t ts_buf[MAX_ITEM_NUM];
+} fifo_mutex_t;
+#endif
+
 typedef struct {
 	int is_initialized;
+#ifdef FIFO_MUTEX
+	fifo_mutex_t api_lock;
+#else
 	pthread_mutex_t api_lock;
+#endif
 	pthread_mutex_t reg_lock;
 
 	/* VPU data for sharing */
-- 
1.8.0

