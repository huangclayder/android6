From 913ea0f52264ce212f03fc9dbaf611d43cebface Mon Sep 17 00:00:00 2001
From: Hongzhang Yang <Hongzhang.Yang@freescale.com>
Date: Tue, 4 Dec 2012 17:32:20 +0800
Subject: [PATCH 224/280] ENGR00232389 change VPU library source license
 agreements

VPU lib v5.4.10

change VPU library source license agreements from LGPL to FSL Confident
Proprietary to comply with our CNM agreement

delete sw_gbu.h and replace JPEG gbu functions with CnM's design

Signed-off-by: Hongzhang Yang <Hongzhang.Yang@freescale.com>
---
 vpu/sw_gbu.h    | 569 --------------------------------------------------------
 vpu/vpu_debug.h |  12 +-
 vpu/vpu_gdi.c   |  14 +-
 vpu/vpu_gdi.h   |  14 +-
 vpu/vpu_io.c    |  14 +-
 vpu/vpu_io.h    |  14 +-
 vpu/vpu_lib.c   |  15 +-
 vpu/vpu_lib.h   |  16 +-
 vpu/vpu_reg.h   |  14 +-
 vpu/vpu_util.c  | 142 +++++++++++---
 vpu/vpu_util.h  |  34 ++--
 11 files changed, 173 insertions(+), 685 deletions(-)
 delete mode 100644 vpu/sw_gbu.h

diff --git a/vpu/sw_gbu.h b/vpu/sw_gbu.h
deleted file mode 100644
index cb8ad80..0000000
--- a/vpu/sw_gbu.h
+++ /dev/null
@@ -1,569 +0,0 @@
-/*
- * copyright (c) 2004 Michael Niedermayer <michaelni@gmx.at>
- * Copyright (C) 2011-2012 Freescale Semiconductor, Inc.
- *
- * This file is part of FFmpeg.
- *
- * FFmpeg is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * FFmpeg is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with FFmpeg; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
- */
-
-/**
- * @file
- * bitstream reader API header.
- */
-
-#ifndef AVCODEC_GET_BITS_H
-#define AVCODEC_GET_BITS_H
-
-#include <stdlib.h>
-#include <stdint.h>
-
-#if defined(_MSC_VER)
-#	define inline _inline
-#endif
-
-#ifndef AV_RB32
-#   define AV_RB32(x)                           \
-    ((((const uint8_t*)(x))[0] << 24) |         \
-	(((const uint8_t*)(x))[1] << 16) |         \
-	(((const uint8_t*)(x))[2] <<  8) |         \
-((const uint8_t*)(x))[3])
-#endif
-
-#ifndef NEG_USR32
-#   define NEG_USR32(a,s) (((uint32_t)(a))>>(32-(s)))
-#endif
-
-#ifndef NEG_SSR32
-#   define NEG_SSR32(a,s) ((( int32_t)(a))>>(32-(s)))
-#endif
-
-#ifndef sign_extend
-static inline int sign_extend(int val, unsigned bits)
-{
-	return (val << ((8 * sizeof(int)) - bits)) >> ((8 * sizeof(int)) -
-						       bits);
-}
-#endif
-
-#define ALT_BITSTREAM_READER
-#define VLC_TYPE int16_t
-
-/* bit input */
-/* buffer, buffer_end and size_in_bits must be present and used by every reader */
-typedef struct {
-    const Uint8 *buffer, *buffer_end;
-    int index;
-    int size_in_bits;
-} GetBitContext;
-
-typedef struct VLC {
-	int bits;
-	 VLC_TYPE(*table)[2];	///< code, bits
-	int table_size, table_allocated;
-} VLC;
-
-typedef struct RL_VLC_ELEM {
-	int16_t level;
-	int8_t len;
-	uint8_t run;
-} RL_VLC_ELEM;
-
-/* Bitstream reader API docs:
-name
-    arbitrary name which is used as prefix for the internal variables
-
-gb
-    getbitcontext
-
-OPEN_READER(name, gb)
-    loads gb into local variables
-
-CLOSE_READER(name, gb)
-    stores local vars in gb
-
-UPDATE_CACHE(name, gb)
-    refills the internal cache from the bitstream
-    after this call at least MIN_CACHE_BITS will be available,
-
-GET_CACHE(name, gb)
-    will output the contents of the internal cache, next bit is MSB of 32 or 64 bit (FIXME 64bit)
-
-SHOW_UBITS(name, gb, num)
-    will return the next num bits
-
-SHOW_SBITS(name, gb, num)
-    will return the next num bits and do sign extension
-
-SKIP_BITS(name, gb, num)
-    will skip over the next num bits
-    note, this is equivalent to SKIP_CACHE; SKIP_COUNTER
-
-SKIP_CACHE(name, gb, num)
-    will remove the next num bits from the cache (note SKIP_COUNTER MUST be called before UPDATE_CACHE / CLOSE_READER)
-
-SKIP_COUNTER(name, gb, num)
-    will increment the internal bit counter (see SKIP_CACHE & SKIP_BITS)
-
-LAST_SKIP_CACHE(name, gb, num)
-    will remove the next num bits from the cache if it is needed for UPDATE_CACHE otherwise it will do nothing
-
-LAST_SKIP_BITS(name, gb, num)
-    is equivalent to LAST_SKIP_CACHE; SKIP_COUNTER
-
-for examples see get_bits, show_bits, skip_bits, get_vlc
-*/
-
-#   define MIN_CACHE_BITS 25
-
-#   define OPEN_READER(name, gb)\
-        unsigned int name##_index= (gb)->index;\
-        int name##_cache= 0;\
-
-#   define CLOSE_READER(name, gb)\
-        (gb)->index= name##_index;\
-
-# ifdef ALT_BITSTREAM_READER_LE
-#   define UPDATE_CACHE(name, gb)\
-        name##_cache= AV_RL32( ((const uint8_t *)(gb)->buffer)+(name##_index>>3) ) >> (name##_index&0x07);\
-
-#   define SKIP_CACHE(name, gb, num)\
-        name##_cache >>= (num);
-# else
-#   define UPDATE_CACHE(name, gb)\
-        name##_cache= AV_RB32( ((const uint8_t *)(gb)->buffer)+(name##_index>>3) ) << (name##_index&0x07);\
-
-#   define SKIP_CACHE(name, gb, num)\
-        name##_cache <<= (num);
-# endif
-
-// FIXME name?
-#   define SKIP_COUNTER(name, gb, num)\
-        name##_index += (num);\
-
-#   define SKIP_BITS(name, gb, num)\
-        {\
-            SKIP_CACHE(name, gb, num)\
-            SKIP_COUNTER(name, gb, num)\
-        }\
-
-#   define LAST_SKIP_BITS(name, gb, num) SKIP_COUNTER(name, gb, num)
-#   define LAST_SKIP_CACHE(name, gb, num) ;
-
-# ifdef ALT_BITSTREAM_READER_LE
-#   define SHOW_UBITS(name, gb, num)\
-        zero_extend(name##_cache, num)
-
-#   define SHOW_SBITS(name, gb, num)\
-        sign_extend(name##_cache, num)
-# else
-#   define SHOW_UBITS(name, gb, num)\
-        NEG_USR32(name##_cache, num)
-
-#   define SHOW_SBITS(name, gb, num)\
-        NEG_SSR32(name##_cache, num)
-# endif
-
-#   define GET_CACHE(name, gb)\
-        ((uint32_t)name##_cache)
-
-static inline int get_bits_count(const GetBitContext * s)
-{
-
-	return s->index;
-}
-
-static inline void skip_bits_long(GetBitContext * s, int n)
-{
-	s->index += n;
-}
-
-/**
- * read mpeg1 dc style vlc (sign bit + mantisse with no MSB).
- * if MSB not set it is negative
- * @param n length in bits
- * @author BERO
- */
-static inline int get_xbits(GetBitContext * s, int n)
-{
-	register int sign;
-	register int32_t cache;
-	OPEN_READER(re, s)
-	UPDATE_CACHE(re, s)
-	cache = GET_CACHE(re, s);
-	sign = (~cache) >> 31;
-	LAST_SKIP_BITS(re, s, n)
-	CLOSE_READER(re, s)
-	return (NEG_USR32(sign ^ cache, n) ^ sign) - sign;
-}
-
-static inline int get_sbits(GetBitContext * s, int n)
-{
-	register int tmp;
-	OPEN_READER(re, s)
-	UPDATE_CACHE(re, s)
-	tmp = SHOW_SBITS(re, s, n);
-	LAST_SKIP_BITS(re, s, n)
-	CLOSE_READER(re, s)
-	return tmp;
-}
-
-/**
- * reads 1-17 bits.
- * Note, the alt bitstream reader can read up to 25 bits, but the libmpeg2 reader can't
- */
-static inline unsigned int get_bits(GetBitContext * s, int n)
-{
-	register int tmp;
-	OPEN_READER(re, s)
-	if (s->index > s->size_in_bits)
-		return -1;
-
-	UPDATE_CACHE(re, s)
-	tmp = SHOW_UBITS(re, s, n);
-	LAST_SKIP_BITS(re, s, n)
-	CLOSE_READER(re, s)
-	return tmp;
-}
-
-/**
- * shows 1-17 bits.
- * Note, the alt bitstream reader can read up to 25 bits, but the libmpeg2 reader can't
- */
-static inline unsigned int show_bits(GetBitContext * s, int n)
-{
-	register int tmp;
-	OPEN_READER(re, s)
-	UPDATE_CACHE(re, s)
-	tmp = SHOW_UBITS(re, s, n);
-	return tmp;
-}
-
-static inline void skip_bits(GetBitContext * s, int n)
-{
-	/* Note gcc seems to optimize this to s->index+=n for the ALT_READER :)) */
-	OPEN_READER(re, s)
-	UPDATE_CACHE(re, s)
-	LAST_SKIP_BITS(re, s, n)
-	CLOSE_READER(re, s)
-}
-
-static inline unsigned int get_bits1(GetBitContext * s)
-{
-#ifdef ALT_BITSTREAM_READER
-	unsigned int index = s->index;
-	uint8_t result = s->buffer[index >> 3];
-#ifdef ALT_BITSTREAM_READER_LE
-	result >>= (index & 0x07);
-	result &= 1;
-#else
-	result <<= (index & 0x07);
-	result >>= 8 - 1;
-#endif
-	index++;
-	s->index = index;
-
-	return result;
-#else
-	return get_bits(s, 1);
-#endif
-}
-
-static inline unsigned int show_bits1(GetBitContext * s)
-{
-	return show_bits(s, 1);
-}
-
-static inline void skip_bits1(GetBitContext * s)
-{
-	skip_bits(s, 1);
-}
-
-/**
- * reads 0-32 bits.
- */
-static inline unsigned int get_bits_long(GetBitContext * s, int n)
-{
-	if (n <= MIN_CACHE_BITS)
-		return get_bits(s, n);
-	else {
-#ifdef ALT_BITSTREAM_READER_LE
-		int ret = get_bits(s, 16);
-		return ret | (get_bits(s, n - 16) << 16);
-#else
-		int ret = get_bits(s, 16) << (n - 16);
-		return ret | get_bits(s, n - 16);
-#endif
-	}
-}
-
-/**
- * reads 0-32 bits as a signed integer.
- */
-static inline int get_sbits_long(GetBitContext * s, int n)
-{
-	return sign_extend(get_bits_long(s, n), n);
-}
-
-/**
- * shows 0-32 bits.
- */
-static inline unsigned int show_bits_long(GetBitContext * s, int n)
-{
-	if (n <= MIN_CACHE_BITS)
-		return show_bits(s, n);
-	else {
-		GetBitContext gb = *s;
-		return get_bits_long(&gb, n);
-	}
-}
-
-static inline int check_marker(GetBitContext * s, const char *msg)
-{
-	return get_bits1(s);
-}
-
-/**
- * init GetBitContext.
- * @param buffer bitstream buffer, must be FF_INPUT_BUFFER_PADDING_SIZE bytes larger then the actual read bits
- * because some optimized bitstream readers read 32 or 64 bit at once and could read over the end
- * @param bit_size the size of the buffer in bits
- *
- * While GetBitContext stores the buffer size, for performance reasons you are
- * responsible for checking for the buffer end yourself (take advantage of the padding)!
- */
-static inline void init_get_bits(GetBitContext * s,
-				 const uint8_t * buffer, int bit_size)
-{
-	int buffer_size = (bit_size + 7) >> 3;
-	if (buffer_size < 0 || bit_size < 0) {
-		buffer_size = bit_size = 0;
-		buffer = NULL;
-	}
-
-	s->buffer = buffer;
-	s->size_in_bits = bit_size;
-	s->buffer_end = buffer + buffer_size;
-#ifdef ALT_BITSTREAM_READER
-	s->index = 0;
-#endif
-}
-
-static inline void align_get_bits(GetBitContext * s)
-{
-	int n = (-get_bits_count(s)) & 7;
-	if (n)
-		skip_bits(s, n);
-}
-
-#define init_vlc(vlc, nb_bits, nb_codes,\
-                 bits, bits_wrap, bits_size,\
-                 codes, codes_wrap, codes_size,\
-                 flags)\
-        init_vlc_sparse(vlc, nb_bits, nb_codes,\
-                 bits, bits_wrap, bits_size,\
-                 codes, codes_wrap, codes_size,\
-                 NULL, 0, 0, flags)
-
-int init_vlc_sparse(VLC * vlc, int nb_bits, int nb_codes,
-		    const void *bits, int bits_wrap, int bits_size,
-		    const void *codes, int codes_wrap, int codes_size,
-		    const void *symbols, int symbols_wrap, int symbols_size,
-		    int flags);
-#define INIT_VLC_LE         2
-#define INIT_VLC_USE_NEW_STATIC 4
-void free_vlc(VLC * vlc);
-
-#define INIT_VLC_STATIC(vlc, bits, a,b,c,d,e,f,g, static_size)\
-{\
-    static VLC_TYPE table[static_size][2];\
-    (vlc)->table= table;\
-    (vlc)->table_allocated= static_size;\
-    init_vlc(vlc, bits, a,b,c,d,e,f,g, INIT_VLC_USE_NEW_STATIC);\
-}
-
-/**
- *
- * If the vlc code is invalid and max_depth=1, then no bits will be removed.
- * If the vlc code is invalid and max_depth>1, then the number of bits removed
- * is undefined.
- */
-#define GET_VLC(code, name, gb, table, bits, max_depth)\
-{\
-    int n, nb_bits;\
-    unsigned int index;\
-\
-    index= SHOW_UBITS(name, gb, bits);\
-    code = table[index][0];\
-    n    = table[index][1];\
-\
-    if(max_depth > 1 && n < 0){\
-        LAST_SKIP_BITS(name, gb, bits)\
-        UPDATE_CACHE(name, gb)\
-\
-        nb_bits = -n;\
-\
-        index= SHOW_UBITS(name, gb, nb_bits) + code;\
-        code = table[index][0];\
-        n    = table[index][1];\
-        if(max_depth > 2 && n < 0){\
-            LAST_SKIP_BITS(name, gb, nb_bits)\
-            UPDATE_CACHE(name, gb)\
-\
-            nb_bits = -n;\
-\
-            index= SHOW_UBITS(name, gb, nb_bits) + code;\
-            code = table[index][0];\
-            n    = table[index][1];\
-        }\
-    }\
-    SKIP_BITS(name, gb, n)\
-}
-
-#define GET_RL_VLC(level, run, name, gb, table, bits, max_depth, need_update)\
-{\
-    int n, nb_bits;\
-    unsigned int index;\
-\
-    index= SHOW_UBITS(name, gb, bits);\
-    level = table[index].level;\
-    n     = table[index].len;\
-\
-    if(max_depth > 1 && n < 0){\
-        SKIP_BITS(name, gb, bits)\
-        if(need_update){\
-            UPDATE_CACHE(name, gb)\
-        }\
-\
-        nb_bits = -n;\
-\
-        index= SHOW_UBITS(name, gb, nb_bits) + level;\
-        level = table[index].level;\
-        n     = table[index].len;\
-    }\
-    run= table[index].run;\
-    SKIP_BITS(name, gb, n)\
-}
-
-/**
- * parses a vlc code, faster then get_vlc()
- * @param bits is the number of bits which will be read at once, must be
- *             identical to nb_bits in init_vlc()
- * @param max_depth is the number of times bits bits must be read to completely
- *                  read the longest vlc code
- *                  = (max_vlc_length + bits - 1) / bits
- */
-static inline int get_vlc2(GetBitContext * s, VLC_TYPE(*table)[2],
-			   int bits, int max_depth)
-{
-	int code;
-
-	OPEN_READER(re, s)
-	    UPDATE_CACHE(re, s)
-
-	    GET_VLC(code, re, s, table, bits, max_depth)
-
-	    CLOSE_READER(re, s)
-	    return code;
-}
-
-//#define TRACE
-
-#ifdef TRACE
-static inline void print_bin(int bits, int n)
-{
-	int i;
-
-	for (i = n - 1; i >= 0; i--) {
-		printf("%d", (bits >> i) & 1);
-	}
-	for (i = n; i < 24; i++)
-		printf(" ");
-}
-
-static inline int get_bits_trace(GetBitContext * s, int n, char *file,
-				 const char *func, int line)
-{
-	int r = get_bits(s, n);
-
-	print_bin(r, n);
-	printf("%5d %2d %3d bit @%5d in %s %s:%d\n", r, n, r,
-	       get_bits_count(s) - n, file, func, line);
-	return r;
-}
-
-static inline int get_vlc_trace(GetBitContext * s, VLC_TYPE(*table)[2],
-				int bits, int max_depth, char *file,
-				const char *func, int line)
-{
-	int show = show_bits(s, 24);
-	int pos = get_bits_count(s);
-	int r = get_vlc2(s, table, bits, max_depth);
-	int len = get_bits_count(s) - pos;
-	int bits2 = show >> (24 - len);
-
-	print_bin(bits2, len);
-
-	printf("%5d %2d %3d vlc @%5d in %s %s:%d\n", bits2, len, r, pos, file,
-	       func, line);
-	return r;
-}
-
-static inline int get_xbits_trace(GetBitContext * s, int n, char *file,
-				  const char *func, int line)
-{
-	int show = show_bits(s, n);
-	int r = get_xbits(s, n);
-
-	print_bin(show, n);
-	printf("%5d %2d %3d xbt @%5d in %s %s:%d\n", show, n, r,
-	       get_bits_count(s) - n, file, func, line);
-	return r;
-}
-
-#define __PRETTY_FUNCTION__ ""
-
-#define get_bits(s, n)  get_bits_trace(s, n, __FILE__, __PRETTY_FUNCTION__, __LINE__)
-#define get_bits1(s)    get_bits_trace(s, 1, __FILE__, __PRETTY_FUNCTION__, __LINE__)
-#define get_xbits(s, n) get_xbits_trace(s, n, __FILE__, __PRETTY_FUNCTION__, __LINE__)
-#define get_vlc(s, vlc)            get_vlc_trace(s, (vlc)->table, (vlc)->bits, 3, __FILE__, __PRETTY_FUNCTION__, __LINE__)
-#define get_vlc2(s, tab, bits, max) get_vlc_trace(s, tab, bits, max, __FILE__, __PRETTY_FUNCTION__, __LINE__)
-#endif
-
-static inline int decode012(GetBitContext * gb)
-{
-	int n;
-	n = get_bits1(gb);
-	if (n == 0)
-		return 0;
-	else
-		return get_bits1(gb) + 1;
-}
-
-static inline int decode210(GetBitContext * gb)
-{
-	if (get_bits1(gb))
-		return 0;
-	else
-		return 2 - get_bits1(gb);
-}
-
-static inline int get_bits_left(GetBitContext * gb)
-{
-
-	return gb->size_in_bits - get_bits_count(gb);
-}
-
-#endif				/* AVCODEC_GET_BITS_H */
diff --git a/vpu/vpu_debug.h b/vpu/vpu_debug.h
index 2721755..0465370 100644
--- a/vpu/vpu_debug.h
+++ b/vpu/vpu_debug.h
@@ -1,16 +1,10 @@
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2004-2012 Freescale Semiconductor, Inc.
  *
  */
 
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
- *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
- */
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
 
 /*!
  * @file vpu_debug.h
diff --git a/vpu/vpu_gdi.c b/vpu/vpu_gdi.c
index 9196fcb..51eb17d 100644
--- a/vpu/vpu_gdi.c
+++ b/vpu/vpu_gdi.c
@@ -1,18 +1,12 @@
 /*
- * Copyright (C) 2011-2012 Freescale Semiconductor, Inc.
- *
  * Copyright (c) 2011, Chips & Media.  All rights reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
  *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
+ * Copyright (C) 2011-2012 Freescale Semiconductor, Inc.
  */
 
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
diff --git a/vpu/vpu_gdi.h b/vpu/vpu_gdi.h
index b3fc0c2..5f48fdb 100644
--- a/vpu/vpu_gdi.h
+++ b/vpu/vpu_gdi.h
@@ -1,18 +1,12 @@
 /*
- * Copyright (C) 2011 Freescale Semiconductor, Inc.
- *
  * Copyright (c) 2011, Chips & Media.  All rights reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
  *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
+ * Copyright (C) 2011-2012 Freescale Semiconductor, Inc.
  */
 
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
+
 #ifndef GDI_H_INCLUDED
 #define GDI_H_INCLUDED
 
diff --git a/vpu/vpu_io.c b/vpu/vpu_io.c
index 6c23ee4..c59056e 100644
--- a/vpu/vpu_io.c
+++ b/vpu/vpu_io.c
@@ -1,18 +1,12 @@
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc.
- *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
  *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
+ * Copyright (C) 2004-2012 Freescale Semiconductor, Inc.
  */
 
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
+
 /*!
  * @file vpu_io.c
  *
diff --git a/vpu/vpu_io.h b/vpu/vpu_io.h
index e04507d..a4b611c 100644
--- a/vpu/vpu_io.h
+++ b/vpu/vpu_io.h
@@ -1,18 +1,12 @@
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc.
- *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
  *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
+ * Copyright (C) 2004-2012 Freescale Semiconductor, Inc.
  */
 
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
+
 /*!
  * @file vpu_io.h
  *
diff --git a/vpu/vpu_lib.c b/vpu/vpu_lib.c
index 472cfff..3fbb613 100644
--- a/vpu/vpu_lib.c
+++ b/vpu/vpu_lib.c
@@ -1,18 +1,12 @@
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc.
- *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
  *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
+ * Copyright (C) 2004-2012 Freescale Semiconductor, Inc.
  */
 
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
+
 /*!
  * @file vpu_lib.c
  *
@@ -3482,6 +3476,7 @@ RetCode vpu_DecUpdateBitstreamBuffer(DecHandle handle, Uint32 size)
 	Uint32 val = 0;
 
 	ENTER_FUNC();
+	dprintf(4, "Update bitstream buffer size %d\n", size);
 
 	ret = CheckDecInstanceValidity(handle);
 	if (ret != RETCODE_SUCCESS)
diff --git a/vpu/vpu_lib.h b/vpu/vpu_lib.h
index 49c0aa6..d6781ac 100644
--- a/vpu/vpu_lib.h
+++ b/vpu/vpu_lib.h
@@ -1,18 +1,12 @@
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc.
- *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
  *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
+ * Copyright (C) 2004-2012 Freescale Semiconductor, Inc.
  */
 
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
+
 /*!
  * @file vpu_lib.h
  *
@@ -667,7 +661,7 @@ typedef struct vpu_versioninfo {
  * v4.2.2 [2008.09.03] support encoder on MX51
  * v4.0.2 [2008.08.21] add the IOClkGateSet() for power saving.
  */
-#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(5, 4, 9)
+#define VPU_LIB_VERSION_CODE	VPU_LIB_VERSION(5, 4, 10)
 
 extern unsigned int system_rev;
 
diff --git a/vpu/vpu_reg.h b/vpu/vpu_reg.h
index 065b34c..2c8ca6f 100644
--- a/vpu/vpu_reg.h
+++ b/vpu/vpu_reg.h
@@ -1,18 +1,12 @@
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc.
- *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
  *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
+ * Copyright (C) 2004-2012 Freescale Semiconductor, Inc.
  */
 
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
+
 /*!
  * @file vpu_reg.h
  *
diff --git a/vpu/vpu_util.c b/vpu/vpu_util.c
index 061eeeb..fbd58a9 100644
--- a/vpu/vpu_util.c
+++ b/vpu/vpu_util.c
@@ -1,17 +1,11 @@
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc.
+ * Copyright (c) 2006, Chips & Media.  All rights reserved.
  *
- * Copyright (c) 2006, Chips & Media. All rights reserved.
+ * Copyright (C) 2004-2012 Freescale Semiconductor, Inc.
  */
 
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
- *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
- */
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -1981,7 +1975,7 @@ int decode_dri_header(JpgDecInfo *jpg)
 
 int decode_dqt_header(JpgDecInfo *jpg)
 {
-	int Pq, Tq, i;
+	int Pq, Tq, i, tmp;
 
 	if (get_bits_left(&jpg->gbc) < 16 + 24)
 		return 0;
@@ -1992,8 +1986,10 @@ int decode_dqt_header(JpgDecInfo *jpg)
 		if (get_bits_left(&jpg->gbc) < (4 + 4 + 8 * 64 + 24))
 			return 0;
 
-		Pq = get_bits(&jpg->gbc, 4);
-		Tq = get_bits(&jpg->gbc, 4);
+		tmp = get_bits(&jpg->gbc, 8);
+		Pq = (tmp>>4) & 0xf;
+		Tq = tmp&0xf;
+
 		if (Tq > 3) {
 			info_msg("Tq is more than 3\n");
 			jpg->header_status = 1;
@@ -2014,7 +2010,7 @@ int decode_dqt_header(JpgDecInfo *jpg)
 
 int decode_dth_header(JpgDecInfo *jpg)
 {
-	int Tc, Th, ThTc, bitCnt, i;
+	int Tc, Th, ThTc, bitCnt, i, tmp;
 
 	if (get_bits_left(&jpg->gbc) < 16 + 24)
 		return 0;
@@ -2025,8 +2021,10 @@ int decode_dth_header(JpgDecInfo *jpg)
 		if (get_bits_left(&jpg->gbc) < 8 + 8 * 16 + 24)
 			return 0;
 
-		Tc = get_bits(&jpg->gbc, 4);
-		Th = get_bits(&jpg->gbc, 4);
+		tmp = get_bits(&jpg->gbc, 8);
+		Tc = (tmp>>4) & 0xf;
+		Th = tmp&0xf;
+
 		ThTc = ((Th & 1) << 1) | (Tc & 1);
 		if (ThTc > 3) {
 			info_msg("ThTc is more than 3\n");
@@ -2062,7 +2060,7 @@ int decode_dth_header(JpgDecInfo *jpg)
 int decode_sof_header(JpgDecInfo *jpg)
 {
 	int samplePrecision, sampleFactor, i, Tqi, compID;
-	int hSampFact[3], vSampFact[3], picX, picY, numComp;
+	int hSampFact[3], vSampFact[3], picX, picY, numComp, tmp;
 
 	if (get_bits_left(&jpg->gbc) < 16 + 8 + 16 + 16 + 8 + 24)
 		return 0;
@@ -2102,8 +2100,10 @@ int decode_sof_header(JpgDecInfo *jpg)
 
 	for (i = 0; i < numComp; i++) {
 		compID = get_bits(&jpg->gbc, 8);
-		hSampFact[i] = get_bits(&jpg->gbc, 4);
-		vSampFact[i] = get_bits(&jpg->gbc, 4);
+		tmp = get_bits(&jpg->gbc, 8);
+		hSampFact[i] = (tmp>>4) & 0xf;
+		vSampFact[i] = tmp&0xf;
+
 		Tqi = get_bits(&jpg->gbc, 8);
 
 		jpg->cInfoTab[i][0] = compID;
@@ -2152,7 +2152,7 @@ int decode_sos_header(JpgDecInfo *jpg)
 {
 	int i, j, len, numComp, compID;
 	int ss, se, ah, al, ecsPtr;
-	int dcHufTblIdx[3], acHufTblIdx[3];
+	int dcHufTblIdx[3], acHufTblIdx[3], tmp;
 
 	if (get_bits_left(&jpg->gbc) < 8 + 24)
 		return 0;
@@ -2190,8 +2190,9 @@ int decode_sos_header(JpgDecInfo *jpg)
 
 	for (i = 0; i < numComp; i++) {
 		compID = get_bits(&jpg->gbc, 8);
-		dcHufTblIdx[i] = get_bits(&jpg->gbc, 4);
-		acHufTblIdx[i] = get_bits(&jpg->gbc, 4);
+		tmp = get_bits(&jpg->gbc, 8);
+		dcHufTblIdx[i] = (tmp>>4) & 0xf;
+		acHufTblIdx[i] = tmp&0xf;
 
 		for (j = 0; j < numComp; j++) {
 			if (compID == jpg->cInfoTab[j][0]) {
@@ -2206,8 +2207,9 @@ int decode_sos_header(JpgDecInfo *jpg)
 
 	ss = get_bits(&jpg->gbc, 8);
 	se = get_bits(&jpg->gbc, 8);
-	ah = get_bits(&jpg->gbc, 4);
-	al = get_bits(&jpg->gbc, 4);
+	tmp = get_bits(&jpg->gbc, 8);
+	ah = (i>>4) & 0xf;
+	al = tmp&0xf;
 
 	if ((ss != 0) || (se != 0x3F) || (ah != 0) || (al != 0)) {
 		jpg->ecsPtr = 0;
@@ -2256,6 +2258,98 @@ void genDecHuffTab(JpgDecInfo *jpg, int tabNum)
 	}
 }
 
+int JpuGbuInit(vpu_getbit_context_t *ctx, Uint8 *buffer, int size)
+{
+
+	ctx->buffer = buffer;
+	ctx->index = 0;
+	ctx->size = size/8;
+
+	return 1;
+}
+
+int JpuGbuGetUsedBitCount(vpu_getbit_context_t *ctx)
+{
+	return ctx->index*8;
+}
+
+int JpuGbuGetLeftBitCount(vpu_getbit_context_t *ctx)
+{
+	return (ctx->size*8) - JpuGbuGetUsedBitCount(ctx);
+}
+
+unsigned int JpuGbuGetBit(vpu_getbit_context_t *ctx, int bit_num)
+{
+	Uint8 *p;
+	unsigned int b = 0x0;
+
+	if (bit_num > JpuGbuGetLeftBitCount(ctx))
+		return -1;
+
+	p = ctx->buffer + ctx->index;
+
+	if (bit_num == 8)
+	{
+		b = *p;
+		ctx->index++;
+	}
+	else if(bit_num == 16)
+	{
+		b = *p++<<8;
+		b |= *p++;
+		ctx->index += 2;
+	}
+	else if(bit_num == 32)
+	{
+		b = *p++<<24;
+		b |= (*p++<<16);
+		b |= (*p++<<8);
+		b |= (*p++<<0);
+		ctx->index += 4;
+	}
+	else
+	{
+		err_msg("Get bit_num is not 8,16,32\n");
+	}
+
+
+	return b;
+}
+
+unsigned int JpuGbuShowBit(vpu_getbit_context_t *ctx, int bit_num)
+{
+	Uint8 *p;
+	unsigned int b = 0x0;
+
+	if (bit_num > JpuGbuGetLeftBitCount(ctx))
+		return -1;
+
+	p = ctx->buffer + ctx->index;
+
+	if (bit_num == 8)
+	{
+		b = *p;
+	}
+	else if(bit_num == 16)
+	{
+		b = *p++<<8;
+		b |= *p++;
+	}
+	else if(bit_num == 32)
+	{
+		b = *p++<<24;
+		b |= (*p++<<16);
+		b |= (*p++<<8);
+		b |= (*p++<<0);
+	}
+	else
+	{
+		err_msg("Show bit_num is not 8,16,32\n");
+	}
+
+	return b;
+}
+
 // thumbnail: User should make sure it's one picture and fits in the bs buffer. SW doesn't handle wrap around case.
 static Uint32 tGetBits(DecInfo *pDecInfo, int endian, int byteCnt)
 {
diff --git a/vpu/vpu_util.h b/vpu/vpu_util.h
index 13171b6..7e2c41c 100644
--- a/vpu/vpu_util.h
+++ b/vpu/vpu_util.h
@@ -1,18 +1,12 @@
 /*
- * Copyright 2004-2012 Freescale Semiconductor, Inc.
- *
  * Copyright (c) 2006, Chips & Media.  All rights reserved.
- */
-
-/*
- * The code contained herein is licensed under the GNU Lesser General
- * Public License.  You may obtain a copy of the GNU Lesser General
- * Public License Version 2.1 or later at the following locations:
  *
- * http://www.opensource.org/licenses/lgpl-license.html
- * http://www.gnu.org/copyleft/lgpl.html
+ * Copyright (C) 2004-2012 Freescale Semiconductor, Inc.
  */
 
+/* The following programs are the sole property of Freescale Semiconductor Inc.,
+ * and contain its proprietary and confidential information. */
+
 #ifndef _VPU_UTIL_H_
 #define _VPU_UTIL_H_
 
@@ -24,7 +18,6 @@
 #include "vpu_lib.h"
 #include "vpu_io.h"
 #include "vpu_gdi.h"
-#include "sw_gbu.h"
 
 #define MAX_FW_BINARY_LEN		200 * 1024
 
@@ -221,6 +214,18 @@ enum {
 };
 
 typedef struct {
+	Uint8 *buffer;
+	int index;
+	int size;
+} vpu_getbit_context_t;
+
+#define init_get_bits(CTX, BUFFER, SIZE) JpuGbuInit(CTX, BUFFER, SIZE)
+#define show_bits(CTX, NUM) JpuGbuShowBit(CTX, NUM)
+#define get_bits(CTX, NUM) JpuGbuGetBit(CTX, NUM)
+#define get_bits_left(CTX) JpuGbuGetLeftBitCount(CTX)
+#define get_bits_count(CTX) JpuGbuGetUsedBitCount(CTX)
+
+typedef struct {
 	int			PicX;
 	int			PicY;
 	int			BitPerSample[3];
@@ -430,7 +435,7 @@ typedef struct {
 	int seqInited;
 
 	Uint8 *pVirtBitStream;
-	GetBitContext gbc;
+	vpu_getbit_context_t gbc;
 	int lineBufferMode;
 	Uint8 *pVirtJpgChunkBase;
 	int chunkSize;
@@ -616,6 +621,11 @@ void JpgDecGramSetup(DecInfo *pDecInfo);
 RetCode JpgDecHuffTabSetUp(DecInfo *pDecInfo);
 RetCode JpgDecQMatTabSetUp(DecInfo *pDecInfo);
 int JpegDecodeHeader(DecInfo *pDecInfo);
+int JpuGbuInit(vpu_getbit_context_t *ctx, Uint8 *buffer, int size);
+int JpuGbuGetUsedBitCount(vpu_getbit_context_t *ctx);
+int JpuGbuGetLeftBitCount(vpu_getbit_context_t *ctx);
+unsigned int JpuGbuGetBit(vpu_getbit_context_t *ctx, int bit_num);
+unsigned int JpuGbuShowBit(vpu_getbit_context_t *ctx, int bit_num);
 
 #define swab32(x) \
 	((Uint32)( \
-- 
1.8.0

