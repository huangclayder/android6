From deb6e5029ae7a338e86c7398ed7f805b9fcd9836 Mon Sep 17 00:00:00 2001
From: b02247 <b02247@freescale.com>
Date: Wed, 21 Nov 2012 17:32:52 +0800
Subject: [PATCH 08/13] ENGR00234494 update the pcm_get_near_rate to
 pcm_get_near_param

This function will support for most HW_PARAM

Change-Id: Ie806c8abe70cb8cf86fea839441d335483c5829f
Signed-off-by: b02247 <b02247@freescale.com>
---
 include/tinyalsa/asoundlib.h | 25 +++++++++++++++++++++++--
 pcm.c                        | 24 ++++++++++++------------
 2 files changed, 35 insertions(+), 14 deletions(-)

diff --git a/include/tinyalsa/asoundlib.h b/include/tinyalsa/asoundlib.h
index 5cd4b39..d2b3989 100644
--- a/include/tinyalsa/asoundlib.h
+++ b/include/tinyalsa/asoundlib.h
@@ -69,6 +69,27 @@ struct pcm;
 #define	PCM_STATE_SUSPENDED	7
 #define	PCM_STATE_DISCONNECTED	8
 
+#define PCM_HW_PARAM_ACCESS 0
+#define PCM_HW_PARAM_FORMAT 1
+#define PCM_HW_PARAM_SUBFORMAT 2
+#define PCM_HW_PARAM_FIRST_MASK PCM_HW_PARAM_ACCESS
+#define PCM_HW_PARAM_LAST_MASK PCM_HW_PARAM_SUBFORMAT
+#define PCM_HW_PARAM_SAMPLE_BITS 8
+#define PCM_HW_PARAM_FRAME_BITS 9
+#define PCM_HW_PARAM_CHANNELS 10
+#define PCM_HW_PARAM_RATE 11
+#define PCM_HW_PARAM_PERIOD_TIME 12
+#define PCM_HW_PARAM_PERIOD_SIZE 13
+#define PCM_HW_PARAM_PERIOD_BYTES 14
+#define PCM_HW_PARAM_PERIODS 15
+#define PCM_HW_PARAM_BUFFER_TIME 16
+#define PCM_HW_PARAM_BUFFER_SIZE 17
+#define PCM_HW_PARAM_BUFFER_BYTES 18
+#define PCM_HW_PARAM_TICK_TIME 19
+#define PCM_HW_PARAM_FIRST_INTERVAL PCM_HW_PARAM_SAMPLE_BITS
+#define PCM_HW_PARAM_LAST_INTERVAL PCM_HW_PARAM_TICK_TIME
+#define PCM_HW_PARAMS_NORESAMPLE (1<<0)
+
 /* Bit formats */
 enum pcm_format {
     PCM_FORMAT_INVALID = -1,
@@ -258,8 +279,8 @@ int pcm_set_avail_min(struct pcm *pcm, int avail_min);
 int pcm_drain(struct pcm *pcm);
 int pcm_state(struct pcm *pcm);
 int pcm_prepare(struct pcm *pcm);
-int pcm_get_near_rate(unsigned int card, unsigned int device,
-                     unsigned int flags, int * rate);
+int pcm_get_near_param(unsigned int card, unsigned int device,
+                     unsigned int flags, int type, int * rate);
 int pcm_get_time_of_status(struct pcm *pcm);
 int pcm_get_time_of_xrun(struct pcm *pcm);
 /*
diff --git a/pcm.c b/pcm.c
index dbb412e..7a63463 100644
--- a/pcm.c
+++ b/pcm.c
@@ -1374,15 +1374,15 @@ int pcm_prepare(struct pcm *pcm) {
     return 0;
 }
 
-int pcm_get_near_rate(unsigned int card, unsigned int device,
-                     unsigned int flags, int *rate)
+int pcm_get_near_param(unsigned int card, unsigned int device,
+                     unsigned int flags, int type, int *data)
 {
     struct pcm *pcm;
     struct snd_pcm_hw_params params;
     char fn[256];
     int ret = 0;
     int min = 0, max = 0;
-    int request_rate = *rate;
+    int request_data = *data;
 
     pcm = calloc(1, sizeof(struct pcm));
     if (!pcm)
@@ -1400,27 +1400,27 @@ int pcm_get_near_rate(unsigned int card, unsigned int device,
     }
 
     param_init(&params);
-    param_set_min(&params, SNDRV_PCM_HW_PARAM_RATE, request_rate);
-    param_set_int_rmask(&params, SNDRV_PCM_HW_PARAM_RATE);
+    param_set_min(&params, type, request_data);
+    param_set_int_rmask(&params, type);
 
     if (ioctl(pcm->fd, SNDRV_PCM_IOCTL_HW_REFINE, &params)) {
         oops(pcm, errno, "cannot set hw params rate min");
     } else
-        min = param_get_min(&params, SNDRV_PCM_HW_PARAM_RATE);
+        min = param_get_min(&params, type);
 
     param_init(&params);
-    param_set_max(&params, SNDRV_PCM_HW_PARAM_RATE, request_rate);
-    param_set_int_rmask(&params, SNDRV_PCM_HW_PARAM_RATE);
+    param_set_max(&params, type, request_data);
+    param_set_int_rmask(&params, type);
 
     if (ioctl(pcm->fd, SNDRV_PCM_IOCTL_HW_REFINE, &params)) {
         oops(pcm, errno, "cannot set hw params rate max");
     }
     else
-        max = param_get_max(&params, SNDRV_PCM_HW_PARAM_RATE);
+        max = param_get_max(&params, type);
 
-    if(min > 0)       *rate = min;
-    else if(max > 0)  *rate = max;
-    else              *rate = 0;
+    if(min > 0)       *data = min;
+    else if(max > 0)  *data = max;
+    else              *data = 0;
 
 fail_close:
     close(pcm->fd);
-- 
1.8.0

