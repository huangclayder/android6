From a3b9d03e1abbcce75cafa4d7088a221fcfa936e2 Mon Sep 17 00:00:00 2001
From: b02247 <b02247@freescale.com>
Date: Wed, 15 Aug 2012 16:33:08 +0800
Subject: [PATCH 06/13] ENGR00219871 add api for getting the time that stream
 in xrun status

Add api for getting the time that stream in xrun status

Signed-off-by: b02247 <b02247@freescale.com>
---
 include/tinyalsa/asoundlib.h |  2 ++
 pcm.c                        | 27 +++++++++++++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/include/tinyalsa/asoundlib.h b/include/tinyalsa/asoundlib.h
index f4b6c80..5cd4b39 100644
--- a/include/tinyalsa/asoundlib.h
+++ b/include/tinyalsa/asoundlib.h
@@ -260,6 +260,8 @@ int pcm_state(struct pcm *pcm);
 int pcm_prepare(struct pcm *pcm);
 int pcm_get_near_rate(unsigned int card, unsigned int device,
                      unsigned int flags, int * rate);
+int pcm_get_time_of_status(struct pcm *pcm);
+int pcm_get_time_of_xrun(struct pcm *pcm);
 /*
  * MIXER API
  */
diff --git a/pcm.c b/pcm.c
index ffdfa99..dbb412e 100644
--- a/pcm.c
+++ b/pcm.c
@@ -283,6 +283,7 @@ struct pcm {
     void *mmap_buffer;
     unsigned int noirq_frames_per_msec;
     int wait_for_avail_min;
+    int time_of_xrun;
 };
 
 unsigned int pcm_get_buffer_size(struct pcm *pcm)
@@ -295,6 +296,11 @@ const char* pcm_get_error(struct pcm *pcm)
     return pcm->error;
 }
 
+int pcm_get_time_of_xrun(struct pcm *pcm)
+{
+    return pcm->time_of_xrun;
+}
+
 static int oops(struct pcm *pcm, int e, const char *fmt, ...)
 {
     va_list ap;
@@ -534,6 +540,7 @@ int pcm_write(struct pcm *pcm, const void *data, unsigned int count)
                 /* we failed to make our window -- try to restart if we are
                  * allowed to do so.  Otherwise, simply allow the EPIPE error to
                  * propagate up to the app level */
+                pcm->time_of_xrun += pcm_get_time_of_status(pcm);
                 pcm->underruns++;
                 if (pcm->flags & PCM_NORESTART)
                     return -EPIPE;
@@ -568,6 +575,7 @@ int pcm_read(struct pcm *pcm, void *data, unsigned int count)
             pcm->running = 0;
             if (errno == EPIPE) {
                     /* we failed to make our window -- try to restart */
+                pcm->time_of_xrun += pcm_get_time_of_status(pcm);
                 pcm->underruns++;
                 continue;
             }
@@ -1165,6 +1173,24 @@ int pcm_set_avail_min(struct pcm *pcm, int avail_min)
     return 0;
 }
 
+int pcm_get_time_of_status(struct pcm *pcm)
+{
+    struct snd_pcm_status status;
+    struct timeval now, diff, tstamp;
+    int times = 0;
+    if (ioctl(pcm->fd, SNDRV_PCM_IOCTL_STATUS, &status) < 0) {
+           oops(pcm, errno, "cannot read stream status");
+    } else {
+           gettimeofday(&now, 0);
+           tstamp.tv_sec = status.trigger_tstamp.tv_sec;
+           tstamp.tv_usec = status.trigger_tstamp.tv_nsec / 1000L;
+           timersub(&now, &tstamp, &diff);
+           times = diff.tv_sec * 1000 + diff.tv_usec / 1000.0;
+   }
+   return times;
+}
+
+
 int pcm_wait(struct pcm *pcm, int timeout)
 {
     struct pollfd pfd;
@@ -1191,6 +1217,7 @@ int pcm_wait(struct pcm *pcm, int timeout)
         if (pfd.revents & (POLLERR | POLLNVAL)) {
             switch (pcm_state(pcm)) {
             case PCM_STATE_XRUN:
+                pcm->time_of_xrun += pcm_get_time_of_status(pcm);
                 return -EPIPE;
             case PCM_STATE_SUSPENDED:
                 return -ESTRPIPE;
-- 
1.8.0

