From 38138b2a98fbaaf85ca7fc1ad64f4db24e539782 Mon Sep 17 00:00:00 2001
From: Xianzhong <b07117@freescale.com>
Date: Fri, 11 Apr 2014 19:57:05 +0800
Subject: [PATCH 21/43] ENGR00307992 use KHR fence when android native fence
 is absent

android native fence depends on Android linux kernel,
this fix is safe instead of upgrading linux version

Signed-off-by: Xianzhong <b07117@freescale.com>
---
 libs/gui/GLConsumer.cpp   | 18 +++++++++++++++++-
 libs/gui/SyncFeatures.cpp |  2 +-
 2 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/libs/gui/GLConsumer.cpp b/libs/gui/GLConsumer.cpp
index 757e08a..3d9b6c4 100644
--- a/libs/gui/GLConsumer.cpp
+++ b/libs/gui/GLConsumer.cpp
@@ -959,7 +959,7 @@ status_t GLConsumer::doGLFenceWaitLocked() const {
     }
 
     if (mCurrentFence->isValid()) {
-        if (SyncFeatures::getInstance().useWaitSync()) {
+        if (SyncFeatures::getInstance().useNativeFenceSync()) {
             // Create an EGLSyncKHR from the current fence.
             int fenceFd = mCurrentFence->dup();
             if (fenceFd == -1) {
@@ -990,6 +990,22 @@ status_t GLConsumer::doGLFenceWaitLocked() const {
                         eglErr);
                 return UNKNOWN_ERROR;
             }
+        } else if (SyncFeatures::getInstance().useFenceSync()) {
+            EGLSyncKHR fence = eglCreateSyncKHR(dpy, EGL_SYNC_FENCE_KHR, NULL);
+            if (fence == EGL_NO_SYNC_KHR) {
+                ST_LOGE("doGLFenceWait: error creating fence: %#x",
+                        eglGetError());
+                return UNKNOWN_ERROR;
+            }
+            EGLint result = eglClientWaitSyncKHR(dpy, fence, 0, 1000000000);
+            if (result == EGL_FALSE) {
+                ST_LOGE("doGLFenceWait: error waiting for fence: %#x", eglGetError());
+                return UNKNOWN_ERROR;
+            } else if (result == EGL_TIMEOUT_EXPIRED_KHR) {
+                ST_LOGE("sdoGLFenceWait: timeout waiting for fence");
+                return TIMED_OUT;
+            }
+            eglDestroySyncKHR(dpy, fence);
         } else {
             status_t err = mCurrentFence->waitForever(
                     "GLConsumer::doGLFenceWaitLocked");
diff --git a/libs/gui/SyncFeatures.cpp b/libs/gui/SyncFeatures.cpp
index 187b211..d2ea6ea 100644
--- a/libs/gui/SyncFeatures.cpp
+++ b/libs/gui/SyncFeatures.cpp
@@ -70,7 +70,7 @@ SyncFeatures::SyncFeatures() : Singleton<SyncFeatures>(),
 bool SyncFeatures::useNativeFenceSync() const {
     // EGL_ANDROID_native_fence_sync is not compatible with using the
     // EGL_KHR_fence_sync extension for the same purpose.
-    return mHasNativeFenceSync;
+    return mHasNativeFenceSync && mHasFenceSync;
 }
 bool SyncFeatures::useFenceSync() const {
 #ifdef DONT_USE_FENCE_SYNC
-- 
1.8.0

