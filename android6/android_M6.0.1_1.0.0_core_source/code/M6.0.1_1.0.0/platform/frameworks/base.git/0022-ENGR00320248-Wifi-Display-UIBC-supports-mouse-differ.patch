From e57e46d24140cf6a8253475297e309eee457602e Mon Sep 17 00:00:00 2001
From: Wang Haoran <b50027@freescale.com>
Date: Mon, 30 Jun 2014 10:28:06 +0800
Subject: [PATCH 22/45] ENGR00320248 Wifi-Display UIBC supports mouse &
 different resolution

Rewrite the low layer UIBC event module. Use the Android framework
event injection to replace the original injecting event to linux device files.
Add an interface "onUibcData" to pass the uibc data from the WifiDisplaySource
into the WifiDisplayController. So that we can inject the event in Java layer.

Signed-off-by: Wang Haoran <b50027@freescale.com>

Conflicts:
	core/jni/android_media_RemoteDisplay.cpp
---
 core/jni/android_media_RemoteDisplay.cpp           |  12 ++
 media/java/android/media/RemoteDisplay.java        |  10 ++
 .../server/display/WifiDisplayController.java      | 147 +++++++++++++++++++++
 3 files changed, 169 insertions(+)

diff --git a/core/jni/android_media_RemoteDisplay.cpp b/core/jni/android_media_RemoteDisplay.cpp
index 9bc223b..9a16df5 100644
--- a/core/jni/android_media_RemoteDisplay.cpp
+++ b/core/jni/android_media_RemoteDisplay.cpp
@@ -44,6 +44,7 @@ static struct {
     jmethodID notifyDisplayConnected;
     jmethodID notifyDisplayDisconnected;
     jmethodID notifyDisplayError;
+    jmethodID notifyDisplayUibc;
 } gRemoteDisplayClassInfo;
 
 // ----------------------------------------------------------------------------
@@ -95,6 +96,15 @@ public:
         checkAndClearExceptionFromCallback(env, "notifyDisplayError");
     }
 
+    virtual void onUibcData(uint32_t type, float f0, float f1, uint32_t i0) {
+        JNIEnv* env = AndroidRuntime::getJNIEnv();
+
+        env->CallVoidMethod(mRemoteDisplayObjGlobal,
+                 gRemoteDisplayClassInfo.notifyDisplayUibc, type, f0, f1, i0);
+        checkAndClearExceptionFromCallback(env, "notifyDisplayUibc");
+
+    }
+
 private:
     jobject mRemoteDisplayObjGlobal;
 
@@ -199,6 +209,8 @@ int register_android_media_RemoteDisplay(JNIEnv* env)
             clazz, "notifyDisplayDisconnected", "()V");
     gRemoteDisplayClassInfo.notifyDisplayError = GetMethodIDOrDie(env,
             clazz, "notifyDisplayError", "(I)V");
+    gRemoteDisplayClassInfo.notifyDisplayUibc =
+            env->GetMethodID(clazz, "notifyDisplayUibc", "(IFFI)V");
     return err;
 }
 
diff --git a/media/java/android/media/RemoteDisplay.java b/media/java/android/media/RemoteDisplay.java
index 5add65a..e45221b 100644
--- a/media/java/android/media/RemoteDisplay.java
+++ b/media/java/android/media/RemoteDisplay.java
@@ -155,6 +155,15 @@ public final class RemoteDisplay {
         });
     }
 
+    private void notifyDisplayUibc(final int type, final float f0, final float f1, final int i0) {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mListener.onUibcData(type, f0, f1, i0);
+            }
+        });
+    }
+
     /**
      * Listener invoked when the remote display connection changes state.
      */
@@ -163,5 +172,6 @@ public final class RemoteDisplay {
                 int width, int height, int flags, int session);
         void onDisplayDisconnected();
         void onDisplayError(int error);
+        void onUibcData(int type, float f0, float f1, int i0);
     }
 }
diff --git a/services/core/java/com/android/server/display/WifiDisplayController.java b/services/core/java/com/android/server/display/WifiDisplayController.java
index a30d8d4..3e024c7 100644
--- a/services/core/java/com/android/server/display/WifiDisplayController.java
+++ b/services/core/java/com/android/server/display/WifiDisplayController.java
@@ -58,6 +58,15 @@ import java.util.Enumeration;
 
 import libcore.util.Objects;
 
+import android.hardware.input.InputManager;
+import android.os.SystemClock;
+import android.view.InputDevice;
+import android.view.KeyCharacterMap;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.MotionEvent.PointerProperties;
+import android.view.MotionEvent.PointerCoords;
+
 /**
  * Manages all of the various asynchronous interactions with the {@link WifiP2pManager}
  * on behalf of {@link WifiDisplayAdapter}.
@@ -162,6 +171,12 @@ final class WifiDisplayController implements DumpUtils.Dump {
 
     private WifiP2pDevice mThisDevice;
 
+    //UIBC
+    private float mHover_x, mHover_y;
+    private long mDownTime;
+    private static final int UIBC_SPEC_KEY_DOWN = 3;
+    private static final int UIBC_SPEC_KEY_UP   = 4;
+
     public WifiDisplayController(Context context, Handler handler, Listener listener) {
         mContext = context;
         mHandler = handler;
@@ -210,6 +225,128 @@ final class WifiDisplayController implements DumpUtils.Dump {
         updateWfdEnableState();
     }
 
+    private void onUibcDataToDo(int type, float f0, float f1, int i0) {
+
+        switch(type) {
+            case MotionEvent.ACTION_DOWN:
+                onUibcUpMoveDown(type, f0, f1, i0);
+                break;
+            case MotionEvent.ACTION_UP:
+                onUibcUpMoveDown(type, f0, f1, i0);
+                break;
+            case MotionEvent.ACTION_MOVE:
+                onUibcUpMoveDown(type, f0, f1, i0);
+                break;
+            case MotionEvent.ACTION_SCROLL:
+                onUibcScroll(f0, f1, i0);
+                break;
+            case UIBC_SPEC_KEY_DOWN:
+                onUibcKeyUpDown(type, i0);
+                break;
+            case UIBC_SPEC_KEY_UP:
+                onUibcKeyUpDown(type, i0);
+                break;
+            default:
+                if (DEBUG) Slog.i(TAG,"onUibcData other type:" + type);
+
+        }
+
+    }
+
+
+    private void onUibcKeyUpDown(int action, int i0) {
+        long now = SystemClock.uptimeMillis();
+        int updown;
+        if (action == UIBC_SPEC_KEY_UP)
+            updown = KeyEvent.ACTION_DOWN;
+        else
+            updown = KeyEvent.ACTION_UP;
+        InputManager.getInstance().injectInputEvent(
+            new KeyEvent(now, now, updown, i0, 0, 0,
+                   KeyCharacterMap.VIRTUAL_KEYBOARD,
+                   0, 0, 0),
+            InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
+
+    }
+
+    private void onUibcUpMoveDown(int action, float x, float y, int i0) {
+
+        final float DEFAULT_SIZE = 1.0f;
+        final int DEFAULT_META_STATE = 0;
+        final float DEFAULT_PRECISION_X = 1.0f;
+        final float DEFAULT_PRECISION_Y = 1.0f;
+        final int DEFAULT_DEVICE_ID = 0;
+        final int DEFAULT_EDGE_FLAGS = 0;
+        long downtime = 0;
+
+        int mode = -1;
+        long eventtime = SystemClock.uptimeMillis();
+        int inputSource = InputDevice.SOURCE_TOUCHSCREEN;
+        float pressure = 0.7f;  //Default pressure should not be max 1.0 :)
+
+        mHover_x = x;
+        mHover_y = y;
+
+        if (action == MotionEvent.ACTION_DOWN) {
+            downtime = eventtime;
+            mDownTime = eventtime;
+            mode = InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH;
+            pressure = 0.7f;
+        } else if (action == MotionEvent.ACTION_UP) {
+            downtime = mDownTime > 0 ? mDownTime : eventtime;
+            mode = InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH;
+            pressure = 0;
+            mDownTime = 0;
+        } else if (action == MotionEvent.ACTION_MOVE) {
+            downtime = mDownTime > 0 ? mDownTime : eventtime;
+            mode = InputManager.INJECT_INPUT_EVENT_MODE_ASYNC;
+            pressure = 0.5f;
+        } else {
+            if (DEBUG) Slog.e(TAG, "on UibcUpMoveDown meets other action :(");
+            return;
+        }
+
+        MotionEvent event = MotionEvent.obtain(downtime, eventtime,
+                                action, x, y, pressure, DEFAULT_SIZE,
+                                DEFAULT_META_STATE, DEFAULT_PRECISION_X,
+                                DEFAULT_PRECISION_Y, DEFAULT_DEVICE_ID,
+                                DEFAULT_EDGE_FLAGS);
+        event.setSource(inputSource);
+        if (DEBUG) Slog.i(TAG, "injectMotionEvent: " + event);
+        InputManager.getInstance().injectInputEvent(event, mode);
+
+    }
+
+    private void onUibcScroll(float x, float y, int up) {
+        float axis = (up == 1) ? 1.0f : -1.0f;
+
+        PointerProperties[] pps = new PointerProperties[1];
+        PointerProperties   pp0 = new PointerProperties();
+        PointerCoords[]     pcs = new PointerCoords[1];
+        PointerCoords       pc0 = new PointerCoords();
+
+        pp0.id = 0;
+        pp0.toolType = MotionEvent.TOOL_TYPE_MOUSE;
+        pps[0] = pp0;
+
+        pc0.x = mHover_x;
+        pc0.y = mHover_y;
+        pc0.pressure = 1;
+        pc0.size = 1;
+        pc0.setAxisValue(MotionEvent.AXIS_VSCROLL, x);
+        pc0.setAxisValue(MotionEvent.AXIS_HSCROLL, y);
+        pcs[0] = pc0;
+
+        MotionEvent event = MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), MotionEvent.ACTION_SCROLL,
+                                               1, pps, pcs, 0, 0, 1, 1, 0, 0, 0, 0);
+        event.setSource(InputDevice.SOURCE_MOUSE);
+        if (DEBUG) Slog.i(TAG," Inject the mouse event2.0: " + event.toString());
+
+
+        InputManager.getInstance().injectInputEvent(event,
+                InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH);
+    }
+
     @Override
     public void dump(PrintWriter pw, String prefix) {
         pw.println("mWifiDisplayOnSetting=" + mWifiDisplayOnSetting);
@@ -769,6 +906,16 @@ final class WifiDisplayController implements DumpUtils.Dump {
                 }
 
                 @Override
+                public void onUibcData(int type, float f0, float f1, int i0) {
+                    //TODO
+                    Slog.i(TAG, "RemoteDisplay sendinto onUibcData: type(" + type +
+                                                                  ") f0(" + f0 +
+                                                                  ") f1(" + f1 +
+                                                                  ") i0(" + i0 + ")");
+                    onUibcDataToDo(type, f0, f1, i0);
+                }
+
+                @Override
                 public void onDisplayDisconnected() {
                     if (mConnectedDevice == oldDevice) {
                         Slog.i(TAG, "Closed RTSP connection with Wifi display: "
-- 
1.8.0

