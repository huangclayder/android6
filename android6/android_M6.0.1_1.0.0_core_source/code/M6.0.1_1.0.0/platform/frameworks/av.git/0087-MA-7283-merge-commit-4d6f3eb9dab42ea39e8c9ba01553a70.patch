From b9bb3550680acc6af352a22ae013385961f361ee Mon Sep 17 00:00:00 2001
From: Ming Zhou <b42586@freescale.com>
Date: Tue, 24 Nov 2015 11:31:13 +0800
Subject: [PATCH 87/95] MA-7283 merge commit
 4d6f3eb9dab42ea39e8c9ba01553a707f4d22ad6 from
 repomad/maddev_lp5.1 branch

merge wifi display function in nuplayer and streaming source.

Signed-off-by: Ming Zhou <b42586@freescale.com>
---
 media/libmediaplayerservice/nuplayer/NuPlayer.cpp  |  19 +-
 .../nuplayer/NuPlayerDecoderBase.cpp               |   3 +-
 .../nuplayer/NuPlayerSource.h                      |   4 +
 .../nuplayer/StreamingSource.cpp                   | 245 +++++++++++++++++++--
 .../nuplayer/StreamingSource.h                     |  33 +++
 5 files changed, 281 insertions(+), 23 deletions(-)

diff --git a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
index c58ab4d..982d9c5 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayer.cpp
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+/* Copyright (C) 2015 Freescale Semiconductor, Inc. */
 
 //#define LOG_NDEBUG 0
 #define LOG_TAG "NuPlayer"
@@ -2227,7 +2228,17 @@ void NuPlayer::onSourceNotify(const sp<AMessage> &msg) {
             notifyListener(MEDIA_ERROR, MEDIA_ERROR_UNKNOWN, ERROR_DRM_NO_LICENSE);
             break;
         }
-
+        case Source::kWhatNeedCurrentPosition:
+        {
+            int64_t positionUs;
+            if (getCurrentPosition(&positionUs) == OK) {
+                mSource->setRenderPosition(positionUs);
+            }else{
+                ALOGE("%s getCurrentPosition failed.", __FUNCTION__);
+            }
+            break;
+        }
+        break;
         default:
             TRESPASS();
     }
@@ -2368,7 +2379,11 @@ void NuPlayer::Source::notifyInstantiateSecureDecoders(const sp<AMessage> &reply
     notify->setMessage("reply", reply);
     notify->post();
 }
-
+void NuPlayer::Source::notifyNeedCurrentPosition() {
+    sp<AMessage> notify = dupNotify();
+    notify->setInt32("what", kWhatNeedCurrentPosition);
+    notify->post();
+}
 void NuPlayer::Source::onMessageReceived(const sp<AMessage> & /* msg */) {
     TRESPASS();
 }
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerDecoderBase.cpp b/media/libmediaplayerservice/nuplayer/NuPlayerDecoderBase.cpp
index 7e76842..5e41ed2 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerDecoderBase.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerDecoderBase.cpp
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+/* Copyright (C) 2015 Freescale Semiconductor, Inc. */
 
 //#define LOG_NDEBUG 0
 #define LOG_TAG "NuPlayerDecoderBase"
@@ -115,7 +116,7 @@ void NuPlayer::DecoderBase::onRequestInputBuffers() {
         mRequestInputBuffersPending = true;
 
         sp<AMessage> msg = new AMessage(kWhatRequestInputBuffers, this);
-        msg->post(10 * 1000ll);
+        msg->post(2 * 1000ll);
     }
 }
 
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerSource.h b/media/libmediaplayerservice/nuplayer/NuPlayerSource.h
index 0d8f028..72edb8f 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerSource.h
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerSource.h
@@ -57,6 +57,7 @@ struct NuPlayer::Source : public AHandler {
         kWhatQueueDecoderShutdown,
         kWhatDrmNoLicense,
         kWhatInstantiateSecureDecoders,
+        kWhatNeedCurrentPosition,
     };
 
     // The provides message is used to notify the player about various
@@ -126,6 +127,8 @@ struct NuPlayer::Source : public AHandler {
         return true;
     }
 
+    virtual void setRenderPosition(int64_t /*positionUs*/) {}
+
 protected:
     virtual ~Source() {}
 
@@ -137,6 +140,7 @@ protected:
     void notifyVideoSizeChanged(const sp<AMessage> &format = NULL);
     void notifyInstantiateSecureDecoders(const sp<AMessage> &reply);
     void notifyPrepared(status_t err = OK);
+    void notifyNeedCurrentPosition();
 
 private:
     sp<AMessage> mNotify;
diff --git a/media/libmediaplayerservice/nuplayer/StreamingSource.cpp b/media/libmediaplayerservice/nuplayer/StreamingSource.cpp
index c4bf144..358d0a5 100644
--- a/media/libmediaplayerservice/nuplayer/StreamingSource.cpp
+++ b/media/libmediaplayerservice/nuplayer/StreamingSource.cpp
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+/* Copyright (C) 2015 Freescale Semiconductor, Inc. */
 
 //#define LOG_NDEBUG 0
 #define LOG_TAG "StreamingSource"
 #include <utils/Log.h>
-
+#include <cutils/properties.h>
 #include "StreamingSource.h"
 
 #include "ATSParser.h"
@@ -38,6 +39,16 @@ NuPlayer::StreamingSource::StreamingSource(
     : Source(notify),
       mSource(source),
       mFinalResult(OK),
+      mLatencyLowest(0),
+      mStasticPeroid(0),
+      mLatencyThreshold(LATENCY_THRESHOLD_DEFAULT),
+      mTunnelRenderLatency(-1),
+      mPositionUs(-1),
+      mAnchorTimeRealUs(-1),
+      mDropEndTimeUs(-1),
+      mPipeLineLatencyUs(-1),
+      mResumeCheckTimeUs(-1),
+      mPrevDropTimeUs(-1),
       mBuffering(false) {
 }
 
@@ -109,9 +120,22 @@ void NuPlayer::StreamingSource::onReadBuffer() {
 
                 type = mask;
             }
+            int64_t mTunnelRenderLatencyValue;
+            if (extra != NULL
+                    && extra->findInt64("tunnel-render-latency", &mTunnelRenderLatencyValue)) {
+                if (mTunnelRenderLatencyValue > 0) {
+                    mTunnelRenderLatency = mTunnelRenderLatencyValue;
+                }
+            }
 
-            mTSParser->signalDiscontinuity(
-                    (ATSParser::DiscontinuityType)type, extra);
+            int64_t timeUs;
+            if (extra != NULL
+                    && extra->findInt64("timeUs", &timeUs))
+                mTSParser->signalDiscontinuity(
+                        (ATSParser::DiscontinuityType)type, extra);
+            
+            //mTSParser->signalDiscontinuity(
+            //        (ATSParser::DiscontinuityType)type, extra);
         } else if (n < 0) {
             break;
         } else {
@@ -225,33 +249,211 @@ sp<MetaData> NuPlayer::StreamingSource::getFormatMeta(bool audio) {
     return source->getFormat();
 }
 
+/*
+Where introduce the latency?
+
+WFD Total: ~250 ms.
+WFD source: 33 ms (capture one frame) + 33 ms (VPU has one frame delay) +
+7 ms (encoder time) + ~30 ms (net process time) = ~100 ms
+WFD sink: ~150 ms for thread process and net jitter and avoid audio under run.
+
+Quality criteria.
+
+Discard one time media data during certain time, default is discard one time
+during 5 minutes.
+As different use scenario have different quality and latency requirement, so my
+proposal is add one adjust button like volume adjust to adjust the threshold by
+user in WFD sink.
+
+How to adjust latency threshold in WFD sink automatically?
+
+If user haven?t set latency threshold. The threshold will adjust automatically.
+Threshold will increase if discard media data within 5 minutes, or will
+decrease the threshold.
+
+When WFD sink can discard media data?
+
+Latency in WFD sink is jitter as net and thread process jitter. To avoid
+discard media data frequently, only can discard data out of jitter range. If
+the minimum value of WFD sink latency is bigger than threshold during the
+statistic interval, the media data can be discarded.
+
+When WFD sink discard video data?
+
+To avoid mosaic when discard video data, video data will be discarded only
+when WFD NuPlayer source buffered more than 1 second video and have discarded
+all audio data.
+*/
+bool NuPlayer::StreamingSource::discardMediaDate(bool audio, int64_t timeUs, sp<ABuffer> *accessUnit) {
+    status_t error;
+    status_t finalResult;
+    int64_t nowUs, nowUsTemp;
+    int64_t positionUs;
+    int64_t nLatency;
+
+    ATSParser::SourceType type =
+        audio ? ATSParser::AUDIO : ATSParser::VIDEO;
+
+    sp<AnotherPacketSource> source =
+        static_cast<AnotherPacketSource *>(mTSParser->getSource(type).get());
+
+    int64_t nBufferedTimeUs = source->getBufferedDurationUs(&error);
+
+    nowUs = ALooper::GetNowUs();
+    positionUs = (nowUs - mAnchorTimeRealUs) + mPositionUs;
+ 
+    if (mDropEndTimeUs > nowUs) {
+        ALOGI("Drop media data.\n");
+        while (mTunnelRenderLatency > 0) {
+            // Avoid dead loop.
+            nowUsTemp = ALooper::GetNowUs();
+            if (nowUsTemp > nowUs + 500000)
+                break;
+
+            feedMoreTSData();
+            usleep(1000);
+        }
+
+        type = ATSParser::AUDIO;
+
+        source =
+            static_cast<AnotherPacketSource *>(mTSParser->getSource(type).get());
+        if (source == NULL)
+            return false;
+
+        while (1) {
+            if (!source->hasBufferAvailable(&finalResult)) {
+                break;
+            }
+            source->dequeueAccessUnit(accessUnit);
+        }
+
+        type = ATSParser::VIDEO;
+
+        source =
+            static_cast<AnotherPacketSource *>(mTSParser->getSource(type).get());
+        if (source == NULL)
+            return false;
+
+        nBufferedTimeUs = source->getBufferedDurationUs(&error);
+        if (nBufferedTimeUs > DROP_VIDEO_THRESHOLD) {
+            ALOGI("Drop video.");
+            while (1) {
+                if (!source->hasBufferAvailable(&finalResult)) {
+                    break;
+                }
+                source->dequeueAccessUnit(accessUnit);
+            }
+        }
+
+        return true;
+    }
+
+    if (!audio)
+        return false;
+
+    nLatency = timeUs + nBufferedTimeUs - positionUs + mTunnelRenderLatency;
+#if 0
+    {
+        static int32_t nCnt = 0;
+        nCnt ++;
+        if (nCnt % 100 == 0) {
+        ALOGI("Total latency: %lld us TunnelRenderLatency: %lld mediaTimeUs: %lld nBufferedTimeUs: %lld positionUs: %lld", \
+                nLatency, mTunnelRenderLatency, timeUs, nBufferedTimeUs, positionUs);
+        }
+    }
+#endif
+
+    bool bDrop = false;
+
+    if (mStasticPeroid > nowUs) {
+        if (mLatencyLowest > nLatency) {
+            mLatencyLowest = nLatency;
+        }
+    } else {
+        ALOGV("mLatencyLowest: %lld mLatencyThreshold: %lld", mLatencyLowest, mLatencyThreshold);
+        if (mLatencyLowest > mLatencyThreshold) {
+            bDrop = true;
+        }
+        mStasticPeroid = nowUs + STATISTIC_PERIOD;
+        mLatencyLowest = LOWEST_LATENCY_INIT;
+    }
+
+    char value[PROPERTY_VALUE_MAX];
+    int64_t nQualityCriteria = QUALITY_CATIRIA;
+    // property for adjust quality criteria in ms, shouldn't less than 2 seconds.
+    if ((property_get("sys.wifisink.quality", value, NULL))) {
+        nQualityCriteria = atoi(value) * 1000;
+    } 
+
+    // property for adjust latency threshold in ms.
+    if ((property_get("sys.wifisink.latency", value, NULL))) {
+        mLatencyThreshold = atoi(value) * 1000;
+    } else {
+        // Adjust drop threshold.
+        if (mPrevDropTimeUs > 0 && bDrop \
+                && nowUs < mPrevDropTimeUs + nQualityCriteria) {
+            mLatencyThreshold += 10000;
+            if (mLatencyThreshold > LATENCY_THRESHOLD_MAX)
+                mLatencyThreshold = LATENCY_THRESHOLD_MAX;
+        } else if (mPrevDropTimeUs > 0 \
+                && nowUs > mPrevDropTimeUs + nQualityCriteria) {
+            mLatencyThreshold -= 10000;
+            mPrevDropTimeUs = nowUs - nQualityCriteria + (nQualityCriteria >> 2);
+            if (mLatencyThreshold < LATENCY_THRESHOLD_DEFAULT)
+                mLatencyThreshold = LATENCY_THRESHOLD_DEFAULT;
+        }
+    }
+
+    if (bDrop && nowUs > mResumeCheckTimeUs) {
+        // Too long latency, discard the media data.
+        ALOGI("Too long latency: %lld us TunnelRenderLatency: %lld mediaTimeUs: %lld nBufferedTimeUs: %lld positionUs: %lld", \
+                nLatency, mTunnelRenderLatency, timeUs, nBufferedTimeUs, positionUs);
+        mDropEndTimeUs = nowUs + mPipeLineLatencyUs - REMAIN_DATA_AFTER_DROP;
+        mResumeCheckTimeUs = mDropEndTimeUs + RESUME_DROP_CHECK;
+        mPrevDropTimeUs = nowUs;
+        return true;
+    } else {
+        mPipeLineLatencyUs = timeUs - positionUs;
+        if (mPipeLineLatencyUs <= 0 || mPipeLineLatencyUs > 500000)
+            mPipeLineLatencyUs = 100000;
+        ALOGV("mPipeLineLatencyUs: %lld\n", mPipeLineLatencyUs);
+        return false;
+    }
+}
+
+
 status_t NuPlayer::StreamingSource::dequeueAccessUnit(
         bool audio, sp<ABuffer> *accessUnit) {
+    status_t err;
+    status_t finalResult;
     sp<AnotherPacketSource> source = getSource(audio);
 
     if (source == NULL) {
         return -EWOULDBLOCK;
     }
 
-    if (!haveSufficientDataOnAllTracks()) {
-        postReadBuffer();
-    }
-
-    status_t finalResult;
-    if (!source->hasBufferAvailable(&finalResult)) {
-        return finalResult == OK ? -EWOULDBLOCK : finalResult;
-    }
+    notifyNeedCurrentPosition();
 
-    status_t err = source->dequeueAccessUnit(accessUnit);
+    while (1) {
+        if (!source->hasBufferAvailable(&finalResult)) {
+            return finalResult == OK ? -EWOULDBLOCK : finalResult;
+        }
 
-#if !defined(LOG_NDEBUG) || LOG_NDEBUG == 0
-    if (err == OK) {
-        int64_t timeUs;
-        CHECK((*accessUnit)->meta()->findInt64("timeUs", &timeUs));
-        ALOGV("dequeueAccessUnit timeUs=%lld us", timeUs);
+        err = source->dequeueAccessUnit(accessUnit);
+        if (err == OK) {
+            int64_t timeUs;
+            CHECK((*accessUnit)->meta()->findInt64("timeUs", &timeUs));
+            ALOGV("dequeueAccessUnit timeUs=%lld us", timeUs);
+
+            if (!(mSource->flags() & IStreamSource::kFlagKeepLowLatency \
+                        && mPositionUs > 0)) 
+                break;
+            if (discardMediaDate(audio, timeUs, accessUnit) == false)
+                break;
+        }
     }
-#endif
-
+        
     return err;
 }
 
@@ -262,7 +464,10 @@ bool NuPlayer::StreamingSource::isAVCReorderDisabled() const {
 bool NuPlayer::StreamingSource::isRealTime() const {
     return mSource->flags() & IStreamSource::kFlagIsRealTimeData;
 }
-
+void NuPlayer::StreamingSource::setRenderPosition(int64_t positionUs) {
+    mPositionUs = positionUs;
+    mAnchorTimeRealUs = ALooper::GetNowUs();
+}
 void NuPlayer::StreamingSource::onMessageReceived(
         const sp<AMessage> &msg) {
     switch (msg->what()) {
diff --git a/media/libmediaplayerservice/nuplayer/StreamingSource.h b/media/libmediaplayerservice/nuplayer/StreamingSource.h
index 1315de5..ca20bb6 100644
--- a/media/libmediaplayerservice/nuplayer/StreamingSource.h
+++ b/media/libmediaplayerservice/nuplayer/StreamingSource.h
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+/* Copyright (C) 2015 Freescale Semiconductor, Inc. */
 
 #ifndef STREAMING_SOURCE_H_
 
@@ -28,6 +29,24 @@ struct ATSParser;
 struct AnotherPacketSource;
 
 struct NuPlayer::StreamingSource : public NuPlayer::Source {
+    
+    // Continues drop should wait below time as pipeline isn't refresh.
+    static const int RESUME_DROP_CHECK = 100000;
+    // Remain data to avoid under run after drop.
+    static const int REMAIN_DATA_AFTER_DROP = 50000;
+    // Defautl drop threshold.
+    static const int LATENCY_THRESHOLD_DEFAULT = 120000;
+    // Maximum drop threshold.
+    static const int LATENCY_THRESHOLD_MAX = 2000000;
+    // Discard one time media data within this peroid.
+    static const int QUALITY_CATIRIA = 5*60*1000000;
+    // The invertal to statistic lowest latency.
+    static const int STATISTIC_PERIOD = 5000000;
+    // Drop video threshold.
+    static const int DROP_VIDEO_THRESHOLD = 1000000;
+    // Reset statistic lowest latency value.
+    static const int LOWEST_LATENCY_INIT = 60000000;
+
     StreamingSource(
             const sp<AMessage> &notify,
             const sp<IStreamSource> &source);
@@ -43,6 +62,7 @@ struct NuPlayer::StreamingSource : public NuPlayer::Source {
 
     virtual bool isAVCReorderDisabled() const;
 
+    virtual void setRenderPosition(int64_t positionUs);
 protected:
     virtual ~StreamingSource();
 
@@ -59,6 +79,17 @@ private:
     sp<NuPlayerStreamListener> mStreamListener;
     sp<ATSParser> mTSParser;
 
+    int64_t mLatencyLowest;
+    int64_t mStasticPeroid;
+    int64_t mLatencyThreshold;
+    int64_t mTunnelRenderLatency;
+    int64_t mPositionUs;
+    int64_t mAnchorTimeRealUs;
+    int64_t mDropEndTimeUs;
+    int64_t mPipeLineLatencyUs;
+    int64_t mResumeCheckTimeUs;
+    int64_t mPrevDropTimeUs;
+
     bool mBuffering;
     Mutex mBufferingLock;
     sp<ALooper> mLooper;
@@ -69,6 +100,8 @@ private:
     status_t postReadBuffer();
     void onReadBuffer();
 
+    bool discardMediaDate(bool audio, int64_t timeUs, sp<ABuffer> *accessUnit);
+
     DISALLOW_EVIL_CONSTRUCTORS(StreamingSource);
 };
 
-- 
1.8.0

