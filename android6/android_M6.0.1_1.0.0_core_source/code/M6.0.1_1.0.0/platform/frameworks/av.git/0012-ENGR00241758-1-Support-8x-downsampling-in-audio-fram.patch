From 54863614924df95b37110c0c3e5a79d48c301606 Mon Sep 17 00:00:00 2001
From: b02247 <b02247@freescale.com>
Date: Fri, 1 Feb 2013 13:34:21 +0800
Subject: [PATCH 12/95] ENGR00241758-1 Support 8x downsampling in audio
 framework

Support 8x downsampling in audio framework.

Signed-off-by: b02247 <b02247@freescale.com>
---
 services/audioflinger/AudioResampler.cpp | 27 ++++++++++++++-------------
 services/audioflinger/AudioResampler.h   |  5 +++--
 2 files changed, 17 insertions(+), 15 deletions(-)

diff --git a/services/audioflinger/AudioResampler.cpp b/services/audioflinger/AudioResampler.cpp
index e49b7b1..1dd0efc 100644
--- a/services/audioflinger/AudioResampler.cpp
+++ b/services/audioflinger/AudioResampler.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2007 The Android Open Source Project
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -401,12 +402,12 @@ size_t AudioResamplerOrder1::resampleStereo16(int32_t* out, size_t outFrameCount
         // ALOGE("general case");
 
 #ifdef ASM_ARM_RESAMP1  // asm optimisation for ResamplerOrder1
-        if (inputIndex + 2 < mBuffer.frameCount) {
+        if (inputIndex + 16 < mBuffer.frameCount) {
             int32_t* maxOutPt;
             int32_t maxInIdx;
 
             maxOutPt = out + (outputSampleCount - 2);   // 2 because 2 frames per loop
-            maxInIdx = mBuffer.frameCount - 2;
+            maxInIdx = mBuffer.frameCount - 16;
             AsmStereo16Loop(in, maxOutPt, maxInIdx, outputIndex, out, inputIndex, vl, vr,
                     phaseFraction, phaseIncrement);
         }
@@ -498,12 +499,12 @@ size_t AudioResamplerOrder1::resampleMono16(int32_t* out, size_t outFrameCount,
         // ALOGE("general case");
 
 #ifdef ASM_ARM_RESAMP1  // asm optimisation for ResamplerOrder1
-        if (inputIndex + 2 < mBuffer.frameCount) {
+        if (inputIndex + 16 < mBuffer.frameCount) {
             int32_t* maxOutPt;
             int32_t maxInIdx;
 
             maxOutPt = out + (outputSampleCount - 2);
-            maxInIdx = (int32_t)mBuffer.frameCount - 2;
+            maxInIdx = (int32_t)mBuffer.frameCount - 16;
                 AsmMono16Loop(in, maxOutPt, maxInIdx, outputIndex, out, inputIndex, vl, vr,
                         phaseFraction, phaseIncrement);
         }
@@ -630,9 +631,9 @@ void AudioResamplerOrder1::AsmMono16Loop(int16_t *in, int32_t* maxOutPt, int32_t
     "   ldrsh r4, [r0]\n"               /* in[inputIndex] */\
     "   ldr r5, [r8]\n"                 /* out[outputIndex] */\
     "   ldrsh r0, [r0, #-2]\n"          /* in[inputIndex-1] */\
-    "   bic r6, r6, #0xC0000000\n"      /* phaseFraction & ... */\
+    "   bic r6, r6, #0xF0000000\n"      /* phaseFraction & ... */\
     "   sub r4, r4, r0\n"               /* in[inputIndex] - in[inputIndex-1] */\
-    "   mov r4, r4, lsl #2\n"           /* <<2 */\
+    "   mov r4, r4, lsl #4\n"           /* <<4 */\
     "   smulwt r4, r4, r6\n"            /* (x1-x0)*.. */\
     "   add r6, r6, r9\n"               /* phaseFraction + phaseIncrement */\
     "   add r0, r0, r4\n"               /* x0 - (..) */\
@@ -640,7 +641,7 @@ void AudioResamplerOrder1::AsmMono16Loop(int16_t *in, int32_t* maxOutPt, int32_t
     "   ldr r4, [r8, #4]\n"             /* out[outputIndex+1] */\
     "   str r5, [r8], #4\n"             /* out[outputIndex++] = ... */\
     "   mla r4, r0, r11, r4\n"          /* vr*interp + out[] */\
-    "   add r7, r7, r6, lsr #30\n"      /* inputIndex + phaseFraction>>30 */\
+    "   add r7, r7, r6, lsr #28\n"      /* inputIndex + phaseFraction>>28 */\
     "   str r4, [r8], #4\n"             /* out[outputIndex++] = ... */
 
         MO_ONE_FRAME    // frame 1
@@ -650,7 +651,7 @@ void AudioResamplerOrder1::AsmMono16Loop(int16_t *in, int32_t* maxOutPt, int32_t
         "   bcc 1b\n"
         "2:\n"
 
-        "   bic r6, r6, #0xC0000000\n"             // phaseFraction & ...
+        "   bic r6, r6, #0xF0000000\n"             // phaseFraction & ...
         // save modified values
         "   ldr r0, [sp, #" MO_PARAM5 " + 20]\n"    // &phaseFraction
         "   str r6, [r0]\n"                         // phaseFraction
@@ -744,7 +745,7 @@ void AudioResamplerOrder1::AsmStereo16Loop(int16_t *in, int32_t* maxOutPt, int32
         "   bcs 4f\n"
 
 #define ST_ONE_FRAME \
-    "   bic r6, r6, #0xC0000000\n"      /* phaseFraction & ... */\
+    "   bic r6, r6, #0xF0000000\n"      /* phaseFraction & ... */\
 \
     "   add r0, r1, r7, asl #2\n"       /* in + 2*inputIndex */\
 \
@@ -752,7 +753,7 @@ void AudioResamplerOrder1::AsmStereo16Loop(int16_t *in, int32_t* maxOutPt, int32
     "   ldr r5, [r8]\n"                 /* out[outputIndex] */\
     "   ldrsh r12, [r0, #-4]\n"         /* in[2*inputIndex-2] */\
     "   sub r4, r4, r12\n"              /* in[2*InputIndex] - in[2*InputIndex-2] */\
-    "   mov r4, r4, lsl #2\n"           /* <<2 */\
+    "   mov r4, r4, lsl #4\n"           /* <<4 */\
     "   smulwt r4, r4, r6\n"            /* (x1-x0)*.. */\
     "   add r12, r12, r4\n"             /* x0 - (..) */\
     "   mla r5, r12, r10, r5\n"         /* vl*interp + out[] */\
@@ -762,14 +763,14 @@ void AudioResamplerOrder1::AsmStereo16Loop(int16_t *in, int32_t* maxOutPt, int32
     "   ldrsh r12, [r0, #+2]\n"         /* in[2*inputIndex+1] */\
     "   ldrsh r0, [r0, #-2]\n"          /* in[2*inputIndex-1] */\
     "   sub r12, r12, r0\n"             /* in[2*InputIndex] - in[2*InputIndex-2] */\
-    "   mov r12, r12, lsl #2\n"         /* <<2 */\
+    "   mov r12, r12, lsl #4\n"         /* <<4 */\
     "   smulwt r12, r12, r6\n"          /* (x1-x0)*.. */\
     "   add r12, r0, r12\n"             /* x0 - (..) */\
     "   mla r4, r12, r11, r4\n"         /* vr*interp + out[] */\
     "   str r4, [r8], #4\n"             /* out[outputIndex++] = ... */\
 \
     "   add r6, r6, r9\n"               /* phaseFraction + phaseIncrement */\
-    "   add r7, r7, r6, lsr #30\n"      /* inputIndex + phaseFraction>>30 */
+    "   add r7, r7, r6, lsr #28\n"      /* inputIndex + phaseFraction>>28 */
 
     ST_ONE_FRAME    // frame 1
     ST_ONE_FRAME    // frame 1
@@ -778,7 +779,7 @@ void AudioResamplerOrder1::AsmStereo16Loop(int16_t *in, int32_t* maxOutPt, int32
         "   bcc 3b\n"
         "4:\n"
 
-        "   bic r6, r6, #0xC0000000\n"              // phaseFraction & ...
+        "   bic r6, r6, #0xF0000000\n"              // phaseFraction & ...
         // save modified values
         "   ldr r0, [sp, #" ST_PARAM5 " + 20]\n"    // &phaseFraction
         "   str r6, [r0]\n"                         // phaseFraction
diff --git a/services/audioflinger/AudioResampler.h b/services/audioflinger/AudioResampler.h
index a8e3e6f..723d159 100644
--- a/services/audioflinger/AudioResampler.h
+++ b/services/audioflinger/AudioResampler.h
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2007 The Android Open Source Project
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -88,8 +89,8 @@ public:
     src_quality getQuality() const { return mQuality; }
 
 protected:
-    // number of bits for phase fraction - 30 bits allows nearly 2x downsampling
-    static const int kNumPhaseBits = 30;
+    // number of bits for phase fraction - 28 bits allows nearly 8x downsampling
+    static const int kNumPhaseBits = 28;
 
     // phase mask for fraction
     static const uint32_t kPhaseMask = (1LU<<kNumPhaseBits)-1;
-- 
1.8.0

