From f09602457e9e2ad94b3e1bb5b7927c602f507276 Mon Sep 17 00:00:00 2001
From: Xiaowen Liu <b37945@freescale.com>
Date: Tue, 8 Jan 2013 16:51:37 +0800
Subject: [PATCH 04/95] ENGR00214328 make jpegProcess support more format than
 HAL_PIXEL_FORMAT_BLOB.

jpegProcess only support HAL_PIXEL_FORMAT_BLOB format when take picture.
Because the format HAL_PIXEL_FORMAT_BLOB is a new customized format in android 4.2.
And now, the gralloc does not support this format.
So, extend it to support more format.

Signed-off-by: Xiaowen Liu <b37945@freescale.com>
---
 .../api1/client2/JpegProcessor.cpp                 | 36 ++++++++++++++--------
 .../libcameraservice/api1/client2/JpegProcessor.h  |  2 +-
 2 files changed, 24 insertions(+), 14 deletions(-)

diff --git a/services/camera/libcameraservice/api1/client2/JpegProcessor.cpp b/services/camera/libcameraservice/api1/client2/JpegProcessor.cpp
index bd9786f..1849385 100644
--- a/services/camera/libcameraservice/api1/client2/JpegProcessor.cpp
+++ b/services/camera/libcameraservice/api1/client2/JpegProcessor.cpp
@@ -153,7 +153,7 @@ status_t JpegProcessor::updateStream(const Parameters &params) {
                     strerror(-res), res);
             return res;
         }
-
+        mMaxJpegSize = maxJpegSize;
     }
     return OK;
 }
@@ -237,19 +237,29 @@ status_t JpegProcessor::processNewCapture() {
         ALOGV("%s: Camera %d: Still capture available", __FUNCTION__,
                 mId);
 
-        if (imgBuffer.format != HAL_PIXEL_FORMAT_BLOB) {
-            ALOGE("%s: Camera %d: Unexpected format for still image: "
-                    "%x, expected %x", __FUNCTION__, mId,
-                    imgBuffer.format,
-                    HAL_PIXEL_FORMAT_BLOB);
-            mCaptureConsumer->unlockBuffer(imgBuffer);
-            return OK;
-        }
+#if 0
+    if (imgBuffer.format != HAL_PIXEL_FORMAT_BLOB) {
+        ALOGE("%s: Camera %d: Unexpected format for still image: "
+                "%x, expected %x", __FUNCTION__, mId,
+                imgBuffer.format,
+                HAL_PIXEL_FORMAT_BLOB);
+        mCaptureConsumer->unlockBuffer(imgBuffer);
+        return OK;
+    }
+#endif
+    // Find size of JPEG image
+    int size = 0;
+    if (imgBuffer.format != HAL_PIXEL_FORMAT_BLOB) {
+        size = imgBuffer.stride * imgBuffer.height * 3/2;
+    }
+    else {
+        size = mMaxJpegSize;
+    }
 
         // Find size of JPEG image
-        size_t jpegSize = findJpegSize(imgBuffer.data, imgBuffer.width);
+    size_t jpegSize = findJpegSize(imgBuffer.data, size/*imgBuffer.width*/);
         if (jpegSize == 0) { // failed to find size, default to whole buffer
-            jpegSize = imgBuffer.width;
+        jpegSize = size;//imgBuffer.width;
         }
         size_t heapSize = mCaptureHeap->getSize();
         if (jpegSize > heapSize) {
@@ -260,7 +270,7 @@ status_t JpegProcessor::processNewCapture() {
         }
 
         // TODO: Optimize this to avoid memcopy
-        captureBuffer = new MemoryBase(mCaptureHeap, 0, jpegSize);
+    sp<MemoryBase> captureBuffer = new MemoryBase(mCaptureHeap, 0, jpegSize);
         void* captureMemory = mCaptureHeap->getBase();
         memcpy(captureMemory, imgBuffer.data, jpegSize);
 
@@ -365,7 +375,7 @@ size_t JpegProcessor::findJpegSize(uint8_t* jpegBuffer, size_t maxSize) {
     }
 
     // Read JFIF segment markers, skip over segment data
-    size = 0;
+    size = MARKER_LENGTH; //jump SOI
     while (size <= maxSize - MARKER_LENGTH) {
         segment_t *segment = (segment_t*)(jpegBuffer + size);
         uint8_t type = checkJpegMarker(segment->marker);
diff --git a/services/camera/libcameraservice/api1/client2/JpegProcessor.h b/services/camera/libcameraservice/api1/client2/JpegProcessor.h
index fbdae11..1d31156 100644
--- a/services/camera/libcameraservice/api1/client2/JpegProcessor.h
+++ b/services/camera/libcameraservice/api1/client2/JpegProcessor.h
@@ -77,7 +77,7 @@ class JpegProcessor:
 
     status_t processNewCapture();
     size_t findJpegSize(uint8_t* jpegBuffer, size_t maxSize);
-
+    int mMaxJpegSize;
 };
 
 
-- 
1.8.0

