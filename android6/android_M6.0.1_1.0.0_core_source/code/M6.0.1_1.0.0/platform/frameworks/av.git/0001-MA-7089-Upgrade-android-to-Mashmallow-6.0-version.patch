From 30c88044140218908edfe524e88fd98c4b2e3d71 Mon Sep 17 00:00:00 2001
From: Xiaowen Liu <xiaowen.liu@freescale.com>
Date: Sat, 10 Oct 2015 06:13:34 -0400
Subject: [PATCH 01/95] MA-7089 Upgrade android to Mashmallow 6.0 version.

Integrate VPU to StageFright.
Add video color format map as OMX color format is diff with HAL pixel format.
Dequeue all buffer from Native window as VPU need all buffer for registry.
Send OMX flush command until send command success to avoid send command fail
when OMX command is processing command.

Signed-off-by: Xiaowen Liu <xiaowen.liu@freescale.com>
---
 media/libstagefright/ACodec.cpp       |  6 ++++++
 media/libstagefright/OMXCodec.cpp     | 18 +++++++++++++++---
 media/libstagefright/SurfaceUtils.cpp | 23 ++++++++++++++++++++++-
 3 files changed, 43 insertions(+), 4 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 8d9bd21..3b6f021 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2012-2015 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -974,6 +975,11 @@ status_t ACodec::configureOutputBuffersFromNativeWindow(
     // 2. try to allocate two (2) additional buffers to reduce starvation from
     //    the consumer
     //    plus an extra buffer to account for incorrect minUndequeuedBufs
+
+    // XXX: Is this the right logic to use?  It's not clear to me what the OMX
+    // buffer counts refer to - how do they account for the renderer holding on
+    // to buffers?
+    *minUndequeuedBuffers = 0;
     for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
         OMX_U32 newBufferCount =
             def.nBufferCountMin + *minUndequeuedBuffers + extraBuffers;
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index b1dde80..31ab331 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2009 The Android Open Source Project
+ * Copyright (C) 2012-2015 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -1857,6 +1858,10 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
     CODEC_LOGI("OMX-buffers: min=%u actual=%u undeq=%d+1",
             def.nBufferCountMin, def.nBufferCountActual, minUndequeuedBufs);
 
+    // XXX: Is this the right logic to use?  It's not clear to me what the OMX
+    // buffer counts refer to - how do they account for the renderer holding on
+    // to buffers?
+    minUndequeuedBufs = 0;
     for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
         OMX_U32 newBufferCount =
             def.nBufferCountMin + minUndequeuedBufs + extraBuffers;
@@ -1967,7 +1972,6 @@ OMXCodec::BufferInfo* OMXCodec::dequeueBufferFromNativeWindow() {
     if (err != 0) {
       CODEC_LOGE("dequeueBuffer failed w/ error 0x%08x", err);
 
-      setState(ERROR);
       return 0;
     }
 
@@ -2746,8 +2750,16 @@ bool OMXCodec::flushPortAsync(OMX_U32 portIndex) {
         return false;
     }
 
-    status_t err =
-        mOMX->sendCommand(mNode, OMX_CommandFlush, portIndex);
+    status_t err = UNKNOWN_ERROR;
+    OMX_U32 nCnt = 0;
+    while (err != OK) {
+        err = mOMX->sendCommand(mNode, OMX_CommandFlush, portIndex);
+        if (nCnt ++ == 100) {
+            break;
+        }
+
+        usleep(10000);
+    }
     CHECK_EQ(err, (status_t)OK);
 
     return true;
diff --git a/media/libstagefright/SurfaceUtils.cpp b/media/libstagefright/SurfaceUtils.cpp
index 6b62e43..c7dc92c 100644
--- a/media/libstagefright/SurfaceUtils.cpp
+++ b/media/libstagefright/SurfaceUtils.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright 2015 The Android Open Source Project
+ * Copyright (C) 2015 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +20,7 @@
 #include <utils/Log.h>
 
 #include <media/stagefright/SurfaceUtils.h>
+#include <OMX_IVCommon.h>
 
 #include <gui/Surface.h>
 
@@ -33,7 +35,26 @@ status_t setNativeWindowSizeFormatAndUsage(
         return err;
     }
 
-    err = native_window_set_buffers_format(nativeWindow, format);
+    int color_fmt = HAL_PIXEL_FORMAT_YCbCr_420_SP;
+    switch(format) {
+        case OMX_COLOR_FormatYUV420SemiPlanar:
+            color_fmt = HAL_PIXEL_FORMAT_YCbCr_420_SP;
+            break;
+        case OMX_COLOR_FormatYUV420Planar:
+            color_fmt = HAL_PIXEL_FORMAT_YCbCr_420_P;
+            break;
+        case OMX_COLOR_Format16bitRGB565:
+            color_fmt = HAL_PIXEL_FORMAT_RGB_565;
+            break;
+        case OMX_COLOR_FormatYUV422Planar:
+            color_fmt = HAL_PIXEL_FORMAT_YCbCr_422_P;
+            break;
+        default:
+            ALOGE("Not supported color format %d by surface!", def.format.video.eC
+            return UNKNOWN_ERROR;
+    }
+
+    err = native_window_set_buffers_format(nativeWindow, color_fmt);
     if (err != NO_ERROR) {
         ALOGE("native_window_set_buffers_format failed: %s (%d)", strerror(-err), -err);
         return err;
-- 
1.8.0

