From 2a470cdbe8e98e50b55670eee0b49d3ad0f7a91f Mon Sep 17 00:00:00 2001
From: Haoran Wang <b50027@freescale.com>
Date: Fri, 15 May 2015 10:02:32 +0800
Subject: [PATCH 18/25] MA-6450 Enable BCM4339 wifi

Added BCM4339 support on wifi HAL.
Use BCM4339 in sabresd_7d by force.

Signed-off-by: Haoran Wang <b50027@freescale.com>
---
 wifi/Android.mk   |   3 ++
 wifi/wifi_unite.c | 121 +++++++++++++++++++++++++++++++++++++++++-------------
 2 files changed, 95 insertions(+), 29 deletions(-)

diff --git a/wifi/Android.mk b/wifi/Android.mk
index d7dc5fa..1833203 100644
--- a/wifi/Android.mk
+++ b/wifi/Android.mk
@@ -61,6 +61,9 @@ endif
 
 ifeq ($(BOARD_WLAN_DEVICE),UNITE)
   LOCAL_C_INCLUDES += $(LOCAL_PATH)/../../external/wpa_supplicant_ath/wpa_supplicant/src/common
+ifeq ($(TARGET_PRODUCT),sabresd_7d)
+  LOCAL_CFLAGS += -DSABRESD_7D
+endif
   LOCAL_SRC_FILES += wifi/wifi_unite.c
 else ifeq ($(BOARD_WLAN_VENDOR), INTEL)
   LOCAL_SRC_FILES += wifi/wifi_intel.c
diff --git a/wifi/wifi_unite.c b/wifi/wifi_unite.c
index 1ad1681..436f040 100644
--- a/wifi/wifi_unite.c
+++ b/wifi/wifi_unite.c
@@ -1,6 +1,6 @@
 /*
  * Copyright 2008, The Android Open Source Project
- * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ * Copyright (C) 2015 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,13 +42,18 @@
 enum Vendor {
     UNKNOWN = -1,
     ATHEROS = 0x1,
-    REALTEK = 0x2
+    REALTEK = 0x2,
+    BCM     = 0x3
 };
 enum RealtekDeviceModel {
     UNKNOWN_MODEL = -1,
     RTL8723AS = 0x0,
     RTL8821AS = 0x1
 };
+
+enum BroadcomDeviceModel {
+    BCM4335_4339 = 0x0
+};
 enum AthoresDeviceModel {
     ATHEROS_DEFAULT  = 0
 };
@@ -104,6 +109,11 @@ static char primary_iface[PROPERTY_VALUE_MAX];
 #define WIFI_DRIVER_LOADER_DELAY                1000000
 
 
+#define WIFI_DRIVER_MODULE_PATH_BCM              "/system/lib/modules/bcmdhd.ko"
+#define WIFI_DRIVER_MODULE_NAME_BCM              "bcmdhd"
+#define WIFI_DRIVER_MODULE_ARG_BCM               "firmware_path=/system/etc/firmware/bcm/fw_bcmdhd.bin nvram_path=/system/etc/firmware/bcm/bcmdhd.cal"
+#define WIFI_SDIO_IF_DRIVER_MODULE_PATH_BCM  "/system/lib/modules/cfg80211_realtek.ko"
+
 #define WIFI_DRIVER_MODULE_PATH_ATHEROS          "/system/lib/modules/ath6kl_sdio.ko"
 #define WIFI_DRIVER_MODULE_NAME_ATHEROS          "ath6kl_sdio"
 #define WIFI_DRIVER_MODULE_ARG_ATHEROS           "suspend_mode=3 wow_mode=2 ar6k_clock=26000000 ath6kl_p2p=1"
@@ -123,6 +133,11 @@ static char primary_iface[PROPERTY_VALUE_MAX];
 #define WIFI_DRIVER_MODULE_ARG_REALTEK_RTL8821AS           "ifname=wlan0 if2name=p2p0 rtw_vht_enable=2"
 #define WIFI_SDIO_IF_DRIVER_MODULE_PATH_REALTEK  "/system/lib/modules/cfg80211_realtek.ko"
 
+static const char DRIVER_MODULE_NAME_BCM[]          = WIFI_DRIVER_MODULE_NAME_BCM;
+static const char DRIVER_MODULE_TAG_BCM[]           = WIFI_DRIVER_MODULE_NAME_BCM " ";
+static const char DRIVER_MODULE_PATH_BCM[]          = WIFI_DRIVER_MODULE_PATH_BCM;
+static const char DRIVER_MODULE_ARG_BCM[]           = WIFI_DRIVER_MODULE_ARG_BCM;
+
 static const char DRIVER_MODULE_NAME_ATHEROS[]      = WIFI_DRIVER_MODULE_NAME_ATHEROS;
 static const char DRIVER_MODULE_TAG_ATHEROS[]       = WIFI_DRIVER_MODULE_NAME_ATHEROS " ";
 static const char DRIVER_MODULE_PATH_ATHEROS[]      = WIFI_DRIVER_MODULE_PATH_ATHEROS;
@@ -143,11 +158,15 @@ static const char* DRIVER_MODULE_ARG_REALTEK[]       = {WIFI_DRIVER_MODULE_ARG_R
                                                        WIFI_DRIVER_MODULE_ARG_REALTEK_RTL8821AS};
 static const char DRIVER_SDIO_IF_MODULE_PATH_REALTEK[]  = WIFI_SDIO_IF_DRIVER_MODULE_PATH_REALTEK;
 
+static const char DRIVER_SDIO_IF_MODULE_PATH_BCM[]  = WIFI_SDIO_IF_DRIVER_MODULE_PATH_BCM;
+
 static const char DRIVER_SDIO_IF_MODULE_NAME[]  = WIFI_SDIO_IF_DRIVER_MODULE_NAME;
 static const char DRIVER_SDIO_IF_MODULE_ARG[]   = WIFI_SDIO_IF_DRIVER_MODULE_ARG;
 
 static const char IFACE_DIR[]           = "/data/system/wpa_supplicant";
 
+static const char BCM_SUPP_PROP_NAME[]      = "init.svc.bcm_supplicant";
+static const char BCM_SUPPLICANT_NAME[]     = "bcm_supplicant";
 static const char FIRMWARE_LOADER[]     = WIFI_FIRMWARE_LOADER;
 static const char DRIVER_PROP_NAME[]    = "wlan.driver.status";
 static const char DRIVER_VENDOR_NAME[]  = "wlan.vendor";
@@ -232,8 +251,12 @@ int get_wifi_vendor_info(int* model)
             fclose(f);
             return ATHEROS;
         }
-        else
-        {
+        else if (value == 0x02d0) {
+            ALOGD("detect the BCM card");
+            property_set(DRIVER_VENDOR_NAME, "broadcom");
+            vendor = BCM;
+        }
+        else {
             fclose(f);
             *model = UNKNOWN_MODEL;
             return UNKNOWN;
@@ -248,20 +271,27 @@ int get_wifi_vendor_info(int* model)
         {
             ALOGD("read device info:%s",linebuf);
             value = strtol(linebuf, NULL, 16);
-            if (value == 0x8723)
-            {
-                ALOGD("realtek RTL8723AS detected!");
-                *model = RTL8723AS;
-            }
-            else if (value == 0x8821)
-            {
-                ALOGD("realtek RTL8821AS detected!");
-                *model = RTL8821AS;
-            }
-            else
-            {
-                ALOGE("realtek unkown device: %s ", linebuf);
-                *model = UNKNOWN_MODEL;
+            if (vendor == REALTEK) {
+                 if (value == 0x8723)
+                 {
+                     ALOGD("realtek RTL8723AS detected!");
+                     *model = RTL8723AS;
+                 }
+                 else if (value == 0x8821)
+                 {
+                     ALOGD("realtek RTL8821AS detected!");
+                     *model = RTL8821AS;
+                 }
+                 else
+                 {
+                     ALOGE("realtek unkown device: %s ", linebuf);
+                     *model = UNKNOWN_MODEL;
+                 }
+            } else if (vendor == BCM) {
+                if (value == 0x4335 || value == 0x4339) {
+                    ALOGD("bcm 4335/4339 detected!");
+                    *model = BCM4335_4339;
+                }
             }
         }
     } else
@@ -471,6 +501,8 @@ int is_wifi_driver_loaded() {
         return check_wifi_driver_loaded_strict(DRIVER_MODULE_TAG_ATHEROS);
     } else if (WifiVendor == REALTEK) {
         return check_wifi_driver_loaded_strict(DRIVER_MODULE_TAG_REALTEK[WifiModel]);
+    } else if (WifiVendor == BCM) {
+        return check_wifi_driver_loaded_strict(DRIVER_MODULE_NAME_BCM);
     } else
         return 0;//Unkown driver
 }
@@ -489,11 +521,19 @@ int wifi_insmod_driver_realtek()
     }
     return 0;
 }
+int wifi_insmod_driver_bcm()
+{
+    if (insmod(DRIVER_SDIO_IF_MODULE_PATH_BCM, DRIVER_SDIO_IF_MODULE_ARG) < 0)
+        return -1;
+
+    if (insmod(DRIVER_MODULE_PATH_BCM, DRIVER_MODULE_ARG_BCM) < 0)
+        return -1;
+    return 0;
+}
 int wifi_insmod_driver_atheros()
 {
     if (insmod(DRIVER_COMPAT_MODULE_PATH, DRIVER_COMPAT_MODULE_ARG) < 0)
         return -1;
-
     if (insmod(DRIVER_SDIO_IF_MODULE_PATH_ATHEROS, DRIVER_SDIO_IF_MODULE_ARG) < 0)
         return -1;
 
@@ -506,9 +546,13 @@ int wifi_load_driver()
     char driver_status[PROPERTY_VALUE_MAX];
     int count = 100; /* wait at most 20 seconds for completion */
     int ret;
-
+#ifdef SABRESD_7D
+    /* Sabresd_7d use BCM4339 by force */
+    WifiVendor = BCM;
+    WifiModel = BCM4335_4339;
+#else
     WifiVendor = get_wifi_vendor_info(&WifiModel);
-
+#endif
     if (is_wifi_driver_loaded()) {
         return 0;
     }
@@ -520,6 +564,12 @@ int wifi_load_driver()
         if (WifiModel == UNKNOWN_MODEL)
             return -1;
         ret =  wifi_insmod_driver_realtek();
+    } else if (WifiVendor == BCM) {
+        ALOGD("load driver bcm");
+        if (WifiModel == BCM4335_4339)
+            ret = wifi_insmod_driver_bcm();
+        else
+            ret = -1;
     } else
         return -1;
     if (ret < 0)
@@ -589,7 +639,9 @@ int wifi_unload_driver()
         return __wifi_unload_driver(DRIVER_MODULE_NAME_REALTEK[WifiModel], false);
     else if (WifiVendor == ATHEROS)
         return __wifi_unload_driver(DRIVER_MODULE_NAME_ATHEROS, true);
-    else
+    else if (WifiVendor == BCM) {
+        return __wifi_unload_driver(DRIVER_MODULE_NAME_BCM, false);
+    }
         return -1;
 }
 
@@ -808,6 +860,10 @@ int wifi_start_supplicant(int p2p_supported)
         } else if (WifiVendor == REALTEK) {
             strcpy(supplicant_name, P2P_SUPPLICANT_NAME_REALTEK[WifiModel]);
             strcpy(supplicant_prop_name, P2P_PROP_NAME_REALTEK[WifiModel]);
+        } else if (WifiVendor == BCM)
+        {
+            strcpy(supplicant_name, BCM_SUPPLICANT_NAME);
+            strcpy(supplicant_prop_name, BCM_SUPP_PROP_NAME);
         }
 
         /* Ensure p2p config file is created */
@@ -860,13 +916,15 @@ int wifi_start_supplicant(int p2p_supported)
     ALOGD("start supplicant cmd=%s iface=%s",supplicant_name,primary_iface);
     /* Check the interface exist*/
     if (p2p_supported) {
-        int count = 10; /* wait at most 1 seconds for completion */
-        while (wifi_ifname(SECONDARY) == NULL && count-- > 0) {
-            usleep(100000);
-        }
-        if (wifi_ifname(SECONDARY) == NULL) {
-            ALOGE("%s get wifi_ifname(SECONDARY) fail", __func__);
-            return -1;
+        if (WifiVendor != BCM) {
+            int count = 10; /* wait at most 1 seconds for completion */
+            while (wifi_ifname(SECONDARY) == NULL && count-- > 0) {
+                usleep(100000);
+            }
+            if (wifi_ifname(SECONDARY) == NULL) {
+                ALOGE("%s get wifi_ifname(SECONDARY) fail", __func__);
+                return -1;
+            }
         }
     }
     if(wifi_ifname(PRIMARY) == NULL) {
@@ -917,6 +975,11 @@ int wifi_stop_supplicant(int p2p_supported)
             strcpy(supplicant_name, P2P_SUPPLICANT_NAME_REALTEK[WifiModel]);
             strcpy(supplicant_prop_name, P2P_PROP_NAME_REALTEK[WifiModel]);
         }
+        else if( WifiVendor == BCM)
+        {
+            strcpy(supplicant_name, BCM_SUPPLICANT_NAME);
+            strcpy(supplicant_prop_name, BCM_SUPP_PROP_NAME);
+        }
     } else {
         strcpy(supplicant_name, SUPPLICANT_NAME);
         strcpy(supplicant_prop_name, SUPP_PROP_NAME);
-- 
1.8.0

