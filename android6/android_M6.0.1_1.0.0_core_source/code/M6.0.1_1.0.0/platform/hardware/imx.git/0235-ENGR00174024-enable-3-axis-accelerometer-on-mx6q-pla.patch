From 792c39f283eea5be37558e579c692ec9b12bab94 Mon Sep 17 00:00:00 2001
From: Xinyu Chen <b03824@freescale.com>
Date: Wed, 8 Feb 2012 12:28:22 +0800
Subject: [PATCH 235/635] ENGR00174024 enable 3 axis accelerometer on mx6q
 platform

Remove the workaround of bad design of the lvds and sensor
chip angle for mx53 smd.
Remove the correction of x/y/z by different hwrotation property.

Signed-off-by: Xinyu Chen <xinyu.chen@freescale.com>
---
 libsensors/AccelSensor.cpp | 64 +++++++++++++++-------------------------------
 libsensors/AccelSensor.h   |  3 +--
 libsensors/sensors.h       | 15 ++++-------
 3 files changed, 26 insertions(+), 56 deletions(-)

diff --git a/libsensors/AccelSensor.cpp b/libsensors/AccelSensor.cpp
index 10e4e62..06f940c 100755
--- a/libsensors/AccelSensor.cpp
+++ b/libsensors/AccelSensor.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Freescale Semiconductor Inc.
+ * Copyright (C) 2011-2012 Freescale Semiconductor, Inc.
  * Copyright (C) 2008 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -25,7 +25,6 @@
 #include <sys/select.h>
 #include <dlfcn.h>
 #include <cutils/log.h>
-#include <cutils/properties.h>
 
 #include "AccelSensor.h"
 
@@ -36,11 +35,8 @@ AccelSensor::AccelSensor()
       mPendingMask(0),
       mInputReader(32),
       mMinPollDelay(0),
-      mMaxPollDelay(0),
-      mHwRotation(0)
+      mMaxPollDelay(0)
 {
-    char  hwrotBuf[PROPERTY_VALUE_MAX];
-
 #if defined(ACCELEROMETER_SENSOR_MMA8451)
     data_name = "mma8451";
 #elif defined(ACCELEROMETER_SENSOR_MMA8450)
@@ -62,10 +58,22 @@ AccelSensor::AccelSensor()
     mPendingEvents[Accelerometer].type = SENSOR_TYPE_ACCELEROMETER;
     mPendingEvents[Accelerometer].acceleration.status = SENSOR_STATUS_ACCURACY_HIGH;
 
-    /* sensor abs_x/y/z convertion is related to default hardware display orientation
-       property and the chip position/direction of the sensor soldered in the board */
-    property_get("ro.sf.hwrotation", hwrotBuf, "0");
-    mHwRotation = atoi(hwrotBuf) / 90;
+    // read the actual value of all sensors if they're enabled already
+    struct input_absinfo absinfo;
+    short flags = 0;
+
+    if (accel_is_sensor_enabled(SENSOR_TYPE_ACCELEROMETER))  {
+        mEnabled |= 1<<Accelerometer;
+        if (!ioctl(data_fd, EVIOCGABS(EVENT_TYPE_ACCEL_X), &absinfo)) {
+            mPendingEvents[Accelerometer].acceleration.x = absinfo.value * CONVERT_A_X;
+        }
+        if (!ioctl(data_fd, EVIOCGABS(EVENT_TYPE_ACCEL_Y), &absinfo)) {
+            mPendingEvents[Accelerometer].acceleration.y = absinfo.value * CONVERT_A_Y;
+        }
+        if (!ioctl(data_fd, EVIOCGABS(EVENT_TYPE_ACCEL_Z), &absinfo)) {
+            mPendingEvents[Accelerometer].acceleration.z = absinfo.value * CONVERT_A_Z;
+        }
+    }
 }
 
 AccelSensor::~AccelSensor()
@@ -258,50 +266,18 @@ int AccelSensor::readEvents(sensors_event_t* data, int count)
 
 void AccelSensor::processEvent(int code, int value)
 {
-    float temp_x = 0.0f, temp_y = 0.0f, raw_x_ev = 0.0f, raw_y_ev = 0.0f;
-
     switch (code) {
         case EVENT_TYPE_ACCEL_X:
             mPendingMask |= 1<<Accelerometer;
-            temp_x = value * CONVERT_A_X;
-            raw_x_ev = 1;
+            mPendingEvents[Accelerometer].acceleration.x = value * CONVERT_A_X;
             break;
         case EVENT_TYPE_ACCEL_Y:
             mPendingMask |= 1<<Accelerometer;
-            temp_y = value * CONVERT_A_Y;
-            raw_y_ev = 1;
+            mPendingEvents[Accelerometer].acceleration.y = value * CONVERT_A_Y;
             break;
         case EVENT_TYPE_ACCEL_Z:
             mPendingMask |= 1<<Accelerometer;
             mPendingEvents[Accelerometer].acceleration.z = value * CONVERT_A_Z;
             break;
     }
-
-    /* Transfer to correct abs_x/y per hw orientation */
-    switch (mHwRotation) {
-        case HWROTATION_0:
-            if (raw_y_ev)
-                mPendingEvents[Accelerometer].acceleration.x = temp_y;
-            if (raw_x_ev)
-                mPendingEvents[Accelerometer].acceleration.y = -temp_x;
-            break;
-        case HWROTATION_90:
-            if (raw_x_ev)
-                mPendingEvents[Accelerometer].acceleration.x = temp_x;
-            if (raw_y_ev)
-                mPendingEvents[Accelerometer].acceleration.y = temp_y;
-            break;
-        case HWROTATION_180:
-            if (raw_y_ev)
-                mPendingEvents[Accelerometer].acceleration.x = -temp_y;
-            if (raw_x_ev)
-                mPendingEvents[Accelerometer].acceleration.y = temp_x;
-            break;
-        case HWROTATION_270:
-            if (raw_x_ev)
-                mPendingEvents[Accelerometer].acceleration.x = -temp_x;
-            if (raw_y_ev)
-                mPendingEvents[Accelerometer].acceleration.y = -temp_y;
-            break;
-    }
 }
diff --git a/libsensors/AccelSensor.h b/libsensors/AccelSensor.h
index 9ac0f32..119325f 100755
--- a/libsensors/AccelSensor.h
+++ b/libsensors/AccelSensor.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Freescale Semiconductor Inc.
+ * Copyright (C) 2011-2012 Freescale Semiconductor, Inc.
  * Copyright (C) 2008 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -56,7 +56,6 @@ private:
     char poll_sysfs_file[PATH_MAX];
     int poll_sysfs_file_len;
     int getPollFile(const char* inputName);
-    int mHwRotation;
     static inline int accel_is_sensor_enabled(uint32_t sensor_type)
     {
         //dummy now......
diff --git a/libsensors/sensors.h b/libsensors/sensors.h
index 152b57e..11fd986 100755
--- a/libsensors/sensors.h
+++ b/libsensors/sensors.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 Freescale Semiconductor Inc.
+ * Copyright (C) 2011-2012 Freescale Semiconductor, Inc.
  * Copyright (C) 2008 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -41,11 +41,6 @@ __BEGIN_DECLS
 #define ID_P  (4)
 #define ID_GY (5)
 
-#define HWROTATION_0   (0)
-#define HWROTATION_90  (1)
-#define HWROTATION_180 (2)
-#define HWROTATION_270 (3)
-
 /*****************************************************************************/
 
 /*
@@ -81,19 +76,19 @@ __BEGIN_DECLS
 #define RANGE_A                     (2*GRAVITY_EARTH)
 #define CONVERT_A                   (GRAVITY_EARTH / LSG)
 #define CONVERT_A_X                 (CONVERT_A)
-#define CONVERT_A_Y                 (-CONVERT_A)
-#define CONVERT_A_Z                 (-CONVERT_A)
+#define CONVERT_A_Y                 (CONVERT_A)
+#define CONVERT_A_Z                 (CONVERT_A)
 
 // conversion of magnetic data to uT units
 #define CONVERT_M                   (1.0f/20.0f)
-#define CONVERT_M_X                 (CONVERT_M)
+#define CONVERT_M_X                 (-CONVERT_M)
 #define CONVERT_M_Y                 (CONVERT_M)
 #define CONVERT_M_Z                 (-CONVERT_M)
 
 /* conversion of orientation data to degree units */
 #define CONVERT_O                   (1.0f/100.0f)
 #define CONVERT_O_Y                 (CONVERT_O)
-#define CONVERT_O_P                 (CONVERT_O)
+#define CONVERT_O_P                 (-CONVERT_O)
 #define CONVERT_O_R                 (CONVERT_O)
 
 #define SENSOR_STATE_MASK           (0x7FFF)
-- 
1.8.0

