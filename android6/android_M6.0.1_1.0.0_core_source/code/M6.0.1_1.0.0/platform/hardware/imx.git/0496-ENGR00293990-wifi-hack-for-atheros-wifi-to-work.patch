From 7fd366ed48b1d65e83e1db15cf9c1f3a7af61057 Mon Sep 17 00:00:00 2001
From: Jianzheng Zhou <jianzheng.zhou@freescale.com>
Date: Wed, 19 Feb 2014 16:20:33 +0800
Subject: [PATCH 496/635] ENGR00293990 wifi:hack for atheros wifi to work

Based on old wifi driver, hack some codes to let it work in
our kernel3.10. One known issue is for its debugfs interface
always created failure.Considering it is only for debug. Just
ignore it for now.

failure cause:ath6kl_debug_init_fs return error.

Signed-off-by: Jianzheng Zhou <jianzheng.zhou@freescale.com>
---
 wlan/atheros/compat-wireless/config.mk             |  10 +-
 .../drivers/net/wireless/ath/ath6kl/init.c         |  10 +-
 .../drivers/net/wireless/ath/ath6kl/testmode.c     |   4 +-
 .../drivers/net/wireless/ath/ath6kl/wmiconfig.c    |   4 +-
 .../include/linux/compat_autoconf.h                |   6 -
 .../atheros/compat-wireless/include/linux/export.h |   4 +-
 wlan/atheros/compat-wireless/net/mac80211/cfg.c    |   2 +-
 wlan/atheros/compat-wireless/net/mac80211/led.c    |   2 +-
 .../compat-wireless/net/mac80211/mesh_pathtbl.c    |  44 +-
 .../atheros/compat-wireless/net/wireless/nl80211.c | 606 ++++++++++-----------
 10 files changed, 340 insertions(+), 352 deletions(-)

diff --git a/wlan/atheros/compat-wireless/config.mk b/wlan/atheros/compat-wireless/config.mk
index 93e9fdd..54b746d 100644
--- a/wlan/atheros/compat-wireless/config.mk
+++ b/wlan/atheros/compat-wireless/config.mk
@@ -250,11 +250,11 @@ endif #CONFIG_PCMCIA
 # and changes from kernel version to version. We are using the 
 # wireless_handlers attribute which will be activated by 
 # CONFIG_WIRELESS_EXT. 
-ifdef CONFIG_WIRELESS_EXT
-CONFIG_CFG80211_WEXT=y
-else #CONFIG_CFG80211_WEXT
-$(warning "WARNING: CONFIG_CFG80211_WEXT will be deactivated or not working because kernel was compiled with CONFIG_WIRELESS_EXT=n. Tools using wext interface like iwconfig will not work. To activate it build your kernel e.g. with CONFIG_LIBIPW=m.")
-endif #CONFIG_WIRELESS_EXT
+# ifdef CONFIG_WIRELESS_EXT
+# CONFIG_CFG80211_WEXT=y
+# else #CONFIG_CFG80211_WEXT
+# $(warning "WARNING: CONFIG_CFG80211_WEXT will be deactivated or not working because kernel was compiled with CONFIG_WIRELESS_EXT=n. Tools using wext interface like iwconfig will not work. To activate it build your kernel e.g. with CONFIG_LIBIPW=m.")
+# endif #CONFIG_WIRELESS_EXT
 
 ifdef CONFIG_STAGING
 CONFIG_COMPAT_STAGING=m
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/init.c b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/init.c
index f03d6e6..a843330 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/init.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/init.c
@@ -1961,12 +1961,16 @@ int ath6kl_core_init(struct ath6kl *ar)
 		set_bit(DESTROY_IN_PROGRESS, &ar->flag);
 		goto err_reg_cleanup;
 	}
-
-	ret = ath6kl_debug_init_fs(ar);
+    /*create debugfs dir already return error in our kernel3.10.
+      still under check why, considering it is only for debug,
+      we can ignore this step for now.
+      */
+	/*ret = ath6kl_debug_init_fs(ar);
 	if (ret) {
+		ath6kl_err("Failed to init debug: %d\n", ret);
 		set_bit(DESTROY_IN_PROGRESS, &ar->flag);
 		goto err_wiphy_cleanup;
-	}
+	}*/
 
 	for (i = 0; i < ar->vif_max; i++)
 		ar->avail_idx_map |= BIT(i);
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/testmode.c b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/testmode.c
index 942537c..9342d18 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/testmode.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/testmode.c
@@ -59,8 +59,8 @@ void ath6kl_tm_rx_event(struct ath6kl *ar, void *buf, size_t buf_len)
 		ath6kl_warn("failed to allocate testmode rx skb!\n");
 		return;
 	}
-	NLA_PUT_U32(skb, ATH6KL_TM_ATTR_CMD, ATH6KL_TM_CMD_TCMD);
-	NLA_PUT(skb, ATH6KL_TM_ATTR_DATA, buf_len, buf);
+	nla_put_u32(skb, ATH6KL_TM_ATTR_CMD, ATH6KL_TM_CMD_TCMD);
+	nla_put(skb, ATH6KL_TM_ATTR_DATA, buf_len, buf);
 	cfg80211_testmode_event(skb, GFP_KERNEL);
 	return;
 
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/wmiconfig.c b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/wmiconfig.c
index bb60ed2..5d96cf6 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/wmiconfig.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath6kl/wmiconfig.c
@@ -64,8 +64,8 @@ void ath6kl_tm_rx_wmi_event(struct ath6kl *ar, void *buf, size_t buf_len)
 		ath6kl_warn("failed to allocate testmode rx skb!\n");
 		return;
 	}
-	NLA_PUT_U32(skb, ATH6KL_TM_ATTR_CMD, ATH6KL_TM_CMD_WMI_CMD);
-	NLA_PUT(skb, ATH6KL_TM_ATTR_DATA, buf_len, buf);
+	nla_put_u32(skb, ATH6KL_TM_ATTR_CMD, ATH6KL_TM_CMD_WMI_CMD);
+	nla_put(skb, ATH6KL_TM_ATTR_DATA, buf_len, buf);
 	cfg80211_testmode_event(skb, GFP_KERNEL);
 	return;
 
diff --git a/wlan/atheros/compat-wireless/include/linux/compat_autoconf.h b/wlan/atheros/compat-wireless/include/linux/compat_autoconf.h
index 70d5432..9242e6e 100644
--- a/wlan/atheros/compat-wireless/include/linux/compat_autoconf.h
+++ b/wlan/atheros/compat-wireless/include/linux/compat_autoconf.h
@@ -169,12 +169,6 @@
 #define CONFIG_BT_HCIBTUART 1
 #endif /* CONFIG_BT_HCIBTUART */ 
 #endif /* CONFIG_PCMCIA */
-#if defined(CONFIG_WIRELESS_EXT) || defined(CONFIG_WIRELESS_EXT_MODULE)
-#ifndef CONFIG_CFG80211_WEXT
-#define CONFIG_CFG80211_WEXT 1
-#endif /* CONFIG_CFG80211_WEXT */ 
-#else /* CONFIG_CFG80211_WEXT */
-#endif /* CONFIG_WIRELESS_EXT */
 #if defined(CONFIG_STAGING) || defined(CONFIG_STAGING_MODULE)
 #ifndef CONFIG_COMPAT_STAGING
 #define CONFIG_COMPAT_STAGING 1
diff --git a/wlan/atheros/compat-wireless/include/linux/export.h b/wlan/atheros/compat-wireless/include/linux/export.h
index 3e69147..d7a9a08 100644
--- a/wlan/atheros/compat-wireless/include/linux/export.h
+++ b/wlan/atheros/compat-wireless/include/linux/export.h
@@ -21,8 +21,8 @@
 
 #include <linux/version.h>
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,0,0))
-
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0))
+#include_next <linux/export.h>
 #else
 #include <linux/module.h>
 #endif /* (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)) */
diff --git a/wlan/atheros/compat-wireless/net/mac80211/cfg.c b/wlan/atheros/compat-wireless/net/mac80211/cfg.c
index 1063a7e..4aa02b9 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/cfg.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/cfg.c
@@ -1866,7 +1866,7 @@ static int ieee80211_remain_on_channel_hw(struct ieee80211_local *local,
 	if (local->hw_roc_cookie)
 		return -EBUSY;
 	/* must be nonzero */
-	random_cookie = random32() | 1;
+	random_cookie = prandom_u32() | 1;
 
 	*cookie = random_cookie;
 	local->hw_roc_dev = dev;
diff --git a/wlan/atheros/compat-wireless/net/mac80211/led.c b/wlan/atheros/compat-wireless/net/mac80211/led.c
index 1bf7903..bcffa69 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/led.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/led.c
@@ -276,7 +276,7 @@ static void ieee80211_stop_tpt_led_trig(struct ieee80211_local *local)
 
 	read_lock(&tpt_trig->trig.leddev_list_lock);
 	list_for_each_entry(led_cdev, &tpt_trig->trig.led_cdevs, trig_list)
-		led_brightness_set(led_cdev, LED_OFF);
+		led_set_brightness(led_cdev, LED_OFF);
 	read_unlock(&tpt_trig->trig.leddev_list_lock);
 }
 
diff --git a/wlan/atheros/compat-wireless/net/mac80211/mesh_pathtbl.c b/wlan/atheros/compat-wireless/net/mac80211/mesh_pathtbl.c
index 4fc23d1..00fc797 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/mesh_pathtbl.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/mesh_pathtbl.c
@@ -77,9 +77,9 @@ static int mesh_gate_add(struct mesh_table *tbl, struct mesh_path *mpath);
  * it's used twice. So it is illegal to do
  *	for_each_mesh_entry(rcu_dereference(...), ...)
  */
-#define for_each_mesh_entry(tbl, p, node, i) \
+#define for_each_mesh_entry(tbl,node, i) \
 	for (i = 0; i <= tbl->hash_mask; i++) \
-		hlist_for_each_entry_rcu(node, p, &tbl->hash_buckets[i], list)
+		hlist_for_each_entry_rcu(node, &tbl->hash_buckets[i], list)
 
 
 static struct mesh_table *mesh_table_alloc(int size_order)
@@ -144,7 +144,7 @@ static void mesh_table_free(struct mesh_table *tbl, bool free_leafs)
 	}
 	if (free_leafs) {
 		spin_lock_bh(&tbl->gates_lock);
-		hlist_for_each_entry_safe(gate, p, q,
+		hlist_for_each_entry_safe(gate, q,
 					 tbl->known_gates, list) {
 			hlist_del(&gate->list);
 			kfree(gate);
@@ -340,12 +340,11 @@ static struct mesh_path *path_lookup(struct mesh_table *tbl, u8 *dst,
 					  struct ieee80211_sub_if_data *sdata)
 {
 	struct mesh_path *mpath;
-	struct hlist_node *n;
 	struct hlist_head *bucket;
 	struct mpath_node *node;
 
 	bucket = &tbl->hash_buckets[mesh_table_hash(dst, sdata, tbl)];
-	hlist_for_each_entry_rcu(node, n, bucket, list) {
+	hlist_for_each_entry_rcu(node,bucket, list) {
 		mpath = node->mpath;
 		if (mpath->sdata == sdata &&
 				memcmp(dst, mpath->dst, ETH_ALEN) == 0) {
@@ -393,11 +392,10 @@ struct mesh_path *mesh_path_lookup_by_idx(int idx, struct ieee80211_sub_if_data
 {
 	struct mesh_table *tbl = rcu_dereference(mesh_paths);
 	struct mpath_node *node;
-	struct hlist_node *p;
 	int i;
 	int j = 0;
 
-	for_each_mesh_entry(tbl, p, node, i) {
+	for_each_mesh_entry(tbl,node, i) {
 		if (sdata && node->mpath->sdata != sdata)
 			continue;
 		if (j++ == idx) {
@@ -430,13 +428,12 @@ static void mesh_gate_node_reclaim(struct rcu_head *rp)
 static int mesh_gate_add(struct mesh_table *tbl, struct mesh_path *mpath)
 {
 	struct mpath_node *gate, *new_gate;
-	struct hlist_node *n;
 	int err;
 
 	rcu_read_lock();
 	tbl = rcu_dereference(tbl);
 
-	hlist_for_each_entry_rcu(gate, n, tbl->known_gates, list)
+	hlist_for_each_entry_rcu(gate,tbl->known_gates, list)
 		if (gate->mpath == mpath) {
 			err = -EEXIST;
 			goto err_rcu;
@@ -476,11 +473,11 @@ err_rcu:
 static int mesh_gate_del(struct mesh_table *tbl, struct mesh_path *mpath)
 {
 	struct mpath_node *gate;
-	struct hlist_node *p, *q;
+	struct hlist_node *q;
 
 	tbl = rcu_dereference(tbl);
 
-	hlist_for_each_entry_safe(gate, p, q, tbl->known_gates, list)
+	hlist_for_each_entry_safe(gate, q, tbl->known_gates, list)
 		if (gate->mpath == mpath) {
 			spin_lock_bh(&tbl->gates_lock);
 			hlist_del_rcu(&gate->list);
@@ -533,7 +530,6 @@ int mesh_path_add(u8 *dst, struct ieee80211_sub_if_data *sdata)
 	struct mesh_path *mpath, *new_mpath;
 	struct mpath_node *node, *new_node;
 	struct hlist_head *bucket;
-	struct hlist_node *n;
 	int grow = 0;
 	int err = 0;
 	u32 hash_idx;
@@ -577,7 +573,7 @@ int mesh_path_add(u8 *dst, struct ieee80211_sub_if_data *sdata)
 	spin_lock_bh(&tbl->hashwlock[hash_idx]);
 
 	err = -EEXIST;
-	hlist_for_each_entry(node, n, bucket, list) {
+	hlist_for_each_entry(node, bucket, list) {
 		mpath = node->mpath;
 		if (mpath->sdata == sdata && memcmp(dst, mpath->dst, ETH_ALEN) == 0)
 			goto err_exists;
@@ -705,7 +701,7 @@ int mpp_path_add(u8 *dst, u8 *mpp, struct ieee80211_sub_if_data *sdata)
 	spin_lock_bh(&tbl->hashwlock[hash_idx]);
 
 	err = -EEXIST;
-	hlist_for_each_entry(node, n, bucket, list) {
+	hlist_for_each_entry(node,bucket, list) {
 		mpath = node->mpath;
 		if (mpath->sdata == sdata && memcmp(dst, mpath->dst, ETH_ALEN) == 0)
 			goto err_exists;
@@ -749,14 +745,13 @@ void mesh_plink_broken(struct sta_info *sta)
 	static const u8 bcast[ETH_ALEN] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 	struct mesh_path *mpath;
 	struct mpath_node *node;
-	struct hlist_node *p;
 	struct ieee80211_sub_if_data *sdata = sta->sdata;
 	int i;
 	__le16 reason = cpu_to_le16(WLAN_REASON_MESH_PATH_DEST_UNREACHABLE);
 
 	rcu_read_lock();
 	tbl = rcu_dereference(mesh_paths);
-	for_each_mesh_entry(tbl, p, node, i) {
+	for_each_mesh_entry(tbl,node, i) {
 		mpath = node->mpath;
 		if (rcu_dereference(mpath->next_hop) == sta &&
 		    mpath->flags & MESH_PATH_ACTIVE &&
@@ -815,13 +810,12 @@ void mesh_path_flush_by_nexthop(struct sta_info *sta)
 	struct mesh_table *tbl;
 	struct mesh_path *mpath;
 	struct mpath_node *node;
-	struct hlist_node *p;
 	int i;
 
 	rcu_read_lock();
 	read_lock_bh(&pathtbl_resize_lock);
 	tbl = resize_dereference_mesh_paths();
-	for_each_mesh_entry(tbl, p, node, i) {
+	for_each_mesh_entry(tbl, node, i) {
 		mpath = node->mpath;
 		if (rcu_dereference(mpath->next_hop) == sta) {
 			spin_lock_bh(&tbl->hashwlock[i]);
@@ -838,11 +832,10 @@ static void table_flush_by_iface(struct mesh_table *tbl,
 {
 	struct mesh_path *mpath;
 	struct mpath_node *node;
-	struct hlist_node *p;
 	int i;
 
 	WARN_ON(!rcu_read_lock_held());
-	for_each_mesh_entry(tbl, p, node, i) {
+	for_each_mesh_entry(tbl, node, i) {
 		mpath = node->mpath;
 		if (mpath->sdata != sdata)
 			continue;
@@ -888,7 +881,6 @@ int mesh_path_del(u8 *addr, struct ieee80211_sub_if_data *sdata)
 	struct mesh_path *mpath;
 	struct mpath_node *node;
 	struct hlist_head *bucket;
-	struct hlist_node *n;
 	int hash_idx;
 	int err = 0;
 
@@ -898,7 +890,7 @@ int mesh_path_del(u8 *addr, struct ieee80211_sub_if_data *sdata)
 	bucket = &tbl->hash_buckets[hash_idx];
 
 	spin_lock_bh(&tbl->hashwlock[hash_idx]);
-	hlist_for_each_entry(node, n, bucket, list) {
+	hlist_for_each_entry(node, bucket, list) {
 		mpath = node->mpath;
 		if (mpath->sdata == sdata &&
 		    memcmp(addr, mpath->dst, ETH_ALEN) == 0) {
@@ -943,7 +935,6 @@ void mesh_path_tx_pending(struct mesh_path *mpath)
 int mesh_path_send_to_gates(struct mesh_path *mpath)
 {
 	struct ieee80211_sub_if_data *sdata = mpath->sdata;
-	struct hlist_node *n;
 	struct mesh_table *tbl;
 	struct mesh_path *from_mpath = mpath;
 	struct mpath_node *gate = NULL;
@@ -958,7 +949,7 @@ int mesh_path_send_to_gates(struct mesh_path *mpath)
 	if (!known_gates)
 		return -EHOSTUNREACH;
 
-	hlist_for_each_entry_rcu(gate, n, known_gates, list) {
+	hlist_for_each_entry_rcu(gate, known_gates, list) {
 		if (gate->mpath->sdata != sdata)
 			continue;
 
@@ -973,7 +964,7 @@ int mesh_path_send_to_gates(struct mesh_path *mpath)
 		}
 	}
 
-	hlist_for_each_entry_rcu(gate, n, known_gates, list)
+	hlist_for_each_entry_rcu(gate, known_gates, list)
 		if (gate->mpath->sdata == sdata) {
 			mpath_dbg("Sending to %pM\n", gate->mpath->dst);
 			mesh_path_tx_pending(gate->mpath);
@@ -1145,12 +1136,11 @@ void mesh_path_expire(struct ieee80211_sub_if_data *sdata)
 	struct mesh_table *tbl;
 	struct mesh_path *mpath;
 	struct mpath_node *node;
-	struct hlist_node *p;
 	int i;
 
 	rcu_read_lock();
 	tbl = rcu_dereference(mesh_paths);
-	for_each_mesh_entry(tbl, p, node, i) {
+	for_each_mesh_entry(tbl, node, i) {
 		if (node->mpath->sdata != sdata)
 			continue;
 		mpath = node->mpath;
diff --git a/wlan/atheros/compat-wireless/net/wireless/nl80211.c b/wlan/atheros/compat-wireless/net/wireless/nl80211.c
index 1677f85..55a10ae 100644
--- a/wlan/atheros/compat-wireless/net/wireless/nl80211.c
+++ b/wlan/atheros/compat-wireless/net/wireless/nl80211.c
@@ -365,19 +365,19 @@ static inline void *nl80211hdr_put(struct sk_buff *skb, u32 pid, u32 seq,
 static int nl80211_msg_put_channel(struct sk_buff *msg,
 				   struct ieee80211_channel *chan)
 {
-	NLA_PUT_U32(msg, NL80211_FREQUENCY_ATTR_FREQ,
+	nla_put_u32(msg, NL80211_FREQUENCY_ATTR_FREQ,
 		    chan->center_freq);
 
 	if (chan->flags & IEEE80211_CHAN_DISABLED)
-		NLA_PUT_FLAG(msg, NL80211_FREQUENCY_ATTR_DISABLED);
+		nla_put_flag(msg, NL80211_FREQUENCY_ATTR_DISABLED);
 	if (chan->flags & IEEE80211_CHAN_PASSIVE_SCAN)
-		NLA_PUT_FLAG(msg, NL80211_FREQUENCY_ATTR_PASSIVE_SCAN);
+		nla_put_flag(msg, NL80211_FREQUENCY_ATTR_PASSIVE_SCAN);
 	if (chan->flags & IEEE80211_CHAN_NO_IBSS)
-		NLA_PUT_FLAG(msg, NL80211_FREQUENCY_ATTR_NO_IBSS);
+		nla_put_flag(msg, NL80211_FREQUENCY_ATTR_NO_IBSS);
 	if (chan->flags & IEEE80211_CHAN_RADAR)
-		NLA_PUT_FLAG(msg, NL80211_FREQUENCY_ATTR_RADAR);
+		nla_put_flag(msg, NL80211_FREQUENCY_ATTR_RADAR);
 
-	NLA_PUT_U32(msg, NL80211_FREQUENCY_ATTR_MAX_TX_POWER,
+	nla_put_u32(msg, NL80211_FREQUENCY_ATTR_MAX_TX_POWER,
 		    DBM_TO_MBM(chan->max_power));
 
 	return 0;
@@ -632,7 +632,7 @@ static int nl80211_put_iftypes(struct sk_buff *msg, u32 attr, u16 ifmodes)
 	i = 0;
 	while (ifmodes) {
 		if (ifmodes & 1)
-			NLA_PUT_FLAG(msg, i);
+			nla_put_flag(msg, i);
 		ifmodes >>= 1;
 		i++;
 	}
@@ -675,7 +675,7 @@ static int nl80211_put_iface_combinations(struct wiphy *wiphy,
 			nl_limit = nla_nest_start(msg, j + 1);
 			if (!nl_limit)
 				goto nla_put_failure;
-			NLA_PUT_U32(msg, NL80211_IFACE_LIMIT_MAX,
+			nla_put_u32(msg, NL80211_IFACE_LIMIT_MAX,
 				    c->limits[j].max);
 			if (nl80211_put_iftypes(msg, NL80211_IFACE_LIMIT_TYPES,
 						c->limits[j].types))
@@ -686,11 +686,11 @@ static int nl80211_put_iface_combinations(struct wiphy *wiphy,
 		nla_nest_end(msg, nl_limits);
 
 		if (c->beacon_int_infra_match)
-			NLA_PUT_FLAG(msg,
+			nla_put_flag(msg,
 				NL80211_IFACE_COMB_STA_AP_BI_MATCH);
-		NLA_PUT_U32(msg, NL80211_IFACE_COMB_NUM_CHANNELS,
+		nla_put_u32(msg, NL80211_IFACE_COMB_NUM_CHANNELS,
 			    c->num_different_channels);
-		NLA_PUT_U32(msg, NL80211_IFACE_COMB_MAXNUM,
+		nla_put_u32(msg, NL80211_IFACE_COMB_MAXNUM,
 			    c->max_interfaces);
 
 		nla_nest_end(msg, nl_combi);
@@ -722,63 +722,63 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 	if (!hdr)
 		return -1;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, dev->wiphy_idx);
-	NLA_PUT_STRING(msg, NL80211_ATTR_WIPHY_NAME, wiphy_name(&dev->wiphy));
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, dev->wiphy_idx);
+	nla_put_string(msg, NL80211_ATTR_WIPHY_NAME, wiphy_name(&dev->wiphy));
 
-	NLA_PUT_U32(msg, NL80211_ATTR_GENERATION,
+	nla_put_u32(msg, NL80211_ATTR_GENERATION,
 		    cfg80211_rdev_list_generation);
 
-	NLA_PUT_U8(msg, NL80211_ATTR_WIPHY_RETRY_SHORT,
+	nla_put_u8(msg, NL80211_ATTR_WIPHY_RETRY_SHORT,
 		   dev->wiphy.retry_short);
-	NLA_PUT_U8(msg, NL80211_ATTR_WIPHY_RETRY_LONG,
+	nla_put_u8(msg, NL80211_ATTR_WIPHY_RETRY_LONG,
 		   dev->wiphy.retry_long);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_FRAG_THRESHOLD,
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_FRAG_THRESHOLD,
 		    dev->wiphy.frag_threshold);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_RTS_THRESHOLD,
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_RTS_THRESHOLD,
 		    dev->wiphy.rts_threshold);
-	NLA_PUT_U8(msg, NL80211_ATTR_WIPHY_COVERAGE_CLASS,
+	nla_put_u8(msg, NL80211_ATTR_WIPHY_COVERAGE_CLASS,
 		    dev->wiphy.coverage_class);
-	NLA_PUT_U8(msg, NL80211_ATTR_MAX_NUM_SCAN_SSIDS,
+	nla_put_u8(msg, NL80211_ATTR_MAX_NUM_SCAN_SSIDS,
 		   dev->wiphy.max_scan_ssids);
-	NLA_PUT_U8(msg, NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS,
+	nla_put_u8(msg, NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS,
 		   dev->wiphy.max_sched_scan_ssids);
-	NLA_PUT_U16(msg, NL80211_ATTR_MAX_SCAN_IE_LEN,
+	nla_put_u16(msg, NL80211_ATTR_MAX_SCAN_IE_LEN,
 		    dev->wiphy.max_scan_ie_len);
-	NLA_PUT_U16(msg, NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN,
+	nla_put_u16(msg, NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN,
 		    dev->wiphy.max_sched_scan_ie_len);
-	NLA_PUT_U8(msg, NL80211_ATTR_MAX_MATCH_SETS,
+	nla_put_u8(msg, NL80211_ATTR_MAX_MATCH_SETS,
 		   dev->wiphy.max_match_sets);
 
 	if (dev->wiphy.flags & WIPHY_FLAG_IBSS_RSN)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_SUPPORT_IBSS_RSN);
+		nla_put_flag(msg, NL80211_ATTR_SUPPORT_IBSS_RSN);
 	if (dev->wiphy.flags & WIPHY_FLAG_MESH_AUTH)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_SUPPORT_MESH_AUTH);
+		nla_put_flag(msg, NL80211_ATTR_SUPPORT_MESH_AUTH);
 	if (dev->wiphy.flags & WIPHY_FLAG_AP_UAPSD)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_SUPPORT_AP_UAPSD);
+		nla_put_flag(msg, NL80211_ATTR_SUPPORT_AP_UAPSD);
 	if (dev->wiphy.flags & WIPHY_FLAG_SUPPORTS_FW_ROAM)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_ROAM_SUPPORT);
+		nla_put_flag(msg, NL80211_ATTR_ROAM_SUPPORT);
 	if (dev->wiphy.flags & WIPHY_FLAG_SUPPORTS_TDLS)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_TDLS_SUPPORT);
+		nla_put_flag(msg, NL80211_ATTR_TDLS_SUPPORT);
 	if (dev->wiphy.flags & WIPHY_FLAG_TDLS_EXTERNAL_SETUP)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_TDLS_EXTERNAL_SETUP);
+		nla_put_flag(msg, NL80211_ATTR_TDLS_EXTERNAL_SETUP);
 
-	NLA_PUT(msg, NL80211_ATTR_CIPHER_SUITES,
+	nla_put(msg, NL80211_ATTR_CIPHER_SUITES,
 		sizeof(u32) * dev->wiphy.n_cipher_suites,
 		dev->wiphy.cipher_suites);
 
-	NLA_PUT_U8(msg, NL80211_ATTR_MAX_NUM_PMKIDS,
+	nla_put_u8(msg, NL80211_ATTR_MAX_NUM_PMKIDS,
 		   dev->wiphy.max_num_pmkids);
 
 	if (dev->wiphy.flags & WIPHY_FLAG_CONTROL_PORT_PROTOCOL)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_CONTROL_PORT_ETHERTYPE);
+		nla_put_flag(msg, NL80211_ATTR_CONTROL_PORT_ETHERTYPE);
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX,
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX,
 		    dev->wiphy.available_antennas_tx);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX,
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX,
 		    dev->wiphy.available_antennas_rx);
 
 	if (dev->wiphy.flags & WIPHY_FLAG_AP_PROBE_RESP_OFFLOAD)
-		NLA_PUT_U32(msg, NL80211_ATTR_PROBE_RESP_OFFLOAD,
+		nla_put_u32(msg, NL80211_ATTR_PROBE_RESP_OFFLOAD,
 			    dev->wiphy.probe_resp_offload);
 
 	if ((dev->wiphy.available_antennas_tx ||
@@ -787,8 +787,8 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 		int res;
 		res = dev->ops->get_antenna(&dev->wiphy, &tx_ant, &rx_ant);
 		if (!res) {
-			NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_ANTENNA_TX, tx_ant);
-			NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_ANTENNA_RX, rx_ant);
+			nla_put_u32(msg, NL80211_ATTR_WIPHY_ANTENNA_TX, tx_ant);
+			nla_put_u32(msg, NL80211_ATTR_WIPHY_ANTENNA_RX, rx_ant);
 		}
 	}
 
@@ -810,14 +810,14 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 
 		/* add HT info */
 		if (dev->wiphy.bands[band]->ht_cap.ht_supported) {
-			NLA_PUT(msg, NL80211_BAND_ATTR_HT_MCS_SET,
+			nla_put(msg, NL80211_BAND_ATTR_HT_MCS_SET,
 				sizeof(dev->wiphy.bands[band]->ht_cap.mcs),
 				&dev->wiphy.bands[band]->ht_cap.mcs);
-			NLA_PUT_U16(msg, NL80211_BAND_ATTR_HT_CAPA,
+			nla_put_u16(msg, NL80211_BAND_ATTR_HT_CAPA,
 				dev->wiphy.bands[band]->ht_cap.cap);
-			NLA_PUT_U8(msg, NL80211_BAND_ATTR_HT_AMPDU_FACTOR,
+			nla_put_u8(msg, NL80211_BAND_ATTR_HT_AMPDU_FACTOR,
 				dev->wiphy.bands[band]->ht_cap.ampdu_factor);
-			NLA_PUT_U8(msg, NL80211_BAND_ATTR_HT_AMPDU_DENSITY,
+			nla_put_u8(msg, NL80211_BAND_ATTR_HT_AMPDU_DENSITY,
 				dev->wiphy.bands[band]->ht_cap.ampdu_density);
 		}
 
@@ -852,10 +852,10 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 				goto nla_put_failure;
 
 			rate = &dev->wiphy.bands[band]->bitrates[i];
-			NLA_PUT_U32(msg, NL80211_BITRATE_ATTR_RATE,
+			nla_put_u32(msg, NL80211_BITRATE_ATTR_RATE,
 				    rate->bitrate);
 			if (rate->flags & IEEE80211_RATE_SHORT_PREAMBLE)
-				NLA_PUT_FLAG(msg,
+				nla_put_flag(msg,
 					NL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE);
 
 			nla_nest_end(msg, nl_rate);
@@ -876,7 +876,7 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 	 do {							\
 		if (dev->ops->op) {				\
 			i++;					\
-			NLA_PUT_U32(msg, i, NL80211_CMD_ ## n);	\
+			nla_put_u32(msg, i, NL80211_CMD_ ## n);	\
 		}						\
 	} while (0)
 
@@ -903,7 +903,7 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 	CMD(mgmt_tx_cancel_wait, FRAME_WAIT_CANCEL);
 	if (dev->wiphy.flags & WIPHY_FLAG_NETNS_OK) {
 		i++;
-		NLA_PUT_U32(msg, i, NL80211_CMD_SET_WIPHY_NETNS);
+		nla_put_u32(msg, i, NL80211_CMD_SET_WIPHY_NETNS);
 	}
 	CMD(set_channel, SET_CHANNEL);
 	CMD(set_wds_peer, SET_WDS_PEER);
@@ -916,29 +916,29 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 	CMD(probe_client, PROBE_CLIENT);
 	if (dev->wiphy.flags & WIPHY_FLAG_REPORTS_OBSS) {
 		i++;
-		NLA_PUT_U32(msg, i, NL80211_CMD_REGISTER_BEACONS);
+		nla_put_u32(msg, i, NL80211_CMD_REGISTER_BEACONS);
 	}
 
 #undef CMD
 
 	if (dev->ops->connect || dev->ops->auth) {
 		i++;
-		NLA_PUT_U32(msg, i, NL80211_CMD_CONNECT);
+		nla_put_u32(msg, i, NL80211_CMD_CONNECT);
 	}
 
 	if (dev->ops->disconnect || dev->ops->deauth) {
 		i++;
-		NLA_PUT_U32(msg, i, NL80211_CMD_DISCONNECT);
+		nla_put_u32(msg, i, NL80211_CMD_DISCONNECT);
 	}
 
 	nla_nest_end(msg, nl_cmds);
 
 	if (dev->ops->remain_on_channel)
-		NLA_PUT_U32(msg, NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION,
+		nla_put_u32(msg, NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION,
 			    dev->wiphy.max_remain_on_channel_duration);
 
 	if (dev->ops->mgmt_tx_cancel_wait)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_OFFCHANNEL_TX_OK);
+		nla_put_flag(msg, NL80211_ATTR_OFFCHANNEL_TX_OK);
 
 	if (mgmt_stypes) {
 		u16 stypes;
@@ -957,7 +957,7 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 			stypes = mgmt_stypes[ift].tx;
 			while (stypes) {
 				if (stypes & 1)
-					NLA_PUT_U16(msg, NL80211_ATTR_FRAME_TYPE,
+					nla_put_u16(msg, NL80211_ATTR_FRAME_TYPE,
 						    (i << 4) | IEEE80211_FTYPE_MGMT);
 				stypes >>= 1;
 				i++;
@@ -979,7 +979,7 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 			stypes = mgmt_stypes[ift].rx;
 			while (stypes) {
 				if (stypes & 1)
-					NLA_PUT_U16(msg, NL80211_ATTR_FRAME_TYPE,
+					nla_put_u16(msg, NL80211_ATTR_FRAME_TYPE,
 						    (i << 4) | IEEE80211_FTYPE_MGMT);
 				stypes >>= 1;
 				i++;
@@ -998,21 +998,21 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 			goto nla_put_failure;
 
 		if (dev->wiphy.wowlan.flags & WIPHY_WOWLAN_ANY)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_ANY);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_ANY);
 		if (dev->wiphy.wowlan.flags & WIPHY_WOWLAN_DISCONNECT)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_DISCONNECT);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_DISCONNECT);
 		if (dev->wiphy.wowlan.flags & WIPHY_WOWLAN_MAGIC_PKT)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_MAGIC_PKT);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_MAGIC_PKT);
 		if (dev->wiphy.wowlan.flags & WIPHY_WOWLAN_SUPPORTS_GTK_REKEY)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED);
 		if (dev->wiphy.wowlan.flags & WIPHY_WOWLAN_GTK_REKEY_FAILURE)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE);
 		if (dev->wiphy.wowlan.flags & WIPHY_WOWLAN_EAP_IDENTITY_REQ)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST);
 		if (dev->wiphy.wowlan.flags & WIPHY_WOWLAN_4WAY_HANDSHAKE)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE);
 		if (dev->wiphy.wowlan.flags & WIPHY_WOWLAN_RFKILL_RELEASE)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_RFKILL_RELEASE);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_RFKILL_RELEASE);
 		if (dev->wiphy.wowlan.n_patterns) {
 			struct nl80211_wowlan_pattern_support pat = {
 				.max_patterns = dev->wiphy.wowlan.n_patterns,
@@ -1021,7 +1021,7 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 				.max_pattern_len =
 					dev->wiphy.wowlan.pattern_max_len,
 			};
-			NLA_PUT(msg, NL80211_WOWLAN_TRIG_PKT_PATTERN,
+			nla_put(msg, NL80211_WOWLAN_TRIG_PKT_PATTERN,
 				sizeof(pat), &pat);
 		}
 
@@ -1036,10 +1036,10 @@ static int nl80211_send_wiphy(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 		goto nla_put_failure;
 
 	if (dev->wiphy.flags & WIPHY_FLAG_HAVE_AP_SME)
-		NLA_PUT_U32(msg, NL80211_ATTR_DEVICE_AP_SME,
+		nla_put_u32(msg, NL80211_ATTR_DEVICE_AP_SME,
 			    dev->wiphy.ap_sme_capa);
 
-	NLA_PUT_U32(msg, NL80211_ATTR_FEATURE_FLAGS, dev->wiphy.features);
+	nla_put_u32(msg, NL80211_ATTR_FEATURE_FLAGS, dev->wiphy.features);
 
 	return genlmsg_end(msg, hdr);
 
@@ -1060,7 +1060,7 @@ static int nl80211_dump_wiphy(struct sk_buff *skb, struct netlink_callback *cb)
 			continue;
 		if (++idx <= start)
 			continue;
-		if (nl80211_send_wiphy(skb, NETLINK_CB(cb->skb).pid,
+		if (nl80211_send_wiphy(skb, NETLINK_CB(cb->skb).portid,
 				       cb->nlh->nlmsg_seq, NLM_F_MULTI,
 				       dev) < 0) {
 			idx--;
@@ -1083,7 +1083,7 @@ static int nl80211_get_wiphy(struct sk_buff *skb, struct genl_info *info)
 	if (!msg)
 		return -ENOMEM;
 
-	if (nl80211_send_wiphy(msg, info->snd_pid, info->snd_seq, 0, dev) < 0) {
+	if (nl80211_send_wiphy(msg, info->snd_portid, info->snd_seq, 0, dev) < 0) {
 		nlmsg_free(msg);
 		return -ENOBUFS;
 	}
@@ -1482,12 +1482,12 @@ static int nl80211_send_iface(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 	if (!hdr)
 		return -1;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_STRING(msg, NL80211_ATTR_IFNAME, dev->name);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFTYPE, dev->ieee80211_ptr->iftype);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_string(msg, NL80211_ATTR_IFNAME, dev->name);
+	nla_put_u32(msg, NL80211_ATTR_IFTYPE, dev->ieee80211_ptr->iftype);
 
-	NLA_PUT_U32(msg, NL80211_ATTR_GENERATION,
+	nla_put_u32(msg, NL80211_ATTR_GENERATION,
 		    rdev->devlist_generation ^
 			(cfg80211_rdev_list_generation << 2));
 
@@ -1523,7 +1523,7 @@ static int nl80211_dump_interface(struct sk_buff *skb, struct netlink_callback *
 				if_idx++;
 				continue;
 			}
-			if (nl80211_send_iface(skb, NETLINK_CB(cb->skb).pid,
+			if (nl80211_send_iface(skb, NETLINK_CB(cb->skb).portid,
 					       cb->nlh->nlmsg_seq, NLM_F_MULTI,
 					       rdev, wdev->netdev) < 0) {
 				mutex_unlock(&rdev->devlist_mtx);
@@ -1554,7 +1554,7 @@ static int nl80211_get_interface(struct sk_buff *skb, struct genl_info *info)
 	if (!msg)
 		return -ENOMEM;
 
-	if (nl80211_send_iface(msg, info->snd_pid, info->snd_seq, 0,
+	if (nl80211_send_iface(msg, info->snd_portid, info->snd_seq, 0,
 			       dev, netdev) < 0) {
 		nlmsg_free(msg);
 		return -ENOBUFS;
@@ -1771,15 +1771,15 @@ static void get_key_callback(void *c, struct key_params *params)
 	struct get_key_cookie *cookie = c;
 
 	if (params->key)
-		NLA_PUT(cookie->msg, NL80211_ATTR_KEY_DATA,
+		nla_put(cookie->msg, NL80211_ATTR_KEY_DATA,
 			params->key_len, params->key);
 
 	if (params->seq)
-		NLA_PUT(cookie->msg, NL80211_ATTR_KEY_SEQ,
+		nla_put(cookie->msg, NL80211_ATTR_KEY_SEQ,
 			params->seq_len, params->seq);
 
 	if (params->cipher)
-		NLA_PUT_U32(cookie->msg, NL80211_ATTR_KEY_CIPHER,
+		nla_put_u32(cookie->msg, NL80211_ATTR_KEY_CIPHER,
 			    params->cipher);
 
 	key = nla_nest_start(cookie->msg, NL80211_ATTR_KEY);
@@ -1787,18 +1787,18 @@ static void get_key_callback(void *c, struct key_params *params)
 		goto nla_put_failure;
 
 	if (params->key)
-		NLA_PUT(cookie->msg, NL80211_KEY_DATA,
+		nla_put(cookie->msg, NL80211_KEY_DATA,
 			params->key_len, params->key);
 
 	if (params->seq)
-		NLA_PUT(cookie->msg, NL80211_KEY_SEQ,
+		nla_put(cookie->msg, NL80211_KEY_SEQ,
 			params->seq_len, params->seq);
 
 	if (params->cipher)
-		NLA_PUT_U32(cookie->msg, NL80211_KEY_CIPHER,
+		nla_put_u32(cookie->msg, NL80211_KEY_CIPHER,
 			    params->cipher);
 
-	NLA_PUT_U8(cookie->msg, NL80211_ATTR_KEY_IDX, cookie->idx);
+	nla_put_u8(cookie->msg, NL80211_ATTR_KEY_IDX, cookie->idx);
 
 	nla_nest_end(cookie->msg, key);
 
@@ -1848,7 +1848,7 @@ static int nl80211_get_key(struct sk_buff *skb, struct genl_info *info)
 	if (!msg)
 		return -ENOMEM;
 
-	hdr = nl80211hdr_put(msg, info->snd_pid, info->snd_seq, 0,
+	hdr = nl80211hdr_put(msg, info->snd_portid, info->snd_seq, 0,
 			     NL80211_CMD_NEW_KEY);
 	if (IS_ERR(hdr))
 		return PTR_ERR(hdr);
@@ -1856,10 +1856,10 @@ static int nl80211_get_key(struct sk_buff *skb, struct genl_info *info)
 	cookie.msg = msg;
 	cookie.idx = key_idx;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
-	NLA_PUT_U8(msg, NL80211_ATTR_KEY_IDX, key_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put_u8(msg, NL80211_ATTR_KEY_IDX, key_idx);
 	if (mac_addr)
-		NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, mac_addr);
+		nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, mac_addr);
 
 	if (pairwise && mac_addr &&
 	    !(rdev->wiphy.flags & WIPHY_FLAG_IBSS_RSN))
@@ -2391,14 +2391,14 @@ static bool nl80211_put_sta_rate(struct sk_buff *msg, struct rate_info *info,
 	/* cfg80211_calculate_bitrate will return 0 for mcs >= 32 */
 	bitrate = cfg80211_calculate_bitrate(info);
 	if (bitrate > 0)
-		NLA_PUT_U16(msg, NL80211_RATE_INFO_BITRATE, bitrate);
+		nla_put_u16(msg, NL80211_RATE_INFO_BITRATE, bitrate);
 
 	if (info->flags & RATE_INFO_FLAGS_MCS)
-		NLA_PUT_U8(msg, NL80211_RATE_INFO_MCS, info->mcs);
+		nla_put_u8(msg, NL80211_RATE_INFO_MCS, info->mcs);
 	if (info->flags & RATE_INFO_FLAGS_40_MHZ_WIDTH)
-		NLA_PUT_FLAG(msg, NL80211_RATE_INFO_40_MHZ_WIDTH);
+		nla_put_flag(msg, NL80211_RATE_INFO_40_MHZ_WIDTH);
 	if (info->flags & RATE_INFO_FLAGS_SHORT_GI)
-		NLA_PUT_FLAG(msg, NL80211_RATE_INFO_SHORT_GI);
+		nla_put_flag(msg, NL80211_RATE_INFO_SHORT_GI);
 
 	nla_nest_end(msg, rate);
 	return true;
@@ -2418,40 +2418,40 @@ static int nl80211_send_station(struct sk_buff *msg, u32 pid, u32 seq,
 	if (!hdr)
 		return -1;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, mac_addr);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, mac_addr);
 
-	NLA_PUT_U32(msg, NL80211_ATTR_GENERATION, sinfo->generation);
+	nla_put_u32(msg, NL80211_ATTR_GENERATION, sinfo->generation);
 
 	sinfoattr = nla_nest_start(msg, NL80211_ATTR_STA_INFO);
 	if (!sinfoattr)
 		goto nla_put_failure;
 	if (sinfo->filled & STATION_INFO_CONNECTED_TIME)
-		NLA_PUT_U32(msg, NL80211_STA_INFO_CONNECTED_TIME,
+		nla_put_u32(msg, NL80211_STA_INFO_CONNECTED_TIME,
 			    sinfo->connected_time);
 	if (sinfo->filled & STATION_INFO_INACTIVE_TIME)
-		NLA_PUT_U32(msg, NL80211_STA_INFO_INACTIVE_TIME,
+		nla_put_u32(msg, NL80211_STA_INFO_INACTIVE_TIME,
 			    sinfo->inactive_time);
 	if (sinfo->filled & STATION_INFO_RX_BYTES)
-		NLA_PUT_U32(msg, NL80211_STA_INFO_RX_BYTES,
+		nla_put_u32(msg, NL80211_STA_INFO_RX_BYTES,
 			    sinfo->rx_bytes);
 	if (sinfo->filled & STATION_INFO_TX_BYTES)
-		NLA_PUT_U32(msg, NL80211_STA_INFO_TX_BYTES,
+		nla_put_u32(msg, NL80211_STA_INFO_TX_BYTES,
 			    sinfo->tx_bytes);
 	if (sinfo->filled & STATION_INFO_LLID)
-		NLA_PUT_U16(msg, NL80211_STA_INFO_LLID,
+		nla_put_u16(msg, NL80211_STA_INFO_LLID,
 			    sinfo->llid);
 	if (sinfo->filled & STATION_INFO_PLID)
-		NLA_PUT_U16(msg, NL80211_STA_INFO_PLID,
+		nla_put_u16(msg, NL80211_STA_INFO_PLID,
 			    sinfo->plid);
 	if (sinfo->filled & STATION_INFO_PLINK_STATE)
-		NLA_PUT_U8(msg, NL80211_STA_INFO_PLINK_STATE,
+		nla_put_u8(msg, NL80211_STA_INFO_PLINK_STATE,
 			    sinfo->plink_state);
 	if (sinfo->filled & STATION_INFO_SIGNAL)
-		NLA_PUT_U8(msg, NL80211_STA_INFO_SIGNAL,
+		nla_put_u8(msg, NL80211_STA_INFO_SIGNAL,
 			   sinfo->signal);
 	if (sinfo->filled & STATION_INFO_SIGNAL_AVG)
-		NLA_PUT_U8(msg, NL80211_STA_INFO_SIGNAL_AVG,
+		nla_put_u8(msg, NL80211_STA_INFO_SIGNAL_AVG,
 			   sinfo->signal_avg);
 	if (sinfo->filled & STATION_INFO_TX_BITRATE) {
 		if (!nl80211_put_sta_rate(msg, &sinfo->txrate,
@@ -2464,16 +2464,16 @@ static int nl80211_send_station(struct sk_buff *msg, u32 pid, u32 seq,
 			goto nla_put_failure;
 	}
 	if (sinfo->filled & STATION_INFO_RX_PACKETS)
-		NLA_PUT_U32(msg, NL80211_STA_INFO_RX_PACKETS,
+		nla_put_u32(msg, NL80211_STA_INFO_RX_PACKETS,
 			    sinfo->rx_packets);
 	if (sinfo->filled & STATION_INFO_TX_PACKETS)
-		NLA_PUT_U32(msg, NL80211_STA_INFO_TX_PACKETS,
+		nla_put_u32(msg, NL80211_STA_INFO_TX_PACKETS,
 			    sinfo->tx_packets);
 	if (sinfo->filled & STATION_INFO_TX_RETRIES)
-		NLA_PUT_U32(msg, NL80211_STA_INFO_TX_RETRIES,
+		nla_put_u32(msg, NL80211_STA_INFO_TX_RETRIES,
 			    sinfo->tx_retries);
 	if (sinfo->filled & STATION_INFO_TX_FAILED)
-		NLA_PUT_U32(msg, NL80211_STA_INFO_TX_FAILED,
+		nla_put_u32(msg, NL80211_STA_INFO_TX_FAILED,
 			    sinfo->tx_failed);
 	if (sinfo->filled & STATION_INFO_BSS_PARAM) {
 		bss_param = nla_nest_start(msg, NL80211_STA_INFO_BSS_PARAM);
@@ -2481,27 +2481,27 @@ static int nl80211_send_station(struct sk_buff *msg, u32 pid, u32 seq,
 			goto nla_put_failure;
 
 		if (sinfo->bss_param.flags & BSS_PARAM_FLAGS_CTS_PROT)
-			NLA_PUT_FLAG(msg, NL80211_STA_BSS_PARAM_CTS_PROT);
+			nla_put_flag(msg, NL80211_STA_BSS_PARAM_CTS_PROT);
 		if (sinfo->bss_param.flags & BSS_PARAM_FLAGS_SHORT_PREAMBLE)
-			NLA_PUT_FLAG(msg, NL80211_STA_BSS_PARAM_SHORT_PREAMBLE);
+			nla_put_flag(msg, NL80211_STA_BSS_PARAM_SHORT_PREAMBLE);
 		if (sinfo->bss_param.flags & BSS_PARAM_FLAGS_SHORT_SLOT_TIME)
-			NLA_PUT_FLAG(msg,
+			nla_put_flag(msg,
 				     NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME);
-		NLA_PUT_U8(msg, NL80211_STA_BSS_PARAM_DTIM_PERIOD,
+		nla_put_u8(msg, NL80211_STA_BSS_PARAM_DTIM_PERIOD,
 			   sinfo->bss_param.dtim_period);
-		NLA_PUT_U16(msg, NL80211_STA_BSS_PARAM_BEACON_INTERVAL,
+		nla_put_u16(msg, NL80211_STA_BSS_PARAM_BEACON_INTERVAL,
 			    sinfo->bss_param.beacon_interval);
 
 		nla_nest_end(msg, bss_param);
 	}
 	if (sinfo->filled & STATION_INFO_STA_FLAGS)
-		NLA_PUT(msg, NL80211_STA_INFO_STA_FLAGS,
+		nla_put(msg, NL80211_STA_INFO_STA_FLAGS,
 			sizeof(struct nl80211_sta_flag_update),
 			&sinfo->sta_flags);
 	nla_nest_end(msg, sinfoattr);
 
 	if (sinfo->filled & STATION_INFO_ASSOC_REQ_IES)
-		NLA_PUT(msg, NL80211_ATTR_IE, sinfo->assoc_req_ies_len,
+		nla_put(msg, NL80211_ATTR_IE, sinfo->assoc_req_ies_len,
 			sinfo->assoc_req_ies);
 
 	return genlmsg_end(msg, hdr);
@@ -2540,7 +2540,7 @@ static int nl80211_dump_station(struct sk_buff *skb,
 			goto out_err;
 
 		if (nl80211_send_station(skb,
-				NETLINK_CB(cb->skb).pid,
+				NETLINK_CB(cb->skb).portid,
 				cb->nlh->nlmsg_seq, NLM_F_MULTI,
 				netdev, mac_addr,
 				&sinfo) < 0)
@@ -2586,7 +2586,7 @@ static int nl80211_get_station(struct sk_buff *skb, struct genl_info *info)
 	if (!msg)
 		return -ENOMEM;
 
-	if (nl80211_send_station(msg, info->snd_pid, info->snd_seq, 0,
+	if (nl80211_send_station(msg, info->snd_portid, info->snd_seq, 0,
 				 dev, mac_addr, &sinfo) < 0) {
 		nlmsg_free(msg);
 		return -ENOBUFS;
@@ -2890,35 +2890,35 @@ static int nl80211_send_mpath(struct sk_buff *msg, u32 pid, u32 seq,
 	if (!hdr)
 		return -1;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, dst);
-	NLA_PUT(msg, NL80211_ATTR_MPATH_NEXT_HOP, ETH_ALEN, next_hop);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, dst);
+	nla_put(msg, NL80211_ATTR_MPATH_NEXT_HOP, ETH_ALEN, next_hop);
 
-	NLA_PUT_U32(msg, NL80211_ATTR_GENERATION, pinfo->generation);
+	nla_put_u32(msg, NL80211_ATTR_GENERATION, pinfo->generation);
 
 	pinfoattr = nla_nest_start(msg, NL80211_ATTR_MPATH_INFO);
 	if (!pinfoattr)
 		goto nla_put_failure;
 	if (pinfo->filled & MPATH_INFO_FRAME_QLEN)
-		NLA_PUT_U32(msg, NL80211_MPATH_INFO_FRAME_QLEN,
+		nla_put_u32(msg, NL80211_MPATH_INFO_FRAME_QLEN,
 			    pinfo->frame_qlen);
 	if (pinfo->filled & MPATH_INFO_SN)
-		NLA_PUT_U32(msg, NL80211_MPATH_INFO_SN,
+		nla_put_u32(msg, NL80211_MPATH_INFO_SN,
 			    pinfo->sn);
 	if (pinfo->filled & MPATH_INFO_METRIC)
-		NLA_PUT_U32(msg, NL80211_MPATH_INFO_METRIC,
+		nla_put_u32(msg, NL80211_MPATH_INFO_METRIC,
 			    pinfo->metric);
 	if (pinfo->filled & MPATH_INFO_EXPTIME)
-		NLA_PUT_U32(msg, NL80211_MPATH_INFO_EXPTIME,
+		nla_put_u32(msg, NL80211_MPATH_INFO_EXPTIME,
 			    pinfo->exptime);
 	if (pinfo->filled & MPATH_INFO_FLAGS)
-		NLA_PUT_U8(msg, NL80211_MPATH_INFO_FLAGS,
+		nla_put_u8(msg, NL80211_MPATH_INFO_FLAGS,
 			    pinfo->flags);
 	if (pinfo->filled & MPATH_INFO_DISCOVERY_TIMEOUT)
-		NLA_PUT_U32(msg, NL80211_MPATH_INFO_DISCOVERY_TIMEOUT,
+		nla_put_u32(msg, NL80211_MPATH_INFO_DISCOVERY_TIMEOUT,
 			    pinfo->discovery_timeout);
 	if (pinfo->filled & MPATH_INFO_DISCOVERY_RETRIES)
-		NLA_PUT_U8(msg, NL80211_MPATH_INFO_DISCOVERY_RETRIES,
+		nla_put_u8(msg, NL80211_MPATH_INFO_DISCOVERY_RETRIES,
 			    pinfo->discovery_retries);
 
 	nla_nest_end(msg, pinfoattr);
@@ -2963,7 +2963,7 @@ static int nl80211_dump_mpath(struct sk_buff *skb,
 		if (err)
 			goto out_err;
 
-		if (nl80211_send_mpath(skb, NETLINK_CB(cb->skb).pid,
+		if (nl80211_send_mpath(skb, NETLINK_CB(cb->skb).portid,
 				       cb->nlh->nlmsg_seq, NLM_F_MULTI,
 				       netdev, dst, next_hop,
 				       &pinfo) < 0)
@@ -3012,7 +3012,7 @@ static int nl80211_get_mpath(struct sk_buff *skb, struct genl_info *info)
 	if (!msg)
 		return -ENOMEM;
 
-	if (nl80211_send_mpath(msg, info->snd_pid, info->snd_seq, 0,
+	if (nl80211_send_mpath(msg, info->snd_portid, info->snd_seq, 0,
 				 dev, dst, next_hop, &pinfo) < 0) {
 		nlmsg_free(msg);
 		return -ENOBUFS;
@@ -3238,47 +3238,47 @@ static int nl80211_get_mesh_config(struct sk_buff *skb,
 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
 	if (!msg)
 		return -ENOMEM;
-	hdr = nl80211hdr_put(msg, info->snd_pid, info->snd_seq, 0,
+	hdr = nl80211hdr_put(msg, info->snd_portid, info->snd_seq, 0,
 			     NL80211_CMD_GET_MESH_CONFIG);
 	if (!hdr)
 		goto out;
 	pinfoattr = nla_nest_start(msg, NL80211_ATTR_MESH_CONFIG);
 	if (!pinfoattr)
 		goto nla_put_failure;
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
-	NLA_PUT_U16(msg, NL80211_MESHCONF_RETRY_TIMEOUT,
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put_u16(msg, NL80211_MESHCONF_RETRY_TIMEOUT,
 			cur_params.dot11MeshRetryTimeout);
-	NLA_PUT_U16(msg, NL80211_MESHCONF_CONFIRM_TIMEOUT,
+	nla_put_u16(msg, NL80211_MESHCONF_CONFIRM_TIMEOUT,
 			cur_params.dot11MeshConfirmTimeout);
-	NLA_PUT_U16(msg, NL80211_MESHCONF_HOLDING_TIMEOUT,
+	nla_put_u16(msg, NL80211_MESHCONF_HOLDING_TIMEOUT,
 			cur_params.dot11MeshHoldingTimeout);
-	NLA_PUT_U16(msg, NL80211_MESHCONF_MAX_PEER_LINKS,
+	nla_put_u16(msg, NL80211_MESHCONF_MAX_PEER_LINKS,
 			cur_params.dot11MeshMaxPeerLinks);
-	NLA_PUT_U8(msg, NL80211_MESHCONF_MAX_RETRIES,
+	nla_put_u8(msg, NL80211_MESHCONF_MAX_RETRIES,
 			cur_params.dot11MeshMaxRetries);
-	NLA_PUT_U8(msg, NL80211_MESHCONF_TTL,
+	nla_put_u8(msg, NL80211_MESHCONF_TTL,
 			cur_params.dot11MeshTTL);
-	NLA_PUT_U8(msg, NL80211_MESHCONF_ELEMENT_TTL,
+	nla_put_u8(msg, NL80211_MESHCONF_ELEMENT_TTL,
 			cur_params.element_ttl);
-	NLA_PUT_U8(msg, NL80211_MESHCONF_AUTO_OPEN_PLINKS,
+	nla_put_u8(msg, NL80211_MESHCONF_AUTO_OPEN_PLINKS,
 			cur_params.auto_open_plinks);
-	NLA_PUT_U8(msg, NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES,
+	nla_put_u8(msg, NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES,
 			cur_params.dot11MeshHWMPmaxPREQretries);
-	NLA_PUT_U32(msg, NL80211_MESHCONF_PATH_REFRESH_TIME,
+	nla_put_u32(msg, NL80211_MESHCONF_PATH_REFRESH_TIME,
 			cur_params.path_refresh_time);
-	NLA_PUT_U16(msg, NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT,
+	nla_put_u16(msg, NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT,
 			cur_params.min_discovery_timeout);
-	NLA_PUT_U32(msg, NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT,
+	nla_put_u32(msg, NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT,
 			cur_params.dot11MeshHWMPactivePathTimeout);
-	NLA_PUT_U16(msg, NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL,
+	nla_put_u16(msg, NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL,
 			cur_params.dot11MeshHWMPpreqMinInterval);
-	NLA_PUT_U16(msg, NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME,
+	nla_put_u16(msg, NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME,
 			cur_params.dot11MeshHWMPnetDiameterTraversalTime);
-	NLA_PUT_U8(msg, NL80211_MESHCONF_HWMP_ROOTMODE,
+	nla_put_u8(msg, NL80211_MESHCONF_HWMP_ROOTMODE,
 			cur_params.dot11MeshHWMPRootMode);
-	NLA_PUT_U16(msg, NL80211_MESHCONF_HWMP_RANN_INTERVAL,
+	nla_put_u16(msg, NL80211_MESHCONF_HWMP_RANN_INTERVAL,
 			cur_params.dot11MeshHWMPRannInterval);
-	NLA_PUT_U8(msg, NL80211_MESHCONF_GATE_ANNOUNCEMENTS,
+	nla_put_u8(msg, NL80211_MESHCONF_GATE_ANNOUNCEMENTS,
 			cur_params.dot11MeshGateAnnouncementProtocol);
 	nla_nest_end(msg, pinfoattr);
 	genlmsg_end(msg, hdr);
@@ -3495,12 +3495,12 @@ static int nl80211_get_reg(struct sk_buff *skb, struct genl_info *info)
 		goto out;
 	}
 
-	hdr = nl80211hdr_put(msg, info->snd_pid, info->snd_seq, 0,
+	hdr = nl80211hdr_put(msg, info->snd_portid, info->snd_seq, 0,
 			     NL80211_CMD_GET_REG);
 	if (!hdr)
 		goto put_failure;
 
-	NLA_PUT_STRING(msg, NL80211_ATTR_REG_ALPHA2,
+	nla_put_string(msg, NL80211_ATTR_REG_ALPHA2,
 		cfg80211_regdomain->alpha2);
 
 	nl_reg_rules = nla_nest_start(msg, NL80211_ATTR_REG_RULES);
@@ -3521,17 +3521,17 @@ static int nl80211_get_reg(struct sk_buff *skb, struct genl_info *info)
 		if (!nl_reg_rule)
 			goto nla_put_failure;
 
-		NLA_PUT_U32(msg, NL80211_ATTR_REG_RULE_FLAGS,
+		nla_put_u32(msg, NL80211_ATTR_REG_RULE_FLAGS,
 			reg_rule->flags);
-		NLA_PUT_U32(msg, NL80211_ATTR_FREQ_RANGE_START,
+		nla_put_u32(msg, NL80211_ATTR_FREQ_RANGE_START,
 			freq_range->start_freq_khz);
-		NLA_PUT_U32(msg, NL80211_ATTR_FREQ_RANGE_END,
+		nla_put_u32(msg, NL80211_ATTR_FREQ_RANGE_END,
 			freq_range->end_freq_khz);
-		NLA_PUT_U32(msg, NL80211_ATTR_FREQ_RANGE_MAX_BW,
+		nla_put_u32(msg, NL80211_ATTR_FREQ_RANGE_MAX_BW,
 			freq_range->max_bandwidth_khz);
-		NLA_PUT_U32(msg, NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN,
+		nla_put_u32(msg, NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN,
 			power_rule->max_antenna_gain);
-		NLA_PUT_U32(msg, NL80211_ATTR_POWER_RULE_MAX_EIRP,
+		nla_put_u32(msg, NL80211_ATTR_POWER_RULE_MAX_EIRP,
 			power_rule->max_eirp);
 
 		nla_nest_end(msg, nl_reg_rule);
@@ -4092,44 +4092,44 @@ static int nl80211_send_bss(struct sk_buff *msg, struct netlink_callback *cb,
 
 	ASSERT_WDEV_LOCK(wdev);
 
-	hdr = nl80211hdr_put(msg, NETLINK_CB(cb->skb).pid, seq, flags,
+	hdr = nl80211hdr_put(msg, NETLINK_CB(cb->skb).portid, seq, flags,
 			     NL80211_CMD_NEW_SCAN_RESULTS);
 	if (!hdr)
 		return -1;
 
 	genl_dump_check_consistent(cb, hdr, &nl80211_fam);
 
-	NLA_PUT_U32(msg, NL80211_ATTR_GENERATION, rdev->bss_generation);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, wdev->netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_GENERATION, rdev->bss_generation);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, wdev->netdev->ifindex);
 
 	bss = nla_nest_start(msg, NL80211_ATTR_BSS);
 	if (!bss)
 		goto nla_put_failure;
 	if (!is_zero_ether_addr(res->bssid))
-		NLA_PUT(msg, NL80211_BSS_BSSID, ETH_ALEN, res->bssid);
+		nla_put(msg, NL80211_BSS_BSSID, ETH_ALEN, res->bssid);
 	if (res->information_elements && res->len_information_elements)
-		NLA_PUT(msg, NL80211_BSS_INFORMATION_ELEMENTS,
+		nla_put(msg, NL80211_BSS_INFORMATION_ELEMENTS,
 			res->len_information_elements,
 			res->information_elements);
 	if (res->beacon_ies && res->len_beacon_ies &&
 	    res->beacon_ies != res->information_elements)
-		NLA_PUT(msg, NL80211_BSS_BEACON_IES,
+		nla_put(msg, NL80211_BSS_BEACON_IES,
 			res->len_beacon_ies, res->beacon_ies);
 	if (res->tsf)
-		NLA_PUT_U64(msg, NL80211_BSS_TSF, res->tsf);
+		nla_put_u64(msg, NL80211_BSS_TSF, res->tsf);
 	if (res->beacon_interval)
-		NLA_PUT_U16(msg, NL80211_BSS_BEACON_INTERVAL, res->beacon_interval);
-	NLA_PUT_U16(msg, NL80211_BSS_CAPABILITY, res->capability);
-	NLA_PUT_U32(msg, NL80211_BSS_FREQUENCY, res->channel->center_freq);
-	NLA_PUT_U32(msg, NL80211_BSS_SEEN_MS_AGO,
+		nla_put_u16(msg, NL80211_BSS_BEACON_INTERVAL, res->beacon_interval);
+	nla_put_u16(msg, NL80211_BSS_CAPABILITY, res->capability);
+	nla_put_u32(msg, NL80211_BSS_FREQUENCY, res->channel->center_freq);
+	nla_put_u32(msg, NL80211_BSS_SEEN_MS_AGO,
 		jiffies_to_msecs(jiffies - intbss->ts));
 
 	switch (rdev->wiphy.signal_type) {
 	case CFG80211_SIGNAL_TYPE_MBM:
-		NLA_PUT_U32(msg, NL80211_BSS_SIGNAL_MBM, res->signal);
+		nla_put_u32(msg, NL80211_BSS_SIGNAL_MBM, res->signal);
 		break;
 	case CFG80211_SIGNAL_TYPE_UNSPEC:
-		NLA_PUT_U8(msg, NL80211_BSS_SIGNAL_UNSPEC, res->signal);
+		nla_put_u8(msg, NL80211_BSS_SIGNAL_UNSPEC, res->signal);
 		break;
 	default:
 		break;
@@ -4139,19 +4139,19 @@ static int nl80211_send_bss(struct sk_buff *msg, struct netlink_callback *cb,
 	case NL80211_IFTYPE_P2P_CLIENT:
 	case NL80211_IFTYPE_STATION:
 		if (intbss == wdev->current_bss)
-			NLA_PUT_U32(msg, NL80211_BSS_STATUS,
+			nla_put_u32(msg, NL80211_BSS_STATUS,
 				    NL80211_BSS_STATUS_ASSOCIATED);
 		else for (i = 0; i < MAX_AUTH_BSSES; i++) {
 			if (intbss != wdev->auth_bsses[i])
 				continue;
-			NLA_PUT_U32(msg, NL80211_BSS_STATUS,
+			nla_put_u32(msg, NL80211_BSS_STATUS,
 				    NL80211_BSS_STATUS_AUTHENTICATED);
 			break;
 		}
 		break;
 	case NL80211_IFTYPE_ADHOC:
 		if (intbss == wdev->current_bss)
-			NLA_PUT_U32(msg, NL80211_BSS_STATUS,
+			nla_put_u32(msg, NL80211_BSS_STATUS,
 				    NL80211_BSS_STATUS_IBSS_JOINED);
 		break;
 	default:
@@ -4223,33 +4223,33 @@ static int nl80211_send_survey(struct sk_buff *msg, u32 pid, u32 seq,
 	if (!hdr)
 		return -ENOMEM;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
 
 	infoattr = nla_nest_start(msg, NL80211_ATTR_SURVEY_INFO);
 	if (!infoattr)
 		goto nla_put_failure;
 
-	NLA_PUT_U32(msg, NL80211_SURVEY_INFO_FREQUENCY,
+	nla_put_u32(msg, NL80211_SURVEY_INFO_FREQUENCY,
 		    survey->channel->center_freq);
 	if (survey->filled & SURVEY_INFO_NOISE_DBM)
-		NLA_PUT_U8(msg, NL80211_SURVEY_INFO_NOISE,
+		nla_put_u8(msg, NL80211_SURVEY_INFO_NOISE,
 			    survey->noise);
 	if (survey->filled & SURVEY_INFO_IN_USE)
-		NLA_PUT_FLAG(msg, NL80211_SURVEY_INFO_IN_USE);
+		nla_put_flag(msg, NL80211_SURVEY_INFO_IN_USE);
 	if (survey->filled & SURVEY_INFO_CHANNEL_TIME)
-		NLA_PUT_U64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME,
+		nla_put_u64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME,
 			    survey->channel_time);
 	if (survey->filled & SURVEY_INFO_CHANNEL_TIME_BUSY)
-		NLA_PUT_U64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY,
+		nla_put_u64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY,
 			    survey->channel_time_busy);
 	if (survey->filled & SURVEY_INFO_CHANNEL_TIME_EXT_BUSY)
-		NLA_PUT_U64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY,
+		nla_put_u64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY,
 			    survey->channel_time_ext_busy);
 	if (survey->filled & SURVEY_INFO_CHANNEL_TIME_RX)
-		NLA_PUT_U64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME_RX,
+		nla_put_u64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME_RX,
 			    survey->channel_time_rx);
 	if (survey->filled & SURVEY_INFO_CHANNEL_TIME_TX)
-		NLA_PUT_U64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME_TX,
+		nla_put_u64(msg, NL80211_SURVEY_INFO_CHANNEL_TIME_TX,
 			    survey->channel_time_tx);
 
 	nla_nest_end(msg, infoattr);
@@ -4303,7 +4303,7 @@ static int nl80211_dump_survey(struct sk_buff *skb,
 		}
 
 		if (nl80211_send_survey(skb,
-				NETLINK_CB(cb->skb).pid,
+				NETLINK_CB(cb->skb).portid,
 				cb->nlh->nlmsg_seq, NLM_F_MULTI,
 				netdev,
 				&survey) < 0)
@@ -4861,7 +4861,7 @@ static int nl80211_testmode_dump(struct sk_buff *skb,
 	}
 
 	while (1) {
-		void *hdr = nl80211hdr_put(skb, NETLINK_CB(cb->skb).pid,
+		void *hdr = nl80211hdr_put(skb, NETLINK_CB(cb->skb).portid,
 					   cb->nlh->nlmsg_seq, NLM_F_MULTI,
 					   NL80211_CMD_TESTMODE);
 		struct nlattr *tmdata;
@@ -4917,7 +4917,7 @@ __cfg80211_testmode_alloc_skb(struct cfg80211_registered_device *rdev,
 		return NULL;
 	}
 
-	NLA_PUT_U32(skb, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(skb, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
 	data = nla_nest_start(skb, NL80211_ATTR_TESTDATA);
 
 	((void **)skb->cb)[0] = rdev;
@@ -4940,7 +4940,7 @@ struct sk_buff *cfg80211_testmode_alloc_reply_skb(struct wiphy *wiphy,
 		return NULL;
 
 	return __cfg80211_testmode_alloc_skb(rdev, approxlen,
-				rdev->testmode_info->snd_pid,
+				rdev->testmode_info->snd_portid,
 				rdev->testmode_info->snd_seq,
 				GFP_KERNEL);
 }
@@ -5267,7 +5267,7 @@ static int nl80211_remain_on_channel(struct sk_buff *skb,
 	if (!msg)
 		return -ENOMEM;
 
-	hdr = nl80211hdr_put(msg, info->snd_pid, info->snd_seq, 0,
+	hdr = nl80211hdr_put(msg, info->snd_portid, info->snd_seq, 0,
 			     NL80211_CMD_REMAIN_ON_CHANNEL);
 
 	if (IS_ERR(hdr)) {
@@ -5281,7 +5281,7 @@ static int nl80211_remain_on_channel(struct sk_buff *skb,
 	if (err)
 		goto free_msg;
 
-	NLA_PUT_U64(msg, NL80211_ATTR_COOKIE, cookie);
+	nla_put_u64(msg, NL80211_ATTR_COOKIE, cookie);
 
 	genlmsg_end(msg, hdr);
 
@@ -5477,7 +5477,7 @@ static int nl80211_register_mgmt(struct sk_buff *skb, struct genl_info *info)
 	if (!rdev->ops->mgmt_tx)
 		return -EOPNOTSUPP;
 
-	return cfg80211_mlme_register_mgmt(dev->ieee80211_ptr, info->snd_pid,
+	return cfg80211_mlme_register_mgmt(dev->ieee80211_ptr, info->snd_portid,
 			frame_type,
 			nla_data(info->attrs[NL80211_ATTR_FRAME_MATCH]),
 			nla_len(info->attrs[NL80211_ATTR_FRAME_MATCH]));
@@ -5547,7 +5547,7 @@ static int nl80211_tx_mgmt(struct sk_buff *skb, struct genl_info *info)
 		if (!msg)
 			return -ENOMEM;
 
-		hdr = nl80211hdr_put(msg, info->snd_pid, info->snd_seq, 0,
+		hdr = nl80211hdr_put(msg, info->snd_portid, info->snd_seq, 0,
 				     NL80211_CMD_FRAME);
 
 		if (IS_ERR(hdr)) {
@@ -5565,7 +5565,7 @@ static int nl80211_tx_mgmt(struct sk_buff *skb, struct genl_info *info)
 		goto free_msg;
 
 	if (msg) {
-		NLA_PUT_U64(msg, NL80211_ATTR_COOKIE, cookie);
+		nla_put_u64(msg, NL80211_ATTR_COOKIE, cookie);
 
 		genlmsg_end(msg, hdr);
 		return genlmsg_reply(msg, info);
@@ -5658,7 +5658,7 @@ static int nl80211_get_power_save(struct sk_buff *skb, struct genl_info *info)
 	if (!msg)
 		return -ENOMEM;
 
-	hdr = nl80211hdr_put(msg, info->snd_pid, info->snd_seq, 0,
+	hdr = nl80211hdr_put(msg, info->snd_portid, info->snd_seq, 0,
 			     NL80211_CMD_GET_POWER_SAVE);
 	if (!hdr) {
 		err = -ENOBUFS;
@@ -5670,7 +5670,7 @@ static int nl80211_get_power_save(struct sk_buff *skb, struct genl_info *info)
 	else
 		ps_state = NL80211_PS_DISABLED;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_PS_STATE, ps_state);
+	nla_put_u32(msg, NL80211_ATTR_PS_STATE, ps_state);
 
 	genlmsg_end(msg, hdr);
 	return genlmsg_reply(msg, info);
@@ -5835,7 +5835,7 @@ static int nl80211_get_wowlan(struct sk_buff *skb, struct genl_info *info)
 	if (!msg)
 		return -ENOMEM;
 
-	hdr = nl80211hdr_put(msg, info->snd_pid, info->snd_seq, 0,
+	hdr = nl80211hdr_put(msg, info->snd_portid, info->snd_seq, 0,
 			     NL80211_CMD_GET_WOWLAN);
 	if (!hdr)
 		goto nla_put_failure;
@@ -5848,19 +5848,19 @@ static int nl80211_get_wowlan(struct sk_buff *skb, struct genl_info *info)
 			goto nla_put_failure;
 
 		if (rdev->wowlan->any)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_ANY);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_ANY);
 		if (rdev->wowlan->disconnect)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_DISCONNECT);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_DISCONNECT);
 		if (rdev->wowlan->magic_pkt)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_MAGIC_PKT);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_MAGIC_PKT);
 		if (rdev->wowlan->gtk_rekey_failure)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE);
 		if (rdev->wowlan->eap_identity_req)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST);
 		if (rdev->wowlan->four_way_handshake)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE);
 		if (rdev->wowlan->rfkill_release)
-			NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_RFKILL_RELEASE);
+			nla_put_flag(msg, NL80211_WOWLAN_TRIG_RFKILL_RELEASE);
 		if (rdev->wowlan->n_patterns) {
 			struct nlattr *nl_pats, *nl_pat;
 			int i, pat_len;
@@ -5875,10 +5875,10 @@ static int nl80211_get_wowlan(struct sk_buff *skb, struct genl_info *info)
 				if (!nl_pat)
 					goto nla_put_failure;
 				pat_len = rdev->wowlan->patterns[i].pattern_len;
-				NLA_PUT(msg, NL80211_WOWLAN_PKTPAT_MASK,
+				nla_put(msg, NL80211_WOWLAN_PKTPAT_MASK,
 					DIV_ROUND_UP(pat_len, 8),
 					rdev->wowlan->patterns[i].mask);
-				NLA_PUT(msg, NL80211_WOWLAN_PKTPAT_PATTERN,
+				nla_put(msg, NL80211_WOWLAN_PKTPAT_PATTERN,
 					pat_len,
 					rdev->wowlan->patterns[i].pattern);
 				nla_nest_end(msg, nl_pat);
@@ -6109,7 +6109,7 @@ static int nl80211_register_unexpected_frame(struct sk_buff *skb,
 	if (wdev->ap_unexpected_nlpid)
 		return -EBUSY;
 
-	wdev->ap_unexpected_nlpid = info->snd_pid;
+	wdev->ap_unexpected_nlpid = info->snd_portid;
 	return 0;
 }
 
@@ -6139,7 +6139,7 @@ static int nl80211_probe_client(struct sk_buff *skb,
 	if (!msg)
 		return -ENOMEM;
 
-	hdr = nl80211hdr_put(msg, info->snd_pid, info->snd_seq, 0,
+	hdr = nl80211hdr_put(msg, info->snd_portid, info->snd_seq, 0,
 			     NL80211_CMD_PROBE_CLIENT);
 
 	if (IS_ERR(hdr)) {
@@ -6153,7 +6153,7 @@ static int nl80211_probe_client(struct sk_buff *skb,
 	if (err)
 		goto free_msg;
 
-	NLA_PUT_U64(msg, NL80211_ATTR_COOKIE, cookie);
+	nla_put_u64(msg, NL80211_ATTR_COOKIE, cookie);
 
 	genlmsg_end(msg, hdr);
 
@@ -6176,7 +6176,7 @@ static int nl80211_register_beacons(struct sk_buff *skb, struct genl_info *info)
 	if (rdev->ap_beacons_nlpid)
 		return -EBUSY;
 
-	rdev->ap_beacons_nlpid = info->snd_pid;
+	rdev->ap_beacons_nlpid = info->snd_portid;
 
 	return 0;
 }
@@ -6850,18 +6850,18 @@ static int nl80211_add_scan_req(struct sk_buff *msg,
 	if (!nest)
 		goto nla_put_failure;
 	for (i = 0; i < req->n_ssids; i++)
-		NLA_PUT(msg, i, req->ssids[i].ssid_len, req->ssids[i].ssid);
+		nla_put(msg, i, req->ssids[i].ssid_len, req->ssids[i].ssid);
 	nla_nest_end(msg, nest);
 
 	nest = nla_nest_start(msg, NL80211_ATTR_SCAN_FREQUENCIES);
 	if (!nest)
 		goto nla_put_failure;
 	for (i = 0; i < req->n_channels; i++)
-		NLA_PUT_U32(msg, i, req->channels[i]->center_freq);
+		nla_put_u32(msg, i, req->channels[i]->center_freq);
 	nla_nest_end(msg, nest);
 
 	if (req->ie)
-		NLA_PUT(msg, NL80211_ATTR_IE, req->ie_len, req->ie);
+		nla_put(msg, NL80211_ATTR_IE, req->ie_len, req->ie);
 
 	return 0;
  nla_put_failure:
@@ -6880,8 +6880,8 @@ static int nl80211_send_scan_msg(struct sk_buff *msg,
 	if (!hdr)
 		return -1;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
 
 	/* ignore errors and send incomplete event anyway */
 	nl80211_add_scan_req(msg, rdev);
@@ -6905,8 +6905,8 @@ nl80211_send_sched_scan_msg(struct sk_buff *msg,
 	if (!hdr)
 		return -1;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
 
 	return genlmsg_end(msg, hdr);
 
@@ -7029,26 +7029,26 @@ void nl80211_send_reg_change_event(struct regulatory_request *request)
 	}
 
 	/* Userspace can always count this one always being set */
-	NLA_PUT_U8(msg, NL80211_ATTR_REG_INITIATOR, request->initiator);
+	nla_put_u8(msg, NL80211_ATTR_REG_INITIATOR, request->initiator);
 
 	if (request->alpha2[0] == '0' && request->alpha2[1] == '0')
-		NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE,
+		nla_put_u8(msg, NL80211_ATTR_REG_TYPE,
 			   NL80211_REGDOM_TYPE_WORLD);
 	else if (request->alpha2[0] == '9' && request->alpha2[1] == '9')
-		NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE,
+		nla_put_u8(msg, NL80211_ATTR_REG_TYPE,
 			   NL80211_REGDOM_TYPE_CUSTOM_WORLD);
 	else if ((request->alpha2[0] == '9' && request->alpha2[1] == '8') ||
 		 request->intersect)
-		NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE,
+		nla_put_u8(msg, NL80211_ATTR_REG_TYPE,
 			   NL80211_REGDOM_TYPE_INTERSECTION);
 	else {
-		NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE,
+		nla_put_u8(msg, NL80211_ATTR_REG_TYPE,
 			   NL80211_REGDOM_TYPE_COUNTRY);
-		NLA_PUT_STRING(msg, NL80211_ATTR_REG_ALPHA2, request->alpha2);
+		nla_put_string(msg, NL80211_ATTR_REG_ALPHA2, request->alpha2);
 	}
 
 	if (wiphy_idx_valid(request->wiphy_idx))
-		NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, request->wiphy_idx);
+		nla_put_u32(msg, NL80211_ATTR_WIPHY, request->wiphy_idx);
 
 	genlmsg_end(msg, hdr);
 
@@ -7082,9 +7082,9 @@ static void nl80211_send_mlme_event(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_FRAME, len, buf);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put(msg, NL80211_ATTR_FRAME, len, buf);
 
 	genlmsg_end(msg, hdr);
 
@@ -7162,10 +7162,10 @@ static void nl80211_send_mlme_timeout(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT_FLAG(msg, NL80211_ATTR_TIMED_OUT);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, addr);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_flag(msg, NL80211_ATTR_TIMED_OUT);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, addr);
 
 	genlmsg_end(msg, hdr);
 
@@ -7213,15 +7213,15 @@ void nl80211_send_connect_result(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
 	if (bssid)
-		NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, bssid);
-	NLA_PUT_U16(msg, NL80211_ATTR_STATUS_CODE, status);
+		nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, bssid);
+	nla_put_u16(msg, NL80211_ATTR_STATUS_CODE, status);
 	if (req_ie)
-		NLA_PUT(msg, NL80211_ATTR_REQ_IE, req_ie_len, req_ie);
+		nla_put(msg, NL80211_ATTR_REQ_IE, req_ie_len, req_ie);
 	if (resp_ie)
-		NLA_PUT(msg, NL80211_ATTR_RESP_IE, resp_ie_len, resp_ie);
+		nla_put(msg, NL80211_ATTR_RESP_IE, resp_ie_len, resp_ie);
 
 	genlmsg_end(msg, hdr);
 
@@ -7253,13 +7253,13 @@ void nl80211_send_roamed(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, bssid);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, bssid);
 	if (req_ie)
-		NLA_PUT(msg, NL80211_ATTR_REQ_IE, req_ie_len, req_ie);
+		nla_put(msg, NL80211_ATTR_REQ_IE, req_ie_len, req_ie);
 	if (resp_ie)
-		NLA_PUT(msg, NL80211_ATTR_RESP_IE, resp_ie_len, resp_ie);
+		nla_put(msg, NL80211_ATTR_RESP_IE, resp_ie_len, resp_ie);
 
 	genlmsg_end(msg, hdr);
 
@@ -7290,14 +7290,14 @@ void nl80211_send_disconnected(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
 	if (from_ap && reason)
-		NLA_PUT_U16(msg, NL80211_ATTR_REASON_CODE, reason);
+		nla_put_u16(msg, NL80211_ATTR_REASON_CODE, reason);
 	if (from_ap)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_DISCONNECTED_BY_AP);
+		nla_put_flag(msg, NL80211_ATTR_DISCONNECTED_BY_AP);
 	if (ie)
-		NLA_PUT(msg, NL80211_ATTR_IE, ie_len, ie);
+		nla_put(msg, NL80211_ATTR_IE, ie_len, ie);
 
 	genlmsg_end(msg, hdr);
 
@@ -7328,9 +7328,9 @@ void nl80211_send_ibss_bssid(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, bssid);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, bssid);
 
 	genlmsg_end(msg, hdr);
 
@@ -7361,11 +7361,11 @@ void nl80211_send_new_peer_candidate(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, macaddr);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, macaddr);
 	if (ie_len && ie)
-		NLA_PUT(msg, NL80211_ATTR_IE, ie_len , ie);
+		nla_put(msg, NL80211_ATTR_IE, ie_len , ie);
 
 	genlmsg_end(msg, hdr);
 
@@ -7396,15 +7396,15 @@ void nl80211_michael_mic_failure(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
 	if (addr)
-		NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, addr);
-	NLA_PUT_U32(msg, NL80211_ATTR_KEY_TYPE, key_type);
+		nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, addr);
+	nla_put_u32(msg, NL80211_ATTR_KEY_TYPE, key_type);
 	if (key_id != -1)
-		NLA_PUT_U8(msg, NL80211_ATTR_KEY_IDX, key_id);
+		nla_put_u8(msg, NL80211_ATTR_KEY_IDX, key_id);
 	if (tsc)
-		NLA_PUT(msg, NL80211_ATTR_KEY_SEQ, 6, tsc);
+		nla_put(msg, NL80211_ATTR_KEY_SEQ, 6, tsc);
 
 	genlmsg_end(msg, hdr);
 
@@ -7439,7 +7439,7 @@ void nl80211_send_beacon_hint_event(struct wiphy *wiphy,
 	 * Since we are applying the beacon hint to a wiphy we know its
 	 * wiphy_idx is valid
 	 */
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, get_wiphy_idx(wiphy));
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, get_wiphy_idx(wiphy));
 
 	/* Before */
 	nl_freq = nla_nest_start(msg, NL80211_ATTR_FREQ_BEFORE);
@@ -7491,14 +7491,14 @@ static void nl80211_send_remain_on_chan_event(
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_FREQ, chan->center_freq);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_CHANNEL_TYPE, channel_type);
-	NLA_PUT_U64(msg, NL80211_ATTR_COOKIE, cookie);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_FREQ, chan->center_freq);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_CHANNEL_TYPE, channel_type);
+	nla_put_u64(msg, NL80211_ATTR_COOKIE, cookie);
 
 	if (cmd == NL80211_CMD_REMAIN_ON_CHANNEL)
-		NLA_PUT_U32(msg, NL80211_ATTR_DURATION, duration);
+		nla_put_u32(msg, NL80211_ATTR_DURATION, duration);
 
 	genlmsg_end(msg, hdr);
 
@@ -7568,8 +7568,8 @@ void nl80211_send_sta_del_event(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, mac_addr);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, mac_addr);
 
 	genlmsg_end(msg, hdr);
 
@@ -7639,9 +7639,9 @@ static bool __nl80211_unexpected_frame(struct net_device *dev, u8 cmd,
 		return true;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, addr);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, addr);
 
 	err = genlmsg_end(msg, hdr);
 	if (err < 0) {
@@ -7689,10 +7689,10 @@ int nl80211_send_mgmt(struct cfg80211_registered_device *rdev,
 		return -ENOMEM;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_FREQ, freq);
-	NLA_PUT(msg, NL80211_ATTR_FRAME, len, buf);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_FREQ, freq);
+	nla_put(msg, NL80211_ATTR_FRAME, len, buf);
 
 	genlmsg_end(msg, hdr);
 
@@ -7722,12 +7722,12 @@ void nl80211_send_mgmt_tx_status(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_FRAME, len, buf);
-	NLA_PUT_U64(msg, NL80211_ATTR_COOKIE, cookie);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put(msg, NL80211_ATTR_FRAME, len, buf);
+	nla_put_u64(msg, NL80211_ATTR_COOKIE, cookie);
 	if (ack)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_ACK);
+		nla_put_flag(msg, NL80211_ATTR_ACK);
 
 	genlmsg_end(msg, hdr);
 
@@ -7759,14 +7759,14 @@ nl80211_send_cqm_rssi_notify(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
 
 	pinfoattr = nla_nest_start(msg, NL80211_ATTR_CQM);
 	if (!pinfoattr)
 		goto nla_put_failure;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT,
+	nla_put_u32(msg, NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT,
 		    rssi_event);
 
 	nla_nest_end(msg, pinfoattr);
@@ -7800,15 +7800,15 @@ void nl80211_gtk_rekey_notify(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, bssid);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, bssid);
 
 	rekey_attr = nla_nest_start(msg, NL80211_ATTR_REKEY_DATA);
 	if (!rekey_attr)
 		goto nla_put_failure;
 
-	NLA_PUT(msg, NL80211_REKEY_DATA_REPLAY_CTR,
+	nla_put(msg, NL80211_REKEY_DATA_REPLAY_CTR,
 		NL80211_REPLAY_CTR_LEN, replay_ctr);
 
 	nla_nest_end(msg, rekey_attr);
@@ -7842,17 +7842,17 @@ void nl80211_pmksa_candidate_notify(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
 
 	attr = nla_nest_start(msg, NL80211_ATTR_PMKSA_CANDIDATE);
 	if (!attr)
 		goto nla_put_failure;
 
-	NLA_PUT_U32(msg, NL80211_PMKSA_CANDIDATE_INDEX, index);
-	NLA_PUT(msg, NL80211_PMKSA_CANDIDATE_BSSID, ETH_ALEN, bssid);
+	nla_put_u32(msg, NL80211_PMKSA_CANDIDATE_INDEX, index);
+	nla_put(msg, NL80211_PMKSA_CANDIDATE_BSSID, ETH_ALEN, bssid);
 	if (preauth)
-		NLA_PUT_FLAG(msg, NL80211_PMKSA_CANDIDATE_PREAUTH);
+		nla_put_flag(msg, NL80211_PMKSA_CANDIDATE_PREAUTH);
 
 	nla_nest_end(msg, attr);
 
@@ -7884,9 +7884,9 @@ void nl80211_ch_switch_notify(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_FREQ, freq);
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_CHANNEL_TYPE, type);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_FREQ, freq);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY_CHANNEL_TYPE, type);
 
 	genlmsg_end(msg, hdr);
 
@@ -7968,15 +7968,15 @@ nl80211_send_cqm_pktloss_notify(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, peer);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, peer);
 
 	pinfoattr = nla_nest_start(msg, NL80211_ATTR_CQM);
 	if (!pinfoattr)
 		goto nla_put_failure;
 
-	NLA_PUT_U32(msg, NL80211_ATTR_CQM_PKT_LOSS_EVENT, num_packets);
+	nla_put_u32(msg, NL80211_ATTR_CQM_PKT_LOSS_EVENT, num_packets);
 
 	nla_nest_end(msg, pinfoattr);
 
@@ -8010,12 +8010,12 @@ void cfg80211_probe_status(struct net_device *dev, const u8 *addr,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
-	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
-	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, addr);
-	NLA_PUT_U64(msg, NL80211_ATTR_COOKIE, cookie);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_IFINDEX, dev->ifindex);
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, addr);
+	nla_put_u64(msg, NL80211_ATTR_COOKIE, cookie);
 	if (acked)
-		NLA_PUT_FLAG(msg, NL80211_ATTR_ACK);
+		nla_put_flag(msg, NL80211_ATTR_ACK);
 
 	err = genlmsg_end(msg, hdr);
 	if (err < 0) {
@@ -8055,10 +8055,10 @@ void cfg80211_report_obss_beacon(struct wiphy *wiphy,
 		return;
 	}
 
-	NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
 	if (freq)
-		NLA_PUT_U32(msg, NL80211_ATTR_WIPHY_FREQ, freq);
-	NLA_PUT(msg, NL80211_ATTR_FRAME, len, frame);
+		nla_put_u32(msg, NL80211_ATTR_WIPHY_FREQ, freq);
+	nla_put(msg, NL80211_ATTR_FRAME, len, frame);
 
 	genlmsg_end(msg, hdr);
 
@@ -8086,8 +8086,8 @@ static int nl80211_netlink_notify(struct notifier_block * nb,
 
 	list_for_each_entry_rcu(rdev, &cfg80211_rdev_list, list) {
 		list_for_each_entry_rcu(wdev, &rdev->netdev_list, list)
-			cfg80211_mlme_unregister_socket(wdev, notify->pid);
-		if (rdev->ap_beacons_nlpid == notify->pid)
+			cfg80211_mlme_unregister_socket(wdev, notify->portid);
+		if (rdev->ap_beacons_nlpid == notify->portid)
 			rdev->ap_beacons_nlpid = 0;
 	}
 
-- 
1.8.0

