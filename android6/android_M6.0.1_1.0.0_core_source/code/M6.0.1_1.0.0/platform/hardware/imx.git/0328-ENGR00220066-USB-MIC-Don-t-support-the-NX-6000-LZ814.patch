From 8e3e6d02744e4517ad1a48cf1694331f74181e7d Mon Sep 17 00:00:00 2001
From: b02247 <b02247@freescale.com>
Date: Tue, 14 Aug 2012 13:55:36 +0800
Subject: [PATCH 328/635] ENGR00220066 USB MIC:Don't support the NX-6000 &
 LZ814BP

1. use driver_name to scan the sound card, because for usb audio the
driver name is fixed to "USB-Audio"
2. update the scanning logic for usb card
3. add out_rate and in_rate as the rate support by the card

Signed-off-by: b02247 <b02247@freescale.com>
---
 alsa/audio_hardware.h  |  3 +++
 alsa/config_hdmi.h     |  3 +++
 alsa/config_nullcard.h |  3 +++
 alsa/config_usbaudio.h |  3 +++
 alsa/config_wm8958.h   |  3 +++
 alsa/config_wm8962.h   |  3 +++
 alsa/tinyalsa_hal.c    | 70 +++++++++++++++++++++++++++++++++++++-------------
 7 files changed, 70 insertions(+), 18 deletions(-)

diff --git a/alsa/audio_hardware.h b/alsa/audio_hardware.h
index 4fbd439..5a0a82d 100644
--- a/alsa/audio_hardware.h
+++ b/alsa/audio_hardware.h
@@ -43,6 +43,7 @@ struct route_setting
 
 struct audio_card{
     char * name;
+    char * driver_name;
     int  supported_devices;
     struct route_setting *defaults;
     struct route_setting *bt_output;
@@ -56,6 +57,8 @@ struct audio_card{
     struct route_setting *vx_bt_mic_input;
     struct route_setting *mm_bt_mic_input;
     int  card;
+    int  out_rate;
+    int  in_rate;
 };
 
 #define MAX_AUDIO_CARD_NUM  3
diff --git a/alsa/config_hdmi.h b/alsa/config_hdmi.h
index 095c8a0..b5da6bf 100644
--- a/alsa/config_hdmi.h
+++ b/alsa/config_hdmi.h
@@ -23,6 +23,7 @@
 /* ALSA cards for IMX, these must be defined according different board / kernel config*/
 static struct audio_card  hdmi_card = {
     .name = "imx-hdmi-soc",
+    .driver_name = "imx-hdmi-soc",
     .supported_devices   = AUDIO_DEVICE_OUT_AUX_DIGITAL | AUDIO_DEVICE_IN_AUX_DIGITAL,
     .defaults            = NULL,
     .bt_output           = NULL,
@@ -36,6 +37,8 @@ static struct audio_card  hdmi_card = {
     .vx_bt_mic_input     = NULL,
     .mm_bt_mic_input     = NULL,
     .card                = 0,
+    .out_rate            = 0,
+    .in_rate             = 0,
 };
 
 #endif  /* ANDROID_INCLUDE_IMX_CONFIG_HDMI_H */
diff --git a/alsa/config_nullcard.h b/alsa/config_nullcard.h
index 9fad927..7d60eec 100644
--- a/alsa/config_nullcard.h
+++ b/alsa/config_nullcard.h
@@ -23,6 +23,7 @@
 /* ALSA cards for IMX, these must be defined according different board / kernel config*/
 static struct audio_card  null_card = {
     .name = "null_card",
+    .driver_name = "null_card",
     .supported_devices   = 0,
     .defaults            = NULL,
     .bt_output           = NULL,
@@ -36,6 +37,8 @@ static struct audio_card  null_card = {
     .vx_bt_mic_input     = NULL,
     .mm_bt_mic_input     = NULL,
     .card                = -1,
+    .out_rate            = 0,
+    .in_rate             = 0,
 };
 
 #endif  /* ANDROID_INCLUDE_IMX_CONFIG_NULLCARD_H */
diff --git a/alsa/config_usbaudio.h b/alsa/config_usbaudio.h
index d9d7233..b7bd4c2 100644
--- a/alsa/config_usbaudio.h
+++ b/alsa/config_usbaudio.h
@@ -24,6 +24,7 @@
 /* ALSA cards for IMX, these must be defined according different board / kernel config*/
 static struct audio_card  usbaudio_card = {
     .name = "USB Device",
+    .driver_name = "USB-Audio",
     .supported_devices   = AUDIO_DEVICE_OUT_ANLG_DOCK_HEADSET | AUDIO_DEVICE_OUT_DGTL_DOCK_HEADSET | 
                            AUDIO_DEVICE_IN_ANLG_DOCK_MIC,
     .defaults            = NULL,
@@ -38,6 +39,8 @@ static struct audio_card  usbaudio_card = {
     .vx_bt_mic_input     = NULL,
     .mm_bt_mic_input     = NULL,
     .card                = 0,
+    .out_rate            = 0,
+    .in_rate             = 0,
 };
 
 #endif  /* ANDROID_INCLUDE_IMX_CONFIG_USBAUDIO_H */
diff --git a/alsa/config_wm8958.h b/alsa/config_wm8958.h
index a5e360b..651a1c3 100644
--- a/alsa/config_wm8958.h
+++ b/alsa/config_wm8958.h
@@ -473,6 +473,7 @@ static struct route_setting mm_bt_mic_input_wm8958[] = {
 /* ALSA cards for IMX, these must be defined according different board / kernel config*/
 static struct audio_card  wm8958_card = {
     .name = "wm8958-audio",
+    .driver_name = "wm8958-audio",
     .supported_devices = (AUDIO_DEVICE_OUT_EARPIECE |
             AUDIO_DEVICE_OUT_SPEAKER |
             AUDIO_DEVICE_OUT_WIRED_HEADSET |
@@ -501,6 +502,8 @@ static struct audio_card  wm8958_card = {
     .vx_bt_mic_input     = vx_bt_mic_input_wm8958,
     .mm_bt_mic_input     = mm_bt_mic_input_wm8958,
     .card                = 0,
+    .out_rate            = 0,
+    .in_rate             = 0,
 };
 
 #endif  /* ANDROID_INCLUDE_IMX_CONFIG_WM8958_H */
diff --git a/alsa/config_wm8962.h b/alsa/config_wm8962.h
index a9ac358..84fefdc 100644
--- a/alsa/config_wm8962.h
+++ b/alsa/config_wm8962.h
@@ -200,6 +200,7 @@ static struct route_setting mm_bt_mic_input_wm8962[] = {
 /* ALSA cards for IMX, these must be defined according different board / kernel config*/
 static struct audio_card  wm8962_card = {
     .name = "wm8962-audio",
+    .driver_name = "wm8962-audio",
     .supported_devices = (AUDIO_DEVICE_OUT_EARPIECE |
             AUDIO_DEVICE_OUT_SPEAKER |
             AUDIO_DEVICE_OUT_WIRED_HEADSET |
@@ -228,6 +229,8 @@ static struct audio_card  wm8962_card = {
     .vx_bt_mic_input     = vx_bt_mic_input_wm8962,
     .mm_bt_mic_input     = mm_bt_mic_input_wm8962,
     .card                = 0,
+    .out_rate            = 0,
+    .in_rate             = 0,
 };
 
 #endif  /* ANDROID_INCLUDE_IMX_CONFIG_WM8962_H */
diff --git a/alsa/tinyalsa_hal.c b/alsa/tinyalsa_hal.c
index fa97604..8b0bddd 100644
--- a/alsa/tinyalsa_hal.c
+++ b/alsa/tinyalsa_hal.c
@@ -128,6 +128,7 @@ static int get_next_buffer(struct resampler_buffer_provider *buffer_provider,
                                    struct resampler_buffer* buffer);
 static void release_buffer(struct resampler_buffer_provider *buffer_provider,
                                   struct resampler_buffer* buffer);
+static int adev_get_rate_for_device(struct imx_audio_device *adev, uint32_t devices, unsigned int flag);
 
 /* Returns true on devices that are toro, false otherwise */
 static int is_device_imx(void)
@@ -940,7 +941,7 @@ static int start_input_stream(struct imx_stream_in *in)
     LOGW("card %d, port %d device %x", card, port, in->device);
 
     if(in->device & AUDIO_DEVICE_IN_ANLG_DOCK_MIC) {
-        if(in->config.rate != MM_USB_AUDIO_IN_RATE ||
+        if((int)in->config.rate != adev_get_rate_for_device(adev, AUDIO_DEVICE_IN_ANLG_DOCK_MIC, PCM_IN) ||
            in->config.channels != 1) {
            LOGE("Input 2 does not support this format!");
            return -EINVAL;
@@ -1110,10 +1111,6 @@ static int in_set_parameters(struct audio_stream *stream, const char *kvpairs)
     if (do_standby)
         do_input_standby(in);
 
-    if (in->device & AUDIO_DEVICE_IN_ANLG_DOCK_MIC) {
-        scan_available_device(adev);
-    }
-
     pthread_mutex_unlock(&in->lock);
     pthread_mutex_unlock(&adev->lock);
 
@@ -1801,6 +1798,7 @@ static int adev_open_input_stream(struct audio_hw_device *dev, uint32_t devices,
     struct imx_audio_device *ladev = (struct imx_audio_device *)dev;
     struct imx_stream_in *in;
     int ret;
+    int rate;
     int channel_count = popcount(*channel_mask);
 
     if (check_input_parameters(*sample_rate, *format, channel_count) != 0)
@@ -1828,7 +1826,7 @@ static int adev_open_input_stream(struct audio_hw_device *dev, uint32_t devices,
 
     in->requested_rate = *sample_rate;
 
-    LOGW("In channels %d, rate %d", channel_count, *sample_rate);
+    LOGW("In channels %d, rate %d, devices %x", channel_count, *sample_rate, devices);
     memcpy(&in->config, &pcm_config_mm_in, sizeof(pcm_config_mm_in));
     //in->config.channels = channel_count;
     //in->config.rate     = *sample_rate;
@@ -1837,9 +1835,17 @@ static int adev_open_input_stream(struct audio_hw_device *dev, uint32_t devices,
     in->config.channels = 2;
  
     if(devices == AUDIO_DEVICE_IN_ANLG_DOCK_MIC) {
+        ret = scan_available_device(ladev);
+        if(ret != 0) return -EINVAL;
         *channel_mask       = AUDIO_CHANNEL_IN_MONO;
         in->config.channels = 1;
-        in->config.rate     = MM_USB_AUDIO_IN_RATE;
+        rate     = adev_get_rate_for_device(ladev, AUDIO_DEVICE_IN_ANLG_DOCK_MIC, PCM_IN);
+        LOGW("rate %d", rate);
+        if( rate == 0) {
+              LOGW("can not get rate for in_device %d ", AUDIO_DEVICE_IN_ANLG_DOCK_MIC);
+              return -EINVAL;
+        }
+        in->config.rate     =  rate;
     }
 
     in->buffer = malloc(in->config.period_size *
@@ -1926,15 +1932,26 @@ static uint32_t adev_get_supported_devices(const struct audio_hw_device *dev)
     return devices;            
 }
 
+static int adev_get_rate_for_device(struct imx_audio_device *adev, uint32_t devices, unsigned int flag)
+{
+     int i;
+     for (i = 0; i < MAX_AUDIO_CARD_NUM; i ++) {
+          if(adev->card_list[i]->supported_devices & devices)
+		return (flag==PCM_OUT) ? adev->card_list[i]->out_rate:adev->card_list[i]->in_rate;
+     }
+     return 0;
+}
+
 
 static int scan_available_device(struct imx_audio_device *adev)
 {
     int i,j,k;
-    int m;
+    int m,n;
     bool found;
     bool scanned;
     struct control *imx_control;
     int left_devices = SUPPORTED_DEVICE_IN_MODULE;
+    int rate;
     /* open the mixer for main sound card, main sound cara is like sgtl5000, wm8958, cs428888*/
     /* note: some platform do not have main sound card, only have auxiliary card.*/
     /* max num of supported card is 2 */
@@ -1948,28 +1965,48 @@ static int scan_available_device(struct imx_audio_device *adev)
         imx_control = control_open(i);
         if(!imx_control)
             break;
-        LOGW("card %d, id %s , name %s", i, control_card_info_get_id(imx_control), control_card_info_get_name(imx_control));
+        LOGW("card %d, id %s ,driver %s, name %s", i, control_card_info_get_id(imx_control),
+                                                      control_card_info_get_driver(imx_control),
+                                                      control_card_info_get_name(imx_control));
         for(j = 0; j < SUPPORT_CARD_NUM; j++) {
-            if(strstr(control_card_info_get_name(imx_control), audio_card_list[j]->name) != NULL){
+            if(strstr(control_card_info_get_driver(imx_control), audio_card_list[j]->driver_name) != NULL){
                 // check if the device have been scaned before
                 scanned = false;
+                n = k;
                 for (m = 0; m < k; m++) {
-                    if (!strcmp(audio_card_list[j]->name, adev->card_list[m]->name)) {
+                    if (!strcmp(audio_card_list[j]->driver_name, adev->card_list[m]->driver_name)) {
                          scanned = true;
                          found = true;
+
+                         if(!strcmp(adev->card_list[m]->driver_name, "USB-Audio")) {
+                             scanned = false;
+                             left_devices |= adev->card_list[m]->supported_devices;
+                             if(adev->mixer[m])
+                                mixer_close(adev->mixer[m]);
+                             n = m;
+                             k --;
+                         }
                     }
                 }
                 if (scanned) break;
-                adev->card_list[k]  = audio_card_list[j];
-                adev->mixer[k] = mixer_open(i);
-                adev->card_list[k]->card = i;
-                if (!adev->mixer[k]) {
+                if(n >= MAX_AUDIO_CARD_NUM) {
+                    break;
+                }
+                adev->card_list[n]  = audio_card_list[j];
+                adev->mixer[n] = mixer_open(i);
+                adev->card_list[n]->card = i;
+                if (!adev->mixer[n]) {
                     LOGE("Unable to open the mixer, aborting.");
                     return -EINVAL;
                 }
+                rate = 8000;
+                if( pcm_get_near_rate(i, 0, PCM_IN, &rate) == 0)
+                        adev->card_list[n]->in_rate = rate;
+                LOGW("in rate %d",adev->card_list[n]->in_rate);
                 left_devices &= ~audio_card_list[j]->supported_devices;
                 k ++;
                 found = true;
+                break;
             }
         }
 
@@ -1977,9 +2014,6 @@ static int scan_available_device(struct imx_audio_device *adev)
         if(!found){
             LOGW("unrecognized card found.");
         }
-        if(k >= MAX_AUDIO_CARD_NUM) {
-             break;
-        }
     }
     adev->audio_card_num = k;
     /*must have one card*/
-- 
1.8.0

