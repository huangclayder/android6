From fec63ad5822771233871f1194ebeee82420245a2 Mon Sep 17 00:00:00 2001
From: b02247 <b02247@freescale.com>
Date: Thu, 11 Apr 2013 16:00:27 +0800
Subject: [PATCH 447/635] ENGR00257877 ARD:audio output channel configureation
 is uncorrect for 5.1

For esai, it will use the first channels/2 for Left channels,
use second half channels for Right channels.We need to transform
channel map in HAL.

Change-Id: Ie7d0c56f81c966bec9b07fa3ccb338a5f5184253
Signed-off-by: b02247 <b02247@freescale.com>
---
 alsa/tinyalsa_hal.c | 52 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 52 insertions(+)

diff --git a/alsa/tinyalsa_hal.c b/alsa/tinyalsa_hal.c
index 03643e9..d16a55a 100644
--- a/alsa/tinyalsa_hal.c
+++ b/alsa/tinyalsa_hal.c
@@ -1281,6 +1281,57 @@ exit:
     return bytes;
 }
 
+/********************************************************************************************************
+For esai, it will use the first channels/2 for Left channels, use second half channels for Right channels.
+So we need to transform channel map in HAL for multichannel.
+when input is "FL, FR, C, LFE, BL, BR, SL, SR", output is "FL,BL,C,FR,BR,LFE".
+when input is "FL, FR, C, LFE, BL, BR, SL, SR", output is "FL,BL,C,SL,FR,BR,LFE,SR"
+*********************************************************************************************************/
+static void convert_output_for_esai(const void* buffer, size_t bytes, int channels)
+{
+    short *data_src = (short *)buffer;
+    short *data_dst = (short *)buffer;
+    short dataFL,dataFR,dataC,dataLFE,dataBL,dataBR,dataSL,dataSR;
+    int i;
+
+    if (channels == 6) {
+        for (i = 0; i < (int)bytes/(2*channels); i++ ) {
+           dataFL  = *data_src++;
+           dataFR  = *data_src++;
+           dataC   = *data_src++;
+           dataLFE = *data_src++;
+           dataBL  = *data_src++;
+           dataBR  = *data_src++;
+           *data_dst++ = dataFL;
+           *data_dst++ = dataBL;
+           *data_dst++ = dataC;
+           *data_dst++ = dataFR;
+           *data_dst++ = dataBR;
+           *data_dst++ = dataLFE;
+        }
+    }
+    else if (channels == 8) {
+        for (i = 0; i < (int)bytes/(2*channels); i++ ) {
+           dataFL  = *data_src++;
+           dataFR  = *data_src++;
+           dataC   = *data_src++;
+           dataLFE = *data_src++;
+           dataBL  = *data_src++;
+           dataBR  = *data_src++;
+           dataSL  = *data_src++;
+           dataSR  = *data_src++;
+           *data_dst++ = dataFL;
+           *data_dst++ = dataBL;
+           *data_dst++ = dataC;
+           *data_dst++ = dataSL;
+           *data_dst++ = dataFR;
+           *data_dst++ = dataBR;
+           *data_dst++ = dataLFE;
+           *data_dst++ = dataSR;
+        }
+    }
+}
+
 static ssize_t out_write_esai(struct audio_stream_out *stream, const void* buffer,
                          size_t bytes)
 {
@@ -1308,6 +1359,7 @@ static ssize_t out_write_esai(struct audio_stream_out *stream, const void* buffe
 
     /* do not allow more than out->write_threshold frames in kernel pcm driver buffer */
 
+    convert_output_for_esai(buffer, bytes, out->config[PCM_ESAI].channels);
     ret = pcm_write_wrapper(out->pcm[PCM_ESAI], (void *)buffer, bytes, out->write_flags[PCM_ESAI]);
 
 exit:
-- 
1.8.0

