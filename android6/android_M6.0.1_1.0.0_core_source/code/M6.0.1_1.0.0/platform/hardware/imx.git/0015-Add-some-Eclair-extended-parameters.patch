From 5d69d5a046a56637792aa55471e57eaa7fa1b340 Mon Sep 17 00:00:00 2001
From: JasonHua <Jason.Hua@freescale.com>
Date: Tue, 12 Jan 2010 17:38:31 +0800
Subject: [PATCH 015/635] Add some Eclair extended parameters.

Signed-off-by: Jason Hua <r65076@freescale.com>
---
 libcamera/CameraHal.cpp | 134 ++++++++++++++++++++++++++++++++++++------------
 libcamera/CameraHal.h   |  40 +++++++++++++++
 2 files changed, 142 insertions(+), 32 deletions(-)

diff --git a/libcamera/CameraHal.cpp b/libcamera/CameraHal.cpp
index e865f88..43af627 100644
--- a/libcamera/CameraHal.cpp
+++ b/libcamera/CameraHal.cpp
@@ -30,38 +30,6 @@
 #define LOG_TAG "CameraHal"
 #include "CameraHal.h"
 
-#define FB_DEVICE               "/dev/graphics/fb0"
-#define VIDEO_DEVICE        	"/dev/video0"
-#define MIN_WIDTH           	176
-#define MIN_HEIGHT          	144
-#define DISPLAY_WIDTH		480	//lcd width
-#define DISPLAY_HEIGHT		640	//lcd height
-
-#ifdef IMX51_3STACK
-#define PREVIEW_WIDTH	    	535	//default preview width
-#define PREVIEW_HEIGHT	    	400	//default preview height
-#else
-#define PREVIEW_WIDTH	    	635	//default preview width
-#define PREVIEW_HEIGHT	    	480	//default preview height
-#endif
-
-#define PREVIEW_FORMAT	    	"yuv422i"
-#define PREVIEW_FRAMERATE   	30
-#define PICTURE_WIDTH   	640 	//default picture width
-#define PICTURE_HEIGHT  	480 	//default picture height
-#define PICTURE_FROMAT		V4L2_PIX_FMT_YUV420	//default picture format
-#define RECORDING_WIDTH_NORMAL  352 	//default recording width
-#define RECORDING_HEIGHT_NORMAL 288 	//default recording height
-#define RECORDING_WIDTH_LOW  	176 	//default recording width
-#define RECORDING_HEIGHT_LOW 	144 	//default recording height
-#ifdef  RECORDING_FORMAT_NV12
-#define RECORDING_FORMAT      	V4L2_PIX_FMT_NV12    //recording format
-#else
-#define RECORDING_FORMAT        V4L2_PIX_FMT_YUV420  //recording format
-#endif
-#define CAPTURE_BUFFER_NUM 	3
-#define LOG_FUNCTION_NAME    	LOGD("%d: %s() Executing...", __LINE__, __FUNCTION__);
-
 namespace android {
 int CameraHal::camera_device = -1;
 int CameraHal::g_sensor_width = 640;
@@ -101,6 +69,12 @@ FILE * CameraHal::capture_yuvFile = 0;
 
 wp<CameraHardwareInterface> CameraHal::singleton;
 
+const char CameraHal::supportedPictureSizes [] = "3280x2464,2560x2048,2048x1536,1600x1200,1280x1024,1152x964,640x480,320x240";
+const char CameraHal::supportedPreviewSizes [] = "1280x720,800x480,720x576,720x480,768x576,640x480,320x240,352x288,176x144,128x96";
+const char CameraHal::supportedFPS [] = "33,30,25,24,20,15,10";
+const char CameraHal::supprotedThumbnailSizes []= "80x60";
+const char CameraHal::PARAMS_DELIMITER []= ",";
+
 CameraHal::CameraHal()
                   : mParameters(),
 		    mRawHeap(0),
@@ -138,6 +112,7 @@ CameraHal::CameraHal()
 void CameraHal::initDefaultParameters()
 {
     CameraParameters p;
+    char tmpBuffer[PARAM_BUFFER];
 
     p.setPreviewSize(PREVIEW_WIDTH, PREVIEW_HEIGHT);
     p.setPreviewFrameRate(PREVIEW_FRAMERATE);
@@ -145,6 +120,83 @@ void CameraHal::initDefaultParameters()
 
     p.setPictureSize(PICTURE_WIDTH, PICTURE_HEIGHT);
     p.setPictureFormat("jpeg");
+    p.set(CameraParameters::KEY_JPEG_QUALITY, 100);
+
+    //Eclair extended parameters
+    p.set(CameraParameters::KEY_SUPPORTED_PICTURE_SIZES, CameraHal::supportedPictureSizes);
+    p.set(CameraParameters::KEY_SUPPORTED_PICTURE_FORMATS, CameraParameters::PIXEL_FORMAT_JPEG);
+    p.set(CameraParameters::KEY_SUPPORTED_PREVIEW_SIZES, CameraHal::supportedPreviewSizes);
+    p.set(CameraParameters::KEY_SUPPORTED_PREVIEW_FORMATS, CameraParameters::PIXEL_FORMAT_YUV422I);
+    p.set(CameraParameters::KEY_SUPPORTED_PREVIEW_FRAME_RATES, CameraHal::supportedFPS);
+    p.set(CameraParameters::KEY_SUPPORTED_THUMBNAIL_SIZES, CameraHal::supprotedThumbnailSizes);
+
+    memset(tmpBuffer, '\0', PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::WHITE_BALANCE_AUTO, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::WHITE_BALANCE_INCANDESCENT, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::WHITE_BALANCE_FLUORESCENT, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::WHITE_BALANCE_DAYLIGHT, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::WHITE_BALANCE_SHADE, PARAM_BUFFER);
+    p.set(CameraParameters::KEY_SUPPORTED_WHITE_BALANCE, tmpBuffer);
+    p.set(CameraParameters::KEY_WHITE_BALANCE, CameraParameters::WHITE_BALANCE_AUTO);
+
+    memset(tmpBuffer, '\0', sizeof(*tmpBuffer));
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::EFFECT_NONE, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::EFFECT_MONO, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::EFFECT_NEGATIVE, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::EFFECT_SOLARIZE,  PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::EFFECT_SEPIA, PARAM_BUFFER);
+    p.set(CameraParameters::KEY_SUPPORTED_EFFECTS, tmpBuffer);
+    p.set(CameraParameters::KEY_EFFECT, CameraParameters::EFFECT_NONE);
+
+    memset(tmpBuffer, '\0', sizeof(*tmpBuffer));
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::SCENE_MODE_AUTO, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::SCENE_MODE_PORTRAIT, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::SCENE_MODE_LANDSCAPE, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::SCENE_MODE_SPORTS, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::SCENE_MODE_NIGHT_PORTRAIT, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::SCENE_MODE_FIREWORKS, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::SCENE_MODE_NIGHT, PARAM_BUFFER);
+    p.set(CameraParameters::KEY_SUPPORTED_SCENE_MODES, tmpBuffer);
+    p.set(CameraParameters::KEY_SCENE_MODE, CameraParameters::SCENE_MODE_AUTO);
+
+    memset(tmpBuffer, '\0', sizeof(*tmpBuffer));
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::FOCUS_MODE_AUTO, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::FOCUS_MODE_INFINITY, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::FOCUS_MODE_MACRO, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::FOCUS_MODE_FIXED, PARAM_BUFFER);
+    p.set(CameraParameters::KEY_SUPPORTED_FOCUS_MODES, tmpBuffer);
+    p.set(CameraParameters::KEY_FOCUS_MODE, CameraParameters::FOCUS_MODE_AUTO);
+
+    memset(tmpBuffer, '\0', sizeof(*tmpBuffer));
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::ANTIBANDING_50HZ, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::ANTIBANDING_60HZ, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+    strncat((char*) tmpBuffer, (const char*) CameraParameters::ANTIBANDING_OFF, PARAM_BUFFER);
+    p.set(CameraParameters::KEY_SUPPORTED_ANTIBANDING, tmpBuffer);
+    p.set(CameraParameters::KEY_ANTIBANDING, CameraParameters::ANTIBANDING_OFF);
+
+    memset(tmpBuffer, '\0', sizeof(*tmpBuffer));
+    strncat( (char*) tmpBuffer, (const char*) CameraParameters::FLASH_MODE_OFF, PARAM_BUFFER);
+    p.set(CameraParameters::KEY_SUPPORTED_FLASH_MODES, tmpBuffer);
+    p.set(CameraParameters::KEY_FLASH_MODE, CameraParameters::FLASH_MODE_OFF);
 
     if (setParameters(p) != NO_ERROR) {
         LOGE("Failed to set default parameters?!");
@@ -927,12 +979,30 @@ bool CameraHal::recordingEnabled()
     return (!recordStopped);
 }
 
+static void debugShowFPS()
+{
+     static int mFrameCount = 0;
+     static int mLastFrameCount = 0;
+     static nsecs_t mLastFpsTime = 0;
+     static float mFps = 0;
+     mFrameCount++;
+     if (!(mFrameCount & 0x1F)) {
+         nsecs_t now = systemTime();
+         nsecs_t diff = now - mLastFpsTime;
+         mFps =  ((mFrameCount - mLastFrameCount) * float(s2ns(1))) / diff;
+         mLastFpsTime = now;
+         mLastFrameCount = mFrameCount;
+         LOGD("####### [%d] Frames, %f FPS", mFrameCount, mFps);
+     }
+}
+
 void CameraHal::releaseRecordingFrame(const sp<IMemory>& mem)
 {
     //LOG_FUNCTION_NAME
     ssize_t offset;
     size_t  size;
     int index;
+    debugShowFPS();
     offset = mem->offset();
     size   = mem->size();
     index = offset / size;
diff --git a/libcamera/CameraHal.h b/libcamera/CameraHal.h
index 14c0b4c..9723379 100644
--- a/libcamera/CameraHal.h
+++ b/libcamera/CameraHal.h
@@ -46,6 +46,40 @@
 #include <ui/CameraHardwareInterface.h>
 #include <ui/Overlay.h>
 
+#define FB_DEVICE               "/dev/graphics/fb0"
+#define VIDEO_DEVICE            "/dev/video0"
+#define MIN_WIDTH               176
+#define MIN_HEIGHT              144
+#define DISPLAY_WIDTH           480     //lcd width
+#define DISPLAY_HEIGHT          640     //lcd height
+
+#ifdef IMX51_3STACK
+#define PREVIEW_WIDTH           535     //default preview width
+#define PREVIEW_HEIGHT          400     //default preview height
+#else
+#define PREVIEW_WIDTH           635     //default preview width
+#define PREVIEW_HEIGHT          480     //default preview height
+#endif
+
+#define PREVIEW_FORMAT          "yuv422i"
+#define PREVIEW_FRAMERATE       30
+#define PICTURE_WIDTH           640     //default picture width
+#define PICTURE_HEIGHT          480     //default picture height
+#define PICTURE_FROMAT          V4L2_PIX_FMT_YUV420     //default picture format
+#define RECORDING_WIDTH_NORMAL  352     //default recording width
+#define RECORDING_HEIGHT_NORMAL 288     //default recording height
+#define RECORDING_WIDTH_LOW     176     //default recording width
+#define RECORDING_HEIGHT_LOW    144     //default recording height
+#ifdef  RECORDING_FORMAT_NV12
+#define RECORDING_FORMAT        V4L2_PIX_FMT_NV12    //recording format
+#else
+#define RECORDING_FORMAT        V4L2_PIX_FMT_YUV420  //recording format
+#endif
+#define CAPTURE_BUFFER_NUM      3
+#define LOG_FUNCTION_NAME       LOGD("%d: %s() Executing...", __LINE__, __FUNCTION__);
+
+#define PARAM_BUFFER 		512
+
 #ifdef USE_FSL_JPEG_ENC
 #include "jpeg_enc_interface.h" 
 #endif
@@ -248,6 +282,12 @@ private:
     static int g_capture_mode;		//0:low resolution 1:high resolution
     static struct picbuffer buffers[3];
 
+    static const char supportedPictureSizes[];
+    static const char supportedPreviewSizes[];
+    static const char supportedFPS[];
+    static const char supprotedThumbnailSizes[];
+    static const char PARAMS_DELIMITER[];
+
 #ifdef DUMP_CAPTURE_YUV
     static FILE *record_yuvFile;
     static FILE *capture_yuvFile;
-- 
1.8.0

