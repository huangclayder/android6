From fdf0b746c7c2a7382130dece2f2f8370d5bb85be Mon Sep 17 00:00:00 2001
From: Liu Xiaowen <b37945@freescale.com>
Date: Fri, 25 Nov 2011 10:05:16 +0800
Subject: [PATCH 216/635] ENGR00163106 revise hwcomposer in arm2 to make video
 play.

revise hwcomposer in arm2 to make video play.

Signed-off-by: Liu Xiaowen <b37945@freescale.com>
---
 libsensors/InputEventReader.cpp |   1 +
 libsensors/SensorBase.cpp       |   1 +
 mx5x/libcopybit/c2d_api.h       |   2 +
 mx5x/libgralloc/allocator.cpp   |   2 +
 mx5x/libgralloc/allocator.h     |   1 +
 mx5x/libgralloc/gr.h            |   2 +
 mx5x/libgralloc/gralloc.cpp     |   2 +
 mx5x/libgralloc/gralloc_priv.h  |   2 +
 mx5x/libgralloc/mapper.cpp      |   2 +
 mx6/hwcomposer/blit_ipu.cpp     |  23 ++++++---
 mx6/hwcomposer/hwcomposer.cpp   | 110 ++++++++++++++++++++--------------------
 mx6/libgralloc/allocator.cpp    |   2 +
 mx6/libgralloc/allocator.h      |   1 +
 mx6/libgralloc/gr.h             |   2 +
 mx6/libgralloc/gralloc.cpp      |   2 +
 mx6/libgralloc/gralloc_priv.h   |   2 +
 mx6/libgralloc/mapper.cpp       |   2 +
 17 files changed, 97 insertions(+), 62 deletions(-)

diff --git a/libsensors/InputEventReader.cpp b/libsensors/InputEventReader.cpp
index 1014f29..726e015 100755
--- a/libsensors/InputEventReader.cpp
+++ b/libsensors/InputEventReader.cpp
@@ -1,4 +1,5 @@
 /*
+ * Copyright (C) 2011 Freescale Semiconductor Inc.
  * Copyright (C) 2008 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/libsensors/SensorBase.cpp b/libsensors/SensorBase.cpp
index e04306c..0a2522c 100755
--- a/libsensors/SensorBase.cpp
+++ b/libsensors/SensorBase.cpp
@@ -1,4 +1,5 @@
 /*
+ * Copyright (C) 2011 Freescale Semiconductor Inc.
  * Copyright (C) 2008 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/mx5x/libcopybit/c2d_api.h b/mx5x/libcopybit/c2d_api.h
index 91e19e0..7c55067 100755
--- a/mx5x/libcopybit/c2d_api.h
+++ b/mx5x/libcopybit/c2d_api.h
@@ -24,6 +24,8 @@
  * \file    c2d_api.h
  * \brief   C2D API
  *//*----------------------------------------------------------------------*/
+
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
  
 
 #ifndef __c2d_api_h_
diff --git a/mx5x/libgralloc/allocator.cpp b/mx5x/libgralloc/allocator.cpp
index 4dad6a1..a05e82f 100755
--- a/mx5x/libgralloc/allocator.cpp
+++ b/mx5x/libgralloc/allocator.cpp
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #include <cutils/log.h>
 
 #include "allocator.h"
diff --git a/mx5x/libgralloc/allocator.h b/mx5x/libgralloc/allocator.h
index b0d89e9..df08de2 100755
--- a/mx5x/libgralloc/allocator.h
+++ b/mx5x/libgralloc/allocator.h
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
 
 #ifndef GRALLOC_ALLOCATOR_H_
 #define GRALLOC_ALLOCATOR_H_
diff --git a/mx5x/libgralloc/gr.h b/mx5x/libgralloc/gr.h
index 1775bfa..4b1da84 100755
--- a/mx5x/libgralloc/gr.h
+++ b/mx5x/libgralloc/gr.h
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #ifndef GR_H_
 #define GR_H_
 
diff --git a/mx5x/libgralloc/gralloc.cpp b/mx5x/libgralloc/gralloc.cpp
index baeec7a..cd16f28 100755
--- a/mx5x/libgralloc/gralloc.cpp
+++ b/mx5x/libgralloc/gralloc.cpp
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #include <limits.h>
 #include <unistd.h>
 #include <fcntl.h>
diff --git a/mx5x/libgralloc/gralloc_priv.h b/mx5x/libgralloc/gralloc_priv.h
index 1790151..638e5d8 100755
--- a/mx5x/libgralloc/gralloc_priv.h
+++ b/mx5x/libgralloc/gralloc_priv.h
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #ifndef GRALLOC_PRIV_H_
 #define GRALLOC_PRIV_H_
 
diff --git a/mx5x/libgralloc/mapper.cpp b/mx5x/libgralloc/mapper.cpp
index 6b561b2..139ad43 100755
--- a/mx5x/libgralloc/mapper.cpp
+++ b/mx5x/libgralloc/mapper.cpp
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #include <limits.h>
 #include <errno.h>
 #include <pthread.h>
diff --git a/mx6/hwcomposer/blit_ipu.cpp b/mx6/hwcomposer/blit_ipu.cpp
index bb54eda..ee777c3 100755
--- a/mx6/hwcomposer/blit_ipu.cpp
+++ b/mx6/hwcomposer/blit_ipu.cpp
@@ -129,7 +129,7 @@ int blit_ipu::blit(hwc_layer_t *layer, hwc_buffer *out_buf)
 	  }
 	  //struct blit_ipu *ipu = (struct blit_ipu *)dev;
 
-      HWCOMPOSER_LOG_RUNTIME("^^^^^^^^^^^^^^^blit_ipu::blit()^^^^^^^^^^^^^^^^^^^^^^");
+      HWCOMPOSER_LOG_RUNTIME("%s start", __FUNCTION__);
 	  hwc_rect_t *src_crop = &(layer->sourceCrop);
 	  hwc_rect_t *disp_frame = &(layer->displayFrame);
 	  private_handle_t *handle = (private_handle_t *)(layer->handle);
@@ -143,20 +143,27 @@ int blit_ipu::blit(hwc_layer_t *layer, hwc_buffer *out_buf)
     mTask.input.crop.w = src_crop->right - src_crop->left;
     mTask.input.crop.h = src_crop->bottom - src_crop->top;
 
-    if(handle->format == HAL_PIXEL_FORMAT_YCbCr_420_SP || handle->format == BLIT_PIXEL_FORMAT_RGB_565) {
-        HWCOMPOSER_LOG_RUNTIME("^^^^^^^^handle->format= NV12");
+    if(handle->format == HAL_PIXEL_FORMAT_YCbCr_420_SP) {
+        HWCOMPOSER_LOG_RUNTIME("%s, handle->format= NV12", __FUNCTION__);
         mTask.input.format = v4l2_fourcc('N', 'V', '1', '2');
     }
     else if(handle->format == HAL_PIXEL_FORMAT_YCbCr_420_I) {
-        HWCOMPOSER_LOG_RUNTIME("^^^^^^^^handle->format= I420");
+        HWCOMPOSER_LOG_RUNTIME("%s, handle->format= I420", __FUNCTION__);
         mTask.input.format = v4l2_fourcc('I', '4', '2', '0');
     }
+    else if(handle->format == HAL_PIXEL_FORMAT_YCbCr_422_I) {
+        HWCOMPOSER_LOG_RUNTIME("%s, handle->format= 422P", __FUNCTION__);
+        mTask.input.format = v4l2_fourcc('4', '2', '2','P');
+    } else if (handle->format == HAL_PIXEL_FORMAT_YV12) {
+        HWCOMPOSER_LOG_RUNTIME("%s, handle->format= 422P", __FUNCTION__);
+        mTask.input.format = v4l2_fourcc('Y', 'V', '1','2');
+    }
     else if((handle->format == HAL_PIXEL_FORMAT_RGB_565) || (handle->format == BLIT_PIXEL_FORMAT_RGB_565)) {
-        HWCOMPOSER_LOG_RUNTIME("^^^^^^^^handle->format= RGBP");
+        HWCOMPOSER_LOG_RUNTIME("%s, handle->format= RGBP", __FUNCTION__);
         mTask.input.format = v4l2_fourcc('R', 'G', 'B', 'P');
-        //mTask.input.fmt = v4l2_fourcc('N', 'V', '1', '2');
+        //mIPUInputParam.fmt = v4l2_fourcc('N', 'V', '1', '2');
     }else{
-        HWCOMPOSER_LOG_ERR("Error!Not supported input format %d",handle->format);
+        HWCOMPOSER_LOG_ERR("%s, Error!Not supported input format %d", __FUNCTION__, handle->format);
         return status;
     }
 
@@ -219,6 +226,6 @@ int blit_ipu::blit(hwc_layer_t *layer, hwc_buffer *out_buf)
 	  		return status;
 	  }
 	  status = 0;
-      HWCOMPOSER_LOG_RUNTIME("^^^^^^^^^^^^^^^blit_ipu::blit()^^end^^^^^^^^^^^^^^^^^^^^");
+      HWCOMPOSER_LOG_RUNTIME("%s end", __FUNCTION__);
 	  return status;
 }
diff --git a/mx6/hwcomposer/hwcomposer.cpp b/mx6/hwcomposer/hwcomposer.cpp
index 62c476c..675bbdf 100755
--- a/mx6/hwcomposer/hwcomposer.cpp
+++ b/mx6/hwcomposer/hwcomposer.cpp
@@ -395,12 +395,12 @@ static int hwc_prepare(hwc_composer_device_t *dev, hwc_layer_list_t* list) {
             		return HWC_EGL_ERROR;
 	            }
 	            if(ctx->m_out[index])
-	            		deleteEmtpyIndex(ctx);
+			deleteEmtpyIndex(ctx);
 
 		        status = open_outputDevice(ctx, dev_name, &(ctx->m_out[index]), ruse);//output_dev_open(dev_name, &(ctx->m_out[index]), ruse);
 		        if(status < 0){
-		        	  HWCOMPOSER_LOG_ERR("Error! open output device failed!");
-		        	  continue;
+		            HWCOMPOSER_LOG_ERR("Error! open output device failed!");
+		            continue;
 		        }//end if
 		        out_using[index] = 1;
 		        ctx->m_using[index] = 1;
@@ -458,7 +458,6 @@ static int hwc_set(hwc_composer_device_t *dev,
         hwc_surface_t sur,
         hwc_layer_list_t* list)
 {
-		//HWCOMPOSER_LOG_RUNTIME("==============hwc_set=1==============\n");
     struct hwc_context_t *ctx = (struct hwc_context_t *)dev;
     //for (size_t i=0 ; i<list->numHwLayers ; i++) {
     //    dump_layer(&list->hwLayers[i]);
@@ -466,14 +465,14 @@ static int hwc_set(hwc_composer_device_t *dev,
     //hwc_buffer *outBuff[MAX_OUTPUT_DISPLAY];
     //when displayhardware do releas function, it will come here.
     if(ctx && (dpy == NULL) && (sur == NULL) && (list == NULL)) {
-		//close the output device.
-		releaseAllOutput(ctx);
-		//ctx->display_mode_changed = 1;
+	//close the output device.
+	releaseAllOutput(ctx);
+	//ctx->display_mode_changed = 1;
 
-		return 0;
+	return 0;
     }
-		//HWCOMPOSER_LOG_RUNTIME("==============hwc_set=2==============\n");
-    ctx->ui_refresh = 1; 
+    ctx->ui_refresh = 1;
+    ctx->vd_refresh = 1;
     if((ctx == NULL) || (ctx && ctx->ui_refresh)) {
         EGLBoolean sucess = eglSwapBuffers((EGLDisplay)dpy, (EGLSurface)sur);
         if (!sucess) {
@@ -483,71 +482,74 @@ static int hwc_set(hwc_composer_device_t *dev,
     if(list == NULL || dev == NULL || !ctx->vd_refresh) {
     	return 0;
     }
- 		//HWCOMPOSER_LOG_RUNTIME("==============hwc_set=3==============\n");
     if(getActiveOuputDevice(ctx) == 0) {return 0;}//eglSwapBuffers((EGLDisplay)dpy, (EGLSurface)sur); return 0;}
+    HWCOMPOSER_LOG_RUNTIME("%s,%d", __FUNCTION__, __LINE__);
 
     int status = -EINVAL;
-	hwc_buffer out_buffer[MAX_OUTPUT_DISPLAY];
+    hwc_buffer out_buffer[MAX_OUTPUT_DISPLAY];
     char bufs_state[MAX_OUTPUT_DISPLAY];
     memset(bufs_state, 0, sizeof(bufs_state));
-	memset(out_buffer, 0, sizeof(out_buffer));
+    memset(out_buffer, 0, sizeof(out_buffer));
     blit_device *bltdev = ctx->blit;
     for (size_t i=0 ; i<list->numHwLayers ; i++){
-		hwc_layer_t *layer = &list->hwLayers[i];
-            if(!layer->handle || ((private_handle_t *)layer->handle)->magic != private_handle_t::sMagic) {
-                continue;
-            }
-	    if (private_handle_t::validate(layer->handle) < 0) {
-    		//HWCOMPOSER_LOG_INFO("2--it is not a valide buffer handle\n");
-    		continue;
-	    }
+	hwc_layer_t *layer = &list->hwLayers[i];
+        if(!layer->handle || ((private_handle_t *)layer->handle)->magic != private_handle_t::sMagic) {
+    	    HWCOMPOSER_LOG_RUNTIME("%s,%d", __FUNCTION__, __LINE__);
+            continue;
+        }
+	if (private_handle_t::validate(layer->handle) < 0) {
+    	    HWCOMPOSER_LOG_RUNTIME("%s,%d, not a valide buffer handle", __FUNCTION__, __LINE__);
+    	    continue;
+	}
 
         if(!validate_displayFrame(layer)) {
+    	    HWCOMPOSER_LOG_RUNTIME("%s,%d", __FUNCTION__, __LINE__);
             continue;
         }
+        HWCOMPOSER_LOG_RUNTIME("%s,%d", __FUNCTION__, __LINE__);
 
-		private_handle_t *handle = (private_handle_t *)(layer->handle);
-		if(handle->usage & GRALLOC_USAGE_HWC_OVERLAY){
+	private_handle_t *handle = (private_handle_t *)(layer->handle);
+	if(handle->usage & GRALLOC_USAGE_HWC_OVERLAY){
             int retv = 0;
             int m_usage = 0;
             int i_usage = handle->usage & GRALLOC_USAGE_OVERLAY_DISPLAY_MASK;
             if(!i_usage) continue;
             do {
-    			output_device *outdev = NULL;
-    			int index = 0;
-        		retv = findOutputDevice(ctx, &index, i_usage, &m_usage);
+    		output_device *outdev = NULL;
+    		int index = 0;
+        	retv = findOutputDevice(ctx, &index, i_usage, &m_usage);
                 if((index >= 0) && (index < MAX_OUTPUT_DISPLAY)) {
-                	outdev = ctx->m_out[index];
+                    outdev = ctx->m_out[index];
                 }else {
                     break;
                 }
                 
-    			if(outdev != NULL) {
-                    if(!bufs_state[index] && ctx->m_using[index]) {
-                        outdev->fetch(&out_buffer[index]);
-                        bufs_state[index] = 1;
-                    }
-                    if(!bufs_state[index])
-                        continue;
-    				status = bltdev->blit(layer, &(out_buffer[index]));
-    				if(status < 0){
-    					HWCOMPOSER_LOG_ERR("Error! bltdev->blit() failed!");
-    					continue;
-    				}
-    			}//end if(outdev != NULL)
+    		if(outdev != NULL) {
+			if(!bufs_state[index] && ctx->m_using[index]) {
+				outdev->fetch(&out_buffer[index]);
+				bufs_state[index] = 1;
+			}
+			if(!bufs_state[index])
+				continue;
+			status = bltdev->blit(layer, &(out_buffer[index]));
+			if(status < 0){
+				HWCOMPOSER_LOG_ERR("Error! bltdev->blit() failed!");
+				continue;
+			}
+    		}//end if(outdev != NULL)
             }while(retv);
 
 		}//end if
     }//end for
     for(int i = 0; i < MAX_OUTPUT_DISPLAY; i++) {
-				if(ctx->m_using[i] && bufs_state[i]) {
-						status = ctx->m_out[i]->post(&out_buffer[i]);
-						if(status < 0){
-								HWCOMPOSER_LOG_ERR("Error! output device post buffer failed!");
-								continue;
-						}
-				}
+	if(ctx->m_using[i] && bufs_state[i]) {
+		status = ctx->m_out[i]->post(&out_buffer[i]);
+		if(status < 0){
+			HWCOMPOSER_LOG_ERR("Error! output device post buffer failed!");
+			continue;
 		}
+	}
+    }
     return 0;
 }
 
@@ -594,15 +596,15 @@ static int hwc_device_open(const struct hw_module_t* module, const char* name,
         	  HWCOMPOSER_LOG_ERR("Error! blit_dev_open failed!");
         	  goto err_exit;
         }
-HWCOMPOSER_LOG_RUNTIME("<<<<<<<<<<<<<<<hwc_device_open>>>>>>>>>>>>>>>>>\n");
+	HWCOMPOSER_LOG_RUNTIME("%s,%d", __FUNCTION__, __LINE__);
         return 0;
 err_exit:
-				if(dev){
-						if(dev->blit) {
-								blit_dev_close(dev->blit);
-						}
-					  free(dev);
-				}
+	if(dev){
+		if(dev->blit) {
+			blit_dev_close(dev->blit);
+		}
+		free(dev);
+	}
 				//status = -EINVAL;
         /****************************************/
     }
diff --git a/mx6/libgralloc/allocator.cpp b/mx6/libgralloc/allocator.cpp
index 4dad6a1..a05e82f 100755
--- a/mx6/libgralloc/allocator.cpp
+++ b/mx6/libgralloc/allocator.cpp
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #include <cutils/log.h>
 
 #include "allocator.h"
diff --git a/mx6/libgralloc/allocator.h b/mx6/libgralloc/allocator.h
index b0d89e9..df08de2 100755
--- a/mx6/libgralloc/allocator.h
+++ b/mx6/libgralloc/allocator.h
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
 
 #ifndef GRALLOC_ALLOCATOR_H_
 #define GRALLOC_ALLOCATOR_H_
diff --git a/mx6/libgralloc/gr.h b/mx6/libgralloc/gr.h
index 1775bfa..4b1da84 100755
--- a/mx6/libgralloc/gr.h
+++ b/mx6/libgralloc/gr.h
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/*Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #ifndef GR_H_
 #define GR_H_
 
diff --git a/mx6/libgralloc/gralloc.cpp b/mx6/libgralloc/gralloc.cpp
index 204a386..56a22f9 100755
--- a/mx6/libgralloc/gralloc.cpp
+++ b/mx6/libgralloc/gralloc.cpp
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/* Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #include <limits.h>
 #include <unistd.h>
 #include <fcntl.h>
diff --git a/mx6/libgralloc/gralloc_priv.h b/mx6/libgralloc/gralloc_priv.h
index 9c49fe6..494a925 100755
--- a/mx6/libgralloc/gralloc_priv.h
+++ b/mx6/libgralloc/gralloc_priv.h
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/* Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #ifndef GRALLOC_PRIV_H_
 #define GRALLOC_PRIV_H_
 
diff --git a/mx6/libgralloc/mapper.cpp b/mx6/libgralloc/mapper.cpp
index 61b60e2..98957a2 100755
--- a/mx6/libgralloc/mapper.cpp
+++ b/mx6/libgralloc/mapper.cpp
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+/* Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.*/
+
 #include <limits.h>
 #include <errno.h>
 #include <pthread.h>
-- 
1.8.0

