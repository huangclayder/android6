From 371aac217f6aa787e2538900fdcfc7dcd431ad09 Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Tue, 7 Aug 2012 14:02:30 +0800
Subject: [PATCH 324/635] ENGR00219596 CTS testStressRecorder may be failed
 sometimes

stopRecording() will holde mLock in camera service, when encodeframeThread()
in the call back mDataCbTimestamp. That call back will make a call of
releaseRecordingFrame, which also try to acquire the lock mLock.
It will make a dead lock between the two thread

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 mx6/libcamera/CameraHal.cpp | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/mx6/libcamera/CameraHal.cpp b/mx6/libcamera/CameraHal.cpp
index dab2d65..3064a46 100755
--- a/mx6/libcamera/CameraHal.cpp
+++ b/mx6/libcamera/CameraHal.cpp
@@ -224,7 +224,7 @@ namespace android {
         mWaitForTakingPicture = false;
         sem_init(&mCaptureStoppedCondition, 0, 0);
         sem_init(&mPreviewStoppedCondition, 0, 0);
-        sem_init(&mEncodeStoppedCondition, 0, 0);
+        //sem_init(&mEncodeStoppedCondition, 0, 0);
         sem_init(&mTakingPicture, 0, 0);
         //mPostProcessRunning = false;
         //mEncodeRunning = false;
@@ -976,7 +976,11 @@ namespace android {
         if(mRecordRunning) {
             mRecordRunning = false;
             mEncodeThreadQueue.postMessage(new CMessage(CMESSAGE_TYPE_STOP, 0));
-            sem_wait(&mEncodeStoppedCondition);
+            //stopRecording() will holde mLock in camera service,
+            //when encodeframeThread() is in the call back mDataCbTimestamp.
+            //That call back will make a call of releaseRecordingFrame, which
+            //also try to acquire the lock mLock. It will make a dead lock between the two thread
+            //sem_wait(&mEncodeStoppedCondition);
             CAMERA_LOG_RUNTIME("---%s, after wait--", __FUNCTION__);
         }
         mEncodeLock.unlock();
@@ -2105,7 +2109,7 @@ Pic_out:
                     CAMERA_LOG_ERR("%s: get invalide buffer index", __FUNCTION__);
                     mRecordRunning = false;
                     mEncodeThreadQueue.clearMessage();
-                    sem_post(&mEncodeStoppedCondition);
+                    //sem_post(&mEncodeStoppedCondition);
                     return BAD_VALUE;
                 }
 
@@ -2134,7 +2138,7 @@ Pic_out:
             case CMESSAGE_TYPE_STOP:
                 CAMERA_LOG_INFO("%s: encode thread stop", __FUNCTION__);
                 mEncodeThreadQueue.clearMessage();
-                sem_post(&mEncodeStoppedCondition);
+                //sem_post(&mEncodeStoppedCondition);
                 break;
             case CMESSAGE_TYPE_QUITE:
                 mExitEncodeThread = 1;
-- 
1.8.0

