From 33599c4f0bf290a752df4a9cf7b0d0c61fb20276 Mon Sep 17 00:00:00 2001
From: Xiaowen Liu <b37945@freescale.com>
Date: Fri, 18 Jan 2013 15:41:51 +0800
Subject: [PATCH 407/635] ENGR00215174 reduce recording and preview buffer
 count.

reduce recording and preview buffer count.
reduce jpeg buffer count and change jpeg buffer usage.

Signed-off-by: Xiaowen Liu <b37945@freescale.com>
---
 mx6/libcamera2/CameraUtil.h       | 11 ++++++++---
 mx6/libcamera2/RequestManager.cpp |  5 ++++-
 mx6/libcamera2/StreamAdapter.cpp  |  4 ++--
 3 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/mx6/libcamera2/CameraUtil.h b/mx6/libcamera2/CameraUtil.h
index b6c2e8f..6ff35fb 100755
--- a/mx6/libcamera2/CameraUtil.h
+++ b/mx6/libcamera2/CameraUtil.h
@@ -76,9 +76,9 @@ using namespace android;
 
 #define MAX_PREVIEW_BUFFER      6
 #define MAX_CAPTURE_BUFFER      3
-#define NUM_PREVIEW_BUFFER      4
-#define NUM_RECORD_BUFFER       4
-#define NUM_CAPTURE_BUFFER      2
+#define NUM_PREVIEW_BUFFER      3
+#define NUM_RECORD_BUFFER       1
+#define NUM_CAPTURE_BUFFER      1
 
 #define CAMAERA_FILENAME_LENGTH 256
 #define CAMERA_SENSOR_LENGTH    32
@@ -91,6 +91,11 @@ using namespace android;
 #define MAX_FPS_RANGE   4
 #define MAX_SENSOR_FORMAT 20
 
+#define CAMERA_GRALLOC_USAGE_JPEG GRALLOC_USAGE_HW_TEXTURE | \
+    GRALLOC_USAGE_HW_RENDER |                           \
+    GRALLOC_USAGE_SW_READ_RARELY |                      \
+    GRALLOC_USAGE_SW_WRITE_NEVER
+
 #define CAMERA_GRALLOC_USAGE GRALLOC_USAGE_HW_TEXTURE | \
     GRALLOC_USAGE_HW_RENDER |                           \
     GRALLOC_USAGE_SW_READ_RARELY |                      \
diff --git a/mx6/libcamera2/RequestManager.cpp b/mx6/libcamera2/RequestManager.cpp
index 6807b53..257a1c2 100755
--- a/mx6/libcamera2/RequestManager.cpp
+++ b/mx6/libcamera2/RequestManager.cpp
@@ -363,7 +363,6 @@ int RequestManager::allocateStream(uint32_t width,
 {
     int sid = -1;
     sp<StreamAdapter> cameraStream;
-    *usage = CAMERA_GRALLOC_USAGE;
 
     FLOG_TRACE("RequestManager %s...", __FUNCTION__);
     if (format == HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) {
@@ -383,6 +382,7 @@ int RequestManager::allocateStream(uint32_t width,
         }
 
         //*format_actual = HAL_PIXEL_FORMAT_YCrCb_420_SP;
+        *usage = CAMERA_GRALLOC_USAGE;
         *format_actual = mDeviceAdapter->getPreviewPixelFormat();
         FLOGI("actual format 0x%x", *format_actual);
     }
@@ -390,6 +390,7 @@ int RequestManager::allocateStream(uint32_t width,
         FLOGI("%s jpeg stream, w:%d, h:%d, fmt:0x%x", __FUNCTION__,
                       width, height, format);
         //*format_actual = HAL_PIXEL_FORMAT_BLOB;
+        *usage = CAMERA_GRALLOC_USAGE_JPEG;
         *format_actual = mDeviceAdapter->getPicturePixelFormat();
         FLOGI("actual format 0x%x", *format_actual);
         sid = STREAM_ID_JPEG;
@@ -401,6 +402,7 @@ int RequestManager::allocateStream(uint32_t width,
                          format == HAL_PIXEL_FORMAT_YCbCr_420_P) {
         FLOGI("%s callback stream, w:%d, h:%d, fmt:0x%x", __FUNCTION__,
                       width, height, format);
+        *usage = CAMERA_GRALLOC_USAGE;
         *format_actual = format;
         sid = STREAM_ID_PRVCB;
         *max_buffers = NUM_PREVIEW_BUFFER;
@@ -410,6 +412,7 @@ int RequestManager::allocateStream(uint32_t width,
     else if (format == CAMERA2_HAL_PIXEL_FORMAT_ZSL) {
         FLOGI("%s callback stream, w:%d, h:%d, fmt:0x%x", __FUNCTION__,
                       width, height, format);
+        *usage = CAMERA_GRALLOC_USAGE_JPEG;
         *format_actual = HAL_PIXEL_FORMAT_YCbCr_420_SP;
         sid = STREAM_ID_PRVCB;
         *max_buffers = NUM_PREVIEW_BUFFER;
diff --git a/mx6/libcamera2/StreamAdapter.cpp b/mx6/libcamera2/StreamAdapter.cpp
index 5d55397..90de688 100755
--- a/mx6/libcamera2/StreamAdapter.cpp
+++ b/mx6/libcamera2/StreamAdapter.cpp
@@ -204,7 +204,7 @@ int StreamAdapter::processFrame(CameraFrame *frame)
     int size;
 
     StreamBuffer buffer;
-    int err = requestBuffer(&buffer);
+    ret = requestBuffer(&buffer);
     if (ret != NO_ERROR) {
         FLOGE("%s requestBuffer failed", __FUNCTION__);
         goto err_ext;
@@ -213,7 +213,7 @@ int StreamAdapter::processFrame(CameraFrame *frame)
     size = (frame->mSize > buffer.mSize) ? buffer.mSize : frame->mSize;
     memcpy(buffer.mVirtAddr, (void *)frame->mVirtAddr, size);
     buffer.mTimeStamp = frame->mTimeStamp;
-    err = renderBuffer(&buffer);
+    ret = renderBuffer(&buffer);
     if (ret != NO_ERROR) {
         FLOGE("%s renderBuffer failed", __FUNCTION__);
         goto err_ext;
-- 
1.8.0

