From 4e7490a9fb2c5f6f6aa5908c01c555017b3cc25c Mon Sep 17 00:00:00 2001
From: Nitin Garg <nitin.garg@freescale.com>
Date: Wed, 2 Jan 2013 14:31:51 -0600
Subject: [PATCH 396/635] ENGR00238582: Audio - Modify iMX53 Audio HAL for
 Jellybean 4.2

Modify iMX53 Audio HAL as per Jellybean 4.2 HAL requirements.

Signed-off-by: Nitin Garg <nitin.garg@freescale.com>
---
 mx5x/audio/audio_hw.c | 81 +++++++++++++++++++++------------------------------
 1 file changed, 34 insertions(+), 47 deletions(-)

diff --git a/mx5x/audio/audio_hw.c b/mx5x/audio/audio_hw.c
index 32562f7..8fa4012 100644
--- a/mx5x/audio/audio_hw.c
+++ b/mx5x/audio/audio_hw.c
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2012 The Android Open Source Project
- * Copyright (C) 2012 Freescale Semiconductor, Inc.
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,7 +43,7 @@
 #define PCM_DEVICE 0
 #define PCM_DEVICE_SCO 2
 
-#define OUT_PERIOD_SIZE 880
+#define OUT_PERIOD_SIZE 512
 #define OUT_SHORT_PERIOD_COUNT 2
 #define OUT_LONG_PERIOD_COUNT 8
 #define OUT_SAMPLING_RATE 44100
@@ -98,7 +98,8 @@ struct audio_device {
     struct audio_hw_device hw_device;
 
     pthread_mutex_t lock; /* see note below on mutex acquisition order */
-    unsigned int devices;
+    unsigned int out_device;
+    unsigned int in_device;
     bool standby;
     bool mic_mute;
     struct audio_route *ar;
@@ -179,10 +180,10 @@ static void select_devices(struct audio_device *adev)
     int speaker_on;
     int main_mic_on;
 
-    headphone_on = adev->devices & (AUDIO_DEVICE_OUT_WIRED_HEADSET |
+    headphone_on = adev->out_device & (AUDIO_DEVICE_OUT_WIRED_HEADSET |
                                     AUDIO_DEVICE_OUT_WIRED_HEADPHONE);
-    speaker_on = adev->devices & AUDIO_DEVICE_OUT_SPEAKER;
-    main_mic_on = adev->devices & AUDIO_DEVICE_IN_BUILTIN_MIC;
+    speaker_on = adev->out_device & AUDIO_DEVICE_OUT_SPEAKER;
+    main_mic_on = adev->in_device & AUDIO_DEVICE_IN_BUILTIN_MIC;
 
     reset_mixer_state(adev->ar);
 
@@ -254,7 +255,7 @@ static int start_output_stream(struct stream_out *out)
      * (speaker/headphone) PCM or the BC SCO PCM open at
      * the same time.
      */
-    if (adev->devices & AUDIO_DEVICE_OUT_ALL_SCO) {
+    if (adev->out_device & AUDIO_DEVICE_OUT_ALL_SCO) {
         device = PCM_DEVICE_SCO;
         out->pcm_config = &pcm_config_sco;
     } else {
@@ -271,13 +272,14 @@ static int start_output_stream(struct stream_out *out)
      * the most common rate, but group 2 is required for SCO.
      */
     if (adev->active_in) {
-        pthread_mutex_lock(&adev->active_in->lock);
+        struct stream_in *in = adev->active_in;
+        pthread_mutex_lock(&in->lock);
         if (((out->pcm_config->rate % 8000 == 0) &&
-                 (adev->active_in->pcm_config->rate % 8000) != 0) ||
+                 (in->pcm_config->rate % 8000) != 0) ||
                  ((out->pcm_config->rate % 11025 == 0) &&
-                 (adev->active_in->pcm_config->rate % 11025) != 0))
-            do_in_standby(adev->active_in);
-        pthread_mutex_unlock(&adev->active_in->lock);
+                 (in->pcm_config->rate % 11025) != 0))
+            do_in_standby(in);
+        pthread_mutex_unlock(&in->lock);
     }
 
     out->pcm = pcm_open(PCM_CARD, device, PCM_OUT | PCM_NORESTART, out->pcm_config);
@@ -322,7 +324,7 @@ static int start_input_stream(struct stream_in *in)
      * it greatly simplifies things to have only the main
      * mic PCM or the BC SCO PCM open at the same time.
      */
-    if (adev->devices & AUDIO_DEVICE_IN_ALL_SCO) {
+    if (adev->in_device & AUDIO_DEVICE_IN_ALL_SCO) {
         device = PCM_DEVICE_SCO;
         in->pcm_config = &pcm_config_sco;
     } else {
@@ -338,13 +340,14 @@ static int start_input_stream(struct stream_in *in)
      * the most common rate, but group 2 is required for SCO.
      */
     if (adev->active_out) {
-        pthread_mutex_lock(&adev->active_out->lock);
+        struct stream_out *out = adev->active_out;
+        pthread_mutex_lock(&out->lock);
         if (((in->pcm_config->rate % 8000 == 0) &&
-                 (adev->active_out->pcm_config->rate % 8000) != 0) ||
+                 (out->pcm_config->rate % 8000) != 0) ||
                  ((in->pcm_config->rate % 11025 == 0) &&
-                 (adev->active_out->pcm_config->rate % 11025) != 0))
-            do_out_standby(adev->active_out);
-        pthread_mutex_unlock(&adev->active_out->lock);
+                 (out->pcm_config->rate % 11025) != 0))
+            do_out_standby(out);
+        pthread_mutex_unlock(&out->lock);
     }
 
     in->pcm = pcm_open(PCM_CARD, device, PCM_IN, in->pcm_config);
@@ -373,6 +376,7 @@ static int start_input_stream(struct stream_in *in)
     in->buffer_size = pcm_frames_to_bytes(in->pcm,
                                           in->pcm_config->period_size);
     in->buffer = malloc(in->buffer_size);
+    in->frames_in = 0;
 
     adev->active_in = in;
 
@@ -544,20 +548,19 @@ static int out_set_parameters(struct audio_stream *stream, const char *kvpairs)
     pthread_mutex_lock(&adev->lock);
     if (ret >= 0) {
         val = atoi(value);
-        if (((adev->devices & AUDIO_DEVICE_OUT_ALL) != val) && (val != 0)) {
+        if ((adev->out_device != val) && (val != 0)) {
             /*
              * If SCO is turned on/off, we need to put audio into standby
              * because SCO uses a different PCM.
              */
             if ((val & AUDIO_DEVICE_OUT_ALL_SCO) ^
-                    (adev->devices & AUDIO_DEVICE_OUT_ALL_SCO)) {
+                    (adev->out_device & AUDIO_DEVICE_OUT_ALL_SCO)) {
                 pthread_mutex_lock(&out->lock);
                 do_out_standby(out);
                 pthread_mutex_unlock(&out->lock);
             }
 
-            adev->devices &= ~AUDIO_DEVICE_OUT_ALL;
-            adev->devices |= val;
+            adev->out_device = val;
             select_devices(adev);
         }
     }
@@ -580,7 +583,7 @@ static uint32_t out_get_latency(const struct audio_stream_out *stream)
 
     pthread_mutex_lock(&adev->lock);
 
-    if (adev->screen_off && !adev->active_in && !(adev->devices & AUDIO_DEVICE_OUT_ALL_SCO))
+    if (adev->screen_off && !adev->active_in && !(adev->out_device & AUDIO_DEVICE_OUT_ALL_SCO))
         period_count = OUT_LONG_PERIOD_COUNT;
     else
         period_count = OUT_SHORT_PERIOD_COUNT;
@@ -629,7 +632,7 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
     }
     buffer_type = (adev->screen_off && !adev->active_in) ?
             OUT_BUFFER_TYPE_LONG : OUT_BUFFER_TYPE_SHORT;
-    sco_on = (adev->devices & AUDIO_DEVICE_OUT_ALL_SCO);
+    sco_on = (adev->out_device & AUDIO_DEVICE_OUT_ALL_SCO);
     pthread_mutex_unlock(&adev->lock);
 
     /* detect changes in screen ON/OFF state and adapt buffer size
@@ -849,21 +852,20 @@ static int in_set_parameters(struct audio_stream *stream, const char *kvpairs)
                             value, sizeof(value));
     pthread_mutex_lock(&adev->lock);
     if (ret >= 0) {
-        val = atoi(value);
-        if (((adev->devices & AUDIO_DEVICE_IN_ALL) != val) && (val != 0)) {
+        val = atoi(value) & ~AUDIO_DEVICE_BIT_IN;
+        if ((adev->in_device != val) && (val != 0)) {
             /*
              * If SCO is turned on/off, we need to put audio into standby
              * because SCO uses a different PCM.
              */
             if ((val & AUDIO_DEVICE_IN_ALL_SCO) ^
-                    (adev->devices & AUDIO_DEVICE_IN_ALL_SCO)) {
+                    (adev->in_device & AUDIO_DEVICE_IN_ALL_SCO)) {
                 pthread_mutex_lock(&in->lock);
                 do_in_standby(in);
                 pthread_mutex_unlock(&in->lock);
             }
 
-            adev->devices &= ~AUDIO_DEVICE_IN_ALL;
-            adev->devices |= val;
+            adev->in_device = val;
             select_devices(adev);
         }
     }
@@ -1208,22 +1210,6 @@ static int adev_close(hw_device_t *device)
     return 0;
 }
 
-static uint32_t adev_get_supported_devices(const struct audio_hw_device *dev)
-{
-    return (/* OUT */
-            AUDIO_DEVICE_OUT_SPEAKER |
-            AUDIO_DEVICE_OUT_WIRED_HEADSET |
-            AUDIO_DEVICE_OUT_WIRED_HEADPHONE |
-            AUDIO_DEVICE_OUT_ALL_SCO |
-            AUDIO_DEVICE_OUT_DEFAULT |
-            /* IN */
-            AUDIO_DEVICE_IN_BUILTIN_MIC |
-            AUDIO_DEVICE_IN_WIRED_HEADSET |
-            AUDIO_DEVICE_IN_BACK_MIC |
-            AUDIO_DEVICE_IN_ALL_SCO |
-            AUDIO_DEVICE_IN_DEFAULT);
-}
-
 static int adev_open(const hw_module_t* module, const char* name,
                      hw_device_t** device)
 {
@@ -1238,11 +1224,10 @@ static int adev_open(const hw_module_t* module, const char* name,
         return -ENOMEM;
 
     adev->hw_device.common.tag = HARDWARE_DEVICE_TAG;
-    adev->hw_device.common.version = AUDIO_DEVICE_API_VERSION_1_0;
+    adev->hw_device.common.version = AUDIO_DEVICE_API_VERSION_2_0;
     adev->hw_device.common.module = (struct hw_module_t *) module;
     adev->hw_device.common.close = adev_close;
 
-    adev->hw_device.get_supported_devices = adev_get_supported_devices;
     adev->hw_device.init_check = adev_init_check;
     adev->hw_device.set_voice_volume = adev_set_voice_volume;
     adev->hw_device.set_master_volume = adev_set_master_volume;
@@ -1260,6 +1245,8 @@ static int adev_open(const hw_module_t* module, const char* name,
 
     adev->ar = audio_route_init();
     adev->orientation = ORIENTATION_UNDEFINED;
+    adev->out_device = AUDIO_DEVICE_OUT_SPEAKER;
+    adev->in_device = AUDIO_DEVICE_IN_BUILTIN_MIC & ~AUDIO_DEVICE_BIT_IN;
 
     *device = &adev->hw_device.common;
 
-- 
1.8.0

