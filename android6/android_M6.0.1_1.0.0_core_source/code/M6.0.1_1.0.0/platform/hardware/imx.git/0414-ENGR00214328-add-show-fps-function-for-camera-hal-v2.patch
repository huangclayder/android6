From d52243eebaa92be9cb435a1cab985651c7816b8f Mon Sep 17 00:00:00 2001
From: Xiaowen Liu <b37945@freescale.com>
Date: Fri, 1 Feb 2013 15:44:57 +0800
Subject: [PATCH 414/635] ENGR00214328 add show fps function for camera hal
 v2.

setprop sys.camera.fps 1
it will show preview and recording fps in camera hal.

Signed-off-by: Xiaowen Liu <b37945@freescale.com>
---
 mx6/libcamera2/PreviewStream.cpp |  4 ++++
 mx6/libcamera2/StreamAdapter.cpp | 42 +++++++++++++++++++++++++++++++++++++++-
 mx6/libcamera2/StreamAdapter.h   |  8 ++++++++
 3 files changed, 53 insertions(+), 1 deletion(-)

diff --git a/mx6/libcamera2/PreviewStream.cpp b/mx6/libcamera2/PreviewStream.cpp
index c6f6712..e46eda0 100755
--- a/mx6/libcamera2/PreviewStream.cpp
+++ b/mx6/libcamera2/PreviewStream.cpp
@@ -211,6 +211,10 @@ int PreviewStream::processFrame(CameraFrame *frame)
 {
     status_t ret = NO_ERROR;
 
+    if (mShowFps) {
+        showFps();
+    }
+
     ret = renderBuffer(frame);
     if (ret != NO_ERROR) {
         FLOGE("%s renderBuffer failed", __FUNCTION__);
diff --git a/mx6/libcamera2/StreamAdapter.cpp b/mx6/libcamera2/StreamAdapter.cpp
index 90de688..f3f20ff 100755
--- a/mx6/libcamera2/StreamAdapter.cpp
+++ b/mx6/libcamera2/StreamAdapter.cpp
@@ -15,7 +15,7 @@
  */
 
 #include "StreamAdapter.h"
-
+#include "RequestManager.h"
 
 StreamAdapter::StreamAdapter(int id)
     : mPrepared(false), mStarted(false), mStreamId(id), mWidth(0), mHeight(0), mFormat(0), mUsage(0),
@@ -57,6 +57,17 @@ void StreamAdapter::setErrorListener(CameraErrorListener *listener)
 int StreamAdapter::start()
 {
     FLOG_TRACE("StreamAdapter %s running", __FUNCTION__);
+
+    mTime1 = mTime2 = 0;
+    mTotalFrames = mFps = 0;
+    mShowFps = false;
+    char prop_value[CAMERA_FORMAT_LENGTH];
+    if (property_get("sys.camera.fps", prop_value, "0")) {
+        if (strcmp(prop_value, "1") == 0) {
+            mShowFps = true;
+        }
+    }
+
     mStreamThread = new StreamThread(this);
     mThreadQueue.postSyncMessage(new SyncMessage(STREAM_START, 0));
 
@@ -77,6 +88,14 @@ int StreamAdapter::stop()
         mThreadQueue.postSyncMessage(new SyncMessage(STREAM_STOP, 0));
     }
     FLOG_TRACE("StreamAdapter %s end", __FUNCTION__);
+    if (mShowFps) {
+        if (mStreamId == STREAM_ID_PREVIEW) {
+            FLOGI("preview ouput %d frames", mTotalFrames);
+        }
+        else if (mStreamId == STREAM_ID_RECORD) {
+            FLOGI("recorder ouput %d frames", mTotalFrames);
+        }
+    }
 
     mStarted = false;
     return NO_ERROR;
@@ -203,6 +222,10 @@ int StreamAdapter::processFrame(CameraFrame *frame)
     status_t ret = NO_ERROR;
     int size;
 
+    if (mShowFps) {
+        showFps();
+    }
+
     StreamBuffer buffer;
     ret = requestBuffer(&buffer);
     if (ret != NO_ERROR) {
@@ -225,6 +248,23 @@ err_ext:
     return ret;
 }
 
+void StreamAdapter::showFps()
+{
+    mTime2 = systemTime();
+    mFps ++;
+    mTotalFrames ++;
+    if ((mTime2 - mTime1 >= 1000000000LL) && (mFps > 1)) {
+        if (mStreamId == STREAM_ID_PREVIEW) {
+            FLOGI("Preview %s %d fps", __FUNCTION__, mFps);
+        }
+        else if (mStreamId == STREAM_ID_RECORD) {
+            FLOGI("Recorder %s %d fps", __FUNCTION__, mFps);
+        }
+        mTime1 = mTime2;
+        mFps = 0;
+    }
+}
+
 int StreamAdapter::requestBuffer(StreamBuffer* buffer)
 {
     buffer_handle_t *buf;
diff --git a/mx6/libcamera2/StreamAdapter.h b/mx6/libcamera2/StreamAdapter.h
index c3844bf..73a01ca 100755
--- a/mx6/libcamera2/StreamAdapter.h
+++ b/mx6/libcamera2/StreamAdapter.h
@@ -61,6 +61,7 @@ public:
     //CameraFrameListener
     void handleCameraFrame(CameraFrame *frame);
     void setErrorListener(CameraErrorListener *listener);
+    void showFps();
 
     enum StreamCommands {
         STREAM_START,
@@ -117,6 +118,13 @@ protected:
     sp<MetadaManager> mMetadaManager;
     mutable Mutex mMutexRespond;
     mutable Condition mCondRespond;
+
+    // for debug.
+    bool mShowFps;
+    nsecs_t mTime1;
+    nsecs_t mTime2;
+    int mTotalFrames;
+    int mFps;
 };
 
 
-- 
1.8.0

