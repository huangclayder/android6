From 04131bf3847a59c376ebda8da82e668e2c9b091c Mon Sep 17 00:00:00 2001
From: Liu Xiaowen <b37945@freescale.com>
Date: Wed, 8 Oct 2014 14:18:37 +0800
Subject: [PATCH 530/635] MA-5742 fix framebuffer alignment issue.

align framebuffer alignment with GPU and IPU spec.

Signed-off-by: Liu Xiaowen <b37945@freescale.com>
---
 mx6/libgralloc_wrapper/BufferManager.cpp |  2 +-
 mx6/libgralloc_wrapper/framebuffer.cpp   | 29 ++++++++++++++++-------------
 2 files changed, 17 insertions(+), 14 deletions(-)

diff --git a/mx6/libgralloc_wrapper/BufferManager.cpp b/mx6/libgralloc_wrapper/BufferManager.cpp
index bbb61ec..72f7d9d 100755
--- a/mx6/libgralloc_wrapper/BufferManager.cpp
+++ b/mx6/libgralloc_wrapper/BufferManager.cpp
@@ -113,7 +113,7 @@ int BufferManager::alloc(int w, int h, int format, int usage,
              * Here we assume the buffer will be used by Vivante HAL...
              */
             alignedw = ALIGN_PIXEL_16(w);
-            alignedh = ALIGN_PIXEL_16(h);
+            alignedh = ALIGN_PIXEL_4(h);
             size = alignedw * alignedh * bpp;
             break;
 
diff --git a/mx6/libgralloc_wrapper/framebuffer.cpp b/mx6/libgralloc_wrapper/framebuffer.cpp
index 6ecaaef..f160dc4 100755
--- a/mx6/libgralloc_wrapper/framebuffer.cpp
+++ b/mx6/libgralloc_wrapper/framebuffer.cpp
@@ -127,8 +127,8 @@ int Display::postBuffer(struct framebuffer_device_t* dev, buffer_handle_t buffer
         void *vaddr = NULL;
         m->lock(buffer,
                 private_module_t::PRIV_USAGE_LOCKED_FOR_POST,
-                0, 0, ALIGN_PIXEL_32(display->mInfo.xres),
-                ALIGN_PIXEL_128(display->mInfo.yres), &vaddr);
+                0, 0, ALIGN_PIXEL_16(display->mInfo.xres),
+                ALIGN_PIXEL_4(display->mInfo.yres), &vaddr);
 
         const size_t offset = hnd->base - display->mFramebuffer->base;
         display->mInfo.activate = FB_ACTIVATE_VBL;
@@ -152,18 +152,18 @@ int Display::postBuffer(struct framebuffer_device_t* dev, buffer_handle_t buffer
 
         m->lock(display->mFramebuffer,
                 GRALLOC_USAGE_SW_WRITE_RARELY,
-                0, 0, ALIGN_PIXEL_32(display->mInfo.xres),
-                 ALIGN_PIXEL_128(display->mInfo.yres),
+                0, 0, ALIGN_PIXEL_16(display->mInfo.xres),
+                 ALIGN_PIXEL_4(display->mInfo.yres),
                 &fb_vaddr);
 
         m->lock(buffer,
                 GRALLOC_USAGE_SW_READ_RARELY,
-                0, 0, ALIGN_PIXEL_32(display->mInfo.xres),
-                 ALIGN_PIXEL_128(display->mInfo.yres),
+                0, 0, ALIGN_PIXEL_16(display->mInfo.xres),
+                 ALIGN_PIXEL_4(display->mInfo.yres),
                 &buffer_vaddr);
 
         memcpy(fb_vaddr, buffer_vaddr,
-        display->mFinfo.line_length * ALIGN_PIXEL_128(display->mInfo.yres));
+        display->mFinfo.line_length * ALIGN_PIXEL_4(display->mInfo.yres));
 
         m->unlock(buffer);
         m->unlock(display->mFramebuffer);
@@ -195,8 +195,11 @@ int Display::checkFramebufferFormat(int fd, uint32_t &flags)
     /*
      * Request nr_framebuffers screens (at lest 2 for page flipping)
      */
-    info.yres_virtual = ALIGN_PIXEL_128(info.yres) * nr_framebuffers;
-    info.xres_virtual = ALIGN_PIXEL_32(info.xres);
+    info.yres_virtual = ALIGN_PIXEL_4(info.yres) * nr_framebuffers;
+    /*
+     *note: 16 alignment here should align with BufferManager::alloc.
+     */
+    info.xres_virtual = ALIGN_PIXEL_16(info.xres);
 
     if (info.bits_per_pixel == 32) {
         /*
@@ -304,11 +307,11 @@ int Display::checkFramebufferFormat(int fd, uint32_t &flags)
         ALOGI("16bpp setting of Framebuffer with RGB565 format!");
     }
 
-    if (info.yres_virtual < ALIGN_PIXEL_128(info.yres) * 2) {
+    if (info.yres_virtual < ALIGN_PIXEL_4(info.yres) * 2) {
         // we need at least 2 for page-flipping
         flags &= ~PAGE_FLIP;
         ALOGW("page flipping not supported (yres_virtual=%d, requested=%d)",
-                info.yres_virtual, ALIGN_PIXEL_128(info.yres)*2);
+                info.yres_virtual, ALIGN_PIXEL_4(info.yres)*2);
     }
 
     return 0;
@@ -450,7 +453,7 @@ int Display::initialize(int fb)
     mFramebuffer = new private_handle_t(fd, fbSize,
             private_handle_t::PRIV_FLAGS_FRAMEBUFFER);
 
-    mNumBuffers = info.yres_virtual / ALIGN_PIXEL_128(info.yres);
+    mNumBuffers = info.yres_virtual / ALIGN_PIXEL_4(info.yres);
     mBufferMask = 0;
 
     void* vaddr = mmap(0, fbSize, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
@@ -536,7 +539,7 @@ int Display::allocFrameBuffer(size_t size, int usage, buffer_handle_t* pHandle)
 
     const uint32_t bufferMask = mBufferMask;
     const uint32_t numBuffers = mNumBuffers;
-    const size_t bufferSize = mFinfo.line_length * ALIGN_PIXEL_128(mInfo.yres);
+    const size_t bufferSize = mFinfo.line_length * ALIGN_PIXEL_4(mInfo.yres);
     if (numBuffers < 2) {
         ALOGE("%s framebuffer number less than 2", __FUNCTION__);
         return -ENOMEM;
-- 
1.8.0

