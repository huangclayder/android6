From 340e27ae42fd816c55393f43a02ad452232b3b59 Mon Sep 17 00:00:00 2001
From: Xiaowen Liu <xiaowen.liu@freescale.com>
Date: Fri, 18 Dec 2015 05:14:07 -0500
Subject: [PATCH 620/635] MA-7366 Add Fps setting support for Camera HAL v3.

Add Fps setting support for Camera HAL v3.
Get fps value from ANDROID_CONTROL_AE_TARGET_FPS_RANGE.
Add setFps to Stream and take effect when configure video stream.

Signed-off-by: Xiaowen Liu <xiaowen.liu@freescale.com>
---
 mx6/libcamera3/Camera.cpp      | 14 ++++++++++++++
 mx6/libcamera3/MMAPStream.cpp  |  2 +-
 mx6/libcamera3/Stream.cpp      |  2 ++
 mx6/libcamera3/Stream.h        |  4 ++++
 mx6/libcamera3/VideoStream.cpp |  7 ++++---
 5 files changed, 25 insertions(+), 4 deletions(-)

diff --git a/mx6/libcamera3/Camera.cpp b/mx6/libcamera3/Camera.cpp
index a211c1a..d27f321 100644
--- a/mx6/libcamera3/Camera.cpp
+++ b/mx6/libcamera3/Camera.cpp
@@ -419,6 +419,7 @@ int32_t Camera::processCaptureRequest(camera3_capture_request_t *request)
     sp<Metadata> meta = NULL;
     sp<VideoStream> devStream = NULL;
     camera3_callback_ops* callback = NULL;
+    uint32_t fps = 30;
     {
         android::Mutex::Autolock al(mDeviceLock);
         for (int32_t i = 0; i < mNumStreams; i++) {
@@ -431,6 +432,17 @@ int32_t Camera::processCaptureRequest(camera3_capture_request_t *request)
             }
         }
 
+        camera_metadata_entry_t streams = mSettings->find(
+                            ANDROID_CONTROL_AE_TARGET_FPS_RANGE);
+        if (streams.count > 1) {
+            if (streams.data.i32[0] > 15 && streams.data.i32[1] > 15) {
+                fps = 30;
+            }
+            else {
+                fps = 15;
+            }
+        }
+
         meta = mSettings;
         devStream = mVideoStream;
         callback = (camera3_callback_ops*)mCallbackOps;
@@ -444,9 +456,11 @@ int32_t Camera::processCaptureRequest(camera3_capture_request_t *request)
                 ALOGE("still capture intent but without jpeg stream");
                 stillcap = preview;
             }
+            stillcap->setFps(fps);
             devStream->configure(stillcap);
         }
         else {
+            preview->setFps(fps);
             devStream->configure(preview);
         }
     }
diff --git a/mx6/libcamera3/MMAPStream.cpp b/mx6/libcamera3/MMAPStream.cpp
index 33674db..1cd98df 100644
--- a/mx6/libcamera3/MMAPStream.cpp
+++ b/mx6/libcamera3/MMAPStream.cpp
@@ -35,7 +35,7 @@ int32_t MMAPStream::onDeviceConfigureLocked()
         return BAD_VALUE;
     }
 
-    int32_t fps = 30;
+    int32_t fps = mFps;
     int32_t vformat;
     vformat = convertPixelFormatToV4L2Format(mFormat);
 
diff --git a/mx6/libcamera3/Stream.cpp b/mx6/libcamera3/Stream.cpp
index 371a1ff..77aeb28 100644
--- a/mx6/libcamera3/Stream.cpp
+++ b/mx6/libcamera3/Stream.cpp
@@ -42,6 +42,7 @@ Stream::Stream(int id, camera3_stream_t *s, Camera* camera)
     mHeight(s->height),
     mFormat(s->format),
     mUsage(0),
+    mFps(30),
     mNumBuffers(0),
     mRegistered(false),
     mCamera(camera)
@@ -100,6 +101,7 @@ Stream::Stream(Camera* camera)
     mHeight(0),
     mFormat(0),
     mUsage(0),
+    mFps(30),
     mNumBuffers(0),
     mRegistered(false),
     mCamera(camera)
diff --git a/mx6/libcamera3/Stream.h b/mx6/libcamera3/Stream.h
index eecfaf1..5290dde 100644
--- a/mx6/libcamera3/Stream.h
+++ b/mx6/libcamera3/Stream.h
@@ -54,6 +54,8 @@ public:
     uint32_t bufferNum() {return mNumBuffers;}
     camera3_stream_t* stream() {return mStream;}
     void setReuse(bool reuse) {mReuse = mReuse;}
+    void setFps(uint32_t fps) {mFps = fps;}
+    uint32_t fps() {return mFps;};
 
     int getType();
     bool isInputType();
@@ -89,6 +91,8 @@ protected:
     int32_t mFormat;
     // Gralloc usage mask : GRALLOC_USAGE_* (see <hardware/gralloc.h>)
     uint32_t mUsage;
+    // frame rate.
+    uint32_t mFps;
     // Max simultaneous in-flight buffers for this stream
     uint32_t mNumBuffers;
     // Buffers have been registered for this stream and are ready
diff --git a/mx6/libcamera3/VideoStream.cpp b/mx6/libcamera3/VideoStream.cpp
index f23671e..f5fb900 100644
--- a/mx6/libcamera3/VideoStream.cpp
+++ b/mx6/libcamera3/VideoStream.cpp
@@ -89,18 +89,19 @@ int32_t VideoStream::configure(sp<Stream> stream)
     Mutex::Autolock lock(mLock);
     // when width&height&format are same, keep it to reduce start/stop time.
     if ((mWidth == stream->width()) && (mHeight == stream->height())
-         && (mFormat == sensorFormat)) {
+         && (mFormat == sensorFormat) && (mFps == stream->fps())) {
         return 0;
     }
 
     mWidth  = stream->width();
     mHeight = stream->height();
     mFormat = sensorFormat;
+    mFps = stream->fps();
     mNumBuffers = stream->bufferNum();
     mChanged = true;
 
-    ALOGI("%s: w:%d, h:%d, sensor format:0x%x, stream format:0x%x, num:%d",
-           __func__, mWidth, mHeight, mFormat, stream->format(), mNumBuffers);
+    ALOGI("%s: w:%d, h:%d, sensor format:0x%x, stream format:0x%x, fps:%d, num:%d",
+           __func__, mWidth, mHeight, mFormat, stream->format(), mFps, mNumBuffers);
     mMessageQueue.clearMessages();
     mMessageQueue.postMessage(new CMessage(MSG_CONFIG, 0), 0);
 
-- 
1.8.0

