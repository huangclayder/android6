From a7b430b7af5cbdef090380b2a4bd1f46240d3628 Mon Sep 17 00:00:00 2001
From: Liu Xiaowen <b37945@freescale.com>
Date: Tue, 14 Jan 2014 16:56:54 +0800
Subject: [PATCH 490/635] ENGR00294907 fix screen trailing when enter/quit
 from music player.

the root cause is introduced by worm hole.
add clear worm hole function.

Signed-off-by: Liu Xiaowen <b37945@freescale.com>
---
 mx6/hwcomposer/hwc_composite.cpp | 62 ++++++++++++++++++++++++++++++++--------
 mx6/hwcomposer/hwcomposer.cpp    |  6 ++--
 2 files changed, 53 insertions(+), 15 deletions(-)

diff --git a/mx6/hwcomposer/hwc_composite.cpp b/mx6/hwcomposer/hwc_composite.cpp
index 4378232..723485a 100644
--- a/mx6/hwcomposer/hwc_composite.cpp
+++ b/mx6/hwcomposer/hwc_composite.cpp
@@ -26,6 +26,8 @@
 #include <cutils/atomic.h>
 #include <cutils/properties.h>
 #include <utils/threads.h>
+#include <ui/Rect.h>
+#include <ui/Region.h>
 #include <hardware/hwcomposer.h>
 #include <hardware_legacy/uevent.h>
 #include <utils/StrongPointer.h>
@@ -41,6 +43,13 @@
 #include <g2d.h>
 #include <system/graphics.h>
 
+
+#define MAX_HWC_RECTS 4
+typedef struct hwc_reg {
+    hwc_region_t reg;
+    hwc_rect_t rect[MAX_HWC_RECTS];
+} hwc_reg_t;
+
 extern "C" int get_aligned_size(buffer_handle_t hnd, int *width, int *height);
 
 static bool validateRect(hwc_rect_t& rect)
@@ -434,6 +443,7 @@ int hwc_composite(struct hwc_context_t* ctx, hwc_layer_1_t* layer,
             }
             continue;
         }
+
         if (!validateRect(drect)) {
             ALOGI("%s: invalid drect(l:%d,t:%d,r:%d,b:%d)", __FUNCTION__,
                     drect.left, drect.top, drect.right, drect.bottom);
@@ -459,13 +469,14 @@ int hwc_composite(struct hwc_context_t* ctx, hwc_layer_1_t* layer,
             sSurface.clrcolor = 0xff000000;
             sSurface.format = G2D_RGBA8888;
         }
-        ALOGV("blit rot:%d, blending:%d, alpha:%d", layer->transform,
-                layer->blending, layer->planeAlpha);
 
         if (firstLayer && layer->blending == HWC_BLENDING_DIM) {
             continue;
         }
 
+        ALOGV("blit rot:%d, blending:0x%x, alpha:%d", layer->transform,
+                layer->blending, layer->planeAlpha);
+
         if (!firstLayer) {
             convertBlending(layer->blending, sSurface, dSurface);
         }
@@ -515,11 +526,6 @@ int hwc_copyBack(struct hwc_context_t* ctx, struct private_handle_t *dstHandle,
         index = (index + 1)%HWC_MAX_FRAMEBUFFER;
     }
 
-    #define MAX_HWC_RECTS 4
-    typedef struct hwc_reg {
-        hwc_region_t reg;
-        hwc_rect_t rect[MAX_HWC_RECTS];
-    } hwc_reg_t;
     hwc_reg_t resReg;
     resReg.reg.numRects = 0;
     resReg.reg.rects = resReg.rect;
@@ -649,20 +655,52 @@ int hwc_updateSwapRect(struct hwc_context_t* ctx, int disp,
 }
 
 int hwc_clearWormHole(struct hwc_context_t* ctx, struct private_handle_t *dstHandle,
-                    hwc_region_t &hole)
+                    hwc_display_contents_1_t* list, int disp)
 {
-    if (ctx == NULL || dstHandle == NULL || hole.rects == NULL) {
+    if (ctx == NULL || dstHandle == NULL || list == NULL) {
         return -EINVAL;
     }
 
+    Region opaque;
+    hwc_layer_1_t* layer = NULL;
+    for (size_t i=0; i<list->numHwLayers-1; i++) {
+        layer = &list->hwLayers[i];
+        if ((layer->blending == HWC_BLENDING_NONE) ||
+                (i==0 && layer->blending == HWC_BLENDING_PREMULT) ||
+                ((i!=0) && (layer->blending == HWC_BLENDING_DIM) &&
+                 layer->planeAlpha == 0xff)) {
+            for (size_t n=0; n<layer->visibleRegionScreen.numRects; n++) {
+                Rect rect;
+                const hwc_rect_t &hrect = layer->visibleRegionScreen.rects[n];
+                ALOGV("opaque: src(l:%d,t:%d,r:%d,b:%d)",
+                        rect.left, rect.top, rect.right, rect.bottom);
+                if (!validateRect((hwc_rect_t &)hrect)) {
+                    continue;
+                }
+                memcpy(&rect, &hrect, sizeof(hrect));
+                opaque.orSelf(rect);
+            }
+        }
+    }
+
+    Rect dispRect(ctx->mDispInfo[disp].xres, ctx->mDispInfo[disp].yres);
+    Region screen(dispRect);
+    screen.subtractSelf(opaque);
+    const Rect *holes = NULL;
+    size_t numRect = 0;
+    holes = screen.getArray(&numRect);
+
     struct g2d_surface surface;
     memset(&surface, 0, sizeof(surface));
-    for (size_t i=0; i<hole.numRects; i++) {
-        hwc_rect_t& rect = (hwc_rect_t&)hole.rects[i];
-        if (!validateRect(rect)) {
+    for (size_t i=0; i<numRect; i++) {
+        if (holes[i].isEmpty()) {
             continue;
         }
 
+        hwc_rect_t rect;
+        memcpy(&rect, &holes[i], sizeof(rect));
+        ALOGV("clearhole: hole(l:%d,t:%d,r:%d,b:%d)",
+                rect.left, rect.top, rect.right, rect.bottom);
         setG2dSurface(surface, dstHandle, rect);
         surface.clrcolor = 0xff << 24;
         g2d_clear(ctx->g2d_handle, &surface);
diff --git a/mx6/hwcomposer/hwcomposer.cpp b/mx6/hwcomposer/hwcomposer.cpp
index cbfdf42..a9297ef 100644
--- a/mx6/hwcomposer/hwcomposer.cpp
+++ b/mx6/hwcomposer/hwcomposer.cpp
@@ -56,7 +56,7 @@ static int hwc_device_open(const struct hw_module_t* module, const char* name,
 extern int hwc_composite(struct hwc_context_t* ctx, hwc_layer_1_t* layer,
                     struct private_handle_t *dstHandle, hwc_rect_t* swap, bool firstLayer);
 extern int hwc_clearWormHole(struct hwc_context_t* ctx, struct private_handle_t *dstHandle,
-                    hwc_region_t &hole);
+                    hwc_display_contents_1_t* list, int disp);
 extern int hwc_clearRect(struct hwc_context_t* ctx, struct private_handle_t *dstHandle,
                     hwc_rect_t &rect);
 extern int hwc_copyBack(struct hwc_context_t* ctx, struct private_handle_t *dstHandle,
@@ -281,8 +281,9 @@ static int hwc_set_physical(struct hwc_context_t* ctx, int disp,
         return -EINVAL;
     }
 
-    bool resized = false;
+    hwc_clearWormHole(ctx, frameHandle, list, disp);
 
+    bool resized = false;
     if (disp != HWC_DISPLAY_PRIMARY &&
         hwc_hasSameContent(ctx, HWC_DISPLAY_PRIMARY, disp, contents)) {
         hwc_display_contents_1_t* sList = contents[HWC_DISPLAY_PRIMARY];
@@ -306,7 +307,6 @@ static int hwc_set_physical(struct hwc_context_t* ctx, int disp,
                 close(fenceFd);
                 layer->acquireFenceFd = -1;
             }
-
             hwc_composite(ctx, layer, frameHandle, &swapRect, i==0);
         }
 
-- 
1.8.0

