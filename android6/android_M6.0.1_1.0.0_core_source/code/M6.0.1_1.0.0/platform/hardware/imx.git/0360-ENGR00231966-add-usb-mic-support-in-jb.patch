From c6f5e702f85ea40c4a2385bc73eab68a624be216 Mon Sep 17 00:00:00 2001
From: b02247 <b02247@freescale.com>
Date: Tue, 30 Oct 2012 17:01:40 +0800
Subject: [PATCH 360/635] ENGR00231966 add usb mic support in jb

1. remove unsupport device
2. enale usb mic in audio HAL.

Change-Id: Ibe3040ecf42d446bdd1a14d1beff34a3c7dc848c
Signed-off-by: b02247 <b02247@freescale.com>
---
 alsa/audio_policy.conf |  4 ++--
 alsa/config_usbaudio.h |  2 +-
 alsa/tinyalsa_hal.c    | 62 ++++++++++++++++++++++++++++++++++++++++++++------
 3 files changed, 58 insertions(+), 10 deletions(-)

diff --git a/alsa/audio_policy.conf b/alsa/audio_policy.conf
index 98bb319..c0a6a32 100644
--- a/alsa/audio_policy.conf
+++ b/alsa/audio_policy.conf
@@ -26,7 +26,7 @@ audio_hw_modules {
         sampling_rates 44100
         channel_masks AUDIO_CHANNEL_OUT_STEREO
         formats AUDIO_FORMAT_PCM_16_BIT
-        devices AUDIO_DEVICE_OUT_EARPIECE|AUDIO_DEVICE_OUT_SPEAKER|AUDIO_DEVICE_OUT_WIRED_HEADSET|AUDIO_DEVICE_OUT_WIRED_HEADPHONE|AUDIO_DEVICE_OUT_ALL_SCO|AUDIO_DEVICE_OUT_AUX_DIGITAL|AUDIO_DEVICE_OUT_DGTL_DOCK_HEADSET
+        devices AUDIO_DEVICE_OUT_EARPIECE|AUDIO_DEVICE_OUT_SPEAKER|AUDIO_DEVICE_OUT_WIRED_HEADSET|AUDIO_DEVICE_OUT_WIRED_HEADPHONE|AUDIO_DEVICE_OUT_AUX_DIGITAL
         flags AUDIO_OUTPUT_FLAG_PRIMARY
       }
       hdmi {
@@ -42,7 +42,7 @@ audio_hw_modules {
         sampling_rates 8000|11025|16000|22050|24000|32000|44100|48000
         channel_masks AUDIO_CHANNEL_IN_MONO|AUDIO_CHANNEL_IN_STEREO
         formats AUDIO_FORMAT_PCM_16_BIT
-        devices AUDIO_DEVICE_IN_BUILTIN_MIC|AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET|AUDIO_DEVICE_IN_WIRED_HEADSET|AUDIO_DEVICE_IN_BACK_MIC
+        devices AUDIO_DEVICE_IN_BUILTIN_MIC|AUDIO_DEVICE_IN_WIRED_HEADSET|AUDIO_DEVICE_IN_BACK_MIC|AUDIO_DEVICE_IN_USB_MIC
       }
     }
   }
diff --git a/alsa/config_usbaudio.h b/alsa/config_usbaudio.h
index 37afec6..97c53c8 100644
--- a/alsa/config_usbaudio.h
+++ b/alsa/config_usbaudio.h
@@ -25,7 +25,7 @@
 static struct audio_card  usbaudio_card = {
     .name = "USB Device",
     .driver_name = "USB-Audio",
-    .supported_devices   = AUDIO_DEVICE_OUT_ANLG_DOCK_HEADSET | AUDIO_DEVICE_OUT_DGTL_DOCK_HEADSET,
+    .supported_devices   = AUDIO_DEVICE_IN_USB_MIC,
     .defaults            = NULL,
     .bt_output           = NULL,
     .speaker_output      = NULL,
diff --git a/alsa/tinyalsa_hal.c b/alsa/tinyalsa_hal.c
index e52358a..82bc418 100644
--- a/alsa/tinyalsa_hal.c
+++ b/alsa/tinyalsa_hal.c
@@ -1087,6 +1087,8 @@ static int start_input_stream(struct imx_stream_in *in)
     struct imx_audio_device *adev = in->dev;
     unsigned int card = -1;
     unsigned int port = 0;
+    struct mixer *mixer;
+
     ALOGW("start_input_stream....");
     adev->active_input = in;
 
@@ -1111,6 +1113,21 @@ static int start_input_stream(struct imx_stream_in *in)
 
     in->config.stop_threshold = in->config.period_size * in->config.period_count;
 
+    /*Error handler for usb mic plug in/plug out when recording. */
+    if(in->device & AUDIO_DEVICE_IN_USB_MIC) {
+        if((int)in->config.rate != adev_get_rate_for_device(adev, AUDIO_DEVICE_IN_USB_MIC, PCM_IN) ||
+           in->config.channels != 1) {
+           ALOGE("Input 2 does not support this format!");
+           return -EINVAL;
+        }
+    }else {
+        if(in->config.rate != MM_FULL_POWER_SAMPLING_RATE ||
+           in->config.channels != 2) {
+           ALOGE("Input 1 does not support this format!");
+           return -EINVAL;
+        }
+    }
+
     if (in->need_echo_reference && in->echo_reference == NULL)
         in->echo_reference = get_echo_reference(adev,
                                         AUDIO_FORMAT_PCM_16_BIT,
@@ -1122,6 +1139,18 @@ static int start_input_stream(struct imx_stream_in *in)
     if (!pcm_is_ready(in->pcm)) {
         ALOGE("cannot open pcm_in driver: %s", pcm_get_error(in->pcm));
         pcm_close(in->pcm);
+        /*workaround for some usb camera (V-UBM46). the issue is that:
+          open camerarecorder,recording, suspend, resumed, recording. sometimes the audio input
+          will be failed to open.
+          Analysis: when resume, the usb will do some initialize in kernel, but if the user start
+          recording quickly, there will be some confliction which will cause the input open failed
+          and reopen also failed.
+          But if open and close the mixer here then the input will be opened successfully.
+        */
+        if(!strcmp(adev->card_list[i]->driver_name, "USB-Audio")) {
+                mixer = mixer_open(card);
+                mixer_close(mixer);
+        }
         adev->active_input = NULL;
         return -ENOMEM;
     }
@@ -1645,10 +1674,11 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
     }
 
 exit:
-    if (ret < 0)
+    if (ret < 0) {
+        memset(buffer, 0, bytes);
         usleep(bytes * 1000000 / audio_stream_frame_size(&stream->common) /
                in_get_sample_rate(&stream->common));
-
+    }
     pthread_mutex_unlock(&in->lock);
     return bytes;
 }
@@ -1657,6 +1687,7 @@ static uint32_t in_get_input_frames_lost(struct audio_stream_in *stream)
 {
     int times, diff;
     struct imx_stream_in *in = (struct imx_stream_in *)stream;
+    if (in->pcm == NULL)  return 0;
     times = pcm_get_time_of_xrun(in->pcm);
     diff = times - in->last_time_of_xrun;
     ALOGW_IF((diff != 0), "in_get_input_frames_lost %d ms total %d ms\n",diff, times);
@@ -2122,6 +2153,20 @@ static int adev_open_input_stream(struct audio_hw_device *dev,
     /*fix to 2 channel,  caused by the wm8958 driver*/
     config->channel_mask       = AUDIO_CHANNEL_IN_STEREO;
     in->config.channels = 2;
+
+    if(devices == AUDIO_DEVICE_IN_USB_MIC) {
+        ret = scan_available_device(ladev);
+        if(ret != 0) return -EINVAL;
+        config->channel_mask       = AUDIO_CHANNEL_IN_MONO;
+        in->config.channels = 1;
+        rate     = adev_get_rate_for_device(ladev, AUDIO_DEVICE_IN_USB_MIC, PCM_IN);
+        ALOGW("rate %d", rate);
+        if( rate == 0) {
+              ALOGW("can not get rate for in_device %d ", AUDIO_DEVICE_IN_USB_MIC);
+              return -EINVAL;
+        }
+        in->config.rate     =  rate;
+    }
  
     in->buffer = malloc(in->config.period_size *
                         audio_stream_frame_size(&in->stream.common));
@@ -2268,11 +2313,15 @@ static int scan_available_device(struct imx_audio_device *adev)
                     break;
                 }
                 adev->card_list[n]  = audio_card_list[j];
-                adev->mixer[n] = mixer_open(i);
                 adev->card_list[n]->card = i;
-                if (!adev->mixer[n]) {
-                    ALOGE("Unable to open the mixer, aborting.");
-                    return -EINVAL;
+                if(!strcmp(adev->card_list[n]->driver_name, "USB-Audio")) {
+                    adev->mixer[n] = NULL;
+                } else {
+                    adev->mixer[n] = mixer_open(i);
+                    if (!adev->mixer[n]) {
+                         ALOGE("Unable to open the mixer, aborting.");
+                         return -EINVAL;
+                    }
                 }
                 rate = 8000;
                 if( pcm_get_near_rate(i, 0, PCM_IN, &rate) == 0)
@@ -2312,7 +2361,6 @@ static int adev_open(const hw_module_t* module, const char* name,
 {
     struct imx_audio_device *adev;
     int ret = 0;
-    struct control *imx_control;
     int i,j,k;
     bool found;
 
-- 
1.8.0

