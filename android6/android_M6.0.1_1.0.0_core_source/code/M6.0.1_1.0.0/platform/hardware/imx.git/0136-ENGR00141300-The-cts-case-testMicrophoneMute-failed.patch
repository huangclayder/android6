From 9cdf0e3254af7b46226423c4e80bc0edc06f854e Mon Sep 17 00:00:00 2001
From: b02247 <b02247@freescale.com>
Date: Thu, 14 Apr 2011 16:14:10 -0400
Subject: [PATCH 136/635] ENGR00141300 The cts case testMicrophoneMute failed

help Lin FuZhen to push the code

Signed-off-by: b02247 <b02247@freescale.com>
---
 modules/alsa/alsa_imx5x.cpp | 47 ++++++++++++++++++++++++++-------------------
 1 file changed, 27 insertions(+), 20 deletions(-)

diff --git a/modules/alsa/alsa_imx5x.cpp b/modules/alsa/alsa_imx5x.cpp
index 36d7a42..d7e3d92 100755
--- a/modules/alsa/alsa_imx5x.cpp
+++ b/modules/alsa/alsa_imx5x.cpp
@@ -97,9 +97,9 @@ static int s_device_close(hw_device_t* device)
 
 static const int DEFAULT_SAMPLE_RATE = ALSA_DEFAULT_SAMPLE_RATE;
 
-static void setDefaultControls(uint32_t devices, int mode);
+static void setDefaultControls(uint32_t devices, int mode, const char *cardname);
 
-typedef void (*AlsaControlSet)(uint32_t devices, int mode);
+typedef void (*AlsaControlSet)(uint32_t devices, int mode, const char *cardname);
 
 #define IMX51_OUT_DEFAULT   (\
         AudioSystem::DEVICE_OUT_EARPIECE | \
@@ -155,7 +155,8 @@ snd_pcm_stream_t direction(alsa_handle_t *handle)
             : SND_PCM_STREAM_CAPTURE;
 }
 
-const char *deviceName(alsa_handle_t *alsa_handle, uint32_t device, int mode)
+//card_device =0, return the card name, card_device=1, return the card device name
+const char *deviceName(alsa_handle_t *alsa_handle, uint32_t device, int mode, int card_device)
 {
 
 	snd_ctl_t *handle;
@@ -211,17 +212,17 @@ const char *deviceName(alsa_handle_t *alsa_handle, uint32_t device, int mode)
 				snd_pcm_info_get_id(pcminfo),
 				snd_pcm_info_get_name(pcminfo));
                 			
-			if(strcmp(snd_pcm_info_get_id(pcminfo),"MXC_SPDIF")==0)
-			{
-			     sprintf(spdifcardname, "hw:%d,%d", card, dev);
+			if(strcmp(snd_pcm_info_get_id(pcminfo),"MXC_SPDIF")==0) {
+			     if(card_device==0)  sprintf(spdifcardname, "hw:0%d", card);
+			     else         		 sprintf(spdifcardname, "hw:%d,%d", card, dev);
 			     havespdifdevice =  true;
-            }
+			}
             
-            if(strcmp(snd_pcm_info_get_id(pcminfo),"SGTL5000 SGTL5000-0")==0)
-            {
-			     sprintf(sgtlcardname, "hw:%d,%d", card, dev);
+			if(strcmp(snd_pcm_info_get_id(pcminfo),"SGTL5000 SGTL5000-0")==0) {
+			     if(card_device==0) sprintf(sgtlcardname, "hw:0%d", card);
+			     else               sprintf(sgtlcardname, "hw:%d,%d", card, dev);
 			     havesgtldevice =  true;                
-            }
+			}
 			cardnum++;
 		}
 		snd_ctl_close(handle);
@@ -502,15 +503,19 @@ status_t setSoftwareParams(alsa_handle_t *handle)
     return err;
 }
 
-void setDefaultControls(uint32_t devices, int mode)
+void setDefaultControls(uint32_t devices, int mode, const char *cardname)
 {
-    ALSAControl control("hw:00");
-
+	ALSAControl *ctl = new ALSAControl("hw:00");
+	if (cardname && !!strcmp(cardname,"hw:00")){
+		delete ctl;
+		ALSAControl *ctl = new ALSAControl(cardname);
+		LOGD (" setDefaultControls set card :%s",cardname);
+	}
     if (devices & AudioSystem::DEVICE_OUT_SPEAKER ||
         devices & AudioSystem::DEVICE_OUT_EARPIECE) {
-        control.set("Speaker Function", "on"); // on
+        ctl->set("Speaker Function", "on"); // on
     } else {
-        control.set("Speaker Function", "off"); // off
+        ctl->set("Speaker Function", "off"); // off
     }
 
 #if 0
@@ -526,7 +531,8 @@ void setDefaultControls(uint32_t devices, int mode)
 void setAlsaControls(alsa_handle_t *handle, uint32_t devices, int mode)
 {
     AlsaControlSet set = (AlsaControlSet) handle->modPrivate;
-    set(devices, mode);
+    const char *card = deviceName(handle, devices, mode, 0);
+    set(devices, mode, card);
 }
 
 // ----------------------------------------------------------------------------
@@ -558,7 +564,7 @@ static status_t s_open(alsa_handle_t *handle, uint32_t devices, int mode)
     LOGD("open called for devices %08x in mode %d...", devices, mode);
 
     const char *stream = streamName(handle);
-    const char *devName = deviceName(handle, devices, mode);
+    const char *devName = deviceName(handle, devices, mode, 1);
 
     // The PCM stream is opened in blocking mode, per ALSA defaults.  The
     // AudioFlinger seems to assume blocking mode too, so asynchronous mode
@@ -615,8 +621,9 @@ static status_t s_route(alsa_handle_t *handle, uint32_t devices, int mode)
         status = s_open(handle, devices, mode);
     }
 #else
-    setAlsaControls(handle, devices, mode);
-    status = s_open(handle, devices, mode);
+    /* fix me if I was wrong here to judge the current sound card. In facat, in s_open, it will reconfig the controls */
+	setAlsaControls(handle, devices, mode);
+	status = s_open(handle, devices, mode);
 #endif
     return status;
 }
-- 
1.8.0

