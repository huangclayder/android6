From 2ce07c65133691dd8ae9e9bdb2b1826fca80e42b Mon Sep 17 00:00:00 2001
From: Liu Xiaowen <b37945@freescale.com>
Date: Mon, 19 Sep 2011 16:52:16 +0800
Subject: [PATCH 183/635] ENGR00156844 add width and height member for
 private_handle

add width and height member for private_handle to resolve
the problem that when call set crop, the hwcomposer can not
acitivate correctly.

Signed-off-by: Liu Xiaowen <b37945@freescale.com>
---
 mx5x/hwcomposer/blit_ipu.cpp   |  4 ++--
 mx5x/libgralloc/gralloc.cpp    |  2 ++
 mx5x/libgralloc/gralloc_priv.h | 11 +++++++----
 3 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/mx5x/hwcomposer/blit_ipu.cpp b/mx5x/hwcomposer/blit_ipu.cpp
index 738d007..53f611f 100755
--- a/mx5x/hwcomposer/blit_ipu.cpp
+++ b/mx5x/hwcomposer/blit_ipu.cpp
@@ -95,8 +95,8 @@ HWCOMPOSER_LOG_RUNTIME("^^^^^^^^^^^^^^^blit_ipu::blit()^^^^^^^^^^^^^^^^^^^^^^");
 
     //fill_buffer((char *)(handle->base), handle->size);
 
-	  mIPUInputParam.width = src_crop->right - src_crop->left;
-	  mIPUInputParam.height = src_crop->bottom - src_crop->top;
+	  mIPUInputParam.width = handle->width;//src_crop->right - src_crop->left;
+	  mIPUInputParam.height = handle->height;//src_crop->bottom - src_crop->top;
 	  mIPUInputParam.input_crop_win.pos.x = src_crop->left;
     mIPUInputParam.input_crop_win.pos.y = src_crop->top;
     mIPUInputParam.input_crop_win.win_w = src_crop->right - src_crop->left;
diff --git a/mx5x/libgralloc/gralloc.cpp b/mx5x/libgralloc/gralloc.cpp
index e721817..17df894 100755
--- a/mx5x/libgralloc/gralloc.cpp
+++ b/mx5x/libgralloc/gralloc.cpp
@@ -421,6 +421,8 @@ static int gralloc_alloc(alloc_device_t* dev,
 	private_handle_t* hnd = (private_handle_t*)(*pHandle);
 	hnd->usage = usage;
 	hnd->format = format;
+    hnd->width = alignedw;
+    hnd->height = alignedh;
 
     *pStride = alignedw;
     return 0;
diff --git a/mx5x/libgralloc/gralloc_priv.h b/mx5x/libgralloc/gralloc_priv.h
index f1cac42..1790151 100755
--- a/mx5x/libgralloc/gralloc_priv.h
+++ b/mx5x/libgralloc/gralloc_priv.h
@@ -99,17 +99,20 @@ struct private_handle_t {
     int     writeOwner;
     int     phys; // The physical address of that chunk of memory. If using ashmem, set to 0 They don't care
     int     pid;
-    int			usage;
-    int			format;
+    int		usage;
+    int		format;
+    int     width;
+    int     height;
 
 #ifdef __cplusplus
-    static const int sNumInts = 12;
+    static const int sNumInts = 14;
     static const int sNumFds = 1;
     static const int sMagic = 'pgpu';
 
     private_handle_t(int fd, int size, int flags) :
         fd(fd), magic(sMagic), flags(flags), size(size), offset(0),gpu_fd(-1),
-        base(0), lockState(0), writeOwner(0), phys(0),pid(getpid()),usage(0),format(0)
+        base(0), lockState(0), writeOwner(0), phys(0),pid(getpid()),usage(0),
+        format(0), width(0), height(0)
     {
         version = sizeof(native_handle);
         numInts = sNumInts;
-- 
1.8.0

