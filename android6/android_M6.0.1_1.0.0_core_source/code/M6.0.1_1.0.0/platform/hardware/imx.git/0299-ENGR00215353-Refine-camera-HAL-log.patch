From d2f6eca7e59db9722d26f20d24efedb1064edd5a Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Thu, 28 Jun 2012 17:48:59 +0800
Subject: [PATCH 299/635] ENGR00215353 Refine camera HAL log

Remove non-user log output, and default build with less log output

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 mx6/libcamera/CameraHal.cpp                  | 616 +++++++++++----------------
 mx6/libcamera/CameraHal.h                    |  28 +-
 mx6/libcamera/CameraModule.cpp               |   1 -
 mx6/libcamera/Camera_utils.h                 |  19 +-
 mx6/libcamera/CaptureDeviceInterface.cpp     |   5 +-
 mx6/libcamera/CaptureDeviceInterface.h       |  34 +-
 mx6/libcamera/JpegEncoderInterface.cpp       |   6 +-
 mx6/libcamera/JpegEncoderInterface.h         |   2 +-
 mx6/libcamera/JpegEncoderSoftware.cpp        |  56 +--
 mx6/libcamera/JpegEncoderSoftware.h          |   2 +-
 mx6/libcamera/PP_ipulib.cpp                  |  18 +-
 mx6/libcamera/PP_ipulib.h                    |   2 +-
 mx6/libcamera/PostProcessDeviceInterface.cpp |   2 +-
 mx6/libcamera/PostProcessDeviceInterface.h   |   2 +-
 mx6/libcamera/V4l2CapDeviceBase.cpp          | 240 +++++------
 mx6/libcamera/V4l2CapDeviceBase.h            |  66 +--
 mx6/libcamera/V4l2CsiDevice.cpp              | 116 ++---
 mx6/libcamera/V4l2CsiDevice.h                |  18 +-
 mx6/libcamera/V4l2UVCDevice.h                |   2 +-
 mx6/libcamera/messageQueue.cpp               |   4 +-
 mx6/libcamera/messageQueue.h                 |   2 +-
 21 files changed, 558 insertions(+), 683 deletions(-)

diff --git a/mx6/libcamera/CameraHal.cpp b/mx6/libcamera/CameraHal.cpp
index 36c1af6..29b5345 100755
--- a/mx6/libcamera/CameraHal.cpp
+++ b/mx6/libcamera/CameraHal.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 
@@ -82,13 +82,13 @@ namespace android {
         mExitCaptureThread(false), mExitPreviewThread(false), 
         mExitPostProcessThread(false), mExitEncodeThread(false), mTakePictureInProcess(false)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         preInit();
     }
 
     CameraHal :: ~CameraHal()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         CameraMiscDeInit();
         CloseCaptureDevice();
         FreeInterBuf();
@@ -103,7 +103,7 @@ namespace android {
 
     void CameraHal :: release()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         Mutex::Autolock lock(mLock);
 
         mCameraReady = false;
@@ -114,17 +114,17 @@ namespace android {
 
     void CameraHal :: preInit()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
     }
     void CameraHal :: postDestroy()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
     }
 
-    CAMERA_HAL_ERR_RET CameraHal :: setCaptureDevice(sp<CaptureDeviceInterface> capturedevice)
+    CAMERA_HAL_RET CameraHal :: setCaptureDevice(sp<CaptureDeviceInterface> capturedevice)
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_ERR_RET ret = CAMERA_HAL_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAMERA_HAL_RET ret = CAMERA_HAL_ERR_NONE;
         if (mCameraReady == false)
             mCaptureDevice = capturedevice;
         else
@@ -132,10 +132,10 @@ namespace android {
         return ret;
     }
 
-    CAMERA_HAL_ERR_RET CameraHal :: setPostProcessDevice(sp<PostProcessDeviceInterface> postprocessdevice)
+    CAMERA_HAL_RET CameraHal :: setPostProcessDevice(sp<PostProcessDeviceInterface> postprocessdevice)
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_ERR_RET ret = CAMERA_HAL_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAMERA_HAL_RET ret = CAMERA_HAL_ERR_NONE;
         if (mCameraReady == false)
             mPPDevice = postprocessdevice;
         else 
@@ -143,10 +143,10 @@ namespace android {
         return ret;
     }
 
-    CAMERA_HAL_ERR_RET CameraHal :: setJpegEncoder(sp<JpegEncoderInterface>jpegencoder)
+    CAMERA_HAL_RET CameraHal :: setJpegEncoder(sp<JpegEncoderInterface>jpegencoder)
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_ERR_RET ret = CAMERA_HAL_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAMERA_HAL_RET ret = CAMERA_HAL_ERR_NONE;
         if (mCameraReady == false)
             mJpegEncoder = jpegencoder;
         else
@@ -154,20 +154,20 @@ namespace android {
         return ret;
     }
 
-    CAMERA_HAL_ERR_RET CameraHal::Init()
+    CAMERA_HAL_RET CameraHal::Init()
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_ERR_RET ret = CAMERA_HAL_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAMERA_HAL_RET ret = CAMERA_HAL_ERR_NONE;
         mCameraReady == true;
 
         CAMERA_TYPE cType;
         mCaptureDevice->GetDevType(&cType);
         if(cType == CAMERA_TYPE_UVC) {
             mPPDeviceNeed = true;
-            CAMERA_HAL_LOG_INFO("-----%s: it is uvc device", __FUNCTION__);
+            CAMERA_LOG_INFO("Enable PP device for Camera Post process");
         }else {
             mPPDeviceNeed = false;
-            CAMERA_HAL_LOG_INFO("-----%s: it is csi device", __FUNCTION__);
+            CAMERA_LOG_INFO("Disable PP device for Camera Post process");
         }
 
         if ((ret = AolLocForInterBuf())<0)
@@ -183,15 +183,15 @@ namespace android {
     }
     void  CameraHal::setPreviewRotate(CAMERA_PREVIEW_ROTATE previewRotate)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         mPreviewRotate = previewRotate;
         return ;
     }
 
-    CAMERA_HAL_ERR_RET  CameraHal :: AolLocForInterBuf()
+    CAMERA_HAL_RET  CameraHal :: AolLocForInterBuf()
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_ERR_RET ret = CAMERA_HAL_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAMERA_HAL_RET ret = CAMERA_HAL_ERR_NONE;
 
         mSupportedPictureSizes = (char *)malloc(CAMER_PARAM_BUFFER_SIZE);
         mSupportedPreviewSizes = (char *)malloc(CAMER_PARAM_BUFFER_SIZE);
@@ -210,7 +210,7 @@ namespace android {
     }
     void  CameraHal :: FreeInterBuf()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mSupportedPictureSizes)
             free(mSupportedPictureSizes);
         if (mSupportedPreviewSizes)
@@ -221,10 +221,10 @@ namespace android {
             free(mSupprotedThumbnailSizes);
     }
 
-    CAMERA_HAL_ERR_RET CameraHal :: InitCameraHalParam()
+    CAMERA_HAL_RET CameraHal :: InitCameraHalParam()
     {	
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_ERR_RET ret = CAMERA_HAL_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAMERA_HAL_RET ret = CAMERA_HAL_ERR_NONE;
 
         if ((ret = InitCameraBaseParam(&mParameters)) < 0)
             return ret;
@@ -235,10 +235,10 @@ namespace android {
         return ret;
     }
 
-    CAMERA_HAL_ERR_RET CameraHal::CameraMiscInit()
+    CAMERA_HAL_RET CameraHal::CameraMiscInit()
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_ERR_RET ret = CAMERA_HAL_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAMERA_HAL_RET ret = CAMERA_HAL_ERR_NONE;
         pthread_mutex_init(&mPPIOParamMutex, NULL);
         pthread_mutex_init(&mOverlayMutex, NULL);
 
@@ -269,10 +269,10 @@ namespace android {
         }
         return ret;
     }
-    CAMERA_HAL_ERR_RET CameraHal::CameraMiscDeInit()
+    CAMERA_HAL_RET CameraHal::CameraMiscDeInit()
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_ERR_RET ret = CAMERA_HAL_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAMERA_HAL_RET ret = CAMERA_HAL_ERR_NONE;
         mCaptureThreadQueue.postQuitMessage();
         //Make sure all thread been exit, in case they still
         //access the message queue
@@ -285,9 +285,9 @@ namespace android {
         return ret;
     }
 
-    CAMERA_HAL_ERR_RET CameraHal::InitCameraPreviewFormatToParam(int nFmt)
+    CAMERA_HAL_RET CameraHal::InitCameraPreviewFormatToParam(int nFmt)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         int i;
         char fmtStr[40];
 
@@ -315,9 +315,9 @@ namespace android {
         return CAMERA_HAL_ERR_NONE;
     }
 
-    CAMERA_HAL_ERR_RET CameraHal :: InitCameraBaseParam(CameraParameters *pParam)
+    CAMERA_HAL_RET CameraHal :: InitCameraBaseParam(CameraParameters *pParam)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         char TmpStr[20];
         unsigned int CapPreviewFmt[MAX_QUERY_FMT_TIMES];
         struct capture_config_t CaptureSizeFps;
@@ -348,16 +348,16 @@ namespace android {
         convertPreviewFormatToString(TmpStr, 20, mCaptureDeviceCfg.fmt);
         mParameters.setPreviewFormat(TmpStr);
 
-        CAMERA_HAL_LOG_INFO("mCaptureDeviceCfg.fmt is %x", mCaptureDeviceCfg.fmt);
+        CAMERA_LOG_INFO("mCaptureDeviceCfg.fmt is %x", mCaptureDeviceCfg.fmt);
 
         for(;;){
             if (mCaptureDevice->EnumDevParam(FRAME_SIZE_FPS,&CaptureSizeFps) <0){
-                CAMERA_HAL_LOG_RUNTIME("get the frame size and time interval error");
+                CAMERA_LOG_RUNTIME("get the frame size and time interval error");
                 break;
             }
             memset(TmpStr, 0, 20);
             sprintf(TmpStr, "%dx%d", CaptureSizeFps.width,CaptureSizeFps.height);
-            CAMERA_HAL_LOG_INFO("the size is %s , the framerate is %d ", TmpStr, (CaptureSizeFps.tv.denominator/CaptureSizeFps.tv.numerator));
+            CAMERA_LOG_INFO("Size: %s , Framerate: %d supported", TmpStr, (CaptureSizeFps.tv.denominator/CaptureSizeFps.tv.numerator));
             if (previewCnt == 0)
                 strncpy((char*) mSupportedPictureSizes, TmpStr, CAMER_PARAM_BUFFER_SIZE);
             else{
@@ -379,9 +379,9 @@ namespace android {
 
         /*hard code here*/
         strcpy(mSupportedFPS, "15,30");
-        CAMERA_HAL_LOG_INFO("##The supportedPictureSizes is %s##", mSupportedPictureSizes);
-        CAMERA_HAL_LOG_INFO("##the supportedPreviewSizes is %s##", mSupportedPreviewSizes);
-        CAMERA_HAL_LOG_INFO("##the supportedFPS is %s##", mSupportedFPS);
+        CAMERA_LOG_INFO("SupportedPictureSizes is %s", mSupportedPictureSizes);
+        CAMERA_LOG_INFO("SupportedPreviewSizes is %s", mSupportedPreviewSizes);
+        CAMERA_LOG_INFO("SupportedFPS is %s", mSupportedFPS);
 
         pParam->set(CameraParameters::KEY_SUPPORTED_PICTURE_SIZES, mSupportedPictureSizes);
         pParam->set(CameraParameters::KEY_SUPPORTED_PREVIEW_SIZES, mSupportedPreviewSizes);
@@ -399,10 +399,10 @@ namespace android {
 
     status_t CameraHal :: OpenCaptureDevice()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         if (mCaptureDeviceOpen){
-            CAMERA_HAL_LOG_INFO("The capture device already open");
+            CAMERA_LOG_INFO("The capture device already open");
             return NO_ERROR;
         }
         else if (mCaptureDevice != NULL){
@@ -410,23 +410,23 @@ namespace android {
                 return INVALID_OPERATION;
             mCaptureDeviceOpen = true;
         }else{
-            CAMERA_HAL_ERR("no capture device assigned");
+            CAMERA_LOG_ERR("no capture device assigned");
             return INVALID_OPERATION;
         }
         return ret;
     }
     void CameraHal ::CloseCaptureDevice()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCaptureDeviceOpen && mCaptureDevice != NULL){
             mCaptureDevice->DevClose();
             mCaptureDeviceOpen = false;
         }
     }
 
-    CAMERA_HAL_ERR_RET CameraHal :: InitPictureExifParam(CameraParameters *pParam)
+    CAMERA_HAL_RET CameraHal :: InitPictureExifParam(CameraParameters *pParam)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         char tmpBuffer[CAMER_PARAM_BUFFER_SIZE];
 
         /*hard code here*/
@@ -554,20 +554,19 @@ namespace android {
     void CameraHal::enableMsgType(int32_t msgType)
     {
         Mutex::Autolock lock(mLock);
-        CAMERA_HAL_LOG_INFO("###the mesg enabled is %x###", msgType);
+        CAMERA_LOG_INFO("enableMsgType 0x%x", msgType);
         mMsgEnabled |= msgType;
     }
 
     void CameraHal::disableMsgType(int32_t msgType)
     {
         Mutex::Autolock lock(mLock);
-        CAMERA_HAL_LOG_INFO("###the mesg disabled is %x###", msgType);
+        CAMERA_LOG_INFO("disableMsgType 0x%x", msgType);
         mMsgEnabled &= ~msgType;
     }
     bool CameraHal::msgTypeEnabled(int32_t msgType)
     {
         Mutex::Autolock lock(mLock);
-        CAMERA_HAL_LOG_INFO("###the mesg check is %x###", msgType);
         return (mMsgEnabled & msgType);
     }
 
@@ -578,39 +577,32 @@ namespace android {
 
     char* CameraHal::getParameters() const
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         Mutex::Autolock lock(mLock);
         char* params_string;
         String8 params_str8;
-	CAMERA_HAL_LOG_INFO("%s, %d", __FUNCTION__, __LINE__);
         CameraParameters mParams = mParameters;
-	CAMERA_HAL_LOG_INFO("%s, %d", __FUNCTION__, __LINE__);
 
         params_str8 = mParams.flatten();
-	CAMERA_HAL_LOG_INFO("%s, %d", __FUNCTION__, __LINE__);
         params_string = (char*)malloc(sizeof(char) * (params_str8.length() + 1));
-	CAMERA_HAL_LOG_INFO("%s, %d", __FUNCTION__, __LINE__);
         strcpy(params_string, params_str8.string());
-	CAMERA_HAL_LOG_INFO("%s, %d", __FUNCTION__, __LINE__);
         return params_string;
     }
 
     status_t  CameraHal:: setParameters(const char* params)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         CameraParameters parameters;
         String8 str_params(params);
 
-	CAMERA_HAL_LOG_INFO("%s, %d", __FUNCTION__, __LINE__);
         parameters.unflatten(str_params);
-	CAMERA_HAL_LOG_INFO("%s, %d", __FUNCTION__, __LINE__);
         return setParameters(parameters);
     }
 
     status_t  CameraHal:: setParameters(const CameraParameters& params)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         int w, h;
         int framerate;
         int max_zoom,zoom, max_fps, min_fps;
@@ -620,49 +612,49 @@ namespace android {
         max_zoom = params.getInt(CameraParameters::KEY_MAX_ZOOM);
         zoom = params.getInt(CameraParameters::KEY_ZOOM);
         if(zoom > max_zoom){
-            CAMERA_HAL_ERR("Invalid zoom setting, zoom %d, max zoom %d",zoom,max_zoom);
+            CAMERA_LOG_ERR("Invalid zoom setting, zoom %d, max zoom %d",zoom,max_zoom);
             return BAD_VALUE;
         }
         if (!((strcmp(params.getPreviewFormat(), "yuv420sp") == 0) ||
                 (strcmp(params.getPreviewFormat(), "yuv420p") == 0)/* || (strcmp(params.getPreviewFormat(), "yuv422i-yuyv") == 0)*/
                 )) {
-            CAMERA_HAL_ERR("Only yuv420sp or yuv420pis supported, but input format is %s", params.getPreviewFormat());
-            //CAMERA_HAL_ERR("Only yuv420sp,yuv420p or yuv422i-yuyv is supported, but input format is %s", params.getPreviewFormat());
+            CAMERA_LOG_ERR("Only yuv420sp or yuv420pis supported, but input format is %s", params.getPreviewFormat());
+            //CAMERA_LOG_ERR("Only yuv420sp,yuv420p or yuv422i-yuyv is supported, but input format is %s", params.getPreviewFormat());
             return BAD_VALUE;
         }
 
         if (strcmp(params.getPictureFormat(), "jpeg") != 0) {
-            CAMERA_HAL_ERR("Only jpeg still pictures are supported");
+            CAMERA_LOG_ERR("Only jpeg still pictures are supported");
             return BAD_VALUE;
         }
 
         params.getPreviewSize(&w, &h);
         sprintf(tmp, "%dx%d", w, h);
-        CAMERA_HAL_LOG_INFO("##the set preview size is %s ##", tmp);
+        CAMERA_LOG_INFO("Set preview size: %s", tmp);
         if (strstr(mSupportedPreviewSizes, tmp) == NULL){
-            CAMERA_HAL_ERR("The preview size w %d, h %d is not corrected", w, h);
+            CAMERA_LOG_ERR("The preview size w %d, h %d is not corrected", w, h);
             return BAD_VALUE;
         }
 
         params.getPictureSize(&w, &h);
         sprintf(tmp, "%dx%d", w, h);
-        CAMERA_HAL_LOG_INFO("##the set picture size is %s ##", tmp);
+        CAMERA_LOG_INFO("Set picture size: %s", tmp);
         if (strstr(mSupportedPictureSizes, tmp) == NULL){
-            CAMERA_HAL_ERR("The picture size w %d, h %d is not corrected", w, h);
+            CAMERA_LOG_ERR("The picture size w %d, h %d is not corrected", w, h);
             return BAD_VALUE;
         }
 
         framerate = params.getPreviewFrameRate();
-        CAMERA_HAL_LOG_INFO("##the set frame rate is %d ##", framerate);
+        CAMERA_LOG_INFO("Set frame rate:%d FPS", framerate);
         if ((framerate > 30) || (framerate < 0) ){
-            CAMERA_HAL_ERR("The framerate is not corrected");
+            CAMERA_LOG_ERR("The framerate is not corrected");
             return BAD_VALUE;
         }
 
         params.getPreviewFpsRange(&min_fps, &max_fps);
-        CAMERA_HAL_LOG_INFO("###the fps is %d###", max_fps);
+        CAMERA_LOG_INFO("FPS range: %d - %d",min_fps, max_fps);
         if (max_fps < 1000 || min_fps < 1000 || max_fps > 30000 || min_fps > 30000){
-            CAMERA_HAL_ERR("The fps range from %d to %d is error", min_fps, max_fps);
+            CAMERA_LOG_ERR("The fps range from %d to %d is error", min_fps, max_fps);
             return BAD_VALUE;
         }
 
@@ -671,7 +663,7 @@ namespace android {
         if (strcmp(pFlashStr, CameraParameters::FLASH_MODE_OFF) != 0 && strcmp(pFlashStr, CameraParameters::FLASH_MODE_AUTO) != 0 
                 && strcmp(pFlashStr, CameraParameters::FLASH_MODE_ON) != 0 && strcmp(pFlashStr, CameraParameters::FLASH_MODE_RED_EYE) != 0
                 && strcmp(pFlashStr, CameraParameters::FLASH_MODE_TORCH) != 0) {
-            CAMERA_HAL_ERR("The flash mode is not corrected");
+            CAMERA_LOG_ERR("The flash mode is not corrected");
             return BAD_VALUE;
         }
 
@@ -680,34 +672,33 @@ namespace android {
         if(strcmp(pFocusStr, CameraParameters::FOCUS_MODE_AUTO) != 0 && strcmp(pFocusStr, CameraParameters::FOCUS_MODE_INFINITY) != 0
                 && strcmp(pFocusStr, CameraParameters::FOCUS_MODE_MACRO) != 0 && strcmp(pFocusStr, CameraParameters::FOCUS_MODE_FIXED) != 0
                 && strcmp(pFocusStr, CameraParameters::FOCUS_MODE_EDOF) != 0 && strcmp(pFocusStr, CameraParameters::FOCUS_MODE_CONTINUOUS_VIDEO) != 0) {
-            CAMERA_HAL_ERR("The focus mode is not corrected");
+            CAMERA_LOG_ERR("The focus mode is not corrected");
             return BAD_VALUE;
         }
         mParameters = params;
-        CAMERA_HAL_LOG_INFO("%s return", __FUNCTION__);
 
         return NO_ERROR;
     }
 
     status_t CameraHal::setPreviewWindow(struct preview_stream_ops *window)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if(window == NULL) {
             isCaptureBufsAllocated = 0;
-            CAMERA_HAL_ERR("the buf is null!");
+            CAMERA_LOG_INFO("PreviewWindow is null");
         }
         else {
-            CAMERA_HAL_ERR("the buf is not null!");
+            CAMERA_LOG_ERR("PreviewWindow is valid");
         }
         mNativeWindow = window;
         if((mNativeWindow != NULL) && !isCaptureBufsAllocated && mCaptureBufNum) {
         //if((mNativeWindow != NULL) && !isCaptureBufsAllocated) {
             if(PrepareCaptureBufs() < 0) {
-                CAMERA_HAL_ERR("PrepareCaptureBufs()-2 error");
+                CAMERA_LOG_ERR("PrepareCaptureBufs() error");
                 return BAD_VALUE;
             }
             if(CameraHALPreviewStart() < 0) {
-                CAMERA_HAL_ERR("CameraHALPreviewStart()-2 error");
+                CAMERA_LOG_ERR("CameraHALPreviewStart() error");
                 return BAD_VALUE;
             }
         }
@@ -717,11 +708,11 @@ namespace android {
 
     status_t CameraHal::freeBuffersToNativeWindow()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         //Mutex::Autolock lock(mLock);
         if (mNativeWindow == NULL){
-            CAMERA_HAL_ERR("the native window is null!");
+            CAMERA_LOG_ERR("the native window is null!");
             return BAD_VALUE;
         }
  
@@ -755,18 +746,18 @@ namespace android {
 
     status_t CameraHal::allocateBuffersFromNativeWindow()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         //Mutex::Autolock lock(mLock);
         if (mNativeWindow == NULL){
-            CAMERA_HAL_ERR("the native window is null!");
+            CAMERA_LOG_ERR("the native window is null!");
             return NO_ERROR;//BAD_VALUE;
         }
         status_t err = mNativeWindow->set_buffers_geometry(mNativeWindow,
                 mCaptureDeviceCfg.width, mCaptureDeviceCfg.height, 
                 HAL_PIXEL_FORMAT_YCbCr_420_SP);//mCaptureDeviceCfg.fmt);
         if(err != 0){
-            CAMERA_HAL_ERR("native_window_set_buffers_geometry failed:%s(%d)", 
+            CAMERA_LOG_ERR("native_window_set_buffers_geometry failed:%s(%d)", 
                     strerror(-err), -err);
             return err;
         }
@@ -775,19 +766,19 @@ namespace android {
         err = mNativeWindow->get_min_undequeued_buffer_count(mNativeWindow,
                 &minUndequeueBufs);
         if(err != 0) {
-            CAMERA_HAL_ERR("NATIVE_WINDOW_MIN_UNDEQUEUED_BUFFERS query failed:%s(%d)",
+            CAMERA_LOG_ERR("NATIVE_WINDOW_MIN_UNDEQUEUED_BUFFERS query failed:%s(%d)",
                     strerror(-err), -err);
             return err;
         }
 
         if(mCaptureBufNum > PREVIEW_CAPTURE_BUFFER_NUM) {
-            CAMERA_HAL_ERR("%s: the actual buffer number %d is too large than %d", __FUNCTION__, mCaptureBufNum, PREVIEW_CAPTURE_BUFFER_NUM);
+            CAMERA_LOG_ERR("%s: the actual buffer number %d is too large than %d", __FUNCTION__, mCaptureBufNum, PREVIEW_CAPTURE_BUFFER_NUM);
             return BAD_VALUE;
         }
 
         err = mNativeWindow->set_buffer_count(mNativeWindow, mCaptureBufNum);
         if(err != 0) {
-            CAMERA_HAL_ERR("native_window_set_buffer_count failed:%s(%d)",
+            CAMERA_LOG_ERR("native_window_set_buffer_count failed:%s(%d)",
                     strerror(-err), -err);
             return err;
         }
@@ -803,7 +794,7 @@ namespace android {
             int stride;
             err = mNativeWindow->dequeue_buffer(mNativeWindow, &buf_h, &stride);
             if((err != 0) || (buf_h == NULL)) {
-                CAMERA_HAL_ERR("dequeueBuffer failed: %s(%d)", strerror(-err), -err);
+                CAMERA_LOG_ERR("dequeueBuffer failed: %s(%d)", strerror(-err), -err);
                 return BAD_VALUE;
             }
             buf = container_of(buf_h, ANativeWindowBuffer, handle);
@@ -811,7 +802,7 @@ namespace android {
             mapper.lock(handle, GRALLOC_USAGE_SW_READ_OFTEN | GRALLOC_USAGE_SW_WRITE_OFTEN, bounds, &pVaddr);
 
             if((handle->phys == 0) || (handle->base == 0) || (handle->size == 0)) {
-                 CAMERA_HAL_ERR("%s: dequeue invalide Buffer, phys=%x, base=%x, size=%d", __FUNCTION__, handle->phys, handle->base, handle->size);
+                 CAMERA_LOG_ERR("%s: dequeue invalide Buffer, phys=%x, base=%x, size=%d", __FUNCTION__, handle->phys, handle->base, handle->size);
                  mNativeWindow->cancel_buffer(mNativeWindow, &buf->handle);
                  return BAD_VALUE;
             }
@@ -823,7 +814,7 @@ namespace android {
             mCaptureBuffers[i].native_buf = (void *)buf;
             mCaptureBuffers[i].refCount = 0;
             mCaptureBuffers[i].buf_state = WINDOW_BUFS_DEQUEUED;
-            CAMERA_HAL_LOG_RUNTIME("mCaptureBuffers[%d]-phys=%x, base=%x, size=%d", i, mCaptureBuffers[i].phy_offset, mCaptureBuffers[i].virt_start, mCaptureBuffers[i].length);
+            CAMERA_LOG_RUNTIME("mCaptureBuffers[%d]-phys=%x, base=%x, size=%d", i, mCaptureBuffers[i].phy_offset, mCaptureBuffers[i].virt_start, mCaptureBuffers[i].length);
         }
 
         return NO_ERROR;
@@ -831,7 +822,7 @@ namespace android {
 
     status_t CameraHal::startPreview()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
 
         if(mTakePictureInProcess) {
@@ -846,13 +837,13 @@ namespace android {
         mPreviewLock.lock();
         if (mPreviewRunning) {
             // already running
-            CAMERA_HAL_LOG_RUNTIME("%s : preview thread already running", __func__);
+            CAMERA_LOG_RUNTIME("%s : preview thread already running", __func__);
             mPreviewLock.unlock();
             return NO_ERROR;//INVALID_OPERATION;
         }        
             
         if ((ret == CameraHALStartPreview())<0) {
-            CAMERA_HAL_LOG_RUNTIME("%s : CameraHALStartPreview error", __func__);
+            CAMERA_LOG_RUNTIME("%s : CameraHALStartPreview error", __func__);
             mPreviewLock.unlock();
             return ret;            
         }
@@ -862,7 +853,7 @@ namespace android {
         
         mCaptureLock.lock();
         if(mCaptureRunning) {
-            CAMERA_HAL_ERR("%s : preview thread already running", __func__);
+            CAMERA_LOG_ERR("%s : preview thread already running", __func__);
             mCaptureLock.unlock();
             return NO_ERROR;
         }
@@ -881,7 +872,7 @@ namespace android {
 
     void CameraHal::stopPreview()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         struct timeval af_time, be_time;
         Mutex::Autolock lock(mLock);
         /* Cannot stop preview in recording */
@@ -896,7 +887,7 @@ namespace android {
 
     bool CameraHal::previewEnabled()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         return mPreviewRunning;
     }
 
@@ -907,11 +898,11 @@ namespace android {
         if (bDirect == true) {
             if (!mPPDeviceNeed){
                 if(mCaptureBufNum <= 0)
-                    CAMERA_HAL_LOG_INFO("mCaptureBuf not allocated yet, will register it later");
+                    CAMERA_LOG_INFO("mCaptureBuf not allocated yet, will register it later");
                 
                 for(i = 0 ; i < mCaptureBufNum; i ++) {
                     mVideoBufferPhy[i].phy_offset = mCaptureBuffers[i].phy_offset;
-                    CAMERA_HAL_LOG_INFO("Camera HAL physic address: %x", mCaptureBuffers[i].phy_offset);
+                    CAMERA_LOG_INFO("Camera HAL physic address: %x", mCaptureBuffers[i].phy_offset);
                     mVideoBufferPhy[i].length = mCaptureBuffers[i].length;
                     memcpy((unsigned char*)mVideoMemory->data + i*mPreviewFrameSize,
                         (void*)&mVideoBufferPhy[i], sizeof(VIDEOFRAME_BUFFER_PHY));
@@ -919,7 +910,7 @@ namespace android {
             }else{
                 for(i = 0 ; i < mPPbufNum; i ++) {
                     mVideoBufferPhy[i].phy_offset = mPPbuf[i].phy_offset;
-                    CAMERA_HAL_LOG_INFO("Camera HAL physic address: %x", mPPbuf[i].phy_offset);
+                    CAMERA_LOG_INFO("Camera HAL physic address: %x", mPPbuf[i].phy_offset);
                     mVideoBufferPhy[i].length = mPPbuf[i].length;
                     memcpy((unsigned char*)mVideoMemory->data + i*mPreviewFrameSize,
                     (void*)&mVideoBufferPhy[i], sizeof(VIDEOFRAME_BUFFER_PHY));
@@ -932,7 +923,7 @@ namespace android {
 
     status_t CameraHal::storeMetaDataInBuffers(bool enable)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         bDirectInput = enable;
         updateDirectInput(enable);
         return NO_ERROR;
@@ -940,7 +931,7 @@ namespace android {
 #if 0
     int32_t CameraHal::getNumberOfVideoBuffers() const
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
 	if (!mPPDeviceNeed){
 		return mCaptureBufNum;
@@ -951,7 +942,7 @@ namespace android {
 
     sp<IMemory> CameraHal::getVideoBuffer(int32_t index) const
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         //this may be done in cameraHardwareInterface
         //CameraHardwareInterface::CameraHeapMemory* mem;
         //mem = (CameraHardwareInterface::CameraHeapMemory*)(mVideoMemory->handle);
@@ -961,13 +952,13 @@ namespace android {
 #endif
     status_t CameraHal::startRecording()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         unsigned int i;
 
         mEncodeLock.lock();
         if (mRecordRunning == true ) {
-            CAMERA_HAL_LOG_INFO("%s: Recording is already existed\n", __FUNCTION__);
+            CAMERA_LOG_INFO("%s: Recording is already existed\n", __FUNCTION__);
             mEncodeLock.unlock();
             return ret;
         }
@@ -987,21 +978,21 @@ namespace android {
 
     void CameraHal::stopRecording()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         
         mEncodeLock.lock();        
         if(mRecordRunning) {
             mRecordRunning = false;
             mEncodeThreadQueue.postMessage(new CMessage(CMESSAGE_TYPE_STOP, 0));
             sem_wait(&mEncodeStoppedCondition);
-            CAMERA_HAL_LOG_RUNTIME("---%s, after wait--", __FUNCTION__);
+            CAMERA_LOG_RUNTIME("---%s, after wait--", __FUNCTION__);
         }
         mEncodeLock.unlock();
     }
 
     void CameraHal::releaseRecordingFrame(const void* mem)
     {
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         int index;
 
         index = ((size_t)mem - (size_t)mVideoMemory->data) / mPreviewFrameSize;
@@ -1009,7 +1000,7 @@ namespace android {
 
         if (bDirectInput == true) {
             if(mCaptureBuffers[index].refCount == 0) {
-                CAMERA_HAL_ERR("warning:%s about to release mCaptureBuffers[%d].refcount=%d-", __FUNCTION__, index, mCaptureBuffers[index].refCount);
+                CAMERA_LOG_ERR("warning:%s about to release mCaptureBuffers[%d].refcount=%d-", __FUNCTION__, index, mCaptureBuffers[index].refCount);
                 return;
             }
             putBufferCount(&mCaptureBuffers[index]);
@@ -1018,13 +1009,13 @@ namespace android {
 
     bool CameraHal::recordingEnabled()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         return (mPreviewRunning && mRecordRunning);
     }
 
     status_t CameraHal::autoFocus()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         Mutex::Autolock lock(mLock);
 
@@ -1039,24 +1030,24 @@ namespace android {
 
     status_t CameraHal::cancelAutoFocus()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         return NO_ERROR;
     }
 
     status_t CameraHal::takePicture()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         Mutex::Autolock lock(mLock);
 
         //CameraHALStopPreview();
         if(mTakePictureInProcess) {
-            CAMERA_HAL_ERR("%s: takePicture already in process", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: takePicture already in process", __FUNCTION__);
             return INVALID_OPERATION;
         }
 
         if(mTakePicThread->run("takepicThread", PRIORITY_URGENT_DISPLAY) != NO_ERROR) {
-            CAMERA_HAL_ERR("%s: could't run take picture thread", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: could't run take picture thread", __FUNCTION__);
             return INVALID_OPERATION;
         }
         mTakePictureInProcess = true;
@@ -1066,7 +1057,7 @@ namespace android {
 
     status_t CameraHal::cancelPicture()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         mTakePicThread->requestExitAndWait();
 
         return NO_ERROR;
@@ -1075,7 +1066,7 @@ namespace android {
 
     int CameraHal::autoFocusThread()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         int FocusFlag = 0;
 
         if (mMsgEnabled & CAMERA_MSG_FOCUS)
@@ -1086,8 +1077,8 @@ namespace android {
 
     int CameraHal::takepicThread()
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_LOG_INFO("Camera is taking picture!");
+        CAMERA_LOG_FUNC;
+        CAMERA_LOG_INFO("Start taking picture!");
 
         /* Stop preview, start picture capture, and then restart preview again for CSI camera*/
         CameraHALStopPreview();
@@ -1099,7 +1090,7 @@ namespace android {
 
     int CameraHal :: cameraHALTakePicture()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         int ret = NO_ERROR;
         unsigned int DeQueBufIdx = 0;
         struct jpeg_encoding_conf JpegEncConf;
@@ -1110,7 +1101,7 @@ namespace android {
         int  max_fps, min_fps;
 
         if (mJpegEncoder == NULL){
-            CAMERA_HAL_ERR("the jpeg encoder is NULL");
+            CAMERA_LOG_ERR("the jpeg encoder is NULL");
             return BAD_VALUE;
         }
         mParameters.getPictureSize((int *)&(mCaptureDeviceCfg.width),(int *)&(mCaptureDeviceCfg.height));
@@ -1123,7 +1114,7 @@ namespace android {
                 mCaptureDeviceCfg.tv.denominator = mParameters.getPreviewFrameRate();
             else{
                 mParameters.getPreviewFpsRange(&min_fps, &max_fps);
-                CAMERA_HAL_LOG_INFO("###start the preview the fps is %d###", max_fps);
+                CAMERA_LOG_INFO("###start the preview the fps is %d###", max_fps);
                 mCaptureDeviceCfg.tv.denominator = max_fps/1000;
             }
         }else{
@@ -1140,7 +1131,7 @@ namespace android {
 
         if (mPPDeviceNeedForPic){
             if ((ret = PreparePostProssDevice()) < 0){
-                CAMERA_HAL_ERR("PreparePostProssDevice error");
+                CAMERA_LOG_ERR("PreparePostProssDevice error");
                 return ret;
             }
         }
@@ -1149,7 +1140,7 @@ namespace android {
 
         if (mPPDeviceNeedForPic){
             if ((ret = PreparePreviwBuf()) < 0){
-                CAMERA_HAL_ERR("PreparePreviwBuf error");
+                CAMERA_LOG_ERR("PreparePreviwBuf error");
                 return ret;
             }
         }
@@ -1163,7 +1154,7 @@ namespace android {
         }
 
         if (mCaptureDevice->DevStart()<0){
-            CAMERA_HAL_ERR("the capture start up failed !!!!");
+            CAMERA_LOG_ERR("the capture start up failed !!!!");
             return INVALID_OPERATION;
         }
 
@@ -1195,19 +1186,19 @@ namespace android {
         }
 
         Buf_output.virt_start = (unsigned char *)(JpegMemBase->data);
-        CAMERA_HAL_LOG_INFO("Generated a picture with mMsgEnabled 0x%x", mMsgEnabled);
+        CAMERA_LOG_INFO("Generated a picture with mMsgEnabled 0x%x", mMsgEnabled);
 
         if (mMsgEnabled & CAMERA_MSG_SHUTTER) {
-            CAMERA_HAL_LOG_INFO("CAMERA_MSG_SHUTTER");
+            CAMERA_LOG_INFO("CAMERA_MSG_SHUTTER");
             mNotifyCb(CAMERA_MSG_SHUTTER, 0, 0, mCallbackCookie);
         }
 
         if (mMsgEnabled & CAMERA_MSG_RAW_IMAGE) {
-            CAMERA_HAL_LOG_INFO("CAMERA_MSG_RAW_IMAGE");
+            CAMERA_LOG_INFO("CAMERA_MSG_RAW_IMAGE");
             RawMemBase = mRequestMemory(-1, mCaptureFrameSize, 1, NULL);
 
             if ( NULL == RawMemBase ) {
-                CAMERA_HAL_LOG_INFO("Raw buffer allocation failed!");
+                CAMERA_LOG_INFO("Raw buffer allocation failed!");
                 ret = UNKNOWN_ERROR;
                 goto Pic_out;
             }
@@ -1224,7 +1215,7 @@ namespace android {
         }
 
         if ( mMsgEnabled & CAMERA_MSG_RAW_IMAGE_NOTIFY ) {
-            CAMERA_HAL_LOG_INFO("CAMERA_MSG_RAW_IMAGE_NOTIFY");
+            CAMERA_LOG_INFO("CAMERA_MSG_RAW_IMAGE_NOTIFY");
             if(mNotifyCb)
                 mNotifyCb(CAMERA_MSG_RAW_IMAGE_NOTIFY, 0, 0, mCallbackCookie);
         }
@@ -1237,7 +1228,7 @@ namespace android {
 Pic_out:
         freeBuffersToNativeWindow();
         if ((JpegMemBase != NULL) &&(JpegMemBase->data != NULL) && (mMsgEnabled & CAMERA_MSG_COMPRESSED_IMAGE)) {
-            CAMERA_HAL_LOG_INFO("==========CAMERA_MSG_COMPRESSED_IMAGE==================");
+            CAMERA_LOG_INFO("==========CAMERA_MSG_COMPRESSED_IMAGE==================");
             mDataCb(CAMERA_MSG_COMPRESSED_IMAGE, JpegMemBase, 0, NULL, mCallbackCookie);
         }
 
@@ -1255,7 +1246,7 @@ Pic_out:
 
     int CameraHal :: GetJpegEncoderParam()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         int ret = NO_ERROR, i = 0;
         memset(mEncoderSupportedFormat, 0, sizeof(unsigned int)*MAX_QUERY_FMT_TIMES);
 
@@ -1264,14 +1255,14 @@ Pic_out:
                 break;
         }
         if (i == 0){
-            CAMERA_HAL_ERR("Get the parameters error");
+            CAMERA_LOG_ERR("Get the parameters error");
             return UNKNOWN_ERROR;
         }
         return ret;
     }
     int CameraHal :: NegotiateCaptureFmt(bool TakePicFlag)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         int ret = NO_ERROR, i = 0, j = 0;
 
 
@@ -1284,7 +1275,7 @@ Pic_out:
                     if (mCaptureSupportedFormat[i] == mEncoderSupportedFormat[j]){
                         mPictureEncodeFormat= mCaptureSupportedFormat[i];
 
-                        CAMERA_HAL_LOG_INFO(" Get the mPictureEncodeFormat :%c%c%c%c\n",
+                        CAMERA_LOG_INFO(" Get the mPictureEncodeFormat :%c%c%c%c\n",
                                 mPictureEncodeFormat & 0xFF, (mPictureEncodeFormat >> 8) & 0xFF,
                                 (mPictureEncodeFormat >> 16) & 0xFF, (mPictureEncodeFormat >> 24) & 0xFF);
                         break;
@@ -1297,29 +1288,29 @@ Pic_out:
                 mPictureEncodeFormat = mEncoderSupportedFormat[0];
                 mCaptureDeviceCfg.fmt = mUvcSpecialCaptureFormat; //For uvc now, IPU only can support yuyv.
                 mPPDeviceNeedForPic = true;
-                CAMERA_HAL_LOG_INFO("Need to do the CSC for Jpeg encoder");
-                CAMERA_HAL_LOG_INFO(" Get the captured format is :%c%c%c%c\n",
+                CAMERA_LOG_INFO("Need to do the CSC for Jpeg encoder");
+                CAMERA_LOG_INFO("Get the captured format is :%c%c%c%c\n",
                         mCaptureDeviceCfg.fmt & 0xFF, (mCaptureDeviceCfg.fmt >> 8) & 0xFF,
                         (mCaptureDeviceCfg.fmt >> 16) & 0xFF, (mCaptureDeviceCfg.fmt >> 24) & 0xFF);
-                CAMERA_HAL_LOG_INFO(" Get the mPictureEncodeFormat :%c%c%c%c\n",
+                CAMERA_LOG_INFO("Get the mPictureEncodeFormat :%c%c%c%c\n",
                         mPictureEncodeFormat & 0xFF, (mPictureEncodeFormat >> 8) & 0xFF,
                         (mPictureEncodeFormat >> 16) & 0xFF, (mPictureEncodeFormat >> 24) & 0xFF);
             }else{
                 mCaptureDeviceCfg.fmt = mPictureEncodeFormat;
             }
         }else{
-            CAMERA_HAL_LOG_INFO("mDefaultPreviewFormat :%c%c%c%c\n",
+            CAMERA_LOG_INFO("mDefaultPreviewFormat :%c%c%c%c\n",
                     mDefaultPreviewFormat & 0xFF, (mDefaultPreviewFormat >> 8) & 0xFF,
                     (mDefaultPreviewFormat >> 16) & 0xFF, (mDefaultPreviewFormat >> 24) & 0xFF);
-            CAMERA_HAL_LOG_INFO("mUvcSpecialCaptureFormat :%c%c%c%c\n",
+            CAMERA_LOG_INFO("mUvcSpecialCaptureFormat :%c%c%c%c\n",
                     mUvcSpecialCaptureFormat & 0xFF, (mUvcSpecialCaptureFormat >> 8) & 0xFF,
                     (mUvcSpecialCaptureFormat >> 16) & 0xFF, (mUvcSpecialCaptureFormat >> 24) & 0xFF);
 
             if(mPPDeviceNeed == false) {
                 for(i =0; i< MAX_QUERY_FMT_TIMES; i ++){
-                    CAMERA_HAL_LOG_RUNTIME("mCaptureSupportedFormat[%d] is %x", i, mCaptureSupportedFormat[i]);
+                    CAMERA_LOG_RUNTIME("mCaptureSupportedFormat[%d] is %x", i, mCaptureSupportedFormat[i]);
                     if (mCaptureSupportedFormat[i] == mDefaultPreviewFormat){
-                        CAMERA_HAL_LOG_RUNTIME("get the correct format [%d] is %x", i, mCaptureSupportedFormat[i]);
+                        CAMERA_LOG_RUNTIME("get the correct format [%d] is %x", i, mCaptureSupportedFormat[i]);
                         //mPPDeviceNeed = false;
                         //mPreviewCapturedFormat = mPreviewFormat;
                         mCaptureDeviceCfg.fmt = mDefaultPreviewFormat;
@@ -1331,7 +1322,7 @@ Pic_out:
                 for(i =0; i< MAX_QUERY_FMT_TIMES; i ++){
                     //since for CSI, the CSI can convert to any YUV format if necessary, so specailly is just for UVC
                     if (mCaptureSupportedFormat[i] == mUvcSpecialCaptureFormat){
-                        CAMERA_HAL_LOG_RUNTIME("get the correct format [%d] is %x", i, mCaptureSupportedFormat[i]);
+                        CAMERA_LOG_RUNTIME("get the correct format [%d] is %x", i, mCaptureSupportedFormat[i]);
                         //mPPDeviceNeed = true;
                         //mPreviewCapturedFormat = mUvcSpecialCaptureFormat;
                         mCaptureDeviceCfg.fmt = mUvcSpecialCaptureFormat;
@@ -1340,12 +1331,12 @@ Pic_out:
                 }
             }
 
-            CAMERA_HAL_LOG_INFO("mCaptureDeviceCfg.fmt :%c%c%c%c\n",
+            CAMERA_LOG_INFO("mCaptureDeviceCfg.fmt :%c%c%c%c\n",
                     mCaptureDeviceCfg.fmt & 0xFF, (mCaptureDeviceCfg.fmt >> 8) & 0xFF,
                     (mCaptureDeviceCfg.fmt >> 16) & 0xFF, (mCaptureDeviceCfg.fmt >> 24) & 0xFF);
 
             if ((i == MAX_QUERY_FMT_TIMES)){
-                CAMERA_HAL_ERR("Negotiate for the preview format error");
+                CAMERA_LOG_ERR("Negotiate for the preview format error");
                 return BAD_VALUE;
             }
         }
@@ -1379,8 +1370,8 @@ Pic_out:
         mParameters.getPictureSize((int *)&(mJpegEncCfg.PicWidth), (int *)&(mJpegEncCfg.PicHeight));
         mJpegEncCfg.ThumbWidth = (unsigned int)mParameters.getInt(CameraParameters::KEY_JPEG_THUMBNAIL_WIDTH);
         mJpegEncCfg.ThumbHeight =(unsigned int)mParameters.getInt(CameraParameters::KEY_JPEG_THUMBNAIL_HEIGHT);
-        CAMERA_HAL_LOG_INFO("the pic width %d, height %d, fmt %d", mJpegEncCfg.PicWidth, mJpegEncCfg.PicHeight, mJpegEncCfg.BufFmt);
-        CAMERA_HAL_LOG_INFO("the thumbnail width is %d, height is %d", mJpegEncCfg.ThumbWidth, mJpegEncCfg.ThumbHeight);
+        CAMERA_LOG_INFO("pic width %d, height %d, fmt %d", mJpegEncCfg.PicWidth, mJpegEncCfg.PicHeight, mJpegEncCfg.BufFmt);
+        CAMERA_LOG_INFO("thumbnail width is %d, height is %d", mJpegEncCfg.ThumbWidth, mJpegEncCfg.ThumbHeight);
         //set focallength info
         focallength_info.numerator=10001;
         focallength_info.denominator=1000;  // hardcode here for the cts
@@ -1406,7 +1397,7 @@ Pic_out:
         tm = localtime(&clock);
         time_t GpsUtcTime;
         strftime(temp_string, sizeof(temp_string), format, tm);
-        CAMERA_HAL_LOG_INFO("the date time is %s", temp_string);
+        CAMERA_LOG_INFO("date time: %s", temp_string);
         memcpy((char *)datetime_info.datetime, temp_string, sizeof(datetime_info.datetime));
         mJpegEncCfg.pDatetimeInfo = &datetime_info;
 
@@ -1421,10 +1412,10 @@ Pic_out:
             mJpegEncCfg.RotationInfo = ORIENTATION_ROTATE_270;
         else
             mJpegEncCfg.RotationInfo = ORIENTATION_NORMAL;
-        CAMERA_HAL_LOG_INFO("ratate info is %d", rotate_angle);
+        CAMERA_LOG_INFO("rotate: %d", rotate_angle);
 
         pWhiteBalanceStr = mParameters.get(CameraParameters::KEY_WHITE_BALANCE);
-        CAMERA_HAL_LOG_INFO("white balance is %s",pWhiteBalanceStr);
+        CAMERA_LOG_INFO("white balance: %s",pWhiteBalanceStr);
         if (strcmp(pWhiteBalanceStr, CameraParameters::WHITE_BALANCE_AUTO) == 0){
             whitebalance_info = WHITEBALANCE_AUTO;
         }else{
@@ -1433,7 +1424,7 @@ Pic_out:
         mJpegEncCfg.WhiteBalanceInfo = whitebalance_info;
 
         pFlashStr = mParameters.get(CameraParameters::KEY_FLASH_MODE);
-        CAMERA_HAL_LOG_INFO("flash mode is %s", pFlashStr);
+        CAMERA_LOG_INFO("flash mode: %s", pFlashStr);
         if (strcmp(pFlashStr, CameraParameters::FLASH_MODE_OFF) == 0){
             flash_info = FLASH_NOT_FIRE;
         }else if (strcmp(pFlashStr, CameraParameters::FLASH_MODE_AUTO) == 0){
@@ -1490,11 +1481,11 @@ Pic_out:
                 int intValue;
                 gps_info.altitude[1]=1000;	   // the precision is CM
                 dAltitude= atof(cAltitude);
-                CAMERA_HAL_LOG_RUNTIME("the altitude is %s", cAltitude);
+                CAMERA_LOG_RUNTIME("altitude: %s", cAltitude);
                 intValue = (int)(dAltitude * 1000.0);
                 if (intValue<0) {gps_info.altitude_ref = 1; intValue *= -1;}
                 gps_info.altitude[0] = (unsigned long) intValue;
-                CAMERA_HAL_LOG_RUNTIME("gps_info.altitude[0] is %u, gps_info.altitude_ref is %d", gps_info.altitude[0], gps_info.altitude_ref);
+                CAMERA_LOG_RUNTIME("gps_info.altitude[0] is %u, gps_info.altitude_ref is %d", gps_info.altitude[0], gps_info.altitude_ref);
             }
 
             //timestamp: hh/1,mm/1,ss/1
@@ -1504,7 +1495,7 @@ Pic_out:
             if (cTimeStamp != NULL){
 
                 GpsUtcTime = atol(cTimeStamp);
-                CAMERA_HAL_LOG_INFO("the Timestamp is %s", cTimeStamp);
+                CAMERA_LOG_INFO("Timestamp: %s", cTimeStamp);
                 temp_tm = gmtime((const time_t*)&GpsUtcTime);
                 if (temp_tm != NULL)
                     tm = temp_tm;
@@ -1521,18 +1512,17 @@ Pic_out:
             memcpy(gps_info.datestamp, temp_string, sizeof(gps_info.datestamp));
 
 
-            char * progressMehod = (char *)mParameters.get(CameraParameters::KEY_GPS_PROCESSING_METHOD);
-            if (progressMehod == NULL){
-                CAMERA_HAL_LOG_INFO("The progressMethod is NULL, add a fake");
-                progressMehod = (char *)"fsl_fake_method";
+            char * processMehod = (char *)mParameters.get(CameraParameters::KEY_GPS_PROCESSING_METHOD);
+            if (processMehod == NULL){
+                CAMERA_LOG_INFO("processMethod is NULL, add a fake");
+                processMehod = (char *)"fsl_fake_method";
             }
-            CAMERA_HAL_LOG_INFO("the progressMethod is %s", progressMehod);
 
-            memcpy(gps_info.processmethod, progressMehod, strlen(progressMehod));
+            memcpy(gps_info.processmethod, processMehod, strlen(processMehod));
 
-            gps_info.processmethod_bytes=strlen(progressMehod);
+            gps_info.processmethod_bytes=strlen(processMehod);
 
-            CAMERA_HAL_LOG_INFO("the method is %s", gps_info.processmethod);
+            CAMERA_LOG_INFO("processmethod: %s", gps_info.processmethod);
 
             mJpegEncCfg.pGps_info = &gps_info;
         }else{
@@ -1540,7 +1530,7 @@ Pic_out:
         }
 
         if (mJpegEncoder->JpegEncoderInit(&mJpegEncCfg)< 0){
-            CAMERA_HAL_ERR("Jpeg Encoder Init error !!!");
+            CAMERA_LOG_ERR("Jpeg Encoder Init error !!!");
             return UNKNOWN_ERROR;
         }
 
@@ -1549,9 +1539,9 @@ Pic_out:
 
     status_t CameraHal::convertPreviewFormatToString(char *pStr, int length, unsigned int format)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if(pStr == NULL || length < 10) {
-            CAMERA_HAL_ERR("%s: invalide parameters", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: invalide parameters", __FUNCTION__);
             return BAD_VALUE;
         }
         if(format == v4l2_fourcc('Y','U','1','2')) {
@@ -1564,7 +1554,7 @@ Pic_out:
         //    strcpy(pStr, "yuv422i-yuyv");
         //}
         else {
-            CAMERA_HAL_ERR("%s: Only YU12 or NV12 is supported", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: Only YU12 or NV12 is supported", __FUNCTION__);
             return BAD_VALUE;
         }
         return NO_ERROR;
@@ -1572,7 +1562,7 @@ Pic_out:
 
     status_t CameraHal::convertStringToPreviewFormat(unsigned int *pFormat)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if(!strcmp(mParameters.getPreviewFormat(), "yuv420p")) {
             *pFormat = v4l2_fourcc('Y','U','1','2');
         }
@@ -1583,7 +1573,7 @@ Pic_out:
         //    *pFormat = v4l2_fourcc('Y','U','Y','V');
         //}
         else {
-            CAMERA_HAL_ERR("Only yuv420sp or yuv420p is supported");
+            CAMERA_LOG_ERR("Only yuv420sp or yuv420p is supported");
             return BAD_VALUE;
         }
         return NO_ERROR;
@@ -1591,19 +1581,19 @@ Pic_out:
 
     status_t CameraHal::CameraHALStartPreview()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         int  max_fps, min_fps;
 
         mParameters.getPreviewSize((int *)&(mCaptureDeviceCfg.width),(int *)&(mCaptureDeviceCfg.height));
 
         if ((ret = convertStringToPreviewFormat(&mPreviewCapturedFormat)) != 0) {
-            CAMERA_HAL_ERR("%s: convertStringToPreviewFormat error", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: convertStringToPreviewFormat error", __FUNCTION__);
             return ret;
         }
 
         mCaptureDeviceCfg.fmt = mPreviewCapturedFormat;
-        CAMERA_HAL_LOG_RUNTIME("*********%s,mCaptureDeviceCfg.fmt=%x************", __FUNCTION__, mCaptureDeviceCfg.fmt);
+        CAMERA_LOG_RUNTIME("*********%s,mCaptureDeviceCfg.fmt=%x************", __FUNCTION__, mCaptureDeviceCfg.fmt);
         mCaptureDeviceCfg.rotate = (SENSOR_PREVIEW_ROTATE)mPreviewRotate;
         mCaptureDeviceCfg.tv.numerator = 1;
         mCaptureDevice->GetDevName(mCameraSensorName);
@@ -1614,7 +1604,7 @@ Pic_out:
                 mCaptureDeviceCfg.tv.denominator = mParameters.getPreviewFrameRate();
             else{
                 mParameters.getPreviewFpsRange(&min_fps, &max_fps);
-                CAMERA_HAL_LOG_INFO("###start the capture the fps is %d###", max_fps);
+                CAMERA_LOG_INFO("###start the capture the fps is %d###", max_fps);
                 mCaptureDeviceCfg.tv.denominator = max_fps/1000;
             }
         }else{
@@ -1630,28 +1620,28 @@ Pic_out:
                 mPreviewFrameSize = mCaptureDeviceCfg.width*mCaptureDeviceCfg.height *2;
 
         if ((ret = PrepareCaptureDevices()) < 0){
-            CAMERA_HAL_ERR("PrepareCaptureDevices error ");
+            CAMERA_LOG_ERR("PrepareCaptureDevices error ");
             return ret;
         }
         if (mPPDeviceNeed){
             if ((ret = PreparePostProssDevice()) < 0){
-                CAMERA_HAL_ERR("PreparePostProssDevice error");
+                CAMERA_LOG_ERR("PreparePostProssDevice error");
                 return ret;
             }
         }
         if ((ret = PreparePreviwBuf()) < 0){
-            CAMERA_HAL_ERR("PreparePreviwBuf error");
+            CAMERA_LOG_ERR("PreparePreviwBuf error");
             return ret;
         }
 
         if ((ret = PreparePreviwMisc()) < 0){
-            CAMERA_HAL_ERR("PreparePreviwMisc error");
+            CAMERA_LOG_ERR("PreparePreviwMisc error");
             return ret;
         }
 
         if(mNativeWindow != NULL) {
             if ((ret = CameraHALPreviewStart()) < 0){
-                CAMERA_HAL_ERR("CameraHALPreviewStart error");
+                CAMERA_LOG_ERR("CameraHALPreviewStart error");
                 return ret;
             }
         }
@@ -1661,14 +1651,14 @@ Pic_out:
     }
     void CameraHal::CameraHALStopPreview()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mPreviewRunning != 0)	{
             CameraHALStopThreads();
             CameraHALStopMisc();
             mCaptureBufNum = 0;
-            CAMERA_HAL_LOG_INFO("camera hal stop preview done");
+            CAMERA_LOG_INFO("camera hal stop preview done");
         }else{
-            CAMERA_HAL_LOG_INFO("Camera hal already stop preview");
+            CAMERA_LOG_INFO("Camera hal already stop preview");
         }
         //mCaptureBufNum = 0;
         return ;
@@ -1676,55 +1666,55 @@ Pic_out:
 
     void CameraHal :: CameraHALStopThreads()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         
         mCaptureLock.lock();
         if(mCaptureRunning) {
-            CAMERA_HAL_LOG_INFO("%s :capture run", __FUNCTION__);
+            CAMERA_LOG_INFO("%s :capture run", __FUNCTION__);
             mCaptureThreadQueue.postStopMessage();
             mCaptureRunning = false;
             if(gettid()!= mCaptureFrameThread->mTID)
                 sem_wait(&mCaptureStoppedCondition);
             else
-                CAMERA_HAL_LOG_INFO("Stop CaptureFrameThread in itself");
+                CAMERA_LOG_INFO("Stop CaptureFrameThread in itself");
         }else {
-            CAMERA_HAL_LOG_INFO("%s :capture not run", __FUNCTION__);
+            CAMERA_LOG_INFO("%s :capture not run", __FUNCTION__);
         }
         mCaptureLock.unlock();
-        CAMERA_HAL_LOG_INFO("%s :---------", __FUNCTION__);
+        CAMERA_LOG_INFO("%s :---------", __FUNCTION__);
 
         mPostProcessLock.lock(); 
         if(mPPDeviceNeed && mPreviewRunning) {
-            CAMERA_HAL_LOG_INFO("%s :postprocess run", __FUNCTION__);
+            CAMERA_LOG_INFO("%s :postprocess run", __FUNCTION__);
             mPostProcessThreadQueue.postStopMessage();
             if(gettid()!= mPostProcessThread->mTID)
                 sem_wait(&mPostProcessStoppedCondition);
             else
-                CAMERA_HAL_LOG_INFO("Stop PostProcessThread in itself");
+                CAMERA_LOG_INFO("Stop PostProcessThread in itself");
         }
         mPostProcessLock.unlock(); 
 
         mPreviewLock.lock();
         if(mPreviewRunning) {
-            CAMERA_HAL_LOG_INFO("%s :preview run", __FUNCTION__);
+            CAMERA_LOG_INFO("%s :preview run", __FUNCTION__);
             mPreviewThreadQueue.postStopMessage();
             mPreviewRunning = false;
             if(gettid()!= mPreviewShowFrameThread->mTID)
                 sem_wait(&mPreviewStoppedCondition);
             else
-                CAMERA_HAL_LOG_INFO("Stop PreviewShowThread in itself");
+                CAMERA_LOG_INFO("Stop PreviewShowThread in itself");
         }else {
-            CAMERA_HAL_LOG_INFO("%s :preview not run", __FUNCTION__);
+            CAMERA_LOG_INFO("%s :preview not run", __FUNCTION__);
         }
         mPreviewLock.unlock();
-        CAMERA_HAL_LOG_INFO("%s :exit", __FUNCTION__);
+        CAMERA_LOG_INFO("%s :exit", __FUNCTION__);
         
         return ;
     }
 
     void CameraHal :: CameraHALStopMisc()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         if(mPPDeviceNeed){
         }
@@ -1737,7 +1727,7 @@ Pic_out:
 
     status_t CameraHal :: PrepareCaptureBufs()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         //status_t ret = NO_ERROR;
         //if(mCaptureBufNum == 0) {
         //    mCaptureBufNum = PREVIEW_CAPTURE_BUFFER_NUM;
@@ -1745,29 +1735,29 @@ Pic_out:
         unsigned int CaptureBufNum = mCaptureBufNum;
         
         if(allocateBuffersFromNativeWindow() < 0) {
-            CAMERA_HAL_ERR("allocateBuffersFromNativeWindow error");
+            CAMERA_LOG_ERR("allocateBuffersFromNativeWindow error");
             return BAD_VALUE;
         }
 
         if (mCaptureDevice->DevRegisterBufs(mCaptureBuffers,&CaptureBufNum)< 0){
-            CAMERA_HAL_ERR("capture device allocat buf error");
+            CAMERA_LOG_ERR("capture device allocat buf error");
             return BAD_VALUE;
         }
         if(mCaptureBufNum != CaptureBufNum){
-            CAMERA_HAL_LOG_INFO("The driver can only supply %d bufs, but required %d bufs", CaptureBufNum, mCaptureBufNum);
+            CAMERA_LOG_INFO("The driver can only supply %d bufs, but required %d bufs", CaptureBufNum, mCaptureBufNum);
         }
 
         mCaptureBufNum = CaptureBufNum;
 
         if (mCaptureDevice->DevPrepare()< 0){
-            CAMERA_HAL_ERR("capture device prepare error");
+            CAMERA_LOG_ERR("capture device prepare error");
             return BAD_VALUE;
         }
         nCameraBuffersQueued = mCaptureBufNum;
         isCaptureBufsAllocated = 1;
 
         if((AllocateRecordVideoBuf())<0) {
-            CAMERA_HAL_LOG_INFO("%s: AllocateRecordVideoBuf error\n", __FUNCTION__);
+            CAMERA_LOG_INFO("%s: AllocateRecordVideoBuf error\n", __FUNCTION__);
             return BAD_VALUE;
         }
  
@@ -1776,7 +1766,7 @@ Pic_out:
 
     status_t CameraHal :: PrepareCaptureDevices()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         int i =0;
         //unsigned int CaptureBufNum = mCaptureBufNum;
@@ -1785,14 +1775,14 @@ Pic_out:
             return ret;
 
         if (mCaptureDevice->DevSetConfig(&mCaptureDeviceCfg) < 0) {//set the config and get the captured framesize
-            CAMERA_HAL_ERR("Dev config failed");
+            CAMERA_LOG_ERR("Dev config failed");
             return BAD_VALUE;
         }
         mCaptureFrameSize = mCaptureDeviceCfg.framesize;
 
         if(mNativeWindow != 0) {
             if(PrepareCaptureBufs() < 0) {
-                CAMERA_HAL_ERR("PrepareCaptureBufs() error");
+                CAMERA_LOG_ERR("PrepareCaptureBufs() error");
                 return BAD_VALUE;
             }
         }
@@ -1803,7 +1793,7 @@ Pic_out:
     status_t CameraHal::PreparePostProssDevice()
     {
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         unsigned int targetFmt;
         if (mTakePicFlag)
@@ -1834,7 +1824,7 @@ Pic_out:
 
     status_t CameraHal::PreparePreviwBuf()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         unsigned int i =0;
 
@@ -1846,7 +1836,7 @@ Pic_out:
 
             mPreviewMemory = mRequestMemory(-1, mPreviewFrameSize, mPreviewHeapBufNum, NULL);
             if(mPreviewMemory == NULL) {
-                CAMERA_HAL_ERR("%s, allocate memory failed", __FUNCTION__);
+                CAMERA_LOG_ERR("%s, allocate memory failed", __FUNCTION__);
                 return NO_MEMORY;
             }
             //now the preview fmt is supposed to be YUV420SP, so, it is now hard code here
@@ -1867,7 +1857,7 @@ Pic_out:
 
     status_t CameraHal ::PreparePreviwMisc()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         dequeue_head = 0;
         preview_heap_buf_head = 0;
@@ -1895,7 +1885,7 @@ Pic_out:
 
     status_t CameraHal ::CameraHALPreviewStart()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         if (mCaptureDevice->DevStart()<0)
             return INVALID_OPERATION;
@@ -1934,7 +1924,7 @@ Pic_out:
             if(!mPPDeviceNeed && mCaptureRunning) {
                 if(buf_index < mCaptureBufNum) {
                     if(mCaptureDevice->DevQueue(buf_index) <0){
-                        CAMERA_HAL_ERR("The Capture device queue buf error !!!!");
+                        CAMERA_LOG_ERR("The Capture device queue buf error !!!!");
                         return INVALID_OPERATION;
                     }
                     mCaptureBuffers[buf_index].refCount = 0;
@@ -1961,16 +1951,16 @@ Pic_out:
 
     int CameraHal ::captureframeThreadWrapper() 
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         while(1) {
             if(mExitCaptureThread) {
-                CAMERA_HAL_LOG_INFO("%s: exiting normally", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: exiting normally", __FUNCTION__);
                 return 0;
             }
             ret = captureframeThread();
             if(ret < 0) {
-                CAMERA_HAL_ERR("%s: capture thread exit with exception", __FUNCTION__);
+                CAMERA_LOG_ERR("%s: capture thread exit with exception", __FUNCTION__);
                 return ret;
             }
         }
@@ -1979,13 +1969,13 @@ Pic_out:
 
     int CameraHal ::captureframeThread()
     {
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         
         unsigned int bufIndex = -1;
         status_t ret = NO_ERROR;
         sp<CMessage> msg = mCaptureThreadQueue.waitMessage();
         if(msg == 0) {
-            CAMERA_HAL_ERR("%s: get invalide message", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: get invalide message", __FUNCTION__);
             return BAD_VALUE;            
         }
                 
@@ -1995,7 +1985,7 @@ Pic_out:
                 ret = mCaptureDevice->DevDequeue(&bufIndex);
                 //handle the error return.
                 if(ret < 0) {
-                    CAMERA_HAL_ERR("%s: get invalide buffer", __FUNCTION__);
+                    CAMERA_LOG_ERR("%s: get invalide buffer", __FUNCTION__);
                     mCaptureRunning = false;
                     mCaptureThreadQueue.clearMessage();
                     sem_post(&mCaptureStoppedCondition);
@@ -2015,10 +2005,10 @@ Pic_out:
                 }
                 break;
             case CMESSAGE_TYPE_STOP:
-                CAMERA_HAL_LOG_INFO("%s: capture thread stop", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: capture thread stop", __FUNCTION__);
                 mCaptureThreadQueue.clearMessage();
                 sem_post(&mCaptureStoppedCondition);
-                CAMERA_HAL_LOG_INFO("%s: capture thread stop finish", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: capture thread stop finish", __FUNCTION__);
                 break;
             case CMESSAGE_TYPE_QUITE:
                 mExitCaptureThread = 1;
@@ -2030,7 +2020,7 @@ Pic_out:
                     mPostProcessThreadQueue.postQuitMessage();
                 break;
             default:
-                CAMERA_HAL_ERR("%s: wrong msg type %d", __FUNCTION__, msg->what);
+                CAMERA_LOG_ERR("%s: wrong msg type %d", __FUNCTION__, msg->what);
                 ret = INVALID_OPERATION;
                 break;
         }//end switch
@@ -2040,17 +2030,17 @@ Pic_out:
 
     int CameraHal::postprocessThreadWrapper()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
 
         while(1) {
             if(mExitPostProcessThread) {
-                CAMERA_HAL_LOG_INFO("%s, postprocessThread exit normally", __FUNCTION__);
+                CAMERA_LOG_INFO("%s, postprocessThread exit normally", __FUNCTION__);
                 return ret;
             }
             ret = postprocessThread();
             if(ret < 0) {
-                CAMERA_HAL_ERR("%s, postprocessThread exit with exception", __FUNCTION__);
+                CAMERA_LOG_ERR("%s, postprocessThread exit with exception", __FUNCTION__);
                 return ret;
             }
         }
@@ -2065,14 +2055,14 @@ Pic_out:
         
         sp<CMessage> msg = mPostProcessThreadQueue.waitMessage();
         if(msg == 0) {
-            CAMERA_HAL_ERR("%s: get invalide message", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: get invalide message", __FUNCTION__);
             return BAD_VALUE;
         }
         switch(msg->what) {
             case CMESSAGE_TYPE_NORMAL:
                 PPInIdx = msg->arg0;
                 if(PPInIdx < 0 || (unsigned int)PPInIdx >= mCaptureBufNum) {
-                    CAMERA_HAL_ERR("%s: get invalide buffer index", __FUNCTION__);
+                    CAMERA_LOG_ERR("%s: get invalide buffer index", __FUNCTION__);
                     return BAD_VALUE;  
                 }
                 PPInBuf = &mCaptureBuffers[PPInIdx];
@@ -2094,17 +2084,17 @@ Pic_out:
                 
                 if(mRecordRunning) {
                     getBufferCount(&mPPbuf[PPoutIdx]);
-                    //CAMERA_HAL_LOG_INFO("%s: post encode message %d", __FUNCTION__, PPoutIdx);
+                    //CAMERA_LOG_INFO("%s: post encode message %d", __FUNCTION__, PPoutIdx);
                     mEncodeThreadQueue.postMessage(new CMessage(CMESSAGE_TYPE_NORMAL, PPoutIdx));
                 }
 
                 ret = putBufferCount(PPInBuf);                       
                 break;
             case CMESSAGE_TYPE_STOP:
-                CAMERA_HAL_LOG_INFO("%s: postprocess thread stop", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: postprocess thread stop", __FUNCTION__);
                 mPostProcessThreadQueue.clearMessage();
                 sem_post(&mPostProcessStoppedCondition);
-                CAMERA_HAL_LOG_INFO("%s: postprocess thread stop finish", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: postprocess thread stop finish", __FUNCTION__);
                 break;
             case CMESSAGE_TYPE_QUITE:
                 mExitPostProcessThread = 1;
@@ -2113,7 +2103,7 @@ Pic_out:
                     mEncodeThreadQueue.postQuitMessage();
                 break;
             default:
-                CAMERA_HAL_ERR("%s: wrong msg type %d", __FUNCTION__, msg->what);
+                CAMERA_LOG_ERR("%s: wrong msg type %d", __FUNCTION__, msg->what);
                 ret = INVALID_OPERATION;
                 break;
         }
@@ -2136,16 +2126,16 @@ Pic_out:
     
     int CameraHal ::previewshowFrameThreadWrapper()
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         while(1) {
             if(mExitPreviewThread) {
-                CAMERA_HAL_LOG_INFO("%s: exiting", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: exiting", __FUNCTION__);
                 return 0;
             }
             ret = previewshowFrameThread();
             if(ret < 0) {
-                CAMERA_HAL_ERR("%s: preview thread exit with exception", __FUNCTION__);
+                CAMERA_LOG_ERR("%s: preview thread exit with exception", __FUNCTION__);
                 mExitPreviewThread = 1;
                 return ret;
             }            
@@ -2166,7 +2156,7 @@ Pic_out:
                 FILE *pf = NULL;
                 pf = fopen("/sdcard/camera_tst.data", "wb");
                 if(pf == NULL) {
-                    CAMERA_HAL_ERR("open /sdcard/camera_tst.data failed");
+                    CAMERA_LOG_ERR("open /sdcard/camera_tst.data failed");
                 }
                 else {
                     fwrite(pInBuf->virt_start, pInBuf->length, 1, pf);
@@ -2179,7 +2169,7 @@ Pic_out:
    
     int CameraHal ::previewshowFrameThread()
     {
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         int display_index = -1;
         DMA_BUFFER *pInBuf = NULL;
@@ -2190,7 +2180,7 @@ Pic_out:
 
         sp<CMessage> msg = mPreviewThreadQueue.waitMessage();
         if(msg == 0) {
-            CAMERA_HAL_ERR("%s: get invalide message", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: get invalide message", __FUNCTION__);
             mPreviewRunning = false;
             return BAD_VALUE;            
         }
@@ -2199,7 +2189,7 @@ Pic_out:
             case CMESSAGE_TYPE_NORMAL:
                 display_index = msg->arg0;
                 if(display_index < 0 || (unsigned int)display_index >= mCaptureBufNum) {
-                    CAMERA_HAL_ERR("%s: get invalide buffer index", __FUNCTION__);
+                    CAMERA_LOG_ERR("%s: get invalide buffer index", __FUNCTION__);
                     mPreviewRunning = false;
                     mPreviewThreadQueue.clearMessage();
                     sem_post(&mPreviewStoppedCondition);
@@ -2212,7 +2202,7 @@ Pic_out:
                 }
                 
                 if (mMsgEnabled & CAMERA_MSG_PREVIEW_FRAME) {
-                    //CAMERA_HAL_ERR("*******CAMERA_MSG_PREVIEW_FRAME*******");
+                    //CAMERA_LOG_ERR("*******CAMERA_MSG_PREVIEW_FRAME*******");
                     convertNV12toYUV420SP((uint8_t*)(pInBuf->virt_start),
                             (uint8_t*)((unsigned char*)mPreviewMemory->data + preview_heap_buf_head*mPreviewFrameSize),mCaptureDeviceCfg.width, mCaptureDeviceCfg.height);
                     mDataCb(CAMERA_MSG_PREVIEW_FRAME, mPreviewMemory, preview_heap_buf_head, NULL, mCallbackCookie);
@@ -2222,7 +2212,7 @@ Pic_out:
 
                 if (mNativeWindow != 0) {
                     if (mNativeWindow->enqueue_buffer(mNativeWindow, &((android_native_buffer_t * )pInBuf->native_buf)->handle) < 0){
-                        CAMERA_HAL_ERR("queueBuffer failed. May be bcos stream was not turned on yet.");
+                        CAMERA_LOG_ERR("queueBuffer failed. May be bcos stream was not turned on yet.");
                         mPreviewRunning = false;
                         mPreviewThreadQueue.clearMessage();
                         sem_post(&mPreviewStoppedCondition);
@@ -2244,7 +2234,7 @@ Pic_out:
 
                 err = mNativeWindow->dequeue_buffer(mNativeWindow, &buf_h, &stride);
                 if((err != 0) || buf_h == NULL) {
-                    CAMERA_HAL_ERR("%s: dequeueBuffer failed.", __FUNCTION__);
+                    CAMERA_LOG_ERR("%s: dequeueBuffer failed.", __FUNCTION__);
                     mPreviewRunning = false;
                     mPreviewThreadQueue.clearMessage();
                     sem_post(&mPreviewStoppedCondition);
@@ -2256,7 +2246,7 @@ Pic_out:
 
                 if(buf_index >= mCaptureBufNum || (buf_index < 0)) {
                     mNativeWindow->cancel_buffer(mNativeWindow, &buf->handle);
-                    CAMERA_HAL_ERR("dequeue invalide buffer!!!!");
+                    CAMERA_LOG_ERR("dequeue invalide buffer!!!!");
                     mPreviewRunning = false;
                     mPreviewThreadQueue.clearMessage();
                     sem_post(&mPreviewStoppedCondition);
@@ -2267,16 +2257,16 @@ Pic_out:
                 ret = putBufferCount(&mCaptureBuffers[buf_index]);
                 break;
             case CMESSAGE_TYPE_STOP:
-                CAMERA_HAL_LOG_INFO("%s: preview thread stop", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: preview thread stop", __FUNCTION__);
                 mPreviewThreadQueue.clearMessage();
                 sem_post(&mPreviewStoppedCondition);
-                CAMERA_HAL_LOG_INFO("%s: preview thread stop finish", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: preview thread stop finish", __FUNCTION__);
                 break;
             case CMESSAGE_TYPE_QUITE:
                 mExitPreviewThread = 1;
                 break;
             default:
-                CAMERA_HAL_ERR("%s: wrong msg type %d", __FUNCTION__, msg->what);
+                CAMERA_LOG_ERR("%s: wrong msg type %d", __FUNCTION__, msg->what);
                 ret = INVALID_OPERATION;
                 break;   
         }
@@ -2286,7 +2276,7 @@ Pic_out:
     
     int CameraHal::encodeframeThreadWrapper()
     {
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         while(1) {
             if(mExitEncodeThread) {
@@ -2294,7 +2284,7 @@ Pic_out:
             }
             ret = encodeframeThread();
             if(ret < 0) {
-                CAMERA_HAL_ERR("%s: encode thread exit with exception", __FUNCTION__);
+                CAMERA_LOG_ERR("%s: encode thread exit with exception", __FUNCTION__);
                 mExitEncodeThread = 1;
                 return ret;
             }
@@ -2304,12 +2294,12 @@ Pic_out:
     
     int CameraHal::encodeframeThread()
     {
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         status_t ret = NO_ERROR;
         int enc_index;
         sp<CMessage> msg = mEncodeThreadQueue.waitMessage();
         if(msg == 0) {
-            CAMERA_HAL_ERR("%s: get invalide message", __FUNCTION__);
+            CAMERA_LOG_ERR("%s: get invalide message", __FUNCTION__);
             return BAD_VALUE;            
         }
             
@@ -2318,7 +2308,7 @@ Pic_out:
                 enc_index = msg->arg0;
                 unsigned int i;
                 if(enc_index < 0 || (unsigned int)enc_index >= mCaptureBufNum) {
-                    CAMERA_HAL_ERR("%s: get invalide buffer index", __FUNCTION__);
+                    CAMERA_LOG_ERR("%s: get invalide buffer index", __FUNCTION__);
                     mRecordRunning = false;
                     mEncodeThreadQueue.clearMessage();
                     sem_post(&mEncodeStoppedCondition);
@@ -2352,7 +2342,7 @@ Pic_out:
                 break;
 
             case CMESSAGE_TYPE_STOP:
-                CAMERA_HAL_LOG_INFO("%s: encode thread stop", __FUNCTION__);
+                CAMERA_LOG_INFO("%s: encode thread stop", __FUNCTION__);
                 mEncodeThreadQueue.clearMessage();
                 sem_post(&mEncodeStoppedCondition);
                 break;
@@ -2361,7 +2351,7 @@ Pic_out:
                 break;                
 
             default:
-                CAMERA_HAL_ERR("%s: wrong msg type %d", __FUNCTION__, msg->what);
+                CAMERA_LOG_ERR("%s: wrong msg type %d", __FUNCTION__, msg->what);
                 ret = INVALID_OPERATION;
                 break;                   
         }
@@ -2382,16 +2372,16 @@ Pic_out:
         //    mVideoBufferUsing[i] = 0;
         //}
 
-        CAMERA_HAL_LOG_RUNTIME("Init the video Memory size %d", mPreviewFrameSize);
+        CAMERA_LOG_RUNTIME("Init the video Memory size %d", mPreviewFrameSize);
         //mVideoHeap = new MemoryHeapBase(mPreviewFrameSize * mVideoBufNume);
         mVideoMemory = mRequestMemory(-1, mPreviewFrameSize, mVideoBufNume, NULL);
         //if (mVideoHeap == NULL)
         if(mVideoMemory == NULL) {
-            CAMERA_HAL_ERR("%s, request video buffer failed", __FUNCTION__);
+            CAMERA_LOG_ERR("%s, request video buffer failed", __FUNCTION__);
             return NO_MEMORY;
         }
         //for(i = 0; i < mVideoBufNume; i++) {
-        //    CAMERA_HAL_LOG_RUNTIME("Init Video Buffer:%d ",i);
+        //    CAMERA_LOG_RUNTIME("Init Video Buffer:%d ",i);
         //    mVideoBuffers[i] = new MemoryBase(mVideoHeap,
         //            mPreviewFrameSize * i, mPreviewFrameSize);
         //}
@@ -2458,11 +2448,11 @@ Pic_out:
             return -1;
         }
 
-        CAMERA_HAL_LOG_RUNTIME("the attribute is %s", cAttribute);
+        CAMERA_LOG_RUNTIME("the attribute is %s", cAttribute);
 
         dAttribtute = atof(cAttribute);
 
-        CAMERA_HAL_LOG_RUNTIME("the double of the attribute is %lf", dAttribtute);
+        CAMERA_LOG_RUNTIME("the double of the attribute is %lf", dAttribtute);
         intAttribute  = (long)(dAttribtute*(double)3600.0);
         if (intAttribute < 0){
             ret = 1;
@@ -2480,128 +2470,12 @@ Pic_out:
         degree = (unsigned int)(intAttribute/3600);
         second = (unsigned int)eAttr + second * 1000;
 
-        CAMERA_HAL_LOG_RUNTIME("the degree is %u, %u, %u", degree,minute,second);
+        CAMERA_LOG_RUNTIME("the degree is %u, %u, %u", degree,minute,second);
 
         return ret;
 
     }
 
-#if 0
-#define FACE_BACK_CAMERA_NAME "back_camera_name"
-#define FACE_FRONT_CAMERA_NAME "front_camera_name"
-#define FACE_BACK_CAMERA_ORIENT "back_camera_orient"
-#define FACE_FRONT_CAMERA_ORIENT "front_camera_orient"
-#define DEFAULT_ERROR_NAME '#'
-#define DEFAULT_ERROR_NAME_str "#"
-#define UVC_NAME "uvc"
-    static CameraInfo sCameraInfo[2];
-    static char Camera_name[2][MAX_SENSOR_NAME];
-
-    static void GetCameraPropery(char * pFaceBackCameraName, char *pFaceFrontCameraName, int *pFaceBackOrient, int *pFaceFrontOrient)
-    {
-        char orientStr[10];
-
-        property_get (FACE_BACK_CAMERA_NAME,
-                pFaceBackCameraName,
-                DEFAULT_ERROR_NAME_str );
-        property_get (FACE_BACK_CAMERA_ORIENT,
-                orientStr,
-                DEFAULT_ERROR_NAME_str );
-
-        if (orientStr[0] == DEFAULT_ERROR_NAME )
-            *pFaceBackOrient = 0;
-        else 
-            *pFaceBackOrient = atoi(orientStr);
-
-        LOGI("Face Back Camera is %s, orient is %d", pFaceBackCameraName, *pFaceBackOrient);
-
-        property_get (FACE_FRONT_CAMERA_NAME,
-                pFaceFrontCameraName,
-                DEFAULT_ERROR_NAME_str );
-
-        property_get (FACE_FRONT_CAMERA_ORIENT,
-                orientStr,
-                DEFAULT_ERROR_NAME_str );
-
-
-        if (orientStr[0] == DEFAULT_ERROR_NAME )
-            *pFaceFrontOrient = 0;
-        else 
-            *pFaceFrontOrient = atoi(orientStr);
-
-        LOGI("Face Front Camera is %s, orient is %d", pFaceFrontCameraName, *pFaceFrontOrient);
-
-    }
-
-    int HAL_getNumberOfCameras()
-    {
-        int back_orient =0,  front_orient = 0;
-        int back_camera_num = 0, front_camera_num = 0;
-        GetCameraPropery(Camera_name[0], Camera_name[1], &back_orient, &front_orient);
-        if (Camera_name[0][0] != DEFAULT_ERROR_NAME){
-            sCameraInfo[0].facing = CAMERA_FACING_BACK;
-            sCameraInfo[0].orientation = back_orient;
-            back_camera_num++;
-        }
-        if (Camera_name[1][0] != DEFAULT_ERROR_NAME){
-            if(back_camera_num > 0){
-                sCameraInfo[1].facing = CAMERA_FACING_FRONT;
-                sCameraInfo[1].orientation = front_orient;
-            }else{
-                sCameraInfo[0].facing = CAMERA_FACING_FRONT;
-                sCameraInfo[0].orientation = front_orient;
-            }
-            front_camera_num ++;
-        }
-        return (back_camera_num + front_camera_num);					
-
-    }
-
-    void HAL_getCameraInfo(int cameraId, struct CameraInfo* cameraInfo)
-    {
-        memcpy(cameraInfo, &sCameraInfo[cameraId], sizeof(CameraInfo));					
-    }
-
-    sp<CameraHardwareInterface> HAL_openCameraHardware(int cameraId)
-    {
-        char *SelectedCameraName;
-        int back_camera_num = 0, front_camera_num = 0;
-        sp<CaptureDeviceInterface> pCaptureDevice = NULL;
-        sp<PostProcessDeviceInterface> pPPDevice = NULL;
-        sp<JpegEncoderInterface>pJpegEncoder = NULL;
-
-        if (HAL_getNumberOfCameras() ==0 ){
-            CAMERA_HAL_ERR("There is no configure for Cameras");
-            return NULL;
-        }
-
-        SelectedCameraName = Camera_name[sCameraInfo[cameraId].facing];
-
-        pCaptureDevice = createCaptureDevice(SelectedCameraName);
-        pPPDevice = createPPDevice();
-        pJpegEncoder = createJpegEncoder(SOFTWARE_JPEG_ENC);
-
-        CameraHal *pCameraHal = new CameraHal();
-        if (pCameraHal->setCaptureDevice(pCaptureDevice) < 0 ||
-                pCameraHal->setPostProcessDevice(pPPDevice) < 0 ||
-                pCameraHal->setJpegEncoder(pJpegEncoder) < 0)
-            return NULL;
-
-        if (pCameraHal->Init() < 0)
-            return NULL;
-
-        //now the board has only one csi camera sensor, so just do mirror for it
-        if(strstr(SelectedCameraName, "ov") != NULL){
-            pCameraHal->setPreviewRotate(CAMERA_PREVIEW_BACK_REF);
-        }
-
-        sp<CameraHardwareInterface> hardware(pCameraHal);
-        CAMERA_HAL_LOG_INFO("created the fsl Camera hal");
-
-        return hardware;
-    }
-
-#endif
 };
 
 
diff --git a/mx6/libcamera/CameraHal.h b/mx6/libcamera/CameraHal.h
index 5b64de6..512b6dc 100755
--- a/mx6/libcamera/CameraHal.h
+++ b/mx6/libcamera/CameraHal.h
@@ -15,6 +15,10 @@
  * limitations under the License.
  */
 
+/*
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
+ */
+
 #ifndef CAMERA_HAL_BASE_H
 #define CAMERA_HAL_BASE_H
 
@@ -70,7 +74,7 @@ namespace android {
         CAMERA_HAL_ERR_INIT = -5,
         CAMERA_HAL_ERR_ALLOC_BUF =-6,
         CAMERA_HAL_ERR_PP_NULL = -7
-    }CAMERA_HAL_ERR_RET;
+    }CAMERA_HAL_RET;
 
 	typedef enum{
         CAMERA_PREVIEW_BACK_REF = 0,
@@ -128,10 +132,10 @@ namespace android {
                 int32_t arg2);
         virtual void release();
 
-        CAMERA_HAL_ERR_RET setCaptureDevice(sp<CaptureDeviceInterface> capturedevice);
-        CAMERA_HAL_ERR_RET setPostProcessDevice(sp<PostProcessDeviceInterface> postprocessdevice);
-        CAMERA_HAL_ERR_RET setJpegEncoder(sp<JpegEncoderInterface>jpegencoder);
-        CAMERA_HAL_ERR_RET  Init();
+        CAMERA_HAL_RET setCaptureDevice(sp<CaptureDeviceInterface> capturedevice);
+        CAMERA_HAL_RET setPostProcessDevice(sp<PostProcessDeviceInterface> postprocessdevice);
+        CAMERA_HAL_RET setJpegEncoder(sp<JpegEncoderInterface>jpegencoder);
+        CAMERA_HAL_RET  Init();
         void  setPreviewRotate(CAMERA_PREVIEW_ROTATE previewRotate);
 
         CameraHal(int cameraid);
@@ -247,13 +251,13 @@ namespace android {
         status_t OpenCaptureDevice();
         void CloseCaptureDevice();
 
-        CAMERA_HAL_ERR_RET AolLocForInterBuf();
+        CAMERA_HAL_RET AolLocForInterBuf();
         void  FreeInterBuf();
-        CAMERA_HAL_ERR_RET InitCameraHalParam();
-        CAMERA_HAL_ERR_RET InitCameraBaseParam(CameraParameters *pParam);
-        CAMERA_HAL_ERR_RET InitPictureExifParam(CameraParameters *pParam);
-        CAMERA_HAL_ERR_RET CameraMiscInit();
-        CAMERA_HAL_ERR_RET CameraMiscDeInit();
+        CAMERA_HAL_RET InitCameraHalParam();
+        CAMERA_HAL_RET InitCameraBaseParam(CameraParameters *pParam);
+        CAMERA_HAL_RET InitPictureExifParam(CameraParameters *pParam);
+        CAMERA_HAL_RET CameraMiscInit();
+        CAMERA_HAL_RET CameraMiscDeInit();
         status_t CameraHALPreviewStart();
         int captureframeThread();
         int postprocessThread();
@@ -302,7 +306,7 @@ namespace android {
         status_t convertPreviewFormatToString(char *pStr, int length, unsigned int format);
         status_t putBufferCount(DMA_BUFFER *pBuf);
         void getBufferCount(DMA_BUFFER *pBuf);
-        CAMERA_HAL_ERR_RET InitCameraPreviewFormatToParam(int nFmt);
+        CAMERA_HAL_RET InitCameraPreviewFormatToParam(int nFmt);
 
         CMessageQueue mCaptureThreadQueue;
         CMessageQueue mPreviewThreadQueue;
diff --git a/mx6/libcamera/CameraModule.cpp b/mx6/libcamera/CameraModule.cpp
index 6bcc6e1..af46453 100755
--- a/mx6/libcamera/CameraModule.cpp
+++ b/mx6/libcamera/CameraModule.cpp
@@ -62,7 +62,6 @@ camera_module_t HAL_MODULE_INFO_SYM = {
 
 typedef struct fsl_camera_device {
     camera_device_t base;
-    /* TI specific "private" data can go here (base.priv) */
     int cameraid;
 } fsl_camera_device_t;
 
diff --git a/mx6/libcamera/Camera_utils.h b/mx6/libcamera/Camera_utils.h
index 2182c05..a21eb29 100755
--- a/mx6/libcamera/Camera_utils.h
+++ b/mx6/libcamera/Camera_utils.h
@@ -16,7 +16,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 #ifndef CAMERA_UTILS_H
@@ -27,20 +27,21 @@
 #include <utils/Log.h>
 #include <utils/threads.h>
 
-#define CAMERA_HAL_DEBUG_LOG
 
 #ifdef CAMERA_HAL_DEBUG_LOG
-#define CAMERA_HAL_LOG_RUNTIME(format, ...) LOGI((format), ## __VA_ARGS__)
-#define CAMERA_HAL_LOG_FUNC LOGI("%s is excuting...",  __FUNCTION__)
+#define CAMERA_LOG_RUNTIME(format, ...) LOGI((format), ## __VA_ARGS__)
+#define CAMERA_LOG_FUNC LOGI("%s is excuting...",  __FUNCTION__)
+#define CAMERA_LOG_TRACE   LOGI("%s : %d", __FUNCTION__,__LINE__)
 #else
-#define CAMERA_HAL_LOG_RUNTIME(format, ...) 
-#define CAMERA_HAL_LOG_FUNC
+#define CAMERA_LOG_RUNTIME(format, ...) 
+#define CAMERA_LOG_FUNC
+#define CAMERA_LOG_TRACE
 #endif
 
-#define CAMERA_HAL_LOG_TRACE   LOGI("%s : %d", __FUNCTION__,__LINE__)
-#define CAMERA_HAL_LOG_INFO(format, ...) LOGI((format), ## __VA_ARGS__)
+#define CAMERA_LOG_INFO(format, ...) LOGI((format), ## __VA_ARGS__)
+#define CAMERA_LOG_WARN(format, ...) LOGW((format), ## __VA_ARGS__)
+#define CAMERA_LOG_ERR(format, ...) LOGE((format), ##__VA_ARGS__)
 
-#define CAMERA_HAL_ERR(format, ...) LOGE((format), ##__VA_ARGS__)
 namespace android {
 
     typedef enum{
diff --git a/mx6/libcamera/CaptureDeviceInterface.cpp b/mx6/libcamera/CaptureDeviceInterface.cpp
index f004e43..8fa89e1 100755
--- a/mx6/libcamera/CaptureDeviceInterface.cpp
+++ b/mx6/libcamera/CaptureDeviceInterface.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #include "V4l2UVCDevice.h"
 #include "V4l2CsiDevice.h"
@@ -23,13 +23,10 @@ namespace android{
     extern "C" sp<CaptureDeviceInterface> createCaptureDevice(char *deviceName)
     {
         if(strstr(deviceName, UVC_NAME_STRING)){
-            CAMERA_HAL_LOG_INFO("It is the UVC device, name:%s", deviceName);
-
             sp<CaptureDeviceInterface>  device(new V4l2UVCDevice());
             device->SetDevName(deviceName);
             return device;
         }else{
-            CAMERA_HAL_LOG_INFO("It is the CSI device");
             sp<CaptureDeviceInterface>  device(new V4l2CsiDevice());
             device->SetDevName(deviceName);
             return device;
diff --git a/mx6/libcamera/CaptureDeviceInterface.h b/mx6/libcamera/CaptureDeviceInterface.h
index 293476a..9fa52a1 100755
--- a/mx6/libcamera/CaptureDeviceInterface.h
+++ b/mx6/libcamera/CaptureDeviceInterface.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 #ifndef CAPTURE_DEVICE_INTERFACE_H
@@ -40,7 +40,7 @@ namespace android {
         CAPTURE_DEVICE_ERR_BAD_PARAM  = -5,
         CAPTURE_DEVICE_ERR_SYS_CALL=-6,
         CAPTURE_DEVICE_ERR_UNKNOWN = -100
-    }CAPTURE_DEVICE_ERR_RET;
+    }CAPTURE_DEVICE_RET;
 
     typedef enum{
         MOTION_MODE = 0,
@@ -85,21 +85,21 @@ namespace android {
     class CaptureDeviceInterface : public virtual RefBase{
     public:
 
-        virtual CAPTURE_DEVICE_ERR_RET SetDevName(char * deviceName)=0;
-        virtual CAPTURE_DEVICE_ERR_RET GetDevName(char * deviceName)=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevOpen(int cameraId)=0;
-        virtual CAPTURE_DEVICE_ERR_RET EnumDevParam(DevParamType devParamType, void *retParam)=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevSetConfig(struct capture_config_t *pCapcfg)=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevAllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum)=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevRegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum)=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevPrepare()=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevStart()=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevDequeue(unsigned int *pBufQueIdx)=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevQueue(unsigned int BufQueIdx)=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevStop()=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevDeAllocate()=0;
-        virtual CAPTURE_DEVICE_ERR_RET DevClose()=0;
-        virtual CAPTURE_DEVICE_ERR_RET GetDevType(CAMERA_TYPE *pType)=0;
+        virtual CAPTURE_DEVICE_RET SetDevName(char * deviceName)=0;
+        virtual CAPTURE_DEVICE_RET GetDevName(char * deviceName)=0;
+        virtual CAPTURE_DEVICE_RET DevOpen(int cameraId)=0;
+        virtual CAPTURE_DEVICE_RET EnumDevParam(DevParamType devParamType, void *retParam)=0;
+        virtual CAPTURE_DEVICE_RET DevSetConfig(struct capture_config_t *pCapcfg)=0;
+        virtual CAPTURE_DEVICE_RET DevAllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum)=0;
+        virtual CAPTURE_DEVICE_RET DevRegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum)=0;
+        virtual CAPTURE_DEVICE_RET DevPrepare()=0;
+        virtual CAPTURE_DEVICE_RET DevStart()=0;
+        virtual CAPTURE_DEVICE_RET DevDequeue(unsigned int *pBufQueIdx)=0;
+        virtual CAPTURE_DEVICE_RET DevQueue(unsigned int BufQueIdx)=0;
+        virtual CAPTURE_DEVICE_RET DevStop()=0;
+        virtual CAPTURE_DEVICE_RET DevDeAllocate()=0;
+        virtual CAPTURE_DEVICE_RET DevClose()=0;
+        virtual CAPTURE_DEVICE_RET GetDevType(CAMERA_TYPE *pType)=0;
 
         virtual ~ CaptureDeviceInterface(){}
     };
diff --git a/mx6/libcamera/JpegEncoderInterface.cpp b/mx6/libcamera/JpegEncoderInterface.cpp
index 30b9d96..65ac721 100755
--- a/mx6/libcamera/JpegEncoderInterface.cpp
+++ b/mx6/libcamera/JpegEncoderInterface.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. 
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #include "JpegEncoderSoftware.h"
 namespace android{
@@ -23,11 +23,11 @@ namespace android{
     extern "C" sp<JpegEncoderInterface> createJpegEncoder(JPEG_ENCODER_TYPE jpeg_enc_type)
     {
         if (jpeg_enc_type == SOFTWARE_JPEG_ENC){
-            CAMERA_HAL_LOG_INFO("Create the software encoder");
+            CAMERA_LOG_INFO("Create the software encoder");
             return JpegEncoderSoftware::createInstance();
         }
         else{
-            CAMERA_HAL_ERR("the hardware encoder is not supported");
+            CAMERA_LOG_ERR("the hardware encoder is not supported");
             return NULL;
         }
     }
diff --git a/mx6/libcamera/JpegEncoderInterface.h b/mx6/libcamera/JpegEncoderInterface.h
index b515757..3f1a857 100755
--- a/mx6/libcamera/JpegEncoderInterface.h
+++ b/mx6/libcamera/JpegEncoderInterface.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 #ifndef JPEG_ENCODER_INTERFACE_H
diff --git a/mx6/libcamera/JpegEncoderSoftware.cpp b/mx6/libcamera/JpegEncoderSoftware.cpp
index 14adb6a..77bae57 100755
--- a/mx6/libcamera/JpegEncoderSoftware.cpp
+++ b/mx6/libcamera/JpegEncoderSoftware.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #include <string.h>
 #include <unistd.h>
@@ -77,7 +77,7 @@ namespace android{
 
     JPEG_ENC_ERR_RET JpegEncoderSoftware :: JpegEncoderInit(enc_cfg_param *pEncCfg)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         JPEG_ENC_ERR_RET ret = JPEG_ENC_ERROR_NONE;
         struct jpeg_enc_focallength_t * pFoclLength = NULL;
@@ -94,7 +94,7 @@ namespace android{
         pEncCfgLocal = (enc_cfg_param *)malloc(sizeof(enc_cfg_param));
 
         if (pEncCfgLocal == NULL){
-            CAMERA_HAL_ERR("Allocat buffer for EncCfg failed");
+            CAMERA_LOG_ERR("Allocat buffer for EncCfg failed");
             return JPEG_ENC_ERROR_ALOC_BUF;
         }
 
@@ -110,7 +110,7 @@ namespace android{
             pFoclLength = (struct jpeg_enc_focallength_t *)malloc(sizeof(struct jpeg_enc_focallength_t));
 
             if (pFoclLength == NULL){
-                CAMERA_HAL_ERR("Allocat buffer for pFoclLength failed");
+                CAMERA_LOG_ERR("Allocat buffer for pFoclLength failed");
                 ret = JPEG_ENC_ERROR_ALOC_BUF;
                 goto INT_ERR_RET;
             }
@@ -124,7 +124,7 @@ namespace android{
             pMakeInfo = (struct jpeg_enc_make_info_t *)malloc(sizeof(struct jpeg_enc_make_info_t));
 
             if (pMakeInfo == NULL){
-                CAMERA_HAL_ERR("Allocat buffer for pMakeInfo failed");
+                CAMERA_LOG_ERR("Allocat buffer for pMakeInfo failed");
                 ret = JPEG_ENC_ERROR_ALOC_BUF;
                 goto INT_ERR_RET;
             }
@@ -137,7 +137,7 @@ namespace android{
             pMakeNote = (struct jpeg_enc_makernote_info_t *)malloc(sizeof(struct jpeg_enc_makernote_info_t));
 
             if (pMakeNote == NULL){
-                CAMERA_HAL_ERR("Allocat buffer for pMakeNote failed");
+                CAMERA_LOG_ERR("Allocat buffer for pMakeNote failed");
                 ret = JPEG_ENC_ERROR_ALOC_BUF;
                 goto INT_ERR_RET;
             }
@@ -150,7 +150,7 @@ namespace android{
             pModelInfo = (struct jpeg_enc_model_info_t *)malloc(sizeof(struct jpeg_enc_model_info_t));
 
             if (pModelInfo == NULL){
-                CAMERA_HAL_ERR("Allocat buffer for pModelInfo failed");
+                CAMERA_LOG_ERR("Allocat buffer for pModelInfo failed");
                 ret = JPEG_ENC_ERROR_ALOC_BUF;
                 goto INT_ERR_RET;
             }
@@ -163,7 +163,7 @@ namespace android{
             pDatetimeInfo = (struct jpeg_enc_datetime_info_t *)malloc(sizeof(struct jpeg_enc_datetime_info_t));
 
             if (pDatetimeInfo == NULL){
-                CAMERA_HAL_ERR("Allocat buffer for pDatetimeInfo failed");
+                CAMERA_LOG_ERR("Allocat buffer for pDatetimeInfo failed");
                 ret = JPEG_ENC_ERROR_ALOC_BUF;
                 goto INT_ERR_RET;
             }
@@ -176,7 +176,7 @@ namespace android{
             pGpsInfoLocal = (struct jpeg_enc_gps_param *)malloc(sizeof(struct jpeg_enc_gps_param));
 
             if (pGpsInfoLocal == NULL){
-                CAMERA_HAL_ERR("Allocat buffer for pGpsInfoLocal failed");
+                CAMERA_LOG_ERR("Allocat buffer for pGpsInfoLocal failed");
                 ret = JPEG_ENC_ERROR_ALOC_BUF;
                 goto INT_ERR_RET;
             }
@@ -215,7 +215,7 @@ INT_ERR_RET:
     }
 
     JPEG_ENC_ERR_RET JpegEncoderSoftware :: JpegEncoderDeInit(){
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         JPEG_ENC_ERR_RET ret = JPEG_ENC_ERROR_NONE;
 
         if (pEncCfgLocal != NULL ){
@@ -240,20 +240,20 @@ INT_ERR_RET:
 
     JPEG_ENC_ERR_RET JpegEncoderSoftware :: CheckEncParm(){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         int i = 0;
 
         JPEG_ENC_ERR_RET ret = JPEG_ENC_ERROR_NONE;
 
         if ((pEncCfgLocal->PicWidth <= 0) && (pEncCfgLocal->PicHeight<= 0)){
-            CAMERA_HAL_ERR("The input widht and height is wrong");
+            CAMERA_LOG_ERR("The input widht and height is wrong");
             return JPEG_ENC_ERROR_BAD_PARAM;
         }
 
         if((pEncCfgLocal->PicWidth <= 0) || (pEncCfgLocal->PicHeight <= 0)|| 
                 (pEncCfgLocal->ThumbWidth > pEncCfgLocal->PicWidth) ||
                 (pEncCfgLocal->ThumbHeight > pEncCfgLocal->PicHeight) ){
-            CAMERA_HAL_ERR("The input widht and height is wrong");
+            CAMERA_LOG_ERR("The input widht and height is wrong");
             return JPEG_ENC_ERROR_BAD_PARAM;
         }
 
@@ -270,7 +270,7 @@ INT_ERR_RET:
 
     JPEG_ENC_ERR_RET JpegEncoderSoftware :: encodeImge(DMA_BUFFER *inBuf, DMA_BUFFER *outBuf, unsigned int *pEncSize){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         JPEG_ENC_ERR_RET ret = JPEG_ENC_ERROR_NONE;
         int width, height, size,index;
@@ -424,7 +424,7 @@ encodeframe:
             v_buff = NULL;
             i_buff = (JPEG_ENC_UINT8 *)buffer;
         }
-        CAMERA_HAL_LOG_RUNTIME("version: %s\n", jpege_CodecVersionInfo());
+        CAMERA_LOG_RUNTIME("version: %s\n", jpege_CodecVersionInfo());
 
         /* --------------------------------------------
          * QUERY MEMORY REQUIREMENTS
@@ -433,11 +433,11 @@ encodeframe:
 
         if(return_val != JPEG_ENC_ERR_NO_ERROR)
         {
-            CAMERA_HAL_LOG_RUNTIME("JPEG encoder returned an error when jpeg_enc_query_mem_req was called \n");
-            CAMERA_HAL_LOG_RUNTIME("Return Val %d\n",return_val);
+            CAMERA_LOG_RUNTIME("JPEG encoder returned an error when jpeg_enc_query_mem_req was called \n");
+            CAMERA_LOG_RUNTIME("Return Val %d\n",return_val);
             goto done;
         }
-        CAMERA_HAL_LOG_RUNTIME("jpeg_enc_query_mem_req success");
+        CAMERA_LOG_RUNTIME("jpeg_enc_query_mem_req success");
         /* --------------------------------------------
          * ALLOCATE MEMORY REQUESTED BY CODEC
          * -------------------------------------------*/
@@ -450,7 +450,7 @@ encodeframe:
             mem_info = &(obj_ptr->mem_infos.mem_info[index]);
             mem_info->memptr = (void *) malloc(mem_info->size);
             if(mem_info->memptr==NULL) {
-                CAMERA_HAL_LOG_RUNTIME("Malloc error after query\n");
+                CAMERA_LOG_RUNTIME("Malloc error after query\n");
                 goto done;
             }
         }
@@ -458,12 +458,12 @@ encodeframe:
         return_val = jpeg_enc_init(obj_ptr);
         if(return_val != JPEG_ENC_ERR_NO_ERROR)
         {
-            CAMERA_HAL_LOG_RUNTIME("JPEG encoder returned an error when jpeg_enc_init was called \n");
-            CAMERA_HAL_LOG_RUNTIME("Return Val %d\n",return_val);
+            CAMERA_LOG_RUNTIME("JPEG encoder returned an error when jpeg_enc_init was called \n");
+            CAMERA_LOG_RUNTIME("Return Val %d\n",return_val);
             goto done;
         }
 
-        CAMERA_HAL_LOG_RUNTIME("jpeg_enc_init success");
+        CAMERA_LOG_RUNTIME("jpeg_enc_init success");
         if(params->mode == JPEG_ENC_THUMB)
             createJpegExifTags(obj_ptr);
 
@@ -472,8 +472,8 @@ encodeframe:
 
         if(return_val != JPEG_ENC_ERR_ENCODINGCOMPLETE)
         {
-            CAMERA_HAL_LOG_RUNTIME("JPEG encoder returned an error in jpeg_enc_encodeframe \n");
-            CAMERA_HAL_LOG_RUNTIME("Return Val %d\n",return_val);
+            CAMERA_LOG_RUNTIME("JPEG encoder returned an error in jpeg_enc_encodeframe \n");
+            CAMERA_LOG_RUNTIME("Return Val %d\n",return_val);
             goto done;
         }
 
@@ -516,7 +516,7 @@ encodeframe:
 
             goto encodeframe;
         }
-        CAMERA_HAL_LOG_RUNTIME("jpeg_enc_encodeframe success");
+        CAMERA_LOG_RUNTIME("jpeg_enc_encodeframe success");
         // Make an IMemory for each frame
         //jpegPtr = new MemoryBase(mJpegImageHeap, 0, g_JpegDataLen);
         *pEncSize = g_JpegDataLen;
@@ -556,14 +556,14 @@ done:
         {
             /* Flush the buffer*/
             g_JpegDataLen += *out_buf_len_ptr;
-            CAMERA_HAL_LOG_RUNTIME("jpeg output data len %d",(int)g_JpegDataLen);
+            CAMERA_LOG_RUNTIME("jpeg output data len %d",(int)g_JpegDataLen);
 
             *out_buf_ptrptr = NULL;
             *out_buf_len_ptr = NULL;
         }
         else
         {
-            CAMERA_HAL_LOG_RUNTIME("Not enough buffer for encoding");
+            CAMERA_LOG_RUNTIME("Not enough buffer for encoding");
             return 0;
         }
 
@@ -572,7 +572,7 @@ done:
 
     void JpegEncoderSoftware::createJpegExifTags(jpeg_enc_object * obj_ptr)
     {
-        CAMERA_HAL_LOG_RUNTIME("version: %s\n", jpege_CodecVersionInfo());
+        CAMERA_LOG_RUNTIME("version: %s\n", jpege_CodecVersionInfo());
 
         jpeg_enc_set_exifheaderinfo(obj_ptr, JPEGE_ENC_SET_HEADER_ORIENTATION, (unsigned int)(&(pEncCfgLocal->RotationInfo)));
         jpeg_enc_set_exifheaderinfo(obj_ptr, JPEGE_ENC_SET_HEADER_WHITEBALANCE, (unsigned int)(&(pEncCfgLocal->WhiteBalanceInfo)));
diff --git a/mx6/libcamera/JpegEncoderSoftware.h b/mx6/libcamera/JpegEncoderSoftware.h
index 2bcd2d1..ded35a3 100755
--- a/mx6/libcamera/JpegEncoderSoftware.h
+++ b/mx6/libcamera/JpegEncoderSoftware.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 #ifndef JPEG_ENCODER_SOFTWARE_H
diff --git a/mx6/libcamera/PP_ipulib.cpp b/mx6/libcamera/PP_ipulib.cpp
index 69d91ee..49d9af5 100755
--- a/mx6/libcamera/PP_ipulib.cpp
+++ b/mx6/libcamera/PP_ipulib.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #include "PP_ipulib.h"
 #include <stdlib.h>
@@ -34,7 +34,7 @@ namespace android{
         singleton.clear();
     }
     PPDEVICE_ERR_RET PPIpuLib :: PPDeviceInit(pp_input_param_t *pp_input, pp_output_param_t *pp_output){
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         PPDEVICE_ERR_RET ret = PPDEVICE_ERROR_NONE;
 
         int mIPURet;
@@ -63,7 +63,7 @@ namespace android{
         mIPUOutputParam.output_win.win_h = pp_output->output_win.win_h;
         mIPUOutputParam.rot = pp_output->rot;
         mIPUOutputParam.user_def_paddr[0] = pp_output->user_def_paddr;
-        CAMERA_HAL_LOG_RUNTIME(" Output param: width %d,height %d, pos.x %d, pos.y %d,win_w %d,win_h %d,rot %d",
+        CAMERA_LOG_RUNTIME(" Output param: width %d,height %d, pos.x %d, pos.y %d,win_w %d,win_h %d,rot %d",
                 mIPUOutputParam.width,
                 mIPUOutputParam.height,
                 mIPUOutputParam.output_win.pos.x,
@@ -72,7 +72,7 @@ namespace android{
                 mIPUOutputParam.output_win.win_h,
                 mIPUOutputParam.rot);
 
-        CAMERA_HAL_LOG_RUNTIME("Input param: width %d, height %d, fmt %d, crop_win pos x %d, crop_win pos y %d, crop_win win_w %d,crop_win win_h %d",
+        CAMERA_LOG_RUNTIME("Input param: width %d, height %d, fmt %d, crop_win pos x %d, crop_win pos y %d, crop_win win_w %d,crop_win win_h %d",
                 mIPUInputParam.width,
                 mIPUInputParam.height,
                 mIPUInputParam.fmt,
@@ -83,7 +83,7 @@ namespace android{
 
         mIPURet =  mxc_ipu_lib_task_init(&mIPUInputParam,NULL,&mIPUOutputParam,OP_NORMAL_MODE|TASK_ENC_MODE,&mIPUHandle);
         if (mIPURet < 0) {
-            CAMERA_HAL_ERR("Error! convertYUYVtoNV12, mxc_ipu_lib_task_init ret %d!",mIPURet);
+            CAMERA_LOG_ERR("Error! convertYUYVtoNV12, mxc_ipu_lib_task_init ret %d!",mIPURet);
             return PPDEVICE_ERROR_INIT;
         }  
 
@@ -91,7 +91,7 @@ namespace android{
     }
 
     PPDEVICE_ERR_RET PPIpuLib :: DoPorcess(DMA_BUFFER *pp_input_addr, DMA_BUFFER *pp_output_addr){
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         PPDEVICE_ERR_RET ret = PPDEVICE_ERROR_NONE;
 
         int mIPURet;
@@ -101,7 +101,7 @@ namespace android{
 
         mIPURet = mxc_ipu_lib_task_buf_update(&mIPUHandle,pp_input_addr->phy_offset,pp_output_addr->phy_offset,NULL,NULL,NULL);
         if (mIPURet < 0) {
-            CAMERA_HAL_ERR("Error! convertYUYVtoNV12, mxc_ipu_lib_task_buf_update ret %d!",mIPURet);
+            CAMERA_LOG_ERR("Error! convertYUYVtoNV12, mxc_ipu_lib_task_buf_update ret %d!",mIPURet);
             mxc_ipu_lib_task_uninit(&mIPUHandle);
             memset(&mIPUHandle, 0, sizeof(ipu_lib_handle_t));
             return PPDEVICE_ERROR_PROCESS;
@@ -112,7 +112,7 @@ namespace android{
     }
 
     PPDEVICE_ERR_RET PPIpuLib :: PPDeviceDeInit(){
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         PPDEVICE_ERR_RET ret = PPDEVICE_ERROR_NONE;
 
         mxc_ipu_lib_task_uninit(&mIPUHandle);
@@ -122,7 +122,7 @@ namespace android{
     }
 
     sp<PostProcessDeviceInterface> PPIpuLib :: createInstance(){
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (singleton != 0) {
             sp<PostProcessDeviceInterface> device = singleton.promote();
             if (device != 0) {
diff --git a/mx6/libcamera/PP_ipulib.h b/mx6/libcamera/PP_ipulib.h
index 39b0d4c..ee5fe03 100755
--- a/mx6/libcamera/PP_ipulib.h
+++ b/mx6/libcamera/PP_ipulib.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 #ifndef PP_IPU_LIB_H
diff --git a/mx6/libcamera/PostProcessDeviceInterface.cpp b/mx6/libcamera/PostProcessDeviceInterface.cpp
index 3d7e752..df3a494 100755
--- a/mx6/libcamera/PostProcessDeviceInterface.cpp
+++ b/mx6/libcamera/PostProcessDeviceInterface.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2011 Freescale Semiconductor, Inc.
  */
 #include "PP_ipulib.h" 
 namespace android{
diff --git a/mx6/libcamera/PostProcessDeviceInterface.h b/mx6/libcamera/PostProcessDeviceInterface.h
index 9d730b6..d7cf58a 100755
--- a/mx6/libcamera/PostProcessDeviceInterface.h
+++ b/mx6/libcamera/PostProcessDeviceInterface.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 #ifndef POSTPROCESS_DEVICE_INTERFACE_H
diff --git a/mx6/libcamera/V4l2CapDeviceBase.cpp b/mx6/libcamera/V4l2CapDeviceBase.cpp
index 74abc55..21c10b0 100755
--- a/mx6/libcamera/V4l2CapDeviceBase.cpp
+++ b/mx6/libcamera/V4l2CapDeviceBase.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #include <string.h>
 #include <unistd.h>
@@ -57,42 +57,42 @@ namespace android{
     {
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase::SetDevName(char * deviceName){
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE; 
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase::SetDevName(char * deviceName){
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE; 
         if(NULL == deviceName)
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         strcpy(mInitalDeviceName, deviceName);
         return ret;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase::GetDevName(char * deviceName){
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase::GetDevName(char * deviceName){
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
         if(NULL == deviceName)
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         strcpy(deviceName, mInitalDeviceName);
         return ret;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase::DevOpen(int cameraId){
-        CAMERA_HAL_LOG_FUNC;
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase::DevOpen(int cameraId){
+        CAMERA_LOG_FUNC;
 
         return V4l2Open(cameraId); 
     } 
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase::GetDevType(CAMERA_TYPE *pType)
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase::GetDevType(CAMERA_TYPE *pType)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if(pType == NULL)
             return CAPTURE_DEVICE_ERR_OPEN;
         *pType = mCameraType;
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase::EnumDevParam(DevParamType devParamType, void *retParam){
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE; 
-        CAMERA_HAL_LOG_FUNC;
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase::EnumDevParam(DevParamType devParamType, void *retParam){
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE; 
+        CAMERA_LOG_FUNC;
 
         if(mCameraDevice <= 0)
             return CAPTURE_DEVICE_ERR_OPEN;
@@ -101,14 +101,14 @@ namespace android{
 
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevSetConfig(struct capture_config_t *pCapcfg){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevSetConfig(struct capture_config_t *pCapcfg){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || pCapcfg == NULL){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
 
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
         if(mCapCfg.fmt != pCapcfg->fmt || mCapCfg.width != pCapcfg->width || mCapCfg.height != pCapcfg->height
                 || mCapCfg.tv.denominator/mCapCfg.tv.numerator != pCapcfg->tv.denominator/pCapcfg->tv.numerator) {
             mCapCfg.fmt = pCapcfg->fmt;
@@ -116,7 +116,7 @@ namespace android{
             mCapCfg.height = pCapcfg->height;
             mCapCfg.tv.denominator = pCapcfg->tv.denominator;
             mCapCfg.tv.numerator = pCapcfg->tv.numerator;
-            CAMERA_HAL_LOG_RUNTIME("V4l2SetConfig=width=%d,height=%d", mCapCfg.width, mCapCfg.height);
+            CAMERA_LOG_RUNTIME("V4l2SetConfig=width=%d,height=%d", mCapCfg.width, mCapCfg.height);
             ret = V4l2SetConfig(pCapcfg);
             if(ret < 0) {
                 return ret;
@@ -126,7 +126,7 @@ namespace android{
 
         if(mCapCfg.rotate != pCapcfg->rotate) {
             mCapCfg.rotate = pCapcfg->rotate;
-            CAMERA_HAL_LOG_RUNTIME("V4l2SetRot=rotate=%d", mCapCfg.rotate);
+            CAMERA_LOG_RUNTIME("V4l2SetRot=rotate=%d", mCapCfg.rotate);
             if(V4l2SetRot(pCapcfg) < 0)
                 return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
@@ -135,44 +135,44 @@ namespace android{
 
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevRegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevRegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0){
             return CAPTURE_DEVICE_ERR_OPEN;
         }else
             return V4l2RegisterBufs(DevBufQue, pBufQueNum);
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevAllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevAllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0){
             return CAPTURE_DEVICE_ERR_OPEN;
         }else
             return V4l2AllocateBuf(DevBufQue, pBufQueNum);
     }
 
-    CAPTURE_DEVICE_ERR_RET  V4l2CapDeviceBase :: DevPrepare(){
+    CAPTURE_DEVICE_RET  V4l2CapDeviceBase :: DevPrepare(){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0){
             return CAPTURE_DEVICE_ERR_OPEN;
         }else
             return V4l2Prepare();
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevStart(){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevStart(){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0){
             return CAPTURE_DEVICE_ERR_OPEN;
         }else
             return V4l2Start();
     }
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevDequeue(unsigned int *pBufQueIdx){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevDequeue(unsigned int *pBufQueIdx){
 
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || mBufQueNum == 0 || mCaptureBuffers == NULL){
             return CAPTURE_DEVICE_ERR_OPEN;
         }else{
@@ -181,9 +181,9 @@ namespace android{
 
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevQueue( unsigned int BufQueIdx){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevQueue( unsigned int BufQueIdx){
 
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || mBufQueNum == 0 || mCaptureBuffers == NULL){
             return CAPTURE_DEVICE_ERR_OPEN;
         }else{
@@ -191,8 +191,8 @@ namespace android{
         }
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevStop(){
-        CAMERA_HAL_LOG_FUNC;
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevStop(){
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0){
             return CAPTURE_DEVICE_ERR_OPEN;
         }else{
@@ -201,8 +201,8 @@ namespace android{
 
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevDeAllocate(){
-        CAMERA_HAL_LOG_FUNC;
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevDeAllocate(){
+        CAMERA_LOG_FUNC;
 
         if (mCameraDevice <= 0){
             return CAPTURE_DEVICE_ERR_OPEN;
@@ -210,9 +210,9 @@ namespace android{
             return V4l2DeAlloc();
         }
     }
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: DevClose(){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: DevClose(){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         if (mCameraDevice <= 0){
             return CAPTURE_DEVICE_ERR_OPEN;
@@ -221,8 +221,8 @@ namespace android{
         }
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2Open(int cameraId){
-        CAMERA_HAL_LOG_FUNC;
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2Open(int cameraId){
+        CAMERA_LOG_FUNC;
         int fd = 0, i, j, is_found = 0;
         const char *flags[] = {"uncompressed", "compressed"};
 
@@ -232,18 +232,18 @@ namespace android{
         struct v4l2_capability v4l2_cap;
         struct v4l2_fmtdesc vid_fmtdesc;
         struct v4l2_frmsizeenum vid_frmsize;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
 
         if(mCameraDevice > 0)
             return CAPTURE_DEVICE_ERR_ALRADY_OPENED;
         else if (mCaptureDeviceName[0] != '#'){
-            CAMERA_HAL_LOG_RUNTIME("already get the device name %s", mCaptureDeviceName);
+            CAMERA_LOG_RUNTIME("already get the device name %s", mCaptureDeviceName);
             mCameraDevice = open(mCaptureDeviceName, O_RDWR, O_NONBLOCK);
             if (mCameraDevice < 0)
                 return CAPTURE_DEVICE_ERR_OPEN;
         }
         else{
-            CAMERA_HAL_LOG_RUNTIME("deviceName is %s", mInitalDeviceName);
+            CAMERA_LOG_RUNTIME("deviceName is %s", mInitalDeviceName);
             v4l_dir = opendir("/sys/class/video4linux");
             if (v4l_dir){
                 while((dir_entry = readdir(v4l_dir))) {
@@ -253,7 +253,7 @@ namespace android{
                     sprintf(dev_node, "/dev/%s", dir_entry->d_name);
                     if ((fd = open(dev_node, O_RDWR, O_NONBLOCK)) < 0)
                         continue;
-                    CAMERA_HAL_LOG_RUNTIME("dev_node is %s", dev_node);
+                    CAMERA_LOG_RUNTIME("dev_node is %s", dev_node);
                     if(ioctl(fd, VIDIOC_QUERYCAP, &v4l2_cap) < 0 ) {
                         close(fd);
                         fd = 0;
@@ -262,7 +262,7 @@ namespace android{
                             (v4l2_cap.capabilities & V4L2_CAP_VIDEO_CAPTURE)) {
                         is_found = 1;
                         strcpy(mCaptureDeviceName, dev_node);
-                        CAMERA_HAL_LOG_RUNTIME("device name is %s", mCaptureDeviceName);
+                        CAMERA_LOG_RUNTIME("device name is %s", mCaptureDeviceName);
                         break;
                     } else {
                         close(fd);
@@ -275,18 +275,18 @@ namespace android{
                 mCameraDevice = fd;
             }
             else{
-                CAMERA_HAL_ERR("The device name is not correct or the device is error");
+                CAMERA_LOG_ERR("The device name is not correct or the device is error");
                 return CAPTURE_DEVICE_ERR_OPEN;
             }
         }
         return ret; 
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2EnumParam(DevParamType devParamType, void *retParam){
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE; 
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2EnumParam(DevParamType devParamType, void *retParam){
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE; 
 
-        CAMERA_HAL_LOG_FUNC;
-        CAMERA_HAL_LOG_RUNTIME("devParamType is %d", devParamType);
+        CAMERA_LOG_FUNC;
+        CAMERA_LOG_RUNTIME("devParamType is %d", devParamType);
 
         if(mCameraDevice <= 0)
             return CAPTURE_DEVICE_ERR_OPEN;
@@ -309,9 +309,9 @@ namespace android{
 
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2EnumFmt(void *retParam){
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE; 
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2EnumFmt(void *retParam){
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE; 
         struct v4l2_fmtdesc vid_fmtdesc;
         unsigned int *pParamVal = (unsigned int *)retParam;
 
@@ -321,7 +321,7 @@ namespace android{
             mFmtParamIdx = 0;
             ret = CAPTURE_DEVICE_ERR_GET_PARAM;
         }else{
-            CAMERA_HAL_LOG_RUNTIME("vid_fmtdesc.pixelformat is %x", vid_fmtdesc.pixelformat);
+            CAMERA_LOG_RUNTIME("vid_fmtdesc.pixelformat is %x", vid_fmtdesc.pixelformat);
             *pParamVal = vid_fmtdesc.pixelformat;
             mFmtParamIdx ++;
             ret = CAPTURE_DEVICE_ERR_ENUM_CONTINUE;
@@ -329,29 +329,29 @@ namespace android{
         return ret;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2EnumSizeFps(void *retParam){
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE; 
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2EnumSizeFps(void *retParam){
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE; 
         struct v4l2_frmsizeenum vid_frmsize;
         struct v4l2_frmivalenum vid_frmval;
 
         struct capture_config_t *pCapCfg =(struct capture_config_t *) retParam;
         memset(&vid_frmsize, 0, sizeof(struct v4l2_frmsizeenum));
         vid_frmsize.index = mSizeFPSParamIdx;
-        CAMERA_HAL_LOG_RUNTIME("the query for size fps fmt is %x",pCapCfg->fmt);
+        CAMERA_LOG_RUNTIME("the query for size fps fmt is %x",pCapCfg->fmt);
         vid_frmsize.pixel_format = pCapCfg->fmt;
         if (ioctl(mCameraDevice, VIDIOC_ENUM_FRAMESIZES, &vid_frmsize) != 0){
             mSizeFPSParamIdx = 0;
             ret = CAPTURE_DEVICE_ERR_SET_PARAM;
         }else{
             memset(&vid_frmval, 0, sizeof(struct v4l2_frmivalenum));
-            CAMERA_HAL_LOG_RUNTIME("in %s the w %d, h %d", __FUNCTION__,vid_frmsize.discrete.width, vid_frmsize.discrete.height);
+            CAMERA_LOG_RUNTIME("in %s the w %d, h %d", __FUNCTION__,vid_frmsize.discrete.width, vid_frmsize.discrete.height);
             vid_frmval.index = 0; //get the first, that is the min frame interval, but the biggest fps
             vid_frmval.pixel_format = pCapCfg->fmt;
             vid_frmval.width = vid_frmsize.discrete.width;
             vid_frmval.height= vid_frmsize.discrete.height;
             if (ioctl(mCameraDevice, VIDIOC_ENUM_FRAMEINTERVALS, &vid_frmval) != 0){
-                CAMERA_HAL_ERR("VIDIOC_ENUM_FRAMEINTERVALS error");
+                CAMERA_LOG_ERR("VIDIOC_ENUM_FRAMEINTERVALS error");
                 mSizeFPSParamIdx = 0;
                 ret = CAPTURE_DEVICE_ERR_SET_PARAM;
             }else{
@@ -366,10 +366,10 @@ namespace android{
         return ret;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2ConfigInput(struct capture_config_t *pCapcfg){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2ConfigInput(struct capture_config_t *pCapcfg){
 
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
         if (mCameraDevice <= 0 || pCapcfg == NULL){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
@@ -379,9 +379,9 @@ namespace android{
         return ret;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2GetCaptureMode(struct capture_config_t *pCapcfg, unsigned int *pMode){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2GetCaptureMode(struct capture_config_t *pCapcfg, unsigned int *pMode){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || pCapcfg == NULL){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
@@ -389,10 +389,10 @@ namespace android{
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2SetRot(struct capture_config_t *pCapcfg){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2SetRot(struct capture_config_t *pCapcfg){
 
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
         if (mCameraDevice <= 0 || pCapcfg == NULL){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
@@ -403,14 +403,14 @@ namespace android{
     }
 
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2SetConfig(struct capture_config_t *pCapcfg){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2SetConfig(struct capture_config_t *pCapcfg){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || pCapcfg == NULL){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
 
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
         struct v4l2_format fmt;
         struct v4l2_control ctrl;
         struct v4l2_streamparm parm;
@@ -430,9 +430,9 @@ namespace android{
         fmt.fmt.pix.sizeimage = 0;
 
         if (ioctl(mCameraDevice, VIDIOC_S_FMT, &fmt) < 0) {
-            CAMERA_HAL_ERR("set format failed\n");
-            CAMERA_HAL_ERR("pCapcfg->width is %d, pCapcfg->height is %d", pCapcfg->width, pCapcfg->height);
-            CAMERA_HAL_ERR(" Set the Format :%c%c%c%c\n",
+            CAMERA_LOG_ERR("set format failed\n");
+            CAMERA_LOG_ERR("pCapcfg->width is %d, pCapcfg->height is %d", pCapcfg->width, pCapcfg->height);
+            CAMERA_LOG_ERR(" Set the Format :%c%c%c%c\n",
                     pCapcfg->fmt & 0xFF, (pCapcfg->fmt >> 8) & 0xFF,
                     (pCapcfg->fmt >> 16) & 0xFF, (pCapcfg->fmt >> 24) & 0xFF);
             return CAPTURE_DEVICE_ERR_SYS_CALL;
@@ -446,8 +446,8 @@ namespace android{
             return ret;
 
         if (ioctl(mCameraDevice, VIDIOC_S_PARM, &parm) < 0) {
-            CAMERA_HAL_ERR("%s:%d  VIDIOC_S_PARM failed\n", __FUNCTION__,__LINE__);
-            CAMERA_HAL_ERR("frame timeval is numerator %d, denominator %d",parm.parm.capture.timeperframe.numerator,
+            CAMERA_LOG_ERR("%s:%d  VIDIOC_S_PARM failed\n", __FUNCTION__,__LINE__);
+            CAMERA_LOG_ERR("frame timeval is numerator %d, denominator %d",parm.parm.capture.timeperframe.numerator,
                     parm.parm.capture.timeperframe.denominator);
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
@@ -459,14 +459,14 @@ namespace android{
 
         fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         if (ioctl(mCameraDevice, VIDIOC_G_FMT, &parm) < 0) {
-            CAMERA_HAL_ERR("VIDIOC_S_PARM failed\n");
+            CAMERA_LOG_ERR("VIDIOC_S_PARM failed\n");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }else{
 
-            CAMERA_HAL_LOG_RUNTIME(" Width = %d\n", fmt.fmt.pix.width);
-            CAMERA_HAL_LOG_RUNTIME(" Height = %d \n", fmt.fmt.pix.height);
-            CAMERA_HAL_LOG_RUNTIME(" Image size = %d\n", fmt.fmt.pix.sizeimage);
-            CAMERA_HAL_LOG_RUNTIME(" pixelformat = %x\n", fmt.fmt.pix.pixelformat);
+            CAMERA_LOG_RUNTIME(" Width = %d\n", fmt.fmt.pix.width);
+            CAMERA_LOG_RUNTIME(" Height = %d \n", fmt.fmt.pix.height);
+            CAMERA_LOG_RUNTIME(" Image size = %d\n", fmt.fmt.pix.sizeimage);
+            CAMERA_LOG_RUNTIME(" pixelformat = %x\n", fmt.fmt.pix.pixelformat);
         }
         pCapcfg->framesize = fmt.fmt.pix.sizeimage;
         pCapcfg->picture_waite_number = 1; //For uvc, the first frame is ok.
@@ -474,14 +474,14 @@ namespace android{
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2AllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2AllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum){
         unsigned int i;
         struct v4l2_buffer buf;
         enum v4l2_buf_type type;
         struct v4l2_requestbuffers req;
         int BufQueNum;
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || DevBufQue == NULL || pBufQueNum == NULL || *pBufQueNum == 0){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
@@ -493,7 +493,7 @@ namespace android{
         req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         req.memory = V4L2_MEMORY_MMAP;
         if (ioctl(mCameraDevice, VIDIOC_REQBUFS, &req) < 0) {
-            CAMERA_HAL_ERR("v4l_capture_setup: VIDIOC_REQBUFS failed\n");
+            CAMERA_LOG_ERR("v4l_capture_setup: VIDIOC_REQBUFS failed\n");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
 
@@ -505,10 +505,10 @@ namespace android{
             buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
             buf.index = i;
             if (ioctl(mCameraDevice, VIDIOC_QUERYBUF, &buf) < 0) {
-                CAMERA_HAL_ERR("VIDIOC_QUERYBUF error\n");
+                CAMERA_LOG_ERR("VIDIOC_QUERYBUF error\n");
                 return CAPTURE_DEVICE_ERR_SYS_CALL;
             } else {
-                CAMERA_HAL_LOG_RUNTIME("VIDIOC_QUERYBUF ok\n");
+                CAMERA_LOG_RUNTIME("VIDIOC_QUERYBUF ok\n");
             }
 
             mCaptureBuffers[i].length = DevBufQue[i].length= buf.length;
@@ -516,22 +516,22 @@ namespace android{
             mCaptureBuffers[i].virt_start = DevBufQue[i].virt_start = (unsigned char *)mmap (NULL, mCaptureBuffers[i].length,
                     PROT_READ | PROT_WRITE, MAP_SHARED, mCameraDevice, mCaptureBuffers[i].phy_offset);
             memset(mCaptureBuffers[i].virt_start, 0xFF, mCaptureBuffers[i].length);
-            CAMERA_HAL_LOG_RUNTIME("capture buffers[%d].length = %d\n", i, mCaptureBuffers[i].length);
-            CAMERA_HAL_LOG_RUNTIME("capture buffers[%d].phy_offset = 0x%x\n", i, mCaptureBuffers[i].phy_offset);
-            CAMERA_HAL_LOG_RUNTIME("capture buffers[%d].virt_start = 0x%x\n", i, (unsigned int)(mCaptureBuffers[i].virt_start));
+            CAMERA_LOG_RUNTIME("capture buffers[%d].length = %d\n", i, mCaptureBuffers[i].length);
+            CAMERA_LOG_RUNTIME("capture buffers[%d].phy_offset = 0x%x\n", i, mCaptureBuffers[i].phy_offset);
+            CAMERA_LOG_RUNTIME("capture buffers[%d].virt_start = 0x%x\n", i, (unsigned int)(mCaptureBuffers[i].virt_start));
         }
 
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2RegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2RegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum){
         unsigned int i;
         struct v4l2_buffer buf;
         enum v4l2_buf_type type;
         struct v4l2_requestbuffers req;
         int BufQueNum;
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || DevBufQue == NULL || pBufQueNum == NULL || *pBufQueNum == 0){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
@@ -543,7 +543,7 @@ namespace android{
         req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         req.memory = V4L2_MEMORY_USERPTR;
         if (ioctl(mCameraDevice, VIDIOC_REQBUFS, &req) < 0) {
-            CAMERA_HAL_ERR("v4l_capture_setup: VIDIOC_REQBUFS failed\n");
+            CAMERA_LOG_ERR("v4l_capture_setup: VIDIOC_REQBUFS failed\n");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
 
@@ -559,22 +559,22 @@ namespace android{
             buf.length = mCaptureBuffers[i].length = DevBufQue[i].length;
             mCaptureBuffers[i].virt_start = DevBufQue[i].virt_start;
             //memset(mCaptureBuffers[i].virt_start, 0xFF, mCaptureBuffers[i].length);
-            CAMERA_HAL_LOG_RUNTIME("capture buffers[%d].length = %d\n", i, mCaptureBuffers[i].length);
-            CAMERA_HAL_LOG_RUNTIME("capture buffers[%d].phy_offset = 0x%x\n", i, mCaptureBuffers[i].phy_offset);
-            CAMERA_HAL_LOG_RUNTIME("capture buffers[%d].virt_start = 0x%x\n", i, (unsigned int)(mCaptureBuffers[i].virt_start));
+            CAMERA_LOG_RUNTIME("capture buffers[%d].length = %d\n", i, mCaptureBuffers[i].length);
+            CAMERA_LOG_RUNTIME("capture buffers[%d].phy_offset = 0x%x\n", i, mCaptureBuffers[i].phy_offset);
+            CAMERA_LOG_RUNTIME("capture buffers[%d].virt_start = 0x%x\n", i, (unsigned int)(mCaptureBuffers[i].virt_start));
             if (ioctl(mCameraDevice, VIDIOC_QUERYBUF, &buf) < 0) {
-                CAMERA_HAL_ERR("VIDIOC_QUERYBUF error\n");
+                CAMERA_LOG_ERR("VIDIOC_QUERYBUF error\n");
                 return CAPTURE_DEVICE_ERR_SYS_CALL;
             } else {
-                CAMERA_HAL_LOG_RUNTIME("VIDIOC_QUERYBUF ok\n");
+                CAMERA_LOG_RUNTIME("VIDIOC_QUERYBUF ok\n");
             }
         }
 
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2Prepare(){
-        CAMERA_HAL_LOG_FUNC;
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2Prepare(){
+        CAMERA_LOG_FUNC;
         struct v4l2_buffer buf;
         mQueuedBufNum = 0;
         for (unsigned int i = 0; i < mBufQueNum; i++) {
@@ -585,7 +585,7 @@ namespace android{
             buf.m.offset = mCaptureBuffers[i].phy_offset;
 
             if (ioctl (mCameraDevice, VIDIOC_QBUF, &buf) < 0) {
-                CAMERA_HAL_ERR("VIDIOC_QBUF error\n");
+                CAMERA_LOG_ERR("VIDIOC_QBUF error\n");
                 return CAPTURE_DEVICE_ERR_SYS_CALL;
             } 
             mQueuedBufNum ++;
@@ -594,27 +594,27 @@ namespace android{
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2Start(){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2Start(){
         enum v4l2_buf_type type;
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 ){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
         type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         if (ioctl (mCameraDevice, VIDIOC_STREAMON, &type) < 0) {
-            CAMERA_HAL_ERR("VIDIOC_STREAMON error\n");
+            CAMERA_LOG_ERR("VIDIOC_STREAMON error\n");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         } else{
-            CAMERA_HAL_LOG_RUNTIME("VIDIOC_STREAMON ok\n");
+            CAMERA_LOG_RUNTIME("VIDIOC_STREAMON ok\n");
         }
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2Dequeue(unsigned int *pBufQueIdx){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2Dequeue(unsigned int *pBufQueIdx){
         int ret;
         struct v4l2_buffer cfilledbuffer;
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || mBufQueNum == 0 || mCaptureBuffers == NULL){
             return CAPTURE_DEVICE_ERR_OPEN;
         }
@@ -623,7 +623,7 @@ namespace android{
         cfilledbuffer.memory = V4L2_MEMORY_USERPTR;
         ret = ioctl(mCameraDevice, VIDIOC_DQBUF, &cfilledbuffer);
         if (ret < 0) {
-            CAMERA_HAL_ERR("Camera VIDIOC_DQBUF failure, ret=%d", ret);
+            CAMERA_LOG_ERR("Camera VIDIOC_DQBUF failure, ret=%d", ret);
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
         *pBufQueIdx = cfilledbuffer.index;
@@ -632,10 +632,10 @@ namespace android{
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2Queue(unsigned int BufQueIdx){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2Queue(unsigned int BufQueIdx){
         int ret;
         struct v4l2_buffer cfilledbuffer;
-        //CAMERA_HAL_LOG_FUNC;
+        //CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || mBufQueNum == 0 || mCaptureBuffers == NULL){
             return CAPTURE_DEVICE_ERR_OPEN;
         }
@@ -645,7 +645,7 @@ namespace android{
         cfilledbuffer.index = BufQueIdx;
         ret = ioctl(mCameraDevice, VIDIOC_QBUF, &cfilledbuffer);
         if (ret < 0) {
-            CAMERA_HAL_ERR("Camera VIDIOC_DQBUF failure, ret=%d", ret);
+            CAMERA_LOG_ERR("Camera VIDIOC_DQBUF failure, ret=%d", ret);
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
         mQueuedBufNum ++;
@@ -653,26 +653,26 @@ namespace android{
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2Stop(){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2Stop(){
         enum v4l2_buf_type type;
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 ){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
         type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         if (ioctl (mCameraDevice, VIDIOC_STREAMOFF, &type) < 0) {
-            CAMERA_HAL_ERR("VIDIOC_STREAMON error\n");
+            CAMERA_LOG_ERR("VIDIOC_STREAMON error\n");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         } else
-            CAMERA_HAL_LOG_INFO("VIDIOC_STREAMOFF ok\n");
+            CAMERA_LOG_INFO("VIDIOC_STREAMOFF ok\n");
 
 
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2DeAlloc(){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2DeAlloc(){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 ){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
@@ -681,20 +681,20 @@ namespace android{
             if (mCaptureBuffers[i].length && (mCaptureBuffers[i].virt_start > 0)) {
                 munmap(mCaptureBuffers[i].virt_start, mCaptureBuffers[i].length);
                 mCaptureBuffers[i].length = 0;
-                CAMERA_HAL_LOG_RUNTIME("munmap buffers 0x%x\n", (unsigned int)(mCaptureBuffers[i].virt_start));
+                CAMERA_LOG_RUNTIME("munmap buffers 0x%x\n", (unsigned int)(mCaptureBuffers[i].virt_start));
             }
         }
         return CAPTURE_DEVICE_ERR_NONE;
     }
-    CAPTURE_DEVICE_ERR_RET V4l2CapDeviceBase :: V4l2Close(){
+    CAPTURE_DEVICE_RET V4l2CapDeviceBase :: V4l2Close(){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
 
         if (mCameraDevice <= 0 ){
-            CAMERA_HAL_LOG_INFO("the device handle is error");
+            CAMERA_LOG_INFO("the device handle is error");
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
-        CAMERA_HAL_LOG_INFO("close the device");
+        CAMERA_LOG_INFO("close the device");
         close(mCameraDevice);
         mCameraDevice = -1;
         return CAPTURE_DEVICE_ERR_NONE;
diff --git a/mx6/libcamera/V4l2CapDeviceBase.h b/mx6/libcamera/V4l2CapDeviceBase.h
index f1ad23f..597547e 100755
--- a/mx6/libcamera/V4l2CapDeviceBase.h
+++ b/mx6/libcamera/V4l2CapDeviceBase.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #ifndef V4L2_CAP_DEVICE_BASE_H
 #define V4L2_CAP_DEVICE_BASE_H
@@ -32,43 +32,43 @@ namespace android{
     class V4l2CapDeviceBase : public CaptureDeviceInterface{
     public:
 
-        virtual CAPTURE_DEVICE_ERR_RET SetDevName(char * deviceName);
-        virtual CAPTURE_DEVICE_ERR_RET GetDevName(char * deviceName);
-        virtual CAPTURE_DEVICE_ERR_RET GetDevType(CAMERA_TYPE *pType);
-        virtual CAPTURE_DEVICE_ERR_RET DevOpen(int cameraId);
-        virtual CAPTURE_DEVICE_ERR_RET EnumDevParam(DevParamType devParamType, void *retParam);
-        virtual CAPTURE_DEVICE_ERR_RET DevSetConfig(struct capture_config_t *pCapcfg);
-        virtual CAPTURE_DEVICE_ERR_RET DevAllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum);
-        virtual CAPTURE_DEVICE_ERR_RET DevRegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum);
-        virtual CAPTURE_DEVICE_ERR_RET DevPrepare();
-        virtual CAPTURE_DEVICE_ERR_RET DevStart();
-        virtual CAPTURE_DEVICE_ERR_RET DevDequeue(unsigned int *pBufQueIdx);
-        virtual CAPTURE_DEVICE_ERR_RET DevQueue( unsigned int BufQueIdx);
-        virtual CAPTURE_DEVICE_ERR_RET DevStop();
-        virtual CAPTURE_DEVICE_ERR_RET DevDeAllocate();
-        virtual CAPTURE_DEVICE_ERR_RET DevClose();
+        virtual CAPTURE_DEVICE_RET SetDevName(char * deviceName);
+        virtual CAPTURE_DEVICE_RET GetDevName(char * deviceName);
+        virtual CAPTURE_DEVICE_RET GetDevType(CAMERA_TYPE *pType);
+        virtual CAPTURE_DEVICE_RET DevOpen(int cameraId);
+        virtual CAPTURE_DEVICE_RET EnumDevParam(DevParamType devParamType, void *retParam);
+        virtual CAPTURE_DEVICE_RET DevSetConfig(struct capture_config_t *pCapcfg);
+        virtual CAPTURE_DEVICE_RET DevAllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum);
+        virtual CAPTURE_DEVICE_RET DevRegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum);
+        virtual CAPTURE_DEVICE_RET DevPrepare();
+        virtual CAPTURE_DEVICE_RET DevStart();
+        virtual CAPTURE_DEVICE_RET DevDequeue(unsigned int *pBufQueIdx);
+        virtual CAPTURE_DEVICE_RET DevQueue( unsigned int BufQueIdx);
+        virtual CAPTURE_DEVICE_RET DevStop();
+        virtual CAPTURE_DEVICE_RET DevDeAllocate();
+        virtual CAPTURE_DEVICE_RET DevClose();
 
     protected:
 
         V4l2CapDeviceBase();
         virtual ~V4l2CapDeviceBase();
-        virtual CAPTURE_DEVICE_ERR_RET V4l2Open(int cameraId);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2EnumParam(DevParamType devParamType, void *retParam);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2EnumFmt(void *retParam);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2EnumSizeFps(void *retParam);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2SetConfig(struct capture_config_t *pCapcfg);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2AllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2RegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2Prepare();
-        virtual CAPTURE_DEVICE_ERR_RET V4l2Start();
-        virtual CAPTURE_DEVICE_ERR_RET V4l2Dequeue(unsigned int *pBufQueIdx);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2Queue(unsigned int BufQueIdx);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2Stop();
-        virtual CAPTURE_DEVICE_ERR_RET V4l2DeAlloc();
-        virtual CAPTURE_DEVICE_ERR_RET V4l2Close();
-        virtual CAPTURE_DEVICE_ERR_RET V4l2ConfigInput(struct capture_config_t *pCapcfg);
-        virtual CAPTURE_DEVICE_ERR_RET V4l2GetCaptureMode(struct capture_config_t *pCapcfg, unsigned int *pMode); 
-        virtual CAPTURE_DEVICE_ERR_RET V4l2SetRot(struct capture_config_t *pCapcfg);
+        virtual CAPTURE_DEVICE_RET V4l2Open(int cameraId);
+        virtual CAPTURE_DEVICE_RET V4l2EnumParam(DevParamType devParamType, void *retParam);
+        virtual CAPTURE_DEVICE_RET V4l2EnumFmt(void *retParam);
+        virtual CAPTURE_DEVICE_RET V4l2EnumSizeFps(void *retParam);
+        virtual CAPTURE_DEVICE_RET V4l2SetConfig(struct capture_config_t *pCapcfg);
+        virtual CAPTURE_DEVICE_RET V4l2AllocateBuf(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum);
+        virtual CAPTURE_DEVICE_RET V4l2RegisterBufs(DMA_BUFFER *DevBufQue, unsigned int *pBufQueNum);
+        virtual CAPTURE_DEVICE_RET V4l2Prepare();
+        virtual CAPTURE_DEVICE_RET V4l2Start();
+        virtual CAPTURE_DEVICE_RET V4l2Dequeue(unsigned int *pBufQueIdx);
+        virtual CAPTURE_DEVICE_RET V4l2Queue(unsigned int BufQueIdx);
+        virtual CAPTURE_DEVICE_RET V4l2Stop();
+        virtual CAPTURE_DEVICE_RET V4l2DeAlloc();
+        virtual CAPTURE_DEVICE_RET V4l2Close();
+        virtual CAPTURE_DEVICE_RET V4l2ConfigInput(struct capture_config_t *pCapcfg);
+        virtual CAPTURE_DEVICE_RET V4l2GetCaptureMode(struct capture_config_t *pCapcfg, unsigned int *pMode); 
+        virtual CAPTURE_DEVICE_RET V4l2SetRot(struct capture_config_t *pCapcfg);
 
         char         mCaptureDeviceName[CAMAERA_FILENAME_LENGTH];
         char         mInitalDeviceName[CAMAERA_SENSOR_LENGTH];
diff --git a/mx6/libcamera/V4l2CsiDevice.cpp b/mx6/libcamera/V4l2CsiDevice.cpp
index f48f718..6e0dd92 100755
--- a/mx6/libcamera/V4l2CsiDevice.cpp
+++ b/mx6/libcamera/V4l2CsiDevice.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #include <string.h>
 #include <unistd.h>
@@ -49,8 +49,8 @@ namespace android{
     }
 
 
-    CAPTURE_DEVICE_ERR_RET V4l2CsiDevice :: V4l2Open(int cameraId){
-        CAMERA_HAL_LOG_FUNC;
+    CAPTURE_DEVICE_RET V4l2CsiDevice :: V4l2Open(int cameraId){
+        CAMERA_LOG_FUNC;
         int fd = 0, i, j, is_found = 0;
         const char *flags[] = {"uncompressed", "compressed"};
 
@@ -60,21 +60,21 @@ namespace android{
         struct v4l2_dbg_chip_ident vid_chip;
         struct v4l2_fmtdesc vid_fmtdesc;
         struct v4l2_frmsizeenum vid_frmsize;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
 
         if(mCameraDevice > 0)
             return CAPTURE_DEVICE_ERR_ALRADY_OPENED;
 
 #ifdef V4L2_CAMERA_SWITCH
         if (mCaptureDeviceName[0] != '#'){
-            CAMERA_HAL_LOG_RUNTIME("already get the device name %s", mCaptureDeviceName);
+            CAMERA_LOG_RUNTIME("already get the device name %s", mCaptureDeviceName);
             mCameraDevice = open(mCaptureDeviceName, O_RDWR, O_NONBLOCK);
             if (mCameraDevice < 0)
                 return CAPTURE_DEVICE_ERR_OPEN;
             ret = V4l2SetSensor(cameraId);
         }
         else{
-            CAMERA_HAL_LOG_RUNTIME("deviceName is %s", mInitalDeviceName);
+            CAMERA_LOG_RUNTIME("deviceName is %s", mInitalDeviceName);
             v4l_dir = opendir("/sys/class/video4linux");
             if (v4l_dir){
                 while((dir_entry = readdir(v4l_dir))) {
@@ -84,14 +84,14 @@ namespace android{
                     sprintf(dev_node, "/dev/%s", dir_entry->d_name);
                     if ((fd = open(dev_node, O_RDWR, O_NONBLOCK)) < 0)
                         continue;
-                    CAMERA_HAL_LOG_RUNTIME("dev_node is %s", dev_node);
+                    CAMERA_LOG_RUNTIME("dev_node is %s", dev_node);
 
                     if (fd > 0){
                         mCameraDevice = fd;
                         ret = V4l2SetSensor(cameraId);
                     }
                     else{
-                        CAMERA_HAL_ERR("The device name is not correct or the device is error");
+                        CAMERA_LOG_ERR("The device name is not correct or the device is error");
                         return CAPTURE_DEVICE_ERR_OPEN;
                     }
 
@@ -103,8 +103,8 @@ namespace android{
                         is_found = 1;
                         strcpy(mCaptureDeviceName, dev_node);
                         strcpy(mInitalDeviceName, vid_chip.match.name);
-                        CAMERA_HAL_LOG_INFO("device name is %s", mCaptureDeviceName);
-                        CAMERA_HAL_LOG_INFO("sensor name is %s", mInitalDeviceName);
+                        CAMERA_LOG_INFO("device name is %s", mCaptureDeviceName);
+                        CAMERA_LOG_INFO("sensor name is %s", mInitalDeviceName);
                         break;
                     } else{
                         close(fd);
@@ -118,7 +118,7 @@ namespace android{
                 ret = V4l2SetSensor(cameraId);
             }
             else{
-                CAMERA_HAL_ERR("The device name is not correct or the device is error");
+                CAMERA_LOG_ERR("The device name is not correct or the device is error");
                 return CAPTURE_DEVICE_ERR_OPEN;
             }
         }
@@ -126,32 +126,32 @@ namespace android{
         memset((void *)dev_node, 0, CAMAERA_FILENAME_LENGTH);
         sprintf(dev_node, "/dev/video%d", cameraId);
         if ((fd = open(dev_node, O_RDWR, O_NONBLOCK)) < 0) {
-            CAMERA_HAL_ERR("dev_node %s:cannot be opened", dev_node);
+            CAMERA_LOG_ERR("dev_node %s:cannot be opened", dev_node);
             return CAPTURE_DEVICE_ERR_OPEN;
         }
 
         if(ioctl(fd, VIDIOC_DBG_G_CHIP_IDENT, &vid_chip) < 0 ) {
             close(fd);
-            CAMERA_HAL_ERR("dev_node %s:cannot get sensor name", dev_node);
+            CAMERA_LOG_ERR("dev_node %s:cannot get sensor name", dev_node);
             return CAPTURE_DEVICE_ERR_OPEN;
         }
         strcpy(mCaptureDeviceName, dev_node);
         strcpy(mInitalDeviceName, vid_chip.match.name);
-        CAMERA_HAL_LOG_INFO("device name is %s", mCaptureDeviceName);
-        CAMERA_HAL_LOG_INFO("sensor name is %s", mInitalDeviceName);
+        CAMERA_LOG_INFO("device name is %s", mCaptureDeviceName);
+        CAMERA_LOG_INFO("sensor name is %s", mInitalDeviceName);
         mCameraDevice = fd;
 #endif
         return ret; 
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CsiDevice :: V4l2SetSensor(int cameraId)
+    CAPTURE_DEVICE_RET V4l2CsiDevice :: V4l2SetSensor(int cameraId)
     {
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
-        CAMERA_HAL_LOG_INFO("-----set camera sensor %d-----", cameraId);
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAMERA_LOG_INFO("-----set camera sensor %d-----", cameraId);
 #ifdef V4L2_CAMERA_SWITCH
         if(cameraId >= 2) {
-            CAMERA_HAL_ERR("Error: camerId %d is too big", cameraId);
+            CAMERA_LOG_ERR("Error: camerId %d is too big", cameraId);
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
 
@@ -159,20 +159,20 @@ namespace android{
         ctrl.id = V4L2_CID_MXC_SWITCH_CAM;
         ctrl.value = cameraId;
         if (ioctl(mCameraDevice, VIDIOC_S_CTRL, &ctrl) < 0) {
-            CAMERA_HAL_ERR("set ctrl switch camera failed\n");
+            CAMERA_LOG_ERR("set ctrl switch camera failed\n");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
 #endif
         return ret;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CsiDevice :: V4l2EnumFmt(void *retParam){
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE; 
+    CAPTURE_DEVICE_RET V4l2CsiDevice :: V4l2EnumFmt(void *retParam){
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE; 
         unsigned int *pParamVal = (unsigned int *)retParam;
 
         if (mFmtParamIdx < ENUM_SUPPORTED_FMT){
-            CAMERA_HAL_LOG_RUNTIME("vid_fmtdesc.pixelformat is %x", mSupportedFmt[mFmtParamIdx]);
+            CAMERA_LOG_RUNTIME("vid_fmtdesc.pixelformat is %x", mSupportedFmt[mFmtParamIdx]);
             *pParamVal = mSupportedFmt[mFmtParamIdx];
             mFmtParamIdx ++;
             ret = CAPTURE_DEVICE_ERR_ENUM_CONTINUE;
@@ -183,15 +183,15 @@ namespace android{
         return ret;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CsiDevice :: V4l2EnumSizeFps(void *retParam){
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE; 
+    CAPTURE_DEVICE_RET V4l2CsiDevice :: V4l2EnumSizeFps(void *retParam){
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE; 
         struct v4l2_frmsizeenum vid_frmsize;
 
         struct capture_config_t *pCapCfg =(struct capture_config_t *) retParam;
         memset(&vid_frmsize, 0, sizeof(struct v4l2_frmsizeenum));
         vid_frmsize.index = mSizeFPSParamIdx;
-        CAMERA_HAL_LOG_RUNTIME("the query for size fps fmt is %x",pCapCfg->fmt);
+        CAMERA_LOG_RUNTIME("the query for size fps fmt is %x",pCapCfg->fmt);
         vid_frmsize.pixel_format = pCapCfg->fmt;
         if (ioctl(mCameraDevice, VIDIOC_ENUM_FRAMESIZES, &vid_frmsize) != 0){
             mSizeFPSParamIdx = 0;
@@ -199,7 +199,7 @@ namespace android{
         }else{
             //hardcode here for ov3640
             if (strstr(mInitalDeviceName, "3640") != NULL){
-                CAMERA_HAL_LOG_INFO("the sensor  is  mInitalDeviceName");
+                CAMERA_LOG_INFO("the sensor  is  mInitalDeviceName");
                 if (vid_frmsize.discrete.width == 1024 && vid_frmsize.discrete.height == 768){
                     mSizeFPSParamIdx ++;
                     vid_frmsize.index = mSizeFPSParamIdx;
@@ -209,7 +209,7 @@ namespace android{
                     }
                 }
             }
-            CAMERA_HAL_LOG_RUNTIME("in %s the w %d, h %d", __FUNCTION__,vid_frmsize.discrete.width, vid_frmsize.discrete.height);
+            CAMERA_LOG_RUNTIME("in %s the w %d, h %d", __FUNCTION__,vid_frmsize.discrete.width, vid_frmsize.discrete.height);
             pCapCfg->width  = vid_frmsize.discrete.width;
             pCapCfg->height = vid_frmsize.discrete.height;
             if(vid_frmsize.discrete.width > 1280 || vid_frmsize.discrete.height >720){
@@ -225,27 +225,27 @@ namespace android{
         return ret;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CsiDevice :: V4l2ConfigInput(struct capture_config_t *pCapcfg)
+    CAPTURE_DEVICE_RET V4l2CsiDevice :: V4l2ConfigInput(struct capture_config_t *pCapcfg)
     {
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         int input = 1;
         if (ioctl(mCameraDevice, VIDIOC_S_INPUT, &input) < 0) {
-            CAMERA_HAL_ERR("set input failed");
+            CAMERA_LOG_ERR("set input failed");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
 
-    CAPTURE_DEVICE_ERR_RET V4l2CsiDevice :: V4l2SetConfig(struct capture_config_t *pCapcfg)
+    CAPTURE_DEVICE_RET V4l2CsiDevice :: V4l2SetConfig(struct capture_config_t *pCapcfg)
     {
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || pCapcfg == NULL){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
 
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
         struct v4l2_format fmt;
         struct v4l2_control ctrl;
         struct v4l2_streamparm parm;
@@ -260,7 +260,7 @@ namespace android{
             pCapcfg->tv.numerator = 1;
             pCapcfg->tv.denominator = 30;
         }
-        CAMERA_HAL_LOG_RUNTIME("the fps is %d", pCapcfg->tv.denominator);
+        CAMERA_LOG_RUNTIME("the fps is %d", pCapcfg->tv.denominator);
 
         parm.parm.capture.timeperframe.numerator = pCapcfg->tv.numerator;
         parm.parm.capture.timeperframe.denominator = pCapcfg->tv.denominator;
@@ -273,8 +273,8 @@ namespace android{
             parm.parm.capture.timeperframe.numerator = 1;
             parm.parm.capture.timeperframe.denominator = 15;
             if (ioctl(mCameraDevice, VIDIOC_S_PARM, &parm) < 0){
-                CAMERA_HAL_ERR("%s:%d  VIDIOC_S_PARM failed\n", __FUNCTION__,__LINE__);
-                CAMERA_HAL_ERR("frame timeval is numerator %d, denominator %d",parm.parm.capture.timeperframe.numerator, 
+                CAMERA_LOG_ERR("%s:%d  VIDIOC_S_PARM failed\n", __FUNCTION__,__LINE__);
+                CAMERA_LOG_ERR("frame timeval is numerator %d, denominator %d",parm.parm.capture.timeperframe.numerator, 
                         parm.parm.capture.timeperframe.denominator);
                 return CAPTURE_DEVICE_ERR_SYS_CALL;
             }
@@ -294,9 +294,9 @@ namespace android{
         fmt.fmt.pix.sizeimage = 0;
 
         if (ioctl(mCameraDevice, VIDIOC_S_FMT, &fmt) < 0) {
-            CAMERA_HAL_ERR("set format failed\n");
-            CAMERA_HAL_ERR("pCapcfg->width is %d, pCapcfg->height is %d", pCapcfg->width, pCapcfg->height);
-            CAMERA_HAL_ERR(" Set the Format :%c%c%c%c\n",
+            CAMERA_LOG_ERR("set format failed\n");
+            CAMERA_LOG_ERR("pCapcfg->width is %d, pCapcfg->height is %d", pCapcfg->width, pCapcfg->height);
+            CAMERA_LOG_ERR(" Set the Format :%c%c%c%c\n",
                     pCapcfg->fmt & 0xFF, (pCapcfg->fmt >> 8) & 0xFF,
                     (pCapcfg->fmt >> 16) & 0xFF, (pCapcfg->fmt >> 24) & 0xFF);
             return CAPTURE_DEVICE_ERR_SYS_CALL;
@@ -304,24 +304,24 @@ namespace android{
 
         fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         if (ioctl(mCameraDevice, VIDIOC_G_FMT, &fmt) < 0) {
-            CAMERA_HAL_ERR("VIDIOC_S_PARM failed\n");
+            CAMERA_LOG_ERR("VIDIOC_S_PARM failed\n");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }else{
 
-            CAMERA_HAL_LOG_RUNTIME(" Width = %d\n", fmt.fmt.pix.width);
-            CAMERA_HAL_LOG_RUNTIME(" Height = %d \n", fmt.fmt.pix.height);
-            CAMERA_HAL_LOG_RUNTIME(" Image size = %d\n", fmt.fmt.pix.sizeimage);
-            CAMERA_HAL_LOG_RUNTIME(" pixelformat = %x\n", fmt.fmt.pix.pixelformat);
+            CAMERA_LOG_RUNTIME(" Width = %d\n", fmt.fmt.pix.width);
+            CAMERA_LOG_RUNTIME(" Height = %d \n", fmt.fmt.pix.height);
+            CAMERA_LOG_RUNTIME(" Image size = %d\n", fmt.fmt.pix.sizeimage);
+            CAMERA_LOG_RUNTIME(" pixelformat = %x\n", fmt.fmt.pix.pixelformat);
         }
         pCapcfg->framesize = fmt.fmt.pix.sizeimage;
 
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CsiDevice :: V4l2GetCaptureMode(struct capture_config_t *pCapcfg, 
+    CAPTURE_DEVICE_RET V4l2CsiDevice :: V4l2GetCaptureMode(struct capture_config_t *pCapcfg, 
             unsigned int *pMode, struct v4l2_fract *pTimeFrame){
 
-        CAMERA_HAL_LOG_FUNC;
+        CAMERA_LOG_FUNC;
         if (mCameraDevice <= 0 || pCapcfg == NULL){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
@@ -381,7 +381,7 @@ namespace android{
                 //pTimeFrame->denominator = 30;
             }
             else{
-                CAMERA_HAL_ERR("The camera mode is not supported!!!!");
+                CAMERA_LOG_ERR("The camera mode is not supported!!!!");
                 return CAPTURE_DEVICE_ERR_BAD_PARAM;
             }
         }else if(strstr(mInitalDeviceName, OV3640_NAME_STR) != 0){
@@ -401,26 +401,26 @@ namespace android{
             }
             else
             {
-                CAMERA_HAL_ERR("The camera mode is not supported!!!!");
+                CAMERA_LOG_ERR("The camera mode is not supported!!!!");
                 return CAPTURE_DEVICE_ERR_BAD_PARAM;
             }
         }else{
-            CAMERA_HAL_ERR("The camera sensor %s not configure!!!!", mInitalDeviceName);
+            CAMERA_LOG_ERR("The camera sensor %s not configure!!!!", mInitalDeviceName);
             capturemode = 0;
             pic_waite_buf_num = 0;
         }
 
-        CAMERA_HAL_LOG_INFO("the mode is %d", capturemode);
+        CAMERA_LOG_INFO("camera mode:%d", capturemode);
         *pMode = capturemode;
         pCapcfg->picture_waite_number = pic_waite_buf_num;
 
         return CAPTURE_DEVICE_ERR_NONE;
     }
 
-    CAPTURE_DEVICE_ERR_RET V4l2CsiDevice :: V4l2SetRot(struct capture_config_t *pCapcfg){
+    CAPTURE_DEVICE_RET V4l2CsiDevice :: V4l2SetRot(struct capture_config_t *pCapcfg){
 
-        CAMERA_HAL_LOG_FUNC;
-        CAPTURE_DEVICE_ERR_RET ret = CAPTURE_DEVICE_ERR_NONE;
+        CAMERA_LOG_FUNC;
+        CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
         if (mCameraDevice <= 0 || pCapcfg == NULL){
             return CAPTURE_DEVICE_ERR_BAD_PARAM;
         }
@@ -441,7 +441,7 @@ namespace android{
             ctrl.value = V4L2_MXC_ROTATE_NONE;
 
         if (ioctl(mCameraDevice, VIDIOC_S_CTRL, &ctrl) < 0) {
-            CAMERA_HAL_ERR("set ctrl failed\n");
+            CAMERA_LOG_ERR("set ctrl failed\n");
             return CAPTURE_DEVICE_ERR_SYS_CALL;
         }
 
diff --git a/mx6/libcamera/V4l2CsiDevice.h b/mx6/libcamera/V4l2CsiDevice.h
index 4305ed9..ccf88ab 100755
--- a/mx6/libcamera/V4l2CsiDevice.h
+++ b/mx6/libcamera/V4l2CsiDevice.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #ifndef V4L2_CSI_DEVICE_H
 #define V4L2_CSI_DEVICE_H
@@ -36,15 +36,15 @@ class V4l2CsiDevice : public V4l2CapDeviceBase{
         virtual ~V4l2CsiDevice();
     protected:
 		
-		CAPTURE_DEVICE_ERR_RET V4l2Open(int cameraId);
-        CAPTURE_DEVICE_ERR_RET V4l2SetSensor(int cameraId);
-		CAPTURE_DEVICE_ERR_RET V4l2EnumFmt(void *retParam);
-		CAPTURE_DEVICE_ERR_RET V4l2EnumSizeFps(void *retParam);
-		CAPTURE_DEVICE_ERR_RET V4l2SetConfig(struct capture_config_t *pCapcfg);
-        CAPTURE_DEVICE_ERR_RET V4l2ConfigInput(struct capture_config_t *pCapcfg);
-        CAPTURE_DEVICE_ERR_RET V4l2GetCaptureMode(struct capture_config_t *pCapcfg, 
+		CAPTURE_DEVICE_RET V4l2Open(int cameraId);
+        CAPTURE_DEVICE_RET V4l2SetSensor(int cameraId);
+		CAPTURE_DEVICE_RET V4l2EnumFmt(void *retParam);
+		CAPTURE_DEVICE_RET V4l2EnumSizeFps(void *retParam);
+		CAPTURE_DEVICE_RET V4l2SetConfig(struct capture_config_t *pCapcfg);
+        CAPTURE_DEVICE_RET V4l2ConfigInput(struct capture_config_t *pCapcfg);
+        CAPTURE_DEVICE_RET V4l2GetCaptureMode(struct capture_config_t *pCapcfg, 
                 unsigned int *pMode, struct v4l2_fract *pTimeFrame); 
-        CAPTURE_DEVICE_ERR_RET V4l2SetRot(struct capture_config_t *pCapcfg);
+        CAPTURE_DEVICE_RET V4l2SetRot(struct capture_config_t *pCapcfg);
 
 		unsigned int mSupportedFmt[ENUM_SUPPORTED_FMT];
    };
diff --git a/mx6/libcamera/V4l2UVCDevice.h b/mx6/libcamera/V4l2UVCDevice.h
index 4aac97f..4104328 100755
--- a/mx6/libcamera/V4l2UVCDevice.h
+++ b/mx6/libcamera/V4l2UVCDevice.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 #ifndef V4L2_UVC_DEVICE_H
 #define V4L2_UVC_DEVICE_H
diff --git a/mx6/libcamera/messageQueue.cpp b/mx6/libcamera/messageQueue.cpp
index 547816a..29a2087 100755
--- a/mx6/libcamera/messageQueue.cpp
+++ b/mx6/libcamera/messageQueue.cpp
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 
@@ -63,7 +63,7 @@ CMessageQueue::~CMessageQueue()
 
 void CMessageQueue::clearMessage()
 {
-    CAMERA_HAL_ERR("-------CMessageQueue::clearMessage--------");
+    CAMERA_LOG_ERR("-------CMessageQueue::clearMessage--------");
     Mutex::Autolock _l(mLock);
     mMessages.clear();
     mStop = false;
diff --git a/mx6/libcamera/messageQueue.h b/mx6/libcamera/messageQueue.h
index 02314cc..243d497 100755
--- a/mx6/libcamera/messageQueue.h
+++ b/mx6/libcamera/messageQueue.h
@@ -15,7 +15,7 @@
  */
 
 /*
- * Copyright 2009-2011 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2009-2012 Freescale Semiconductor, Inc.
  */
 
 
-- 
1.8.0

