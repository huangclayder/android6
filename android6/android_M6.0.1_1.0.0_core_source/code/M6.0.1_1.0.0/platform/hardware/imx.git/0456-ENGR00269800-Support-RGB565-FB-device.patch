From ec57d7db89477fdcb970cd9cfef015e9042e1911 Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Fri, 5 Jul 2013 12:43:22 +0800
Subject: [PATCH 456/635] ENGR00269800 Support RGB565 FB device

Return the FB's format for HWC_DISPLAY_FORMAT query
Make 32bpp FB to be HAL_PIXEL_FORMAT_RGBA_8888, which is aligned
with the default setting in HWC

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 mx6/hwcomposer/hwc_context.h           |  1 +
 mx6/hwcomposer/hwc_display.cpp         | 11 ++++++++---
 mx6/hwcomposer/hwcomposer.cpp          |  4 ++++
 mx6/libgralloc_wrapper/framebuffer.cpp |  2 +-
 4 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/mx6/hwcomposer/hwc_context.h b/mx6/hwcomposer/hwc_context.h
index 73d72f2..75dcbbf 100644
--- a/mx6/hwcomposer/hwc_context.h
+++ b/mx6/hwcomposer/hwc_context.h
@@ -67,6 +67,7 @@ typedef struct {
     int xdpi;
     int ydpi;
     int blank;
+    int format;
 } displayInfo;
 
 struct hwc_context_t {
diff --git a/mx6/hwcomposer/hwc_display.cpp b/mx6/hwcomposer/hwc_display.cpp
index 687cf30..51baa3d 100644
--- a/mx6/hwcomposer/hwc_display.cpp
+++ b/mx6/hwcomposer/hwc_display.cpp
@@ -189,15 +189,20 @@ int hwc_get_framebuffer_info(displayInfo *pInfo)
     pInfo->ydpi = 1000 * (info.yres * 25.4f) / info.height;
     pInfo->vsync_period  = 1000000000 / refreshRate;
     pInfo->blank  = 0;
+    pInfo->format = (info.bits_per_pixel == 32)
+                         ? HAL_PIXEL_FORMAT_RGBA_8888
+                         : HAL_PIXEL_FORMAT_RGB_565;
 
     ALOGV("using\n"
           "xres         = %d px\n"
           "yres         = %d px\n"
           "width        = %d mm (%f dpi)\n"
           "height       = %d mm (%f dpi)\n"
-          "refresh rate = %d Hz\n",
-          dev->xres, dev->yres, info.width, dev->xdpi / 1000.0,
-          info.height, dev->ydpi / 1000.0, refreshRate);
+          "refresh rate = %d Hz\n"
+          "format       = %d\n",
+          info.xres, info.yres, info.width, pInfo->xdpi / 1000.0,
+          info.height, pInfo->ydpi / 1000.0, refreshRate,
+          pInfo->format);
 
     return NO_ERROR;
 }
diff --git a/mx6/hwcomposer/hwcomposer.cpp b/mx6/hwcomposer/hwcomposer.cpp
index 4dc366c..498597d 100755
--- a/mx6/hwcomposer/hwcomposer.cpp
+++ b/mx6/hwcomposer/hwcomposer.cpp
@@ -291,6 +291,10 @@ static int hwc_getDisplayAttributes(struct hwc_composer_device_1 *dev,
                 else
                     values[i] = 0;
                 break;
+            case HWC_DISPLAY_FORMAT:
+                values[i] = ctx->mDispInfo[disp].format;
+                break;
+
             default:
                 ALOGE("unknown display attribute %u", attributes[i]);
                 continue;
diff --git a/mx6/libgralloc_wrapper/framebuffer.cpp b/mx6/libgralloc_wrapper/framebuffer.cpp
index e7ecad8..6f62cd6 100755
--- a/mx6/libgralloc_wrapper/framebuffer.cpp
+++ b/mx6/libgralloc_wrapper/framebuffer.cpp
@@ -450,7 +450,7 @@ static void fb_device_init(private_module_t* m, fb_context_t *dev)
 	const_cast<int&>(dev->device.format) = HAL_PIXEL_FORMAT_RGB_565;
     }
     else{
-	const_cast<int&>(dev->device.format) = HAL_PIXEL_FORMAT_RGBX_8888;
+	const_cast<int&>(dev->device.format) = HAL_PIXEL_FORMAT_RGBA_8888;
     }
     const_cast<float&>(dev->device.xdpi) = m->xdpi;
     const_cast<float&>(dev->device.ydpi) = m->ydpi;
-- 
1.8.0

