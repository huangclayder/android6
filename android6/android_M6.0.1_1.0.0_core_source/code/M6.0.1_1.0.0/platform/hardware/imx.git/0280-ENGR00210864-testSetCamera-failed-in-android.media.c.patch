From 18b94fe18f73e9557c4848725160d550e26804f6 Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Fri, 25 May 2012 13:59:16 +0800
Subject: [PATCH 280/635] ENGR00210864 testSetCamera failed in
 android.media.cts.MediaRecorderTest

Buffer allocation for recorder may be later than storeMetaDataInBuffers
Update the direct input buffer arrary with right phy/len

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 mx6/libcamera/CameraHal.cpp | 67 ++++++++++++++++++++++++++-------------------
 mx6/libcamera/CameraHal.h   |  4 ++-
 2 files changed, 42 insertions(+), 29 deletions(-)

diff --git a/mx6/libcamera/CameraHal.cpp b/mx6/libcamera/CameraHal.cpp
index bc71869..e8c3c4e 100755
--- a/mx6/libcamera/CameraHal.cpp
+++ b/mx6/libcamera/CameraHal.cpp
@@ -74,7 +74,7 @@ namespace android {
         mCameraReady(false),
         mCaptureDeviceOpen(false),
         mPPDeviceNeed(false),
-	bDerectInput(false),
+        bDirectInput(false),
         mCameraid(cameraid),
         mPPDeviceNeedForPic(false),
         mPowerLock(false),
@@ -894,33 +894,42 @@ namespace android {
         return mPreviewRunning;
     }
 
-    status_t CameraHal::storeMetaDataInBuffers(bool enable)
+    //update buffer for direct input in video recorder
+    status_t CameraHal::updateDirectInput(bool bDirect)
     {
-        CAMERA_HAL_LOG_FUNC;
         unsigned int i;
+        if (bDirect == true) {
+            if (!mPPDeviceNeed){
+                if(mCaptureBufNum <= 0)
+                    CAMERA_HAL_LOG_INFO("mCaptureBuf not allocated yet, will register it later");
+                
+                for(i = 0 ; i < mCaptureBufNum; i ++) {
+                    mVideoBufferPhy[i].phy_offset = mCaptureBuffers[i].phy_offset;
+                    CAMERA_HAL_LOG_INFO("Camera HAL physic address: %x", mCaptureBuffers[i].phy_offset);
+                    mVideoBufferPhy[i].length = mCaptureBuffers[i].length;
+                    memcpy((unsigned char*)mVideoMemory->data + i*mPreviewFrameSize,
+                        (void*)&mVideoBufferPhy[i], sizeof(VIDEOFRAME_BUFFER_PHY));
+                }
+            }else{
+                for(i = 0 ; i < mPPbufNum; i ++) {
+                    mVideoBufferPhy[i].phy_offset = mPPbuf[i].phy_offset;
+                    CAMERA_HAL_LOG_INFO("Camera HAL physic address: %x", mPPbuf[i].phy_offset);
+                    mVideoBufferPhy[i].length = mPPbuf[i].length;
+                    memcpy((unsigned char*)mVideoMemory->data + i*mPreviewFrameSize,
+                    (void*)&mVideoBufferPhy[i], sizeof(VIDEOFRAME_BUFFER_PHY));
+                }
+            }
+        }
 
-	bDerectInput = enable;
-	if (bDerectInput == true) {
-		if (!mPPDeviceNeed){
-			for(i = 0 ; i < mCaptureBufNum; i ++) {
-				mVideoBufferPhy[i].phy_offset = mCaptureBuffers[i].phy_offset;
-				CAMERA_HAL_LOG_INFO("Camera HAL physic address: %p", mCaptureBuffers[i].phy_offset);
-				mVideoBufferPhy[i].length = mCaptureBuffers[i].length;
-				memcpy((unsigned char*)mVideoMemory->data + i*mPreviewFrameSize,
-						(void*)&mVideoBufferPhy[i], sizeof(VIDEOFRAME_BUFFER_PHY));
-			}
-		}else{
-			for(i = 0 ; i < mPPbufNum; i ++) {
-				mVideoBufferPhy[i].phy_offset = mPPbuf[i].phy_offset;
-				CAMERA_HAL_LOG_INFO("Camera HAL physic address: %p", mPPbuf[i].phy_offset);
-				mVideoBufferPhy[i].length = mPPbuf[i].length;
-				memcpy((unsigned char*)mVideoMemory->data + i*mPreviewFrameSize,
-						(void*)&mVideoBufferPhy[i], sizeof(VIDEOFRAME_BUFFER_PHY));
-			}
-		}
-	}
+        return NO_ERROR;
+    }
 
-	return NO_ERROR;
+    status_t CameraHal::storeMetaDataInBuffers(bool enable)
+    {
+        CAMERA_HAL_LOG_FUNC;
+        bDirectInput = enable;
+        updateDirectInput(enable);
+        return NO_ERROR;
     }
 #if 0
     int32_t CameraHal::getNumberOfVideoBuffers() const
@@ -958,7 +967,7 @@ namespace android {
         }
         
            
-        if (bDerectInput == true) {
+        if (bDirectInput == true) {
             for(i = 0; i < mVideoBufNume; i++) {
                 mVideoBufferUsing[i] = 0;
             }
@@ -992,7 +1001,7 @@ namespace android {
         index = ((size_t)mem - (size_t)mVideoMemory->data) / mPreviewFrameSize;
         mVideoBufferUsing[index] = 0;
 
-        if (bDerectInput == true) {
+        if (bDirectInput == true) {
             if(mCaptureBuffers[index].refCount == 0) {
                 CAMERA_HAL_ERR("warning:%s about to release mCaptureBuffers[%d].refcount=%d-", __FUNCTION__, index, mCaptureBuffers[index].refCount);
                 return;
@@ -2311,7 +2320,7 @@ Pic_out:
 
                 if ((mMsgEnabled & CAMERA_MSG_VIDEO_FRAME) && mRecordRunning) {
                     nsecs_t timeStamp = systemTime(SYSTEM_TIME_MONOTONIC);
-                    if (bDerectInput == true) {
+                    if (bDirectInput == true) {
 	                    memcpy((unsigned char*)mVideoMemory->data + enc_index*mPreviewFrameSize,
                             (void*)&mVideoBufferPhy[enc_index], sizeof(VIDEOFRAME_BUFFER_PHY));
                     } else {
@@ -2371,7 +2380,9 @@ Pic_out:
         //    mVideoBuffers[i] = new MemoryBase(mVideoHeap,
         //            mPreviewFrameSize * i, mPreviewFrameSize);
         //}
-
+        
+        //Make sure the buffer been updated for direct input
+        updateDirectInput(bDirectInput);
         return ret;
     }
 
diff --git a/mx6/libcamera/CameraHal.h b/mx6/libcamera/CameraHal.h
index 9d3a226..7dd0a60 100755
--- a/mx6/libcamera/CameraHal.h
+++ b/mx6/libcamera/CameraHal.h
@@ -282,6 +282,8 @@ namespace android {
         void SearchBuffer(void *pNativeBuf, unsigned int *pIndex);
         status_t freeBuffersToNativeWindow();
         status_t PrepareCaptureBufs();
+        status_t updateDirectInput(bool bDirect);
+
         volatile bool isCaptureBufsAllocated;
         //volatile bool isPreviewFinsh;
         status_t convertStringToPreviewFormat(unsigned int *pFormat);
@@ -404,7 +406,7 @@ namespace android {
         bool mPreviewStopped;
         bool mRecordStopped;
         bool mPowerLock;
-	bool bDerectInput;
+        bool bDirectInput;
         int mCameraid;
 
         int error_status;
-- 
1.8.0

