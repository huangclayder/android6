From 19a4700312b6965ba9fa04c9db5e2813fc75abfc Mon Sep 17 00:00:00 2001
From: Liu Xiaowen <b37945@freescale.com>
Date: Fri, 9 Dec 2011 15:18:08 +0800
Subject: [PATCH 222/635] ENGR00169894 make hwcomposer support dual video.

make hwcomposer support dual video.

Signed-off-by: Liu Xiaowen <b37945@freescale.com>
---
 mx6/hwcomposer/BG_device.cpp  |  4 +--
 mx6/hwcomposer/FG_device.cpp  | 32 +++++++-----------
 mx6/hwcomposer/blit_ipu.cpp   | 77 +++++++++++++++++++++++++++++++++++++++----
 mx6/hwcomposer/hwc_common.cpp | 29 ++++++++++++++++
 mx6/hwcomposer/hwc_common.h   |  7 +++-
 mx6/hwcomposer/hwcomposer.cpp | 49 +++++++++++++++++++++------
 6 files changed, 157 insertions(+), 41 deletions(-)

diff --git a/mx6/hwcomposer/BG_device.cpp b/mx6/hwcomposer/BG_device.cpp
index 7826449..226725e 100755
--- a/mx6/hwcomposer/BG_device.cpp
+++ b/mx6/hwcomposer/BG_device.cpp
@@ -70,8 +70,8 @@ int BG_device::init()
     
    // m_left = 0;
    // m_top = 0;
-    m_width = 1920;//info.xres;
-    m_height = 1080;//info.yres;
+    m_width = info.xres;
+    m_height = info.yres;
     m_format = fourcc('R', 'G', 'B', 'P');//('U', 'Y', 'V', 'Y');
   	
   	info.reserved[0] = 0;
diff --git a/mx6/hwcomposer/FG_device.cpp b/mx6/hwcomposer/FG_device.cpp
index 66aae30..68564b6 100755
--- a/mx6/hwcomposer/FG_device.cpp
+++ b/mx6/hwcomposer/FG_device.cpp
@@ -158,7 +158,7 @@ int FG_device::init()
     int status = -EINVAL;
     int fbSize = 0;
     void *vaddr = NULL;
-HWCOMPOSER_LOG_RUNTIME("---------------FG_device::init()------------");
+    HWCOMPOSER_LOG_RUNTIME("---------------FG_device::init()------------");
     if(m_dev <= 0) {
         HWCOMPOSER_LOG_ERR("Error! FG_device::FG_init() invalid parameter!");
         return -1;
@@ -167,33 +167,26 @@ HWCOMPOSER_LOG_RUNTIME("---------------FG_device::init()------------");
     //fist open fb0 device that it is binded to.
     //it may be modified in mx6x
     int fd_def = -1;
-    int fd_fb1 = -1;
     if(m_usage & GRALLOC_USAGE_HWC_OVERLAY_DISP0) {
-HWCOMPOSER_LOG_RUNTIME("-------------FG_device::init()---open fb0-------------");
+            HWCOMPOSER_LOG_RUNTIME("-------------FG_device::init()---open fb0-------------");
 	    fd_def = open(DEFAULT_FB_DEV_NAME, O_RDWR | O_NONBLOCK, 0);
 	    if(fd_def < 0) {
 	    	  HWCOMPOSER_LOG_ERR("Error! Open fb device %s failed!", DEFAULT_FB_DEV_NAME);
 	    	  return -1;
 	    }
-			fd_fb1 = open(FB2_DEV_NAME, O_RDWR | O_NONBLOCK, 0);
-	    if(fd_fb1 < 0) {
-	    	  HWCOMPOSER_LOG_ERR("Error! Open fb device %s failed!", FB1_DEV_NAME);
-	    	  return -1;
-	    }
-
-  	}
-    else if(m_usage & GRALLOC_USAGE_HWC_OVERLAY_DISP1) {
+    }
+    else if(m_usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2) {
+            HWCOMPOSER_LOG_RUNTIME("-------------FG_device::init()---open fb2-------------");
 	    fd_def = open(FB2_DEV_NAME, O_RDWR | O_NONBLOCK, 0);
 	    if(fd_def < 0) {
-	    	  HWCOMPOSER_LOG_ERR("Error! Open fb device %s failed!", FB1_DEV_NAME);
+	    	  HWCOMPOSER_LOG_ERR("Error! Open fb device %s failed!", FB2_DEV_NAME);
 	    	  return -1;
 	    }
-			fd_fb1 = open(DEFAULT_FB_DEV_NAME, O_RDWR | O_NONBLOCK, 0);
-	    if(fd_fb1 < 0) {
-	    	  HWCOMPOSER_LOG_ERR("Error! Open fb device %s failed!", DEFAULT_FB_DEV_NAME);
-	    	  return -1;
-	    }
-  	}
+    }
+    else {
+         HWCOMPOSER_LOG_ERR("Error! %s does not support usage=0x%x!", __FUNCTION__, m_usage);
+         return -1;
+    }
   	//it may be modified in mx6x
 
 //    status = overlay_switch(fd_def, fd_fb1, m_dev, m_usage);
@@ -222,8 +215,6 @@ HWCOMPOSER_LOG_RUNTIME("-------------FG_device::init()---open fb0-------------")
     	  return -1;
     }
 
-   // m_left = 0;
-   // m_top = 0;
     m_width = def_info.xres;//info.xres;
     m_height = def_info.yres;//info.yres;
     m_format = fourcc('U', 'Y', 'V', 'Y');
@@ -287,7 +278,6 @@ HWCOMPOSER_LOG_RUNTIME("-------------FG_device::init()---open fb0-------------")
   	//do it after switch fb2 to fb1 or fb0
   	//status = switch_set(fd_def, fd_fb1, m_usage);
   	close(fd_def);
-  	close(fd_fb1);
 
   	mbuffer_count = DEFAULT_BUFFERS;
   	mbuffer_cur = 0;
diff --git a/mx6/hwcomposer/blit_ipu.cpp b/mx6/hwcomposer/blit_ipu.cpp
index ee777c3..a234b7a 100755
--- a/mx6/hwcomposer/blit_ipu.cpp
+++ b/mx6/hwcomposer/blit_ipu.cpp
@@ -22,6 +22,7 @@
 
 #include <cutils/log.h>
 #include <cutils/atomic.h>
+#include <cutils/properties.h>
 
 #include <hardware/hwcomposer.h>
 
@@ -123,6 +124,8 @@ static void dump_ipu_task(struct ipu_task *t)
 int blit_ipu::blit(hwc_layer_t *layer, hwc_buffer *out_buf)
 {
 	  int status = -EINVAL;
+          char value[10];
+          int hdmi_full_screen = 0;
 	  if(mIpuFd < 0 || layer == NULL || out_buf == NULL){
 	  	  HWCOMPOSER_LOG_ERR("Error!invalid parameters!");
 	  	  return status;
@@ -170,13 +173,72 @@ int blit_ipu::blit(hwc_layer_t *layer, hwc_buffer *out_buf)
     mTask.input.paddr = handle->phys;
     //out_buf should has width and height to be checked with the display_frame.
     mTask.output.format = out_buf->format;//v4l2_fourcc('U', 'Y', 'V', 'Y');
-    if(out_buf->usage & GRALLOC_USAGE_DISPLAY_MASK) {
+
+    property_get("sys.HDMI_FULL_SCREEN", value, "");
+    if(strcmp(value, "1") == 0) {
+        hdmi_full_screen = 1;
+    }
+    else {
+        hdmi_full_screen = 0;
+    }
+
+    if(out_buf->usage & GRALLOC_USAGE_DISPLAY_MASK || (hdmi_full_screen && 
+                        (out_buf->usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2))) { 
 	    mTask.output.width = out_buf->width;
 	    mTask.output.height = out_buf->height;
-		mTask.output.crop.pos.x = 0;
-		mTask.output.crop.pos.y = 0;
-		mTask.output.crop.w = out_buf->width;
-		mTask.output.crop.h = out_buf->height;
+	    mTask.output.crop.pos.x = 0;
+	    mTask.output.crop.pos.y = 0;
+	    mTask.output.crop.w = out_buf->width;
+	    mTask.output.crop.h = out_buf->height;
+    }
+    else if((out_buf->usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2) && 
+               (out_buf->width != m_def_disp_w || out_buf->height!= m_def_disp_h)){
+            int def_w,def_h;
+            int dst_w = out_buf->width;
+            int dst_h = out_buf->height;
+
+            mTask.output.width = out_buf->width;//disp_frame->right - disp_frame->left;
+            mTask.output.height = out_buf->height;//disp_frame->bottom - disp_frame->top;
+
+            if(layer->transform == 0 || layer->transform == 3)
+            {
+                 def_w = m_def_disp_w;
+                 def_h = m_def_disp_h;
+
+                 mTask.output.crop.pos.x = (disp_frame->left >> 3) << 3;
+                 mTask.output.crop.pos.y = (disp_frame->top >> 3) << 3;
+                 mTask.output.crop.w = ((disp_frame->right - disp_frame->left) >> 3) << 3;
+                 mTask.output.crop.h = ((disp_frame->bottom - disp_frame->top) >> 3) << 3;
+            }
+            else
+            {
+                 def_w = m_def_disp_h;
+                 def_h = m_def_disp_w;
+
+                 mTask.output.crop.pos.y = (disp_frame->left >> 3) << 3;
+                 mTask.output.crop.pos.x = (disp_frame->top >> 3) << 3;
+                 mTask.output.crop.h = ((disp_frame->right - disp_frame->left) >> 3) << 3;
+                 mTask.output.crop.w = ((disp_frame->bottom - disp_frame->top) >> 3) << 3;
+             }
+             if(dst_w >= dst_h*def_w/def_h){
+                 dst_w = dst_h*def_w/def_h;
+             }
+             else{
+                 dst_h = dst_w*def_h/def_w;
+             }
+
+            mTask.output.crop.pos.x = mTask.output.crop.pos.x * dst_w / def_w;
+            mTask.output.crop.pos.y = mTask.output.crop.pos.y * dst_h / def_h;
+            mTask.output.crop.w = mTask.output.crop.w * dst_w / def_w;
+            mTask.output.crop.h = mTask.output.crop.h * dst_h / def_h;
+            mTask.output.crop.pos.x += (out_buf->width - dst_w) >> 1;
+            mTask.output.crop.pos.y += (out_buf->height - dst_h) >> 1;
+
+            mTask.output.crop.pos.x = (mTask.output.crop.pos.x >> 3) << 3;
+            mTask.output.crop.pos.y = (mTask.output.crop.pos.y >> 3) << 3;
+            mTask.output.crop.w = (mTask.output.crop.w >> 3) << 3;
+            mTask.output.crop.h = (mTask.output.crop.h >> 3) << 3;
+            mTask.output.rotate = layer->transform;
     }
     else {
 	    mTask.output.width = out_buf->width;//disp_frame->right - disp_frame->left;
@@ -185,8 +247,9 @@ int blit_ipu::blit(hwc_layer_t *layer, hwc_buffer *out_buf)
 	    mTask.output.crop.pos.y = (disp_frame->top >> 3) << 3;
 	    mTask.output.crop.w = ((disp_frame->right - disp_frame->left) >> 3) << 3;
 	    mTask.output.crop.h = ((disp_frame->bottom - disp_frame->top) >> 3) << 3;
-  	}
-    mTask.output.rotate = layer->transform;
+            mTask.output.rotate = layer->transform;
+    }
+    //mTask.output.rotate = layer->transform;
     mTask.output.paddr = out_buf->phy_addr;
     int ret = IPU_CHECK_ERR_INPUT_CROP; 
     
diff --git a/mx6/hwcomposer/hwc_common.cpp b/mx6/hwcomposer/hwc_common.cpp
index e34a24e..8ef17df 100755
--- a/mx6/hwcomposer/hwc_common.cpp
+++ b/mx6/hwcomposer/hwc_common.cpp
@@ -230,3 +230,32 @@ int output_dev_close(output_device *dev)
   	
   	return 0;
 }
+
+blit_device::blit_device()
+{
+        int fd_def;
+
+        m_def_disp_w = 0;
+        m_def_disp_h = 0;
+
+        fd_def = open(DEFAULT_FB_DEV_NAME, O_RDWR | O_NONBLOCK, 0);
+
+        if(fd_def < 0) {
+          HWCOMPOSER_LOG_ERR("Error! Open fb device %s failed!", DEFAULT_FB_DEV_NAME);
+          return;
+        }
+
+        struct fb_var_screeninfo def_info;
+        if(ioctl(fd_def, FBIOGET_VSCREENINFO, &def_info) < 0) {
+          HWCOMPOSER_LOG_ERR("Error! FG_device::init VSCREENINFO def getting failed!");
+          return;
+        }
+
+        m_def_disp_w = def_info.xres;
+        m_def_disp_h = def_info.yres;
+
+        close(fd_def);
+
+        return;
+}
+
diff --git a/mx6/hwcomposer/hwc_common.h b/mx6/hwcomposer/hwc_common.h
index 7895e6e..c21e05d 100755
--- a/mx6/hwcomposer/hwc_common.h
+++ b/mx6/hwcomposer/hwc_common.h
@@ -56,6 +56,7 @@
 #define DEFAULT_FB_DEV_NAME "/dev/graphics/fb0"
 #define FB1_DEV_NAME "/dev/graphics/fb1"
 #define FB2_DEV_NAME "/dev/graphics/fb2"
+#define FB3_DEV_NAME "/dev/graphics/fb3"
 #define V4L_DEV_NAME "/dev/video16"
 #define MAX_OUTPUT_DISPLAY  10
 
@@ -213,8 +214,12 @@ class blit_device{
 public:
 		static int isIPUDevice(const char *dev_name);
 		static int isGPUDevice(const char *dev_name);
-    virtual int blit(hwc_layer_t *layer, hwc_buffer *out_buf) = 0;
+    		virtual int blit(hwc_layer_t *layer, hwc_buffer *out_buf) = 0;
+		blit_device();
 		virtual ~blit_device(){}
+
+                int m_def_disp_w;
+                int m_def_disp_h;
 };
 
 //int FG_init(struct output_device *dev);
diff --git a/mx6/hwcomposer/hwcomposer.cpp b/mx6/hwcomposer/hwcomposer.cpp
index 5649be3..1ae5c6c 100755
--- a/mx6/hwcomposer/hwcomposer.cpp
+++ b/mx6/hwcomposer/hwcomposer.cpp
@@ -44,6 +44,7 @@ struct hwc_context_t {
     int display_mode;
     char ui_refresh;
     char vd_refresh;
+    int second_display;
 
     hwc_composer_device_t* viv_hwc;
 };
@@ -92,17 +93,26 @@ static int hwc_check_property(hwc_context_t *dev)
         property_set("sys.VIDEO_OVERLAY_DISPLAY", "0");
         property_set("sys.VIDEO_DISPLAY", "1");
     }
-    else
+    else if (strcmp(value, "0") == 0)
     {
        property_set("sys.VIDEO_OVERLAY_DISPLAY", "1");
        property_set("sys.VIDEO_DISPLAY", "0");
     }
+
     property_get("sys.SECOND_DISPLAY_ENABLED", value, "");
     if (strcmp(value, "1") == 0) {
        property_set("sys.VIDEO_OVERLAY_DISPLAY", "2");
        property_set("sys.VIDEO_DISPLAY", "0");
-    } else
+       dev->display_mode &= ~(DISPLAY_MODE_OVERLAY_DISP0 | DISPLAY_MODE_OVERLAY_DISP1 |
+                              DISPLAY_MODE_OVERLAY_DISP2 | DISPLAY_MODE_OVERLAY_DISP3);
+       dev->display_mode |= DISPLAY_MODE_OVERLAY_DISP0;
+       dev->display_mode |= DISPLAY_MODE_OVERLAY_DISP2;
+       dev->second_display = 1;
+       return 0;
+    } 
+    else if (strcmp(value, "0") == 0)
     {
+       dev->second_display = 0;
        property_set("sys.VIDEO_OVERLAY_DISPLAY", "1");
        property_set("sys.VIDEO_DISPLAY", "0");
     }
@@ -122,7 +132,7 @@ static int hwc_check_property(hwc_context_t *dev)
         dev->display_mode |= DISPLAY_MODE_OVERLAY_DISP1;
     }
 
-		if (strcmp(value, "3") == 0){
+    if (strcmp(value, "3") == 0){
         dev->display_mode |= DISPLAY_MODE_OVERLAY_DISP2;
     }
     else if (strcmp(value, "4") == 0){
@@ -141,6 +151,7 @@ static int hwc_check_property(hwc_context_t *dev)
     if (strcmp(value, "2") == 0){
         dev->display_mode |= DISPLAY_MODE_DISP2;
     }
+    //HWCOMPOSER_LOG_ERR("************dev->display_mode=%x", dev->display_mode);
 	return 0;
 }
 
@@ -150,8 +161,8 @@ static int hwc_modify_property(hwc_context_t *dev, private_handle_t *handle)
 
     if(dev->display_mode & DISPLAY_MODE_DISP1){
             handle->usage |= GRALLOC_USAGE_HWC_DISP1;
-            //dev->display_mode &= ~DISPLAY_MODE_DISP1;
-			return 0;
+            dev->display_mode &= ~DISPLAY_MODE_DISP1;
+	    //return 0;
     }
 
     if(dev->display_mode & DISPLAY_MODE_DISP2)
@@ -169,7 +180,7 @@ static int hwc_modify_property(hwc_context_t *dev, private_handle_t *handle)
 	else if(dev->display_mode & DISPLAY_MODE_OVERLAY_DISP3)
 			handle->usage |= GRALLOC_USAGE_HWC_OVERLAY_DISP3;
 
-//HWCOMPOSER_LOG_ERR("************handle->usage=%x", handle->usage);
+    //HWCOMPOSER_LOG_ERR("************handle->usage=%x", handle->usage);
 	return 0;
 }
 
@@ -221,7 +232,7 @@ static int findOutputDevice(struct hwc_context_t *ctx, int *index, int usage, in
 		}
 	}
 	if(ufg != NULL)
-		*ufg |= uFlag;
+		*ufg = uFlag;
 
 	return (*ufg) ^ usage;
 }
@@ -250,8 +261,19 @@ static void deleteEmtpyIndex(struct hwc_context_t *ctx)
 	}
 }
 
-static char* getDeviceName(int usage, int *pUse)
+static char* getDeviceName(hwc_context_t *dev, int usage, int *pUse)
 {
+    if(dev->second_display) {
+        if(usage & GRALLOC_USAGE_HWC_OVERLAY_DISP0) {
+            *pUse = GRALLOC_USAGE_HWC_OVERLAY_DISP0;
+            return (char *)FB1_DEV_NAME;
+        }
+        if(usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2) {
+            *pUse = GRALLOC_USAGE_HWC_OVERLAY_DISP2;
+            return (char *)FB3_DEV_NAME;
+        }
+    }
+
     if(usage & GRALLOC_USAGE_HWC_DISP1){
     		*pUse = GRALLOC_USAGE_HWC_DISP1;
     		return (char *)FB2_DEV_NAME;
@@ -265,6 +287,11 @@ static char* getDeviceName(int usage, int *pUse)
         return (char *)FB1_DEV_NAME;
     }//end else if
 
+    if(usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2) {
+            *pUse = GRALLOC_USAGE_HWC_OVERLAY_DISP2;
+            return (char *)FB3_DEV_NAME;
+    }
+
     return NULL;
 }
 
@@ -339,7 +366,7 @@ static int hwc_prepare(hwc_composer_device_t *dev, hwc_layer_list_t* list) {
     if(ctx) {
         if(ctx->viv_hwc)
             ctx->viv_hwc->prepare(ctx->viv_hwc, list);
-	hwc_check_property(ctx);
+	//hwc_check_property(ctx);
     } 
     if (list && dev) {
         for (size_t i=0 ; i<list->numHwLayers ; i++) {
@@ -363,6 +390,7 @@ static int hwc_prepare(hwc_composer_device_t *dev, hwc_layer_list_t* list) {
             	continue;
             }
             HWCOMPOSER_LOG_RUNTIME("<<<<<<<<<<<<<<<hwc_prepare---3>usage=%x, phy=%x>>>>>>>>>>>>>>>>\n", handle->usage, handle->phys);
+            hwc_check_property(ctx);
 	    layer->compositionType = HWC_OVERLAY;
 	    //if(handle->usage & GRALLOC_USAGE_HWC_DISP1)
 	    //handle the display frame position for tv out.
@@ -383,7 +411,7 @@ static int hwc_prepare(hwc_composer_device_t *dev, hwc_layer_list_t* list) {
             while(retv && m_usage) {
 		    int ruse = 0;
 		    char *dev_name = NULL;
-		    dev_name = getDeviceName(m_usage, &ruse);
+		    dev_name = getDeviceName(ctx, m_usage, &ruse);
 	            m_usage &= ~ruse;
 	            HWCOMPOSER_LOG_RUNTIME("<<<<<<<<<<<<<<<hwc_prepare---4>>>>>>>>>>>>>>>>>\n");
 	            if(dev_name == NULL) {
@@ -528,6 +556,7 @@ static int hwc_set(hwc_composer_device_t *dev,
     		output_device *outdev = NULL;
     		int index = 0;
         	retv = findOutputDevice(ctx, &index, i_usage, &m_usage);
+                i_usage &= ~m_usage;
                 if((index >= 0) && (index < MAX_OUTPUT_DISPLAY)) {
                     outdev = ctx->m_out[index];
                 }else {
-- 
1.8.0

