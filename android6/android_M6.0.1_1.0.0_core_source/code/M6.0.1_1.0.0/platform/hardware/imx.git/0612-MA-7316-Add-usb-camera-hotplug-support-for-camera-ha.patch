From a1ac04a0794f0e27b19d24bf9cac89d3a97f0851 Mon Sep 17 00:00:00 2001
From: Xiaowen Liu <xiaowen.liu@freescale.com>
Date: Thu, 26 Nov 2015 08:37:36 -0500
Subject: [PATCH 612/635] MA-7316 Add usb camera hotplug support for camera
 hal v3.

Add Hotplug thread in CameraHAL to handle hotplug event.
Back and Front camera both support hotplug when configured as USB Camera.
USB Camera count on camera number even it is absent.
Refine some code to support resource release.
Add onCaptureError function to handle dequeue buffer error case.

Signed-off-by: Xiaowen Liu <xiaowen.liu@freescale.com>
---
 mx6/libcamera3/Android.mk       |   3 +-
 mx6/libcamera3/Camera.cpp       |   2 +
 mx6/libcamera3/Camera.h         |   1 +
 mx6/libcamera3/CameraHAL.cpp    | 367 ++++++++++++++++++++++++++++------------
 mx6/libcamera3/CameraHAL.h      |  65 ++++++-
 mx6/libcamera3/CameraUtils.cpp  |  25 +++
 mx6/libcamera3/CameraUtils.h    |  21 +++
 mx6/libcamera3/DeviceStream.cpp |  16 +-
 mx6/libcamera3/DeviceStream.h   |   2 +
 mx6/libcamera3/UvcDevice.h      |   1 +
 10 files changed, 385 insertions(+), 118 deletions(-)

diff --git a/mx6/libcamera3/Android.mk b/mx6/libcamera3/Android.mk
index d561faa..3f5028a 100644
--- a/mx6/libcamera3/Android.mk
+++ b/mx6/libcamera3/Android.mk
@@ -65,7 +65,8 @@ LOCAL_SHARED_LIBRARIES := \
     libg2d \
     libbinder \
     lib_vpu_wrapper \
-    libcamera_client
+    libcamera_client \
+    libhardware_legacy
 
 LOCAL_CFLAGS += -Wall -Wextra -fvisibility=hidden
 
diff --git a/mx6/libcamera3/Camera.cpp b/mx6/libcamera3/Camera.cpp
index 3051507..de25a4d 100644
--- a/mx6/libcamera3/Camera.cpp
+++ b/mx6/libcamera3/Camera.cpp
@@ -119,6 +119,7 @@ Camera::Camera(int32_t id, int32_t facing, int32_t orientation, char* path)
 
 Camera::~Camera()
 {
+    ALOGI("%s:%d: destroy camera device", __func__, mId);
     android::Mutex::Autolock al(mDeviceLock);
     if (mStaticInfo != NULL) {
         free_camera_metadata(mStaticInfo);
@@ -126,6 +127,7 @@ Camera::~Camera()
 
     if (mDeviceStream != NULL) {
         mDeviceStream.clear();
+        mDeviceStream = NULL;
     }
 }
 
diff --git a/mx6/libcamera3/Camera.h b/mx6/libcamera3/Camera.h
index 7051ff9..fae4876 100644
--- a/mx6/libcamera3/Camera.h
+++ b/mx6/libcamera3/Camera.h
@@ -48,6 +48,7 @@ public:
     int32_t openDev(const hw_module_t *module, hw_device_t **device);
     int32_t getInfo(struct camera_info *info);
     int32_t closeDev();
+    virtual bool isHotplug() {return false;}
 
     // Camera v3 Device Operations (see <hardware/camera3.h>)
     int32_t initializeDev(const camera3_callback_ops_t *callback_ops);
diff --git a/mx6/libcamera3/CameraHAL.cpp b/mx6/libcamera3/CameraHAL.cpp
index 379b12c..f5ad886 100644
--- a/mx6/libcamera3/CameraHAL.cpp
+++ b/mx6/libcamera3/CameraHAL.cpp
@@ -62,49 +62,186 @@
  * structure and functions used by the framework to load and interface to this
  * HAL, as well as the handles to the individual camera devices.
  */
-
+#define BACK_CAMERA_ID 0
+#define FRONT_CAMERA_ID 1
+#define CAMERA_PLUG_EVENT "video4linux/video"
+#define CAMERA_PLUG_ADD "add@"
+#define CAMERA_PLUG_REMOVE "remove@"
 // Default Camera HAL has 2 cameras, front and rear.
 static CameraHAL gCameraHAL;
 // Handle containing vendor tag functionality
 static VendorTags gVendorTags;
 
+/** Note:
+ * camera sensors are configured in init.rc.
+ * camera count depends on camera configuration.
+ * Back and Front camera both support hotplug when configured as USB Camera.
+ */
+
 CameraHAL::CameraHAL()
-  : mNumberOfCameras(0),
+  : mCameraCount(0),
     mCallbacks(NULL)
 {
     // Allocate camera array and instantiate camera devices
     mCameras = new Camera*[MAX_CAMERAS];
+    memset(mSets, 0, sizeof(mSets));
 
-    // Rear camera
-    mCameras[0] = createCamera(0, true);
-    if (mCameras[0] != NULL) {
-        mNumberOfCameras++;
-        // Front camera
-        mCameras[1] = createCamera(1, false);
-        if (mCameras[1] != NULL) {
-            mNumberOfCameras++;
+    // enumerate all camera sensors.
+    enumSensorSet();
+
+    // check if camera exists.
+    for (int32_t index=0; index<MAX_CAMERAS; index++) {
+        if (!mSets[index].mExisting) {
+            // count on usb camera if set in init.rc.
+            if (strstr(mSets[index].mPropertyName, UVC_SENSOR_NAME)) {
+                mCameraCount++;
+            }
+            continue;
+        }
+        mCameras[index] = Camera::createCamera(index, mSets[index].mSensorName,
+                                mSets[index].mFacing, mSets[index].mOrientation,
+                                mSets[index].mDevPath);
+
+        if (mCameras[index] == NULL) {
+            // camera sensor is not supported now.
+            // So, camera count should not change.
+            ALOGW("Error: camera:%d, %s create failed", index,
+                                 mSets[index].mSensorName);
+        }
+        else {
+            mCameraCount++;
         }
     }
+    ALOGI("camera number is %d", mCameraCount);
+
+    mHotplugThread = new HotplugThread(this);
 }
 
 CameraHAL::~CameraHAL()
 {
-    for (int32_t i = 0; i < mNumberOfCameras; i++) {
-        delete mCameras[i];
+    for (int32_t i = 0; i < mCameraCount; i++) {
+        if (mCameras[i] != NULL) {
+            delete mCameras[i];
+        }
     }
     delete [] mCameras;
 }
 
+int32_t CameraHAL::handleCameraConnected(char* uevent)
+{
+    for (int32_t index = 0; index < mCameraCount; index++) {
+        // sensor is absent then to check it.
+        if (!mSets[index].mExisting) {
+            // match sensor according to property set.
+            enumSensorNode(index);
+            if (!mSets[index].mExisting) {
+                ALOGI("sensor plug event:%s enumerate failed", uevent);
+                continue;
+            }
+
+            mCameras[index] = Camera::createCamera(index,
+                    mSets[index].mSensorName, mSets[index].mFacing,
+                    mSets[index].mOrientation, mSets[index].mDevPath);
+            if (mCameras[index] == NULL) {
+                // camera sensor is not supported now.
+                ALOGE("Error: camera %s, %s create failed",
+                        mSets[index].mSensorName, uevent);
+                return 0;
+            }
+
+            struct camera_info info;
+            //get camera static information.
+            mCameras[index]->getInfo(&info);
+            //notify framework camera status changed.
+            mCallbacks->camera_device_status_change(mCallbacks, index,
+                    CAMERA_DEVICE_STATUS_PRESENT);
+            return 0;
+        }
+    }
+
+    return 0;
+}
+
+int32_t CameraHAL::handleCameraDisonnected(char* uevent)
+{
+    char* devPath = NULL;
+    for (int32_t index = 0; index < mCameraCount; index++) {
+        devPath = strstr(mSets[index].mDevPath, "video");
+        if ((devPath != NULL) && strstr(uevent, devPath)) {
+            if (mCameras[index] == NULL) {
+                ALOGW("camera:%d disconnected but without object", index);
+                mSets[index].mExisting = false;
+                return 0;
+            }
+
+            // only camera support hotplug can be removed.
+            if (!mCameras[index]->isHotplug()) {
+                ALOGW("camera %d, name:%s on board can't disconnect",
+                        index, mSets[index].mSensorName);
+                return 0;
+            }
+
+            // notify framework camera status changed.
+            mCallbacks->camera_device_status_change(mCallbacks, index,
+                    CAMERA_DEVICE_STATUS_NOT_PRESENT);
+            delete mCameras[index];
+            mCameras[index] = NULL;
+            mSets[index].mExisting = false;
+        }
+    }
+
+    return 0;
+}
+
+int32_t CameraHAL::handleThreadHotplug()
+{
+    /**
+     * check camera connection status change, if connected, do below:
+     * 1. create camera device, add to mCameras.
+     * 2. init static info (mCameras[id]->initstaticinfo())
+     * 3. notify on_status_change callback
+     *
+     * if unconnected, similarly, do below:
+     * 1. destroy camera device and remove it from mCameras.
+     * 2. notify on_status_change callback
+     *
+     * do not have a tight polling loop here, to avoid excessive cpu utilization.
+     */
+    char uevent_desc[4096];
+    memset(uevent_desc, 0, sizeof(uevent_desc));
+    int len = uevent_next_event(uevent_desc, sizeof(uevent_desc) - 2);
+    if (strstr(uevent_desc, CAMERA_PLUG_EVENT) != NULL) {
+        ALOGI("%s uevent %s", __func__, uevent_desc);
+        if (strstr(uevent_desc, CAMERA_PLUG_ADD) != NULL) {
+            // handle camera add event.
+            handleCameraConnected(uevent_desc);
+        }
+        else if (strstr(uevent_desc, CAMERA_PLUG_REMOVE) != NULL) {
+            //handle camera remove event.
+            handleCameraDisonnected(uevent_desc);
+        }
+        else {
+            ALOGI("%s doesn't handle uevent %s", __func__, uevent_desc);
+        }
+    }
+
+    return 0;
+}
+
+void CameraHAL::handleThreadExit()
+{
+}
+
 int CameraHAL::getNumberOfCameras()
 {
-    ALOGV("%s: %d", __func__, mNumberOfCameras);
-    return mNumberOfCameras;
+    ALOGV("%s: %d", __func__, mCameraCount);
+    return mCameraCount;
 }
 
 int CameraHAL::getCameraInfo(int id, struct camera_info* info)
 {
     ALOGV("%s: camera id %d: info=%p", __func__, id, info);
-    if (id < 0 || id >= mNumberOfCameras) {
+    if ((id < 0) || (id >= mCameraCount) || (mCameras[id] == NULL)) {
         ALOGE("%s: Invalid camera id %d", __func__, id);
         return -ENODEV;
     }
@@ -133,122 +270,138 @@ int CameraHAL::openDev(const hw_module_t* mod, const char* name, hw_device_t** d
     if (*nameEnd != '\0') {
         ALOGE("%s: Invalid camera id name %s", __func__, name);
         return -EINVAL;
-    } else if (id < 0 || id >= mNumberOfCameras) {
+    } else if (id < 0 || id >= mCameraCount) {
         ALOGE("%s: Invalid camera id %d", __func__, id);
         return -ENODEV;
     }
     return mCameras[id]->openDev(mod, dev);
 }
 
-Camera* CameraHAL::createCamera(int32_t id, bool isRear)
+void CameraHAL::enumSensorSet()
 {
-    char camera_name[CAMERA_SENSOR_LENGTH], camera_prop[PROPERTY_VALUE_MAX];
-    char orientStr[CAMERA_SENSOR_LENGTH], orient_prop[PROPERTY_VALUE_MAX];
-    char devPath[CAMAERA_FILENAME_LENGTH];
-    int32_t facing, orientation;
-    bool found = false;
-
-    if (isRear) {
-        snprintf(camera_prop, PROPERTY_VALUE_MAX, "%s_%s", "back", FACE_CAMERA_NAME);
-        snprintf(orient_prop, PROPERTY_VALUE_MAX, "%s_%s", "back", FACE_CAMERA_ORIENT);
-        property_get(camera_prop, camera_name, OV5640MIPI_SENSOR_NAME);
-        facing = CAMERA_FACING_BACK;
-    }
-    else {
-        snprintf(camera_prop, PROPERTY_VALUE_MAX, "%s_%s", "front", FACE_CAMERA_NAME);
-        snprintf(orient_prop, PROPERTY_VALUE_MAX, "%s_%s", "front", FACE_CAMERA_ORIENT);
-        property_get(camera_prop, camera_name, OV5640CSI_SENSOR_NAME);
-        facing = CAMERA_FACING_FRONT;
+    // get property from init.rc mSets.
+    char orientStr[CAMERA_SENSOR_LENGTH];
+    char *pCameraName = NULL;
+    int32_t ret = 0;
+
+    ALOGI("%s", __func__);
+    // get back camera property.
+    memset(orientStr, 0, sizeof(orientStr));
+    property_get("back_camera_name", mSets[BACK_CAMERA_ID].mPropertyName, "0");
+    property_get("back_camera_orient", orientStr, "0");
+    mSets[BACK_CAMERA_ID].mOrientation = atoi(orientStr);
+    mSets[BACK_CAMERA_ID].mFacing = CAMERA_FACING_BACK;
+    mSets[BACK_CAMERA_ID].mExisting = false;
+
+    // get front camera property.
+    memset(orientStr, 0, sizeof(orientStr));
+    property_get("front_camera_name", mSets[FRONT_CAMERA_ID].mPropertyName, "0");
+    property_get("front_camera_orient", orientStr, "0");
+    mSets[FRONT_CAMERA_ID].mOrientation = atoi(orientStr);
+    mSets[FRONT_CAMERA_ID].mFacing = CAMERA_FACING_FRONT;
+    mSets[FRONT_CAMERA_ID].mExisting = false;
+
+    // make sure of back&front camera parameters.
+    for (int32_t i=0; i<MAX_CAMERAS; i++) {
+        enumSensorNode(i);
     }
-    property_get(orient_prop, orientStr, "0");
-    orientation = atoi(orientStr);
+}
+
+void CameraHAL::enumSensorNode(int index)
+{
+    char *pCameraName = NULL;
+    int32_t ret = 0;
 
-    char *pCameraName = strtok(camera_name, ",");
+    ALOGI("%s", __func__);
+    pCameraName = strtok(mSets[index].mPropertyName, ",");
     while (pCameraName != NULL) {
-        ALOGI("Checking the camera %s", pCameraName);
-        if (getDevPath(pCameraName, devPath, CAMAERA_FILENAME_LENGTH) == -1) {
+        ALOGI("Checking the camera id:%d, %s", index, pCameraName);
+        ret = matchDevPath(pCameraName, mSets[index].mDevPath, CAMAERA_FILENAME_LENGTH);
+        if (ret == -1) {
             pCameraName = strtok(NULL, ",");
             continue;
         }
+        strncpy(mSets[index].mSensorName, pCameraName, PROPERTY_VALUE_MAX);
         ALOGI("Camera ID %d: name %s, Facing %d, orientation %d, dev path %s",
-              id, pCameraName, facing, orientation,
-              devPath);
-        found = true;
+                index, mSets[index].mSensorName, mSets[index].mFacing,
+                mSets[index].mOrientation, mSets[index].mDevPath);
+        mSets[index].mExisting = true;
         break;
     }
+}
 
-    if (!found) {
-        ALOGE("can't find camera id %d, name %s", id, camera_name);
-        return NULL;
+int32_t CameraHAL::matchDevPath(const char* pName, char* pDevPath, uint32_t pathLen)
+{
+    int32_t  ret = -1;
+    int32_t  fd = -1;
+    char devNode[CAMAERA_FILENAME_LENGTH];
+    DIR *vidDir = NULL;
+    struct dirent *dirEntry;
+    struct v4l2_capability vidCap;
+    struct v4l2_dbg_chip_ident vidChip;
+
+    vidDir = opendir("/sys/class/video4linux");
+    if (vidDir == NULL) {
+        return -1;
     }
 
-    return Camera::createCamera(id, pCameraName, facing, orientation, devPath);
-}
+    while ((dirEntry = readdir(vidDir)) != NULL) {
+        memset(devNode, 0, sizeof(devNode));
+        if (strncmp(dirEntry->d_name, "video", 5)) {
+            continue;
+        }
 
-int32_t CameraHAL::getDevPath(const char* pName, char* pDevPath, uint32_t pathLen)
-{
-    int  retCode = -1;
-    int  fd      = 0;
-    char dev_node[CAMAERA_FILENAME_LENGTH];
-    DIR *v4l_dir = NULL;
-    struct dirent *dir_entry;
-    struct v4l2_capability v4l2_cap;
-    struct v4l2_dbg_chip_ident vid_chip;
-
-    v4l_dir = opendir("/sys/class/video4linux");
-    if (v4l_dir) {
-        while ((dir_entry = readdir(v4l_dir))) {
-            memset((void *)dev_node, 0, CAMAERA_FILENAME_LENGTH);
-            if (strncmp(dir_entry->d_name, "video", 5))
-                continue;
-            sprintf(dev_node, "/dev/%s", dir_entry->d_name);
-            if ((fd = open(dev_node, O_RDWR, O_NONBLOCK)) < 0)
-                continue;
-            if (ioctl(fd, VIDIOC_QUERYCAP, &v4l2_cap) < 0) {
-                close(fd);
-                fd = 0;
-                continue;
-            } else if (v4l2_cap.capabilities & V4L2_CAP_VIDEO_CAPTURE) {
-                if (ioctl(fd, VIDIOC_DBG_G_CHIP_IDENT, &vid_chip) < 0) {
-                    if(strstr((const char*)v4l2_cap.driver, pName)) {
-                       if (pathLen > strlen(dev_node)) {
-                            strcpy(pDevPath, dev_node);
-                            ALOGI("Get sensor %s's dev path %s, card %s, driver %s",
-                                  pName,
-                                  pDevPath,
-                                  (const char*)v4l2_cap.card,
-                                  (const char*)v4l2_cap.driver);
-                            retCode = 0;
-                        }
-                        close(fd);
-                        fd = 0;
-                        break;
-                    }
-                    close(fd);
-                    fd = 0;
-                    continue;
-                }
-                if (strstr(vid_chip.match.name, pName)) {
-                    // fsl csi/mipi camera name and path match
-                    if (pathLen > strlen(dev_node)) {
-                        strcpy(pDevPath, dev_node);
-                        ALOGI("Get sensor %s's dev path %s",
-                              pName,
-                              pDevPath);
-                        retCode = 0;
-                    }
-                    close(fd);
-                    fd = 0;
-                    break;
-                }
-            }
+        sprintf(devNode, "/dev/%s", dirEntry->d_name);
+        if ((fd = open(devNode, O_RDWR, O_NONBLOCK)) < 0) {
+            continue;
+        }
+
+        ret = ioctl(fd, VIDIOC_QUERYCAP, &vidCap);
+        if (ret < 0) {
+            close(fd);
+            fd = -1;
+            continue;
+        }
+
+        if (!(vidCap.capabilities & V4L2_CAP_VIDEO_CAPTURE)) {
+            close(fd);
+            fd = -1;
+            ret = -1;
+            continue;
+        }
+
+        if(strstr((const char*)vidCap.driver, pName)) {
+            strncpy(pDevPath, devNode, pathLen);
+            ALOGI("match sensor %s's dev path %s, card %s, driver %s",
+                    pName, pDevPath, (const char*)vidCap.card,
+                    (const char*)vidCap.driver);
+            close(fd);
+            fd = -1;
+            break;
+        }
+
+        ret = ioctl(fd, VIDIOC_DBG_G_CHIP_IDENT, &vidChip);
+        if (ret < 0) {
             close(fd);
-            fd = 0;
+            fd = -1;
+            continue;
         }
-        closedir(v4l_dir);
+
+        if(strstr(vidChip.match.name, pName)) {
+            strncpy(pDevPath, devNode, pathLen);
+            ALOGI("match sensor %s's dev path %s", pName, pDevPath);
+            close(fd);
+            fd = -1;
+            break;
+        }
+
+        close(fd);
+        fd = -1;
+        ret = -1;
     }
 
-    return retCode;
+    closedir(vidDir);
+    return ret;
 }
 
 extern "C" {
diff --git a/mx6/libcamera3/CameraHAL.h b/mx6/libcamera3/CameraHAL.h
index eb1a323..b3f93d8 100644
--- a/mx6/libcamera3/CameraHAL.h
+++ b/mx6/libcamera3/CameraHAL.h
@@ -20,6 +20,7 @@
 #include <cutils/bitops.h>
 #include <hardware/hardware.h>
 #include <hardware/camera_common.h>
+#include <hardware_legacy/uevent.h>
 #include <system/camera_vendor_tags.h>
 #include "Camera.h"
 #include "VendorTags.h"
@@ -42,16 +43,72 @@ public:
     int openDev(const hw_module_t* mod, const char* name, hw_device_t** dev);
 
 private:
-    Camera* createCamera(int32_t id, bool isRear);
-    int32_t getDevPath(const char* pName, char* pDevPath, uint32_t pathLen);
+    int32_t matchDevPath(const char* pName, char* pDevPath, uint32_t pathLen);
+    int32_t handleThreadHotplug();
+    void handleThreadExit();
+    int32_t handleCameraConnected(char* uevent);
+    int32_t handleCameraDisonnected(char* uevent);
+    void enumSensorSet();
+    void enumSensorNode(int index);
 
 private:
+    /**
+     * Thread for managing usb camera hotplug. It does below:
+     * 1. Monitor camera hotplug status, and notify the status changes by calling
+     *    module callback methods.
+     * 2. When camera is plugged, create camera device instance, initialize the camera
+     *    static info. When camera is unplugged, destroy the camera device instance and
+     *    static metadata. As an optimization option, the camera device instance (
+     *    including the static info) could be cached when the same camera
+     *    plugged/unplugge multiple times.
+     */
+    class HotplugThread : public android::Thread {
+    public:
+        HotplugThread(CameraHAL *hal)
+            : Thread(false), mModule(hal) {}
+        ~HotplugThread() {}
+
+        virtual void onFirstRef() {
+            run("HotplugThread", PRIORITY_URGENT_DISPLAY);
+        }
+
+        virtual status_t readyToRun(){
+            uevent_init();
+            return 0;
+        }
+
+        // Override below two methods for proper cleanup.
+        virtual bool threadLoop() {
+            int ret = mModule->handleThreadHotplug();
+            if (ret != 0) {
+                ALOGI("%s exit...", __func__);
+                return false;
+            }
+
+            return true;
+        }
+
+        virtual void requestExit() {
+            // Call parent to set up shutdown
+            mModule->handleThreadExit();
+            Thread::requestExit();
+            // Cleanup other states?
+        }
+
+    private:
+        CameraHAL *mModule;
+    };
+
+private:
+    SensorSet mSets[MAX_CAMERAS];
     // Number of cameras
-    int32_t mNumberOfCameras;
+    int32_t mCameraCount;
     // Callback handle
     const camera_module_callbacks_t *mCallbacks;
-    // Array of camera devices, contains mNumberOfCameras device pointers
+    // Array of camera devices, contains mCameraCount device pointers
     Camera **mCameras;
+    // camera hotplug handle thread.
+    sp<HotplugThread> mHotplugThread;
 };
 
 #endif // CAMERA_HAL_H_
diff --git a/mx6/libcamera3/CameraUtils.cpp b/mx6/libcamera3/CameraUtils.cpp
index e4822ab..ed850d4 100644
--- a/mx6/libcamera3/CameraUtils.cpp
+++ b/mx6/libcamera3/CameraUtils.cpp
@@ -116,6 +116,31 @@ void CaptureRequest::init(camera3_capture_request* request,
     }
 }
 
+int32_t CaptureRequest::onCaptureError()
+{
+    camera3_stream_buffer_t cameraBuffer;
+    camera3_capture_result_t result;
+
+    cameraBuffer.status = CAMERA3_BUFFER_STATUS_ERROR;
+    cameraBuffer.acquire_fence = -1;
+    cameraBuffer.release_fence = -1;
+
+    memset(&result, 0, sizeof(result));
+    result.frame_number = mFrameNumber;
+    result.result = NULL;
+    result.num_output_buffers = 1;
+    result.output_buffers = &cameraBuffer;
+
+    for (uint32_t i=0; i<mOutBuffersNumber; i++) {
+        StreamBuffer* out = mOutBuffers[i];
+        cameraBuffer.stream = out->mStream->stream();
+        cameraBuffer.buffer = out->mBufHandle;
+        mCallbackOps->process_capture_result(mCallbackOps, &result);
+    }
+
+    return 0;
+}
+
 int32_t CaptureRequest::onCaptureDone(StreamBuffer* buffer)
 {
     if (buffer == NULL || buffer->mBufHandle == NULL || mCallbackOps == NULL) {
diff --git a/mx6/libcamera3/CameraUtils.h b/mx6/libcamera3/CameraUtils.h
index 02a7856..8168178 100644
--- a/mx6/libcamera3/CameraUtils.h
+++ b/mx6/libcamera3/CameraUtils.h
@@ -97,6 +97,26 @@ int convertPixelFormatToV4L2Format(PixelFormat format, bool invert=false);
 class Metadata;
 class Stream;
 
+struct SensorSet
+{
+    // parameters from init.rc
+    char mPropertyName[PROPERTY_VALUE_MAX];
+    int32_t mFacing;
+    int32_t mOrientation;
+
+    // parameters by enum dynamically.
+    char mSensorName[PROPERTY_VALUE_MAX];
+    char mDevPath[CAMAERA_FILENAME_LENGTH];
+
+    // parameters for extension.
+    int32_t mResourceCost;
+    uint32_t mConflictingSize;
+    char** mConflictingDevices;
+
+    // indicate sensor plug in/out.
+    bool mExisting;
+};
+
 // 3aState
 struct autoState
 {
@@ -143,6 +163,7 @@ public:
               sp<Metadata> settings);
     int32_t onCaptureDone(StreamBuffer* buffer);
     int32_t onSettingsDone(sp<Metadata> meta);
+    int32_t onCaptureError();
 
 public:
     uint32_t mFrameNumber;
diff --git a/mx6/libcamera3/DeviceStream.cpp b/mx6/libcamera3/DeviceStream.cpp
index ed522ea..2f33ecc 100644
--- a/mx6/libcamera3/DeviceStream.cpp
+++ b/mx6/libcamera3/DeviceStream.cpp
@@ -29,9 +29,10 @@ DeviceStream::DeviceStream(Camera* device)
 
 DeviceStream::~DeviceStream()
 {
+    ALOGI("%s", __func__);
     mMessageQueue.postMessage(new CMessage(MSG_EXIT, 1), 1);
     mMessageThread->requestExit();
-    mMessageThread->join();
+    ALOGI("%s finished", __func__);
 }
 
 int32_t DeviceStream::openDev(const char* name)
@@ -189,7 +190,6 @@ int32_t DeviceStream::handleStopLocked(bool force)
     ret = onDeviceStopLocked();
     if (ret < 0) {
         ALOGE("StopStreaming: Unable to stop capture: %s", strerror(errno));
-        return ret;
     }
 
     mState = STATE_STOP;
@@ -278,10 +278,14 @@ int32_t DeviceStream::handleCaptureFrame()
     {
         Mutex::Autolock lock(mLock);
         buf = acquireFrameLocked();
-        if (buf == NULL) {
-            ALOGE("acquireFrameLocked failed");
-            return 0;
-        }
+    }
+
+    if (buf == NULL) {
+        ALOGE("acquireFrameLocked failed");
+        req->onCaptureError();
+        Mutex::Autolock lock(mLock);
+        mRequests.erase(cur);
+        return 0;
     }
 
     ret = processCaptureRequest(*buf, req);
diff --git a/mx6/libcamera3/DeviceStream.h b/mx6/libcamera3/DeviceStream.h
index 1f4d934..21f6314 100644
--- a/mx6/libcamera3/DeviceStream.h
+++ b/mx6/libcamera3/DeviceStream.h
@@ -112,6 +112,8 @@ private:
             if (ret != 0) {
                 ALOGI("%s exit...", __func__);
                 g2d_close(mStream->g2dHandle);
+                mStream.clear();
+                mStream = NULL;
                 return false;
             }
 
diff --git a/mx6/libcamera3/UvcDevice.h b/mx6/libcamera3/UvcDevice.h
index f0a6a7e..82ff39d 100644
--- a/mx6/libcamera3/UvcDevice.h
+++ b/mx6/libcamera3/UvcDevice.h
@@ -26,6 +26,7 @@ public:
     virtual ~UvcDevice();
 
     virtual status_t initSensorStaticData();
+    virtual bool isHotplug() {return true;}
 
 private:
 
-- 
1.8.0

