From 7576efa31abaeed252ba95d8c540a37e47f0cedf Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Wed, 21 Jan 2015 14:04:15 +0800
Subject: [PATCH 565/635] MA-5963 Upgrade kernel version from 3.10.y to 3.14.y

Use ether_addr_equal to replace the compare_ether_addr as
3.14 kernel have only public the ether_addr_equal
Store the genl_multicast_group array into genl_family
genlmsg_multicast_netns&genlmsg_multicast use index of the genl_multicast_group,
and genl_family to indicate which group to be used.

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 .../drivers/net/wireless/at76c50x-usb.c            |   2 +-
 .../drivers/net/wireless/ath/ath5k/base.c          |   2 +-
 .../drivers/net/wireless/ath/ath9k/recv.c          |   2 +-
 .../drivers/net/wireless/ath/carl9170/rx.c         |   2 +-
 .../drivers/net/wireless/ipw2x00/libipw_rx.c       |  14 +-
 .../drivers/net/wireless/iwlegacy/iwl-3945.c       |   4 +-
 .../drivers/net/wireless/iwlegacy/iwl-4965.c       |   2 +-
 .../drivers/net/wireless/iwlegacy/iwl-core.c       |   6 +-
 .../drivers/net/wireless/iwlegacy/iwl-sta.c        |   4 +-
 .../drivers/net/wireless/iwlwifi/iwl-agn-rx.c      |   2 +-
 .../drivers/net/wireless/iwlwifi/iwl-agn-sta.c     |   4 +-
 .../drivers/net/wireless/iwlwifi/iwl-core.c        |   6 +-
 .../compat-wireless/drivers/net/wireless/mwl8k.c   |   2 +-
 .../drivers/net/wireless/p54/txrx.c                |   2 +-
 .../drivers/net/wireless/rndis_wlan.c              |   8 +-
 .../drivers/net/wireless/rtlwifi/base.c            |   2 +-
 .../drivers/net/wireless/rtlwifi/ps.c              |   2 +-
 .../drivers/net/wireless/rtlwifi/rtl8192ce/trx.c   |   4 +-
 .../drivers/net/wireless/rtlwifi/rtl8192cu/mac.c   |   4 +-
 .../drivers/net/wireless/rtlwifi/rtl8192de/trx.c   |   4 +-
 .../drivers/net/wireless/rtlwifi/rtl8192se/trx.c   |   4 +-
 .../compat-wireless/net/bluetooth/bnep/core.c      |   6 +-
 wlan/atheros/compat-wireless/net/mac80211/cfg.c    |   2 +-
 wlan/atheros/compat-wireless/net/mac80211/ibss.c   |   2 +-
 .../compat-wireless/net/mac80211/ieee80211_i.h     |   2 +-
 wlan/atheros/compat-wireless/net/mac80211/iface.c  |   2 +-
 wlan/atheros/compat-wireless/net/mac80211/mesh.c   |   2 +-
 wlan/atheros/compat-wireless/net/mac80211/rx.c     |  34 ++---
 .../compat-wireless/net/mac80211/sta_info.c        |   4 +-
 wlan/atheros/compat-wireless/net/mac80211/tx.c     |  12 +-
 wlan/atheros/compat-wireless/net/mac80211/work.c   |   6 +-
 wlan/atheros/compat-wireless/net/wireless/ibss.c   |   2 +-
 .../atheros/compat-wireless/net/wireless/nl80211.c | 148 ++++++++++-----------
 wlan/atheros/compat-wireless/net/wireless/scan.c   |   2 +-
 wlan/atheros/compat-wireless/net/wireless/sysfs.c  |  20 ++-
 wlan/atheros/compat-wireless/net/wireless/util.c   |  12 +-
 .../compat-wireless/net/wireless/wext-sme.c        |   2 +-
 .../compat-wireless/net/wireless/wext-spy.c        |   2 +-
 38 files changed, 176 insertions(+), 166 deletions(-)

diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/at76c50x-usb.c b/wlan/atheros/compat-wireless/drivers/net/wireless/at76c50x-usb.c
index 4045e5a..d97e70c 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/at76c50x-usb.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/at76c50x-usb.c
@@ -1751,7 +1751,7 @@ static void at76_mac80211_tx(struct ieee80211_hw *hw, struct sk_buff *skb)
 	 * following workaround is necessary. If the TX frame is an
 	 * authentication frame extract the bssid and send the CMD_JOIN. */
 	if (mgmt->frame_control & cpu_to_le16(IEEE80211_STYPE_AUTH)) {
-		if (compare_ether_addr(priv->bssid, mgmt->bssid)) {
+		if (!ether_addr_equal(priv->bssid, mgmt->bssid)) {
 			memcpy(priv->bssid, mgmt->bssid, ETH_ALEN);
 			ieee80211_queue_work(hw, &priv->work_join_bssid);
 			dev_kfree_skb_any(skb);
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath5k/base.c b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath5k/base.c
index b346d04..96bdec2 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath5k/base.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath5k/base.c
@@ -456,7 +456,7 @@ void ath5k_vif_iter(void *data, u8 *mac, struct ieee80211_vif *vif)
 	}
 
 	if (iter_data->need_set_hw_addr && iter_data->hw_macaddr)
-		if (compare_ether_addr(iter_data->hw_macaddr, mac) == 0)
+		if (ether_addr_equal(iter_data->hw_macaddr, mac) == 1)
 			iter_data->need_set_hw_addr = false;
 
 	if (!iter_data->any_assoc) {
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath9k/recv.c b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath9k/recv.c
index 67b862c..537fefb 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath9k/recv.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/ath9k/recv.c
@@ -1824,7 +1824,7 @@ int ath_rx_tasklet(struct ath_softc *sc, int flush, bool hp)
 		hdr = (struct ieee80211_hdr *) (hdr_skb->data + rx_status_len);
 		rxs = IEEE80211_SKB_RXCB(hdr_skb);
 		if (ieee80211_is_beacon(hdr->frame_control) &&
-		    !compare_ether_addr(hdr->addr3, common->curbssid))
+		    ether_addr_equal(hdr->addr3, common->curbssid))
 			rs.is_mybeacon = true;
 		else
 			rs.is_mybeacon = false;
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/carl9170/rx.c b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/carl9170/rx.c
index dc99030..84b22ee 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/ath/carl9170/rx.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/ath/carl9170/rx.c
@@ -538,7 +538,7 @@ static void carl9170_ps_beacon(struct ar9170 *ar, void *data, unsigned int len)
 		return;
 
 	/* and only beacons from the associated BSSID, please */
-	if (compare_ether_addr(hdr->addr3, ar->common.curbssid) ||
+	if (!ether_addr_equal(hdr->addr3, ar->common.curbssid) ||
 	    !ar->common.curaid)
 		return;
 
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/ipw2x00/libipw_rx.c b/wlan/atheros/compat-wireless/drivers/net/wireless/ipw2x00/libipw_rx.c
index 32a9966..a8b5486 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/ipw2x00/libipw_rx.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/ipw2x00/libipw_rx.c
@@ -77,8 +77,8 @@ static struct libipw_frag_entry *libipw_frag_cache_find(struct
 
 		if (entry->skb != NULL && entry->seq == seq &&
 		    (entry->last_frag + 1 == frag || frag == -1) &&
-		    !compare_ether_addr(entry->src_addr, src) &&
-		    !compare_ether_addr(entry->dst_addr, dst))
+		    ether_addr_equal(entry->src_addr, src) &&
+		    ether_addr_equal(entry->dst_addr, dst))
 			return entry;
 	}
 
@@ -245,12 +245,12 @@ static int libipw_is_eapol_frame(struct libipw_device *ieee,
 	/* check that the frame is unicast frame to us */
 	if ((fc & (IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) ==
 	    IEEE80211_FCTL_TODS &&
-	    !compare_ether_addr(hdr->addr1, dev->dev_addr) &&
-	    !compare_ether_addr(hdr->addr3, dev->dev_addr)) {
+	    ether_addr_equal(hdr->addr1, dev->dev_addr) &&
+	    ether_addr_equal(hdr->addr3, dev->dev_addr)) {
 		/* ToDS frame with own addr BSSID and DA */
 	} else if ((fc & (IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) ==
 		   IEEE80211_FCTL_FROMDS &&
-		   !compare_ether_addr(hdr->addr1, dev->dev_addr)) {
+		   ether_addr_equal(hdr->addr1, dev->dev_addr)) {
 		/* FromDS frame with own addr as DA */
 	} else
 		return 0;
@@ -524,7 +524,7 @@ int libipw_rx(struct libipw_device *ieee, struct sk_buff *skb,
 	if (ieee->iw_mode == IW_MODE_MASTER && !wds &&
 	    (fc & (IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) ==
 	    IEEE80211_FCTL_FROMDS && ieee->stadev
-	    && !compare_ether_addr(hdr->addr2, ieee->assoc_ap_addr)) {
+	    && ether_addr_equal(hdr->addr2, ieee->assoc_ap_addr)) {
 		/* Frame from BSSID of the AP for which we are a client */
 		skb->dev = dev = ieee->stadev;
 		stats = hostap_get_stats(dev);
@@ -1468,7 +1468,7 @@ static inline int is_same_network(struct libipw_network *src,
 	 * as one network */
 	return ((src->ssid_len == dst->ssid_len) &&
 		(src->channel == dst->channel) &&
-		!compare_ether_addr(src->bssid, dst->bssid) &&
+		ether_addr_equal(src->bssid, dst->bssid) &&
 		!memcmp(src->ssid, dst->ssid, src->ssid_len));
 }
 
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-3945.c b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-3945.c
index f7c0a74..25db55e 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-3945.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-3945.c
@@ -447,10 +447,10 @@ static int iwl3945_is_network_packet(struct iwl_priv *priv,
 	switch (priv->iw_mode) {
 	case NL80211_IFTYPE_ADHOC: /* Header: Dest. | Source    | BSSID */
 		/* packets to our IBSS update information */
-		return !compare_ether_addr(header->addr3, priv->bssid);
+		return ether_addr_equal(header->addr3, priv->bssid);
 	case NL80211_IFTYPE_STATION: /* Header: Dest. | AP{BSSID} | Source */
 		/* packets to our IBSS update information */
-		return !compare_ether_addr(header->addr2, priv->bssid);
+		return ether_addr_equal(header->addr2, priv->bssid);
 	default:
 		return 1;
 	}
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-4965.c b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-4965.c
index 86f4fce..45f0fdd 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-4965.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-4965.c
@@ -1731,7 +1731,7 @@ static u8 iwl4965_find_station(struct iwl_priv *priv, const u8 *addr)
 	spin_lock_irqsave(&priv->sta_lock, flags);
 	for (i = start; i < priv->hw_params.max_stations; i++)
 		if (priv->stations[i].used &&
-		    (!compare_ether_addr(priv->stations[i].sta.sta.addr,
+		    (ether_addr_equal(priv->stations[i].sta.sta.addr,
 					 addr))) {
 			ret = i;
 			goto out;
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-core.c b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-core.c
index 2bd5659..7749416 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-core.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-core.c
@@ -526,9 +526,9 @@ int iwl_legacy_full_rxon_required(struct iwl_priv *priv,
 
 	/* These items are only settable from the full RXON command */
 	CHK(!iwl_legacy_is_associated_ctx(ctx));
-	CHK(compare_ether_addr(staging->bssid_addr, active->bssid_addr));
-	CHK(compare_ether_addr(staging->node_addr, active->node_addr));
-	CHK(compare_ether_addr(staging->wlap_bssid_addr,
+	CHK(!ether_addr_equal(staging->bssid_addr, active->bssid_addr));
+	CHK(!ether_addr_equal(staging->node_addr, active->node_addr));
+	CHK(!ether_addr_equal(staging->wlap_bssid_addr,
 				active->wlap_bssid_addr));
 	CHK_NEQ(staging->dev_type, active->dev_type);
 	CHK_NEQ(staging->channel, active->channel);
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-sta.c b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-sta.c
index f10df3e..ef39c29 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-sta.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlegacy/iwl-sta.c
@@ -246,7 +246,7 @@ u8 iwl_legacy_prep_station(struct iwl_priv *priv, struct iwl_rxon_context *ctx,
 		sta_id = ctx->bcast_sta_id;
 	else
 		for (i = IWL_STA_ID; i < priv->hw_params.max_stations; i++) {
-			if (!compare_ether_addr(priv->stations[i].sta.sta.addr,
+			if (ether_addr_equal(priv->stations[i].sta.sta.addr,
 						addr)) {
 				sta_id = i;
 				break;
@@ -278,7 +278,7 @@ u8 iwl_legacy_prep_station(struct iwl_priv *priv, struct iwl_rxon_context *ctx,
 
 	if ((priv->stations[sta_id].used & IWL_STA_DRIVER_ACTIVE) &&
 	    (priv->stations[sta_id].used & IWL_STA_UCODE_ACTIVE) &&
-	    !compare_ether_addr(priv->stations[sta_id].sta.sta.addr, addr)) {
+	    ether_addr_equal(priv->stations[sta_id].sta.sta.addr, addr)) {
 		IWL_DEBUG_ASSOC(priv,
 				"STA %d (%pM) already added, not adding again.\n",
 				sta_id, addr);
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-agn-rx.c b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-agn-rx.c
index fdb4c37..62f7d39 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-agn-rx.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-agn-rx.c
@@ -796,7 +796,7 @@ static void iwlagn_pass_packet_to_mac80211(struct iwl_priv *priv,
 		for_each_context(priv, ctx) {
 			if (!ctx->last_tx_rejected)
 				continue;
-			if (compare_ether_addr(hdr->addr3,
+			if (!ether_addr_equal(hdr->addr3,
 					       ctx->active.bssid_addr))
 				continue;
 			ctx->last_tx_rejected = false;
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-agn-sta.c b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-agn-sta.c
index 901fd94..cd9e393 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-agn-sta.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-agn-sta.c
@@ -247,7 +247,7 @@ u8 iwl_prep_station(struct iwl_priv *priv, struct iwl_rxon_context *ctx,
 		sta_id = ctx->bcast_sta_id;
 	else
 		for (i = IWL_STA_ID; i < IWLAGN_STATION_COUNT; i++) {
-			if (!compare_ether_addr(priv->stations[i].sta.sta.addr,
+			if (ether_addr_equal(priv->stations[i].sta.sta.addr,
 						addr)) {
 				sta_id = i;
 				break;
@@ -278,7 +278,7 @@ u8 iwl_prep_station(struct iwl_priv *priv, struct iwl_rxon_context *ctx,
 
 	if ((priv->stations[sta_id].used & IWL_STA_DRIVER_ACTIVE) &&
 	    (priv->stations[sta_id].used & IWL_STA_UCODE_ACTIVE) &&
-	    !compare_ether_addr(priv->stations[sta_id].sta.sta.addr, addr)) {
+	    ether_addr_equal(priv->stations[sta_id].sta.sta.addr, addr)) {
 		IWL_DEBUG_ASSOC(priv, "STA %d (%pM) already added, not "
 				"adding again.\n", sta_id, addr);
 		return sta_id;
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-core.c b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-core.c
index f9e9170..0e04f47 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-core.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/iwlwifi/iwl-core.c
@@ -493,9 +493,9 @@ int iwl_full_rxon_required(struct iwl_priv *priv,
 
 	/* These items are only settable from the full RXON command */
 	CHK(!iwl_is_associated_ctx(ctx));
-	CHK(compare_ether_addr(staging->bssid_addr, active->bssid_addr));
-	CHK(compare_ether_addr(staging->node_addr, active->node_addr));
-	CHK(compare_ether_addr(staging->wlap_bssid_addr,
+	CHK(!ether_addr_equal(staging->bssid_addr, active->bssid_addr));
+	CHK(!ether_addr_equal(staging->node_addr, active->node_addr));
+	CHK(!ether_addr_equal(staging->wlap_bssid_addr,
 				active->wlap_bssid_addr));
 	CHK_NEQ(staging->dev_type, active->dev_type);
 	CHK_NEQ(staging->channel, active->channel);
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/mwl8k.c b/wlan/atheros/compat-wireless/drivers/net/wireless/mwl8k.c
index b749781..6f3f12b 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/mwl8k.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/mwl8k.c
@@ -1229,7 +1229,7 @@ mwl8k_capture_bssid(struct mwl8k_priv *priv, struct ieee80211_hdr *wh)
 {
 	return priv->capture_beacon &&
 		ieee80211_is_beacon(wh->frame_control) &&
-		!compare_ether_addr(wh->addr3, priv->capture_bssid);
+		ether_addr_equal(wh->addr3, priv->capture_bssid);
 }
 
 static inline void mwl8k_save_beacon(struct ieee80211_hw *hw,
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/p54/txrx.c b/wlan/atheros/compat-wireless/drivers/net/wireless/p54/txrx.c
index 6ed9c32..781a271 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/p54/txrx.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/p54/txrx.c
@@ -308,7 +308,7 @@ static void p54_pspoll_workaround(struct p54_common *priv, struct sk_buff *skb)
 		return;
 
 	/* only consider beacons from the associated BSSID */
-	if (compare_ether_addr(hdr->addr3, priv->bssid))
+	if (!ether_addr_equal(hdr->addr3, priv->bssid))
 		return;
 
 	tim = p54_find_ie(skb, WLAN_EID_TIM);
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/rndis_wlan.c b/wlan/atheros/compat-wireless/drivers/net/wireless/rndis_wlan.c
index 8b273ff..7f87157 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/rndis_wlan.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/rndis_wlan.c
@@ -1775,7 +1775,7 @@ static struct ndis_80211_pmkid *remove_pmkid(struct usbnet *usbdev,
 		count = max_pmkids;
 
 	for (i = 0; i < count; i++)
-		if (!compare_ether_addr(pmkids->bssid_info[i].bssid,
+		if (ether_addr_equal(pmkids->bssid_info[i].bssid,
 							pmksa->bssid))
 			break;
 
@@ -1817,7 +1817,7 @@ static struct ndis_80211_pmkid *update_pmkid(struct usbnet *usbdev,
 
 	/* update with new pmkid */
 	for (i = 0; i < count; i++) {
-		if (compare_ether_addr(pmkids->bssid_info[i].bssid,
+		if (!ether_addr_equal(pmkids->bssid_info[i].bssid,
 							pmksa->bssid))
 			continue;
 
@@ -2113,7 +2113,7 @@ resize_buf:
 	while (check_bssid_list_item(bssid, bssid_len, buf, len)) {
 		if (rndis_bss_info_update(usbdev, bssid) && match_bssid &&
 		    matched) {
-			if (compare_ether_addr(bssid->mac, match_bssid))
+			if (!ether_addr_equal(bssid->mac, match_bssid))
 				*matched = true;
 		}
 
@@ -2505,7 +2505,7 @@ static int rndis_get_station(struct wiphy *wiphy, struct net_device *dev,
 	struct rndis_wlan_private *priv = wiphy_priv(wiphy);
 	struct usbnet *usbdev = priv->usbdev;
 
-	if (compare_ether_addr(priv->bssid, mac))
+	if (!ether_addr_equal(priv->bssid, mac))
 		return -ENOENT;
 
 	rndis_fill_station_info(usbdev, sinfo);
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/base.c b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/base.c
index de1d058..f078549 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/base.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/base.c
@@ -1461,7 +1461,7 @@ void rtl_recognize_peer(struct ieee80211_hw *hw, u8 *data, unsigned int len)
 		return;
 
 	/* and only beacons from the associated BSSID, please */
-	if (compare_ether_addr(hdr->addr3, rtlpriv->mac80211.bssid))
+	if (!ether_addr_equal(hdr->addr3, rtlpriv->mac80211.bssid))
 		return;
 
 	if (rtl_find_221_ie(hw, data, len))
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/ps.c b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/ps.c
index db52628..f2b1fa8 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/ps.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/ps.c
@@ -480,7 +480,7 @@ void rtl_swlps_beacon(struct ieee80211_hw *hw, void *data, unsigned int len)
 		return;
 
 	/* and only beacons from the associated BSSID, please */
-	if (compare_ether_addr(hdr->addr3, rtlpriv->mac80211.bssid))
+	if (!ether_addr_equal(hdr->addr3, rtlpriv->mac80211.bssid))
 		return;
 
 	rtlpriv->psc.last_beacon = jiffies;
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192ce/trx.c b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192ce/trx.c
index 4fb5ae2..7ff401d 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192ce/trx.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192ce/trx.c
@@ -508,14 +508,14 @@ static void _rtl92ce_translate_rx_signal_stuff(struct ieee80211_hw *hw,
 
 	packet_matchbssid =
 	    ((IEEE80211_FTYPE_CTL != type) &&
-	     (!compare_ether_addr(mac->bssid,
+	     (ether_addr_equal(mac->bssid,
 				  (c_fc & IEEE80211_FCTL_TODS) ?
 				  hdr->addr1 : (c_fc & IEEE80211_FCTL_FROMDS) ?
 				  hdr->addr2 : hdr->addr3)) &&
 	     (!pstats->hwerror) && (!pstats->crc) && (!pstats->icv));
 
 	packet_toself = packet_matchbssid &&
-	    (!compare_ether_addr(praddr, rtlefuse->dev_addr));
+	    (ether_addr_equal(praddr, rtlefuse->dev_addr));
 
 	if (ieee80211_is_beacon(fc))
 		packet_beacon = true;
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192cu/mac.c b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192cu/mac.c
index 060a06f..9ba5377 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192cu/mac.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192cu/mac.c
@@ -1119,14 +1119,14 @@ void rtl92c_translate_rx_signal_stuff(struct ieee80211_hw *hw,
 	praddr = hdr->addr1;
 	packet_matchbssid =
 	    ((IEEE80211_FTYPE_CTL != type) &&
-	     (!compare_ether_addr(mac->bssid,
+	     (ether_addr_equal(mac->bssid,
 			  (cpu_fc & IEEE80211_FCTL_TODS) ?
 			  hdr->addr1 : (cpu_fc & IEEE80211_FCTL_FROMDS) ?
 			  hdr->addr2 : hdr->addr3)) &&
 	     (!pstats->hwerror) && (!pstats->crc) && (!pstats->icv));
 
 	packet_toself = packet_matchbssid &&
-	    (!compare_ether_addr(praddr, rtlefuse->dev_addr));
+	    (ether_addr_equal(praddr, rtlefuse->dev_addr));
 	if (ieee80211_is_beacon(fc))
 		packet_beacon = true;
 	_rtl92c_query_rxphystatus(hw, pstats, pdesc, p_drvinfo,
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192de/trx.c b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192de/trx.c
index 3637c0c..ed630fa 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192de/trx.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192de/trx.c
@@ -466,12 +466,12 @@ static void _rtl92de_translate_rx_signal_stuff(struct ieee80211_hw *hw,
 	type = WLAN_FC_GET_TYPE(fc);
 	praddr = hdr->addr1;
 	packet_matchbssid = ((IEEE80211_FTYPE_CTL != type) &&
-	     (!compare_ether_addr(mac->bssid, (cfc & IEEE80211_FCTL_TODS) ?
+	     (ether_addr_equal(mac->bssid, (cfc & IEEE80211_FCTL_TODS) ?
 		  hdr->addr1 : (cfc & IEEE80211_FCTL_FROMDS) ?
 		  hdr->addr2 : hdr->addr3)) && (!pstats->hwerror) &&
 		  (!pstats->crc) && (!pstats->icv));
 	packet_toself = packet_matchbssid &&
-			(!compare_ether_addr(praddr, rtlefuse->dev_addr));
+			(ether_addr_equal(praddr, rtlefuse->dev_addr));
 	if (ieee80211_is_beacon(fc))
 		packet_beacon = true;
 	_rtl92de_query_rxphystatus(hw, pstats, pdesc, p_drvinfo,
diff --git a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192se/trx.c b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192se/trx.c
index fbebe3e..fc91856 100644
--- a/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192se/trx.c
+++ b/wlan/atheros/compat-wireless/drivers/net/wireless/rtlwifi/rtl8192se/trx.c
@@ -492,13 +492,13 @@ static void _rtl92se_translate_rx_signal_stuff(struct ieee80211_hw *hw,
 	praddr = hdr->addr1;
 
 	packet_matchbssid = ((IEEE80211_FTYPE_CTL != type) &&
-	     (!compare_ether_addr(mac->bssid, (cfc & IEEE80211_FCTL_TODS) ?
+	     (ether_addr_equal(mac->bssid, (cfc & IEEE80211_FCTL_TODS) ?
 			hdr->addr1 : (cfc & IEEE80211_FCTL_FROMDS) ?
 			hdr->addr2 : hdr->addr3)) && (!pstats->hwerror) &&
 			(!pstats->crc) && (!pstats->icv));
 
 	packet_toself = packet_matchbssid &&
-	    (!compare_ether_addr(praddr, rtlefuse->dev_addr));
+	    (ether_addr_equal(praddr, rtlefuse->dev_addr));
 
 	if (ieee80211_is_beacon(fc))
 		packet_beacon = true;
diff --git a/wlan/atheros/compat-wireless/net/bluetooth/bnep/core.c b/wlan/atheros/compat-wireless/net/bluetooth/bnep/core.c
index bafff37..057032e 100644
--- a/wlan/atheros/compat-wireless/net/bluetooth/bnep/core.c
+++ b/wlan/atheros/compat-wireless/net/bluetooth/bnep/core.c
@@ -69,7 +69,7 @@ static struct bnep_session *__bnep_get_session(u8 *dst)
 	BT_DBG("");
 
 	list_for_each_entry(s, &bnep_session_list, list)
-		if (!compare_ether_addr(dst, s->eh.h_source))
+		if (ether_addr_equal(dst, s->eh.h_source))
 			return s;
 
 	return NULL;
@@ -427,10 +427,10 @@ static inline int bnep_tx_frame(struct bnep_session *s, struct sk_buff *skb)
 	iv[il++] = (struct kvec) { &type, 1 };
 	len++;
 
-	if (compress_src && !compare_ether_addr(eh->h_dest, s->eh.h_source))
+	if (compress_src && ether_addr_equal(eh->h_dest, s->eh.h_source))
 		type |= 0x01;
 
-	if (compress_dst && !compare_ether_addr(eh->h_source, s->eh.h_dest))
+	if (compress_dst && ether_addr_equal(eh->h_source, s->eh.h_dest))
 		type |= 0x02;
 
 	if (type)
diff --git a/wlan/atheros/compat-wireless/net/mac80211/cfg.c b/wlan/atheros/compat-wireless/net/mac80211/cfg.c
index 4aa02b9..3014de4 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/cfg.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/cfg.c
@@ -880,7 +880,7 @@ static int ieee80211_add_station(struct wiphy *wiphy, struct net_device *dev,
 	} else
 		sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 
-	if (compare_ether_addr(mac, sdata->vif.addr) == 0)
+	if (ether_addr_equal(mac, sdata->vif.addr) == 1)
 		return -EINVAL;
 
 	if (is_multicast_ether_addr(mac))
diff --git a/wlan/atheros/compat-wireless/net/mac80211/ibss.c b/wlan/atheros/compat-wireless/net/mac80211/ibss.c
index 7d84af7..13aed9f 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/ibss.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/ibss.c
@@ -441,7 +441,7 @@ struct sta_info *ieee80211_ibss_add_sta(struct ieee80211_sub_if_data *sdata,
 	if (ifibss->state == IEEE80211_IBSS_MLME_SEARCH)
 		return NULL;
 
-	if (compare_ether_addr(bssid, sdata->u.ibss.bssid))
+	if (!ether_addr_equal(bssid, sdata->u.ibss.bssid))
 		return NULL;
 
 #ifdef CONFIG_MAC80211_VERBOSE_DEBUG
diff --git a/wlan/atheros/compat-wireless/net/mac80211/ieee80211_i.h b/wlan/atheros/compat-wireless/net/mac80211/ieee80211_i.h
index a01e37f..1aa1eaa 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/ieee80211_i.h
+++ b/wlan/atheros/compat-wireless/net/mac80211/ieee80211_i.h
@@ -1059,7 +1059,7 @@ static inline struct ieee80211_hw *local_to_hw(
 
 static inline int ieee80211_bssid_match(const u8 *raddr, const u8 *addr)
 {
-	return compare_ether_addr(raddr, addr) == 0 ||
+	return ether_addr_equal(raddr, addr) == 1 ||
 	       is_broadcast_ether_addr(raddr);
 }
 
diff --git a/wlan/atheros/compat-wireless/net/mac80211/iface.c b/wlan/atheros/compat-wireless/net/mac80211/iface.c
index 9c91031..accb708 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/iface.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/iface.c
@@ -127,7 +127,7 @@ static int ieee80211_check_concurrent_iface(struct ieee80211_sub_if_data *sdata,
 			 * The remaining checks are only performed for interfaces
 			 * with the same MAC address.
 			 */
-			if (compare_ether_addr(dev->dev_addr, ndev->dev_addr))
+			if (!ether_addr_equal(dev->dev_addr, ndev->dev_addr))
 				continue;
 
 			/*
diff --git a/wlan/atheros/compat-wireless/net/mac80211/mesh.c b/wlan/atheros/compat-wireless/net/mac80211/mesh.c
index b3a125f..9ed3214 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/mesh.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/mesh.c
@@ -625,7 +625,7 @@ static void ieee80211_mesh_rx_bcn_presp(struct ieee80211_sub_if_data *sdata,
 
 	/* ignore ProbeResp to foreign address */
 	if (stype == IEEE80211_STYPE_PROBE_RESP &&
-	    compare_ether_addr(mgmt->da, sdata->vif.addr))
+	    !ether_addr_equal(mgmt->da, sdata->vif.addr))
 		return;
 
 	baselen = (u8 *) mgmt->u.probe_resp.variable - (u8 *) mgmt;
diff --git a/wlan/atheros/compat-wireless/net/mac80211/rx.c b/wlan/atheros/compat-wireless/net/mac80211/rx.c
index ddddfbb..b31373e 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/rx.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/rx.c
@@ -1279,7 +1279,7 @@ ieee80211_rx_h_sta_process(struct ieee80211_rx_data *rx)
 	if (rx->sdata->vif.type == NL80211_IFTYPE_ADHOC) {
 		u8 *bssid = ieee80211_get_bssid(hdr, rx->skb->len,
 						NL80211_IFTYPE_ADHOC);
-		if (compare_ether_addr(bssid, rx->sdata->u.ibss.bssid) == 0) {
+		if (ether_addr_equal(bssid, rx->sdata->u.ibss.bssid) == 1) {
 			sta->last_rx = jiffies;
 			if (ieee80211_is_data(hdr->frame_control)) {
 				sta->last_rx_rate_idx = status->rate_idx;
@@ -1440,8 +1440,8 @@ ieee80211_reassemble_find(struct ieee80211_sub_if_data *sdata,
 		 */
 		if (((hdr->frame_control ^ f_hdr->frame_control) &
 		     cpu_to_le16(IEEE80211_FCTL_FTYPE)) ||
-		    compare_ether_addr(hdr->addr1, f_hdr->addr1) != 0 ||
-		    compare_ether_addr(hdr->addr2, f_hdr->addr2) != 0)
+		    ether_addr_equal(hdr->addr1, f_hdr->addr1) != 1 ||
+		    ether_addr_equal(hdr->addr2, f_hdr->addr2) != 1)
 			continue;
 
 		if (time_after(jiffies, entry->first_frag_time + 2 * HZ)) {
@@ -1735,8 +1735,8 @@ static bool ieee80211_frame_allowed(struct ieee80211_rx_data *rx, __le16 fc)
 	 * of whether the frame was encrypted or not.
 	 */
 	if (ehdr->h_proto == rx->sdata->control_port_protocol &&
-	    (compare_ether_addr(ehdr->h_dest, rx->sdata->vif.addr) == 0 ||
-	     compare_ether_addr(ehdr->h_dest, pae_group_addr) == 0))
+	    (ether_addr_equal(ehdr->h_dest, rx->sdata->vif.addr) == 1 ||
+	     ether_addr_equal(ehdr->h_dest, pae_group_addr) == 1))
 		return true;
 
 	if (ieee80211_802_1x_port_control(rx) ||
@@ -1945,7 +1945,7 @@ ieee80211_rx_h_mesh_fwding(struct ieee80211_rx_data *rx)
 			mpp_path_add(proxied_addr, mpp_addr, sdata);
 		} else {
 			spin_lock_bh(&mppath->state_lock);
-			if (compare_ether_addr(mppath->mpp, mpp_addr) != 0)
+			if (ether_addr_equal(mppath->mpp, mpp_addr) != 1)
 				memcpy(mppath->mpp, mpp_addr, ETH_ALEN);
 			spin_unlock_bh(&mppath->state_lock);
 		}
@@ -1954,7 +1954,7 @@ ieee80211_rx_h_mesh_fwding(struct ieee80211_rx_data *rx)
 
 	/* Frame has reached destination.  Don't forward */
 	if (!is_multicast_ether_addr(hdr->addr1) &&
-	    compare_ether_addr(sdata->vif.addr, hdr->addr3) == 0)
+	    ether_addr_equal(sdata->vif.addr, hdr->addr3) == 1)
 		return RX_CONTINUE;
 
 	skb_set_queue_mapping(skb, ieee80211_select_queue(sdata, skb));
@@ -2147,13 +2147,13 @@ static void ieee80211_process_sa_query_req(struct ieee80211_sub_if_data *sdata,
 	struct sk_buff *skb;
 	struct ieee80211_mgmt *resp;
 
-	if (compare_ether_addr(mgmt->da, sdata->vif.addr) != 0) {
+	if (ether_addr_equal(mgmt->da, sdata->vif.addr) != 1) {
 		/* Not to own unicast address */
 		return;
 	}
 
-	if (compare_ether_addr(mgmt->sa, sdata->u.mgd.bssid) != 0 ||
-	    compare_ether_addr(mgmt->bssid, sdata->u.mgd.bssid) != 0) {
+	if (ether_addr_equal(mgmt->sa, sdata->u.mgd.bssid) != 1 ||
+	    ether_addr_equal(mgmt->bssid, sdata->u.mgd.bssid) != 1) {
 		/* Not from the current AP or not associated yet. */
 		return;
 	}
@@ -2758,7 +2758,7 @@ static int prepare_for_handlers(struct ieee80211_rx_data *rx,
 		if (!bssid && !sdata->u.mgd.use_4addr)
 			return 0;
 		if (!multicast &&
-		    compare_ether_addr(sdata->vif.addr, hdr->addr1) != 0) {
+		    ether_addr_equal(sdata->vif.addr, hdr->addr1) != 1) {
 			if (!(sdata->dev->flags & IFF_PROMISC) ||
 			    sdata->u.mgd.use_4addr)
 				return 0;
@@ -2776,8 +2776,8 @@ static int prepare_for_handlers(struct ieee80211_rx_data *rx,
 				return 0;
 			status->rx_flags &= ~IEEE80211_RX_RA_MATCH;
 		} else if (!multicast &&
-			   compare_ether_addr(sdata->vif.addr,
-					      hdr->addr1) != 0) {
+			   ether_addr_equal(sdata->vif.addr,
+					      hdr->addr1) != 1) {
 			if (!(sdata->dev->flags & IFF_PROMISC))
 				return 0;
 			status->rx_flags &= ~IEEE80211_RX_RA_MATCH;
@@ -2793,8 +2793,8 @@ static int prepare_for_handlers(struct ieee80211_rx_data *rx,
 		break;
 	case NL80211_IFTYPE_MESH_POINT:
 		if (!multicast &&
-		    compare_ether_addr(sdata->vif.addr,
-				       hdr->addr1) != 0) {
+		    ether_addr_equal(sdata->vif.addr,
+				       hdr->addr1) != 1) {
 			if (!(sdata->dev->flags & IFF_PROMISC))
 				return 0;
 
@@ -2804,7 +2804,7 @@ static int prepare_for_handlers(struct ieee80211_rx_data *rx,
 	case NL80211_IFTYPE_AP_VLAN:
 	case NL80211_IFTYPE_AP:
 		if (!bssid) {
-			if (compare_ether_addr(sdata->vif.addr,
+			if (!ether_addr_equal(sdata->vif.addr,
 					       hdr->addr1))
 				return 0;
 		} else if (!ieee80211_bssid_match(bssid,
@@ -2820,7 +2820,7 @@ static int prepare_for_handlers(struct ieee80211_rx_data *rx,
 	case NL80211_IFTYPE_WDS:
 		if (bssid || !ieee80211_is_data(hdr->frame_control))
 			return 0;
-		if (compare_ether_addr(sdata->u.wds.remote_addr, hdr->addr2))
+		if (!ether_addr_equal(sdata->u.wds.remote_addr, hdr->addr2))
 			return 0;
 		break;
 	default:
diff --git a/wlan/atheros/compat-wireless/net/mac80211/sta_info.c b/wlan/atheros/compat-wireless/net/mac80211/sta_info.c
index 8eaa746..d36b14d 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/sta_info.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/sta_info.c
@@ -446,7 +446,7 @@ static int sta_info_insert_check(struct sta_info *sta)
 	if (unlikely(!ieee80211_sdata_running(sdata)))
 		return -ENETDOWN;
 
-	if (WARN_ON(compare_ether_addr(sta->sta.addr, sdata->vif.addr) == 0 ||
+	if (WARN_ON(ether_addr_equal(sta->sta.addr, sdata->vif.addr) == 1 ||
 		    is_multicast_ether_addr(sta->sta.addr)))
 		return -EINVAL;
 
@@ -1084,7 +1084,7 @@ struct ieee80211_sta *ieee80211_find_sta_by_ifaddr(struct ieee80211_hw *hw,
 	 */
 	for_each_sta_info(hw_to_local(hw), addr, sta, nxt) {
 		if (localaddr &&
-		    compare_ether_addr(sta->sdata->vif.addr, localaddr) != 0)
+		    ether_addr_equal(sta->sdata->vif.addr, localaddr) != 1)
 			continue;
 		if (!sta->uploaded)
 			return NULL;
diff --git a/wlan/atheros/compat-wireless/net/mac80211/tx.c b/wlan/atheros/compat-wireless/net/mac80211/tx.c
index c7cefe3..c50f700 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/tx.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/tx.c
@@ -1606,7 +1606,7 @@ netdev_tx_t ieee80211_monitor_start_xmit(struct sk_buff *skb,
 	    skb->len >= len_rthdr + hdrlen + sizeof(rfc1042_header) + 2) {
 		u8 *payload = (u8 *)hdr + hdrlen;
 
-		if (compare_ether_addr(payload, rfc1042_header) == 0)
+		if (ether_addr_equal(payload, rfc1042_header) == 1)
 			skb->protocol = cpu_to_be16((payload[6] << 8) |
 						    payload[7]);
 	}
@@ -1639,7 +1639,7 @@ netdev_tx_t ieee80211_monitor_start_xmit(struct sk_buff *skb,
 		    tmp_sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||
 		    tmp_sdata->vif.type == NL80211_IFTYPE_WDS)
 			continue;
-		if (compare_ether_addr(tmp_sdata->vif.addr, hdr->addr2) == 0) {
+		if (ether_addr_equal(tmp_sdata->vif.addr, hdr->addr2) == 1) {
 			sdata = tmp_sdata;
 			break;
 		}
@@ -1756,9 +1756,9 @@ netdev_tx_t ieee80211_subif_start_xmit(struct sk_buff *skb,
 		 * is being proxied by a portal (i.e. portal address
 		 * differs from proxied address)
 		 */
-		if (compare_ether_addr(sdata->vif.addr,
-				       skb->data + ETH_ALEN) == 0 &&
-		    !(mppath && compare_ether_addr(mppath->mpp, skb->data))) {
+		if (ether_addr_equal(sdata->vif.addr,
+				       skb->data + ETH_ALEN) == 1 &&
+		    !(mppath && !ether_addr_equal(mppath->mpp, skb->data))) {
 			hdrlen = ieee80211_fill_mesh_addresses(&hdr, &fc,
 					skb->data, skb->data + ETH_ALEN);
 			rcu_read_unlock();
@@ -1905,7 +1905,7 @@ netdev_tx_t ieee80211_subif_start_xmit(struct sk_buff *skb,
 	if (unlikely(!ieee80211_vif_is_mesh(&sdata->vif) &&
 		     !is_multicast_ether_addr(hdr.addr1) && !authorized &&
 		     (cpu_to_be16(ethertype) != sdata->control_port_protocol ||
-		      compare_ether_addr(sdata->vif.addr, skb->data + ETH_ALEN)))) {
+		      !ether_addr_equal(sdata->vif.addr, skb->data + ETH_ALEN)))) {
 #ifdef CONFIG_MAC80211_VERBOSE_DEBUG
 		if (net_ratelimit())
 			printk(KERN_DEBUG "%s: dropped frame to %pM"
diff --git a/wlan/atheros/compat-wireless/net/mac80211/work.c b/wlan/atheros/compat-wireless/net/mac80211/work.c
index 3dd5a89..a566f73 100644
--- a/wlan/atheros/compat-wireless/net/mac80211/work.c
+++ b/wlan/atheros/compat-wireless/net/mac80211/work.c
@@ -777,7 +777,7 @@ static void ieee80211_work_rx_queued_mgmt(struct ieee80211_local *local,
 		 * Before queuing, we already verified mgmt->sa,
 		 * so this is needed just for matching.
 		 */
-		if (compare_ether_addr(bssid, mgmt->bssid))
+		if (!ether_addr_equal(bssid, mgmt->bssid))
 			continue;
 
 		switch (fc & IEEE80211_FCTL_STYPE) {
@@ -1177,9 +1177,9 @@ ieee80211_rx_result ieee80211_work_rx_mgmt(struct ieee80211_sub_if_data *sdata,
 	list_for_each_entry_rcu(wk, &local->work_list, list) {
 		if (sdata != wk->sdata)
 			continue;
-		if (compare_ether_addr(wk->filter_ta, mgmt->sa))
+		if (!ether_addr_equal(wk->filter_ta, mgmt->sa))
 			continue;
-		if (compare_ether_addr(wk->filter_ta, mgmt->bssid))
+		if (!ether_addr_equal(wk->filter_ta, mgmt->bssid))
 			continue;
 
 		switch (fc & IEEE80211_FCTL_STYPE) {
diff --git a/wlan/atheros/compat-wireless/net/wireless/ibss.c b/wlan/atheros/compat-wireless/net/wireless/ibss.c
index 30f20fe..d174250 100644
--- a/wlan/atheros/compat-wireless/net/wireless/ibss.c
+++ b/wlan/atheros/compat-wireless/net/wireless/ibss.c
@@ -473,7 +473,7 @@ int cfg80211_ibss_wext_siwap(struct net_device *dev,
 
 	/* fixed already - and no change */
 	if (wdev->wext.ibss.bssid && bssid &&
-	    compare_ether_addr(bssid, wdev->wext.ibss.bssid) == 0)
+	    ether_addr_equal(bssid, wdev->wext.ibss.bssid) == 1)
 		return 0;
 
 	wdev_lock(wdev);
diff --git a/wlan/atheros/compat-wireless/net/wireless/nl80211.c b/wlan/atheros/compat-wireless/net/wireless/nl80211.c
index 55a10ae..e4a7e74 100644
--- a/wlan/atheros/compat-wireless/net/wireless/nl80211.c
+++ b/wlan/atheros/compat-wireless/net/wireless/nl80211.c
@@ -34,6 +34,16 @@ static int nl80211_pre_doit(struct genl_ops *ops, struct sk_buff *skb,
 static void nl80211_post_doit(struct genl_ops *ops, struct sk_buff *skb,
 			      struct genl_info *info);
 
+static const struct genl_multicast_group nl80211_event_mcgrps[] = {
+       { .name = "config", },
+       { .name = "scan", },
+       { .name = "regulatory", },
+       { .name = "mlme", },
+#ifdef CONFIG_NL80211_TESTMODE
+       { .name = "testmode", },
+#endif
+};
+
 /* the netlink family */
 static struct genl_family nl80211_fam = {
 	.id = GENL_ID_GENERATE,	/* don't bother with a hardcoded ID */
@@ -44,6 +54,8 @@ static struct genl_family nl80211_fam = {
 	.netnsok = true,
 	.pre_doit = nl80211_pre_doit,
 	.post_doit = nl80211_post_doit,
+    .mcgrps = nl80211_event_mcgrps,
+    .n_mcgrps = ARRAY_SIZE(nl80211_event_mcgrps),
 };
 
 /* internal helper: get rdev and dev */
@@ -4788,10 +4800,6 @@ static int nl80211_leave_ibss(struct sk_buff *skb, struct genl_info *info)
 }
 
 #ifdef CONFIG_NL80211_TESTMODE
-static struct genl_multicast_group nl80211_testmode_mcgrp = {
-	.name = "testmode",
-};
-
 static int nl80211_testmode_do(struct sk_buff *skb, struct genl_info *info)
 {
 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
@@ -4979,7 +4987,7 @@ void cfg80211_testmode_event(struct sk_buff *skb, gfp_t gfp)
 
 	nla_nest_end(skb, data);
 	genlmsg_end(skb, hdr);
-	genlmsg_multicast(skb, 0, nl80211_testmode_mcgrp.id, gfp);
+	genlmsg_multicast(&nl80211_fam, skb, 0, 4, gfp);
 }
 EXPORT_SYMBOL(cfg80211_testmode_event);
 #endif
@@ -6800,21 +6808,6 @@ static struct genl_ops nl80211_ops[] = {
 	},
 };
 
-static struct genl_multicast_group nl80211_mlme_mcgrp = {
-	.name = "mlme",
-};
-
-/* multicast groups */
-static struct genl_multicast_group nl80211_config_mcgrp = {
-	.name = "config",
-};
-static struct genl_multicast_group nl80211_scan_mcgrp = {
-	.name = "scan",
-};
-static struct genl_multicast_group nl80211_regulatory_mcgrp = {
-	.name = "regulatory",
-};
-
 /* notification functions */
 
 void nl80211_notify_dev_rename(struct cfg80211_registered_device *rdev)
@@ -6830,8 +6823,8 @@ void nl80211_notify_dev_rename(struct cfg80211_registered_device *rdev)
 		return;
 	}
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_config_mcgrp.id, GFP_KERNEL);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				0, GFP_KERNEL);
 }
 
 static int nl80211_add_scan_req(struct sk_buff *msg,
@@ -6930,8 +6923,8 @@ void nl80211_send_scan_start(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_scan_mcgrp.id, GFP_KERNEL);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				1, GFP_KERNEL);
 }
 
 void nl80211_send_scan_done(struct cfg80211_registered_device *rdev,
@@ -6949,8 +6942,8 @@ void nl80211_send_scan_done(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_scan_mcgrp.id, GFP_KERNEL);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				1, GFP_KERNEL);
 }
 
 void nl80211_send_scan_aborted(struct cfg80211_registered_device *rdev,
@@ -6968,8 +6961,8 @@ void nl80211_send_scan_aborted(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_scan_mcgrp.id, GFP_KERNEL);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				1, GFP_KERNEL);
 }
 
 void nl80211_send_sched_scan_results(struct cfg80211_registered_device *rdev,
@@ -6987,8 +6980,8 @@ void nl80211_send_sched_scan_results(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_scan_mcgrp.id, GFP_KERNEL);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				1, GFP_KERNEL);
 }
 
 void nl80211_send_sched_scan(struct cfg80211_registered_device *rdev,
@@ -7005,8 +6998,8 @@ void nl80211_send_sched_scan(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_scan_mcgrp.id, GFP_KERNEL);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				1, GFP_KERNEL);
 }
 
 /*
@@ -7053,7 +7046,7 @@ void nl80211_send_reg_change_event(struct regulatory_request *request)
 	genlmsg_end(msg, hdr);
 
 	rcu_read_lock();
-	genlmsg_multicast_allns(msg, 0, nl80211_regulatory_mcgrp.id,
+	genlmsg_multicast_allns(&nl80211_fam, msg, 0, 2,
 				GFP_ATOMIC);
 	rcu_read_unlock();
 
@@ -7088,8 +7081,8 @@ static void nl80211_send_mlme_event(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				/*3*/3, gfp);
 	return;
 
  nla_put_failure:
@@ -7169,8 +7162,8 @@ static void nl80211_send_mlme_timeout(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7225,8 +7218,8 @@ void nl80211_send_connect_result(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7263,8 +7256,8 @@ void nl80211_send_roamed(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7301,8 +7294,8 @@ void nl80211_send_disconnected(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, GFP_KERNEL);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, GFP_KERNEL);
 	return;
 
  nla_put_failure:
@@ -7334,8 +7327,8 @@ void nl80211_send_ibss_bssid(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7369,8 +7362,8 @@ void nl80211_send_new_peer_candidate(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7408,8 +7401,8 @@ void nl80211_michael_mic_failure(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7460,7 +7453,7 @@ void nl80211_send_beacon_hint_event(struct wiphy *wiphy,
 	genlmsg_end(msg, hdr);
 
 	rcu_read_lock();
-	genlmsg_multicast_allns(msg, 0, nl80211_regulatory_mcgrp.id,
+	genlmsg_multicast_allns(&nl80211_fam, msg, 0, 2,
 				GFP_ATOMIC);
 	rcu_read_unlock();
 
@@ -7502,8 +7495,8 @@ static void nl80211_send_remain_on_chan_event(
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7547,8 +7540,8 @@ void nl80211_send_sta_event(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 }
 
 void nl80211_send_sta_del_event(struct cfg80211_registered_device *rdev,
@@ -7573,8 +7566,8 @@ void nl80211_send_sta_del_event(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7607,8 +7600,8 @@ void nl80211_send_conn_failed_event(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7731,7 +7724,7 @@ void nl80211_send_mgmt_tx_status(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast(msg, 0, nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast(&nl80211_fam, msg, 0, 3, gfp);
 	return;
 
  nla_put_failure:
@@ -7773,8 +7766,8 @@ nl80211_send_cqm_rssi_notify(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7815,8 +7808,8 @@ void nl80211_gtk_rekey_notify(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7858,8 +7851,8 @@ void nl80211_pmksa_candidate_notify(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7890,8 +7883,8 @@ void nl80211_ch_switch_notify(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7940,8 +7933,8 @@ nl80211_send_cqm_txe_notify(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -7982,8 +7975,8 @@ nl80211_send_cqm_pktloss_notify(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -8023,8 +8016,8 @@ void cfg80211_probe_status(struct net_device *dev, const u8 *addr,
 		return;
 	}
 
-	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
-				nl80211_mlme_mcgrp.id, gfp);
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+				3, gfp);
 	return;
 
  nla_put_failure:
@@ -8107,10 +8100,10 @@ int nl80211_init(void)
 	int err;
 
 	err = genl_register_family_with_ops(&nl80211_fam,
-		nl80211_ops, ARRAY_SIZE(nl80211_ops));
+		nl80211_ops/*, ARRAY_SIZE(nl80211_ops)*/);
 	if (err)
 		return err;
-
+/*
 	err = genl_register_mc_group(&nl80211_fam, &nl80211_config_mcgrp);
 	if (err)
 		goto err_out;
@@ -8126,13 +8119,14 @@ int nl80211_init(void)
 	err = genl_register_mc_group(&nl80211_fam, &nl80211_mlme_mcgrp);
 	if (err)
 		goto err_out;
-
+        */
+/*
 #ifdef CONFIG_NL80211_TESTMODE
 	err = genl_register_mc_group(&nl80211_fam, &nl80211_testmode_mcgrp);
 	if (err)
 		goto err_out;
 #endif
-
+*/
 	err = netlink_register_notifier(&nl80211_netlink_notifier);
 	if (err)
 		goto err_out;
diff --git a/wlan/atheros/compat-wireless/net/wireless/scan.c b/wlan/atheros/compat-wireless/net/wireless/scan.c
index c0beb65..89177ce 100644
--- a/wlan/atheros/compat-wireless/net/wireless/scan.c
+++ b/wlan/atheros/compat-wireless/net/wireless/scan.c
@@ -281,7 +281,7 @@ static bool is_bss(struct cfg80211_bss *a,
 {
 	const u8 *ssidie;
 
-	if (bssid && compare_ether_addr(a->bssid, bssid))
+	if (bssid && !ether_addr_equal(a->bssid, bssid))
 		return false;
 
 	if (!ssid)
diff --git a/wlan/atheros/compat-wireless/net/wireless/sysfs.c b/wlan/atheros/compat-wireless/net/wireless/sysfs.c
index 2f8af6e..18f568e 100644
--- a/wlan/atheros/compat-wireless/net/wireless/sysfs.c
+++ b/wlan/atheros/compat-wireless/net/wireless/sysfs.c
@@ -59,7 +59,7 @@ static ssize_t addresses_show(struct device *dev,
 
 	return buf - start;
 }
-
+/*
 static struct device_attribute ieee80211_dev_attrs[] = {
 	__ATTR_RO(index),
 	__ATTR_RO(macaddress),
@@ -68,6 +68,22 @@ static struct device_attribute ieee80211_dev_attrs[] = {
 	__ATTR_RO(name),
 	{}
 };
+*/
+static DEVICE_ATTR_RO(index);
+static DEVICE_ATTR_RO(macaddress);
+static DEVICE_ATTR_RO(address_mask);
+static DEVICE_ATTR_RO(addresses);
+static DEVICE_ATTR_RO(name);
+
+static struct attribute *ieee80211_dev_attrs[] = {
+   &dev_attr_index.attr,
+   &dev_attr_macaddress.attr,
+   &dev_attr_address_mask.attr,
+   &dev_attr_addresses.attr,
+   &dev_attr_name.attr,
+   NULL,
+};
+ATTRIBUTE_GROUPS(ieee80211_dev);
 
 static void wiphy_dev_release(struct device *dev)
 {
@@ -134,7 +150,7 @@ struct class ieee80211_class = {
 	.name = "ieee80211",
 	.owner = THIS_MODULE,
 	.dev_release = wiphy_dev_release,
-	.dev_attrs = ieee80211_dev_attrs,
+	.dev_groups = ieee80211_dev_groups,
 #ifdef CONFIG_HOTPLUG
 	.dev_uevent = wiphy_uevent,
 #endif
diff --git a/wlan/atheros/compat-wireless/net/wireless/util.c b/wlan/atheros/compat-wireless/net/wireless/util.c
index b419510..4eadcb4 100644
--- a/wlan/atheros/compat-wireless/net/wireless/util.c
+++ b/wlan/atheros/compat-wireless/net/wireless/util.c
@@ -381,7 +381,7 @@ int ieee80211_data_to_8023(struct sk_buff *skb, const u8 *addr,
 		     iftype != NL80211_IFTYPE_P2P_CLIENT &&
 		     iftype != NL80211_IFTYPE_MESH_POINT) ||
 		    (is_multicast_ether_addr(dst) &&
-		     !compare_ether_addr(src, addr)))
+		     ether_addr_equal(src, addr)))
 			return -1;
 		if (iftype == NL80211_IFTYPE_MESH_POINT) {
 			struct ieee80211s_hdr *meshdr =
@@ -409,9 +409,9 @@ int ieee80211_data_to_8023(struct sk_buff *skb, const u8 *addr,
 	payload = skb->data + hdrlen;
 	ethertype = (payload[6] << 8) | payload[7];
 
-	if (likely((compare_ether_addr(payload, rfc1042_header) == 0 &&
+	if (likely((ether_addr_equal(payload, rfc1042_header) == 1 &&
 		    ethertype != ETH_P_AARP && ethertype != ETH_P_IPX) ||
-		   compare_ether_addr(payload, bridge_tunnel_header) == 0)) {
+		   ether_addr_equal(payload, bridge_tunnel_header) == 1)) {
 		/* remove RFC1042 or Bridge-Tunnel encapsulation and
 		 * replace EtherType */
 		skb_pull(skb, hdrlen + 6);
@@ -620,10 +620,10 @@ void ieee80211_amsdu_to_8023s(struct sk_buff *skb, struct sk_buff_head *list,
 		payload = frame->data;
 		ethertype = (payload[6] << 8) | payload[7];
 
-		if (likely((compare_ether_addr(payload, rfc1042_header) == 0 &&
+		if (likely((ether_addr_equal(payload, rfc1042_header) == 1 &&
 			    ethertype != ETH_P_AARP && ethertype != ETH_P_IPX) ||
-			   compare_ether_addr(payload,
-					      bridge_tunnel_header) == 0)) {
+			   ether_addr_equal(payload,
+					      bridge_tunnel_header) == 1)) {
 			/* remove RFC1042 or Bridge-Tunnel
 			 * encapsulation and replace EtherType */
 			skb_pull(frame, 6);
diff --git a/wlan/atheros/compat-wireless/net/wireless/wext-sme.c b/wlan/atheros/compat-wireless/net/wireless/wext-sme.c
index 7c01c2f..3a3a685 100644
--- a/wlan/atheros/compat-wireless/net/wireless/wext-sme.c
+++ b/wlan/atheros/compat-wireless/net/wireless/wext-sme.c
@@ -276,7 +276,7 @@ int cfg80211_mgd_wext_siwap(struct net_device *dev,
 
 		/* fixed already - and no change */
 		if (wdev->wext.connect.bssid && bssid &&
-		    compare_ether_addr(bssid, wdev->wext.connect.bssid) == 0)
+		    ether_addr_equal(bssid, wdev->wext.connect.bssid) == 1)
 			goto out;
 
 		err = __cfg80211_disconnect(rdev, dev,
diff --git a/wlan/atheros/compat-wireless/net/wireless/wext-spy.c b/wlan/atheros/compat-wireless/net/wireless/wext-spy.c
index 5d643a5..33bef22 100644
--- a/wlan/atheros/compat-wireless/net/wireless/wext-spy.c
+++ b/wlan/atheros/compat-wireless/net/wireless/wext-spy.c
@@ -203,7 +203,7 @@ void wireless_spy_update(struct net_device *	dev,
 
 	/* Update all records that match */
 	for (i = 0; i < spydata->spy_number; i++)
-		if (!compare_ether_addr(address, spydata->spy_address[i])) {
+		if (ether_addr_equal(address, spydata->spy_address[i])) {
 			memcpy(&(spydata->spy_stat[i]), wstats,
 			       sizeof(struct iw_quality));
 			match = i;
-- 
1.8.0

