From ab74d6bc2158e281b0a696595eca76106ffcd29e Mon Sep 17 00:00:00 2001
From: Xianzhong <b07117@freescale.com>
Date: Wed, 3 Apr 2013 07:08:46 +0800
Subject: [PATCH 441/635] ENGR00239939-2 clean obsolete codes in fsl hwc

framebuffer address is not used by gpu hwcomposer

Signed-off-by: Xianzhong <b07117@freescale.com>
---
 mx6/hwcomposer/hwc_context.h  |  1 -
 mx6/hwcomposer/hwc_uevent.cpp |  2 --
 mx6/hwcomposer/hwcomposer.cpp | 26 --------------------------
 3 files changed, 29 deletions(-)

diff --git a/mx6/hwcomposer/hwc_context.h b/mx6/hwcomposer/hwc_context.h
index 6c6975c..6100d64 100644
--- a/mx6/hwcomposer/hwc_context.h
+++ b/mx6/hwcomposer/hwc_context.h
@@ -86,7 +86,6 @@ struct hwc_context_t {
     hw_module_t const *m_gralloc_module;
 
     framebuffer_device_t* mFbDev[HWC_NUM_DISPLAY_TYPES];
-    unsigned long mFbPhysAddrs[HWC_NUM_DISPLAY_TYPES];
 };
 
 #endif
diff --git a/mx6/hwcomposer/hwc_uevent.cpp b/mx6/hwcomposer/hwc_uevent.cpp
index 418288a..6d8268d 100644
--- a/mx6/hwcomposer/hwc_uevent.cpp
+++ b/mx6/hwcomposer/hwc_uevent.cpp
@@ -85,8 +85,6 @@ void UeventThread::handleHdmiUevent(const char *buff, int len, int dispid) {
         mCtx->m_gralloc_module->methods->open(mCtx->m_gralloc_module, fbname,
                                               (struct hw_device_t**)&mCtx->mFbDev[HWC_DISPLAY_EXTERNAL]);
         priv_m = (struct private_module_t *)mCtx->m_gralloc_module;
-
-        mCtx->mFbPhysAddrs[HWC_DISPLAY_EXTERNAL] = priv_m->external_module->framebuffer->phys;
     }
 
     mCtx->m_callback->hotplug(mCtx->m_callback, HWC_DISPLAY_EXTERNAL,
diff --git a/mx6/hwcomposer/hwcomposer.cpp b/mx6/hwcomposer/hwcomposer.cpp
index 78896ed..e624f1d 100755
--- a/mx6/hwcomposer/hwcomposer.cpp
+++ b/mx6/hwcomposer/hwcomposer.cpp
@@ -150,27 +150,8 @@ static int hwc_set(struct hwc_composer_device_1 *dev,
         property_get("service.bootanim.exit", property, "0");
         if(!atoi(property)) numDisplays = numDisplays >= 1 ? 1 : 0;
 
-        for (size_t i=0 ; i<numDisplays ; i++) {
-            /* outbuf is unused for physical devices and the original value is NULL.
-              Temporally use it to pass framebuffer address to gpu hwcomposer for composition.
-             */
-            if(displays[i]) displays[i]->outbuf = (buffer_handle_t)ctx->mFbPhysAddrs[i];
-        }
-
         int err = ctx->m_viv_hwc->set(ctx->m_viv_hwc, numDisplays, displays);
 
-        for (size_t i=0 ; i<numDisplays ; i++) {
-             /* outbuf is the buffer that receives the composed image for
-             * virtual displays. Writes to the outbuf must wait until
-             * outbufAcquireFenceFd signals. A fence that will signal when
-             * writes to outbuf are complete should be returned in
-             * retireFenceFd.
-             *
-             * For physical displays, outbuf will be NULL.
-             */
-            if(displays[i]) displays[i]->outbuf = NULL;
-        }
-
         if(err) return err;
     }
 
@@ -364,13 +345,6 @@ static int hwc_device_open(const struct hw_module_t* module, const char* name,
                 dev->mFbDev[dispid] = (framebuffer_device_t*)fbid;
                 dev->m_gralloc_module->methods->open(dev->m_gralloc_module, fbname,
                            (struct hw_device_t**)&dev->mFbDev[dispid]);
-
-                if(dispid == 0) {
-                    dev->mFbPhysAddrs[HWC_DISPLAY_PRIMARY] = priv_m->framebuffer->phys;
-                }
-                else {
-                    dev->mFbPhysAddrs[HWC_DISPLAY_EXTERNAL] = priv_m->external_module->framebuffer->phys;
-                }
             }
         }
 
-- 
1.8.0

