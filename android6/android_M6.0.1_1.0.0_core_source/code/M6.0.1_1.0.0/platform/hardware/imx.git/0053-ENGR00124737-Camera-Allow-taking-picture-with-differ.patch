From f1ebd28996cd2506b123f6b2cf42632ecfd67f5a Mon Sep 17 00:00:00 2001
From: Sammy He <r62914@freescale.com>
Date: Mon, 19 Jul 2010 10:44:33 +0800
Subject: [PATCH 053/635] ENGR00124737 Camera: Allow taking picture with
 different size

Allow taking picture per picture size on menu. This change covered
both UVC camera and on-board camera.

Change-Id: Ifa340df8bc2b9d6749b24000674ee439e021f830
Signed-off-by: Sammy He <r62914@freescale.com>
---
 libcamera/CameraHal.cpp | 383 +++++++++++++++++++++++++++++++++---------------
 libcamera/CameraHal.h   |  29 +---
 2 files changed, 275 insertions(+), 137 deletions(-)

diff --git a/libcamera/CameraHal.cpp b/libcamera/CameraHal.cpp
index 13d9719..a5f2f2e 100644
--- a/libcamera/CameraHal.cpp
+++ b/libcamera/CameraHal.cpp
@@ -33,14 +33,10 @@
 namespace android {
 int CameraHal::camera_device = -1;
 int CameraHal::g_rotate=0;
-int CameraHal::g_capture_mode = 0;	//0:low resolution, 1:high resolution
-int CameraHal::g_recording_width = RECORDING_WIDTH_NORMAL;
-int CameraHal::g_recording_height = RECORDING_HEIGHT_NORMAL;
 //Camera Take Picture Parameter
-int CameraHal::g_pic_width = PICTURE_WIDTH;
-int CameraHal::g_pic_height = PICTURE_HEIGHT;
 int CameraHal::g_still_bpp = 16;
-
+char CameraHal::dev_node[FILENAME_LENGTH];
+int CameraHal::error_status = 0;
 struct picbuffer CameraHal::buffers[CAPTURE_BUFFER_NUM];
 
 #ifdef USE_FSL_JPEG_ENC 
@@ -51,9 +47,9 @@ JPEG_ENC_UINT8 *CameraHal::g_JpegData = NULL;//Buffer to hold jpeg data
 
 wp<CameraHardwareInterface> CameraHal::singleton;
 
-const char CameraHal::supportedPictureSizes [] = "3280x2464,2560x2048,2048x1536,1600x1200,1280x1024,1152x964,640x480,320x240";
-const char CameraHal::supportedPreviewSizes [] = "1280x720,800x480,720x576,720x480,768x576,640x480,320x240,352x288,176x144,128x96";
-const char CameraHal::supportedFPS [] = "33,30,25,24,20,15,10";
+const char CameraHal::supportedPictureSizes [] = "2048x1536,1600x1200,1024x768,640x480";
+const char CameraHal::supportedPreviewSizes [] = "1280x720,720x576,640x480,320x240";
+const char CameraHal::supportedFPS [] = "30,15,10";
 const char CameraHal::supprotedThumbnailSizes []= "80x60";
 const char CameraHal::PARAMS_DELIMITER []= ",";
 
@@ -95,7 +91,11 @@ CameraHal::CameraHal()
         buffers[i].length = 0;
     }
 
+#ifdef UVC_CAMERA
+    mRecordFormat = mPictureFormat = V4L2_PIX_FMT_YUYV;
+#else
     mRecordFormat = mPictureFormat = V4L2_PIX_FMT_YUV420;
+#endif
 
     initDefaultParameters();
 }
@@ -103,7 +103,7 @@ CameraHal::CameraHal()
 void CameraHal::initDefaultParameters()
 {
     CameraParameters p;
-    char tmpBuffer[PARAM_BUFFER];
+    char tmpBuffer[PARAM_BUFFER], picture_sizes[PARAM_BUFFER];
 
     p.setPreviewSize(RECORDING_WIDTH_NORMAL, RECORDING_HEIGHT_NORMAL);
     p.setPreviewFrameRate(PREVIEW_FRAMERATE);
@@ -114,7 +114,15 @@ void CameraHal::initDefaultParameters()
     p.set(CameraParameters::KEY_JPEG_QUALITY, 100);
 
     //Eclair extended parameters
+#ifdef UVC_CAMERA
+    uvcGetDeviceAndCapability(tmpBuffer);
+    p.set(CameraParameters::KEY_SUPPORTED_PICTURE_SIZES, tmpBuffer);
+    LOGD("supportedPictureSize=%s", tmpBuffer);
+#else
+    /* /dev/video0 is for on-board camera */
+    strcpy(dev_node, "/dev/video0");
     p.set(CameraParameters::KEY_SUPPORTED_PICTURE_SIZES, CameraHal::supportedPictureSizes);
+#endif
     p.set(CameraParameters::KEY_SUPPORTED_PICTURE_FORMATS, CameraParameters::PIXEL_FORMAT_JPEG);
     p.set(CameraParameters::KEY_SUPPORTED_PREVIEW_SIZES, CameraHal::supportedPreviewSizes);
     p.set(CameraParameters::KEY_SUPPORTED_PREVIEW_FORMATS, CameraParameters::PIXEL_FORMAT_YUV420SP);
@@ -192,7 +200,7 @@ void CameraHal::initDefaultParameters()
     if (setParameters(p) != NO_ERROR) {
         LOGE("Failed to set default parameters?!");
     }
-
+    error_status = 0;
 }
 
 CameraHal::~CameraHal()
@@ -209,6 +217,86 @@ CameraHal::~CameraHal()
     singleton.clear();
 }
 
+int CameraHal::uvcGetDeviceAndCapability(char *sizes_buf)
+{
+    int fd, i, j, is_found = 0;
+    char *flags[] = {"uncompressed", "compressed"};
+    char tmp[40];
+    DIR *v4l_dir = NULL;
+    struct dirent *dir_entry;
+    struct v4l2_capability v4l2_cap;
+    struct v4l2_fmtdesc vid_fmtdesc;
+    struct v4l2_frmsizeenum vid_frmsize;
+
+    /* Check avaiable UVC device */
+    v4l_dir = opendir("/sys/class/video4linux");
+    if (v4l_dir) {
+        while((dir_entry = readdir(v4l_dir))) {
+            memset((void *)dev_node, 0, FILENAME_LENGTH);
+            if(strncmp(dir_entry->d_name, "video", 5)) /* Not video device */
+                continue;
+                sprintf(dev_node, "/dev/%s", dir_entry->d_name);
+                if (fd = open(dev_node, O_RDWR, O_NONBLOCK) < 0)
+                    continue;
+                /* Query the capability of device */
+                if(ioctl(fd, VIDIOC_QUERYCAP, &v4l2_cap) < 0 ) {
+                    close(fd);
+                continue;
+            } else if ((strcmp((char *)v4l2_cap.driver, "uvcvideo") == 0) &&
+                       (v4l2_cap.capabilities & V4L2_CAP_VIDEO_CAPTURE)) {
+                is_found = 1;  /* No need to close device here */
+                break;
+            } else
+                close(fd);
+        }
+    }
+
+    if (is_found) {
+        LOGD("Found one UVC camera\n");
+    } else
+        return -1;
+
+    memset(sizes_buf, '\0', PARAM_BUFFER);
+    /* Enum pixel format of UVC camera */
+    for (i = 0;; i++) {
+        memset(&vid_fmtdesc, 0, sizeof(vid_fmtdesc));
+        vid_fmtdesc.index = i;
+        vid_fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+        if (ioctl(fd, VIDIOC_ENUM_FMT, &vid_fmtdesc ) != 0)
+            break;
+        /* We got a video format/codec back */
+        LOGD("VIDIOC_ENUM_FMT(%d, %s)\n", vid_fmtdesc.index, "VIDEO_CAPTURE");
+        LOGD(" flags       :%s\n", flags[vid_fmtdesc.flags]);
+        LOGD(" description :%s\n", vid_fmtdesc.description);
+        /* Convert the pixelformat attributes from FourCC into 'human readable' format*/
+        LOGD(" pixelformat :%c%c%c%c\n",
+                    vid_fmtdesc.pixelformat & 0xFF, (vid_fmtdesc.pixelformat >> 8) & 0xFF,
+                    (vid_fmtdesc.pixelformat >> 16) & 0xFF, (vid_fmtdesc.pixelformat >> 24) & 0xFF);
+        if (vid_fmtdesc.pixelformat == V4L2_PIX_FMT_YUYV) {
+        /* Only support YUYV format now */
+        /* Enum YUYV frame size */
+            for (j = 0;; j++) {
+                vid_frmsize.index = j;
+                vid_frmsize.pixel_format = vid_fmtdesc.pixelformat;
+                if (ioctl(fd, VIDIOC_ENUM_FRAMESIZES, &vid_frmsize) != 0)
+                    break;
+                sprintf(tmp, "%dx%d", vid_frmsize.discrete.width, vid_frmsize.discrete.height);
+                if (vid_frmsize.index == 0)
+                    strncpy((char*) sizes_buf, tmp, PARAM_BUFFER);
+                else {
+                    strncat((char*) sizes_buf, (const char*) PARAMS_DELIMITER, PARAM_BUFFER);
+                    strncat((char*) sizes_buf, tmp, PARAM_BUFFER);
+                }
+                LOGD(" framze size: width %d, height %d,", vid_frmsize.discrete.width, vid_frmsize.discrete.height);
+            }
+            /* FIXME: will do enum YUYV frame intervals later*/
+        }
+    }
+    close(fd);
+
+    return 0;
+}
+
 int CameraHal::cameraOpen()
 {
     int err;
@@ -216,7 +304,8 @@ int CameraHal::cameraOpen()
     LOG_FUNCTION_NAME
 
     if(mCameraOpened == 0){
-        camera_device = open(VIDEO_DEVICE, O_RDWR, 0);
+        camera_device = open(dev_node, O_RDWR, 0);
+        LOGD("dev_node in open:%s\n", dev_node);
         if (camera_device < 0) {
             LOGE ("Could not open the camera device: %s",  strerror(errno) );
             return -1;
@@ -273,32 +362,73 @@ int CameraHal::cameraTakePicConfig()
 
     if (cameraOpen() < 0)
          return -1;
-
     fd_v4l = camera_device;
 
     memset(&fmt, 0, sizeof(fmt));
     fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
     fmt.fmt.pix.pixelformat = mPictureFormat;
-    fmt.fmt.pix.width = g_pic_width;
-    fmt.fmt.pix.height = g_pic_height;
+    fmt.fmt.pix.width = mPictureWidth;
+    fmt.fmt.pix.height = mPictureHeight;
     fmt.fmt.pix.sizeimage = fmt.fmt.pix.width * fmt.fmt.pix.height * g_still_bpp / 8;
-    fmt.fmt.pix.bytesperline = g_pic_width * g_still_bpp / 8;
+    if (mPictureFormat == V4L2_PIX_FMT_YUV420)
+        fmt.fmt.pix.bytesperline = mPictureWidth;
+    else if (mPictureFormat == V4L2_PIX_FMT_YUYV)
+        fmt.fmt.pix.bytesperline = mPictureWidth * 2;
+    else
+        LOGE("Not supported format");
 
     if (ioctl(fd_v4l, VIDIOC_S_FMT, &fmt) < 0) {
         LOGE("set format failed\n");
         return -1;
     }
 
+    fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    if (ioctl(fd_v4l, VIDIOC_G_FMT, &fmt) < 0)
+        return -1;
+    else {
+        LOGD(" Width = %d\n", fmt.fmt.pix.width);
+        LOGD(" Height = %d \n", fmt.fmt.pix.height);
+        LOGD(" Image size = %d\n", fmt.fmt.pix.sizeimage);
+        LOGD(" pixelformat = %d\n", fmt.fmt.pix.pixelformat);
+    }
+
+    if ((mPictureWidth != fmt.fmt.pix.width) ||
+        (mPictureHeight != fmt.fmt.pix.height)) {
+        LOGD("Hardware not support the width or height");
+        mPictureWidth = fmt.fmt.pix.width;
+        mPictureHeight = fmt.fmt.pix.height;
+        mParameters.setPictureSize(mPictureWidth, mPictureHeight);
+    }
+
+    parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    parm.parm.capture.timeperframe.numerator = 1;
+    parm.parm.capture.timeperframe.denominator = 15;
+#ifndef UVC_CAMERA
+    if (mPictureWidth > 640 || mPictureHeight > 480)
+        parm.parm.capture.capturemode = 3;  /* QXGA mode */
+    else
+        parm.parm.capture.capturemode = 0;  /* VGA mode */
+#endif
+    if (ioctl(fd_v4l, VIDIOC_S_PARM, &parm) < 0) {
+        LOGE("VIDIOC_S_PARM failed\n");
+        return -1;
+    }
+
+#ifdef UVC_CAMERA
+    /* streaming is used from uvc picture since .read function
+       isn't realized in driver */
+    cameraPreviewStart();
+#else
     crop.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
     crop.c.left = 0;
     crop.c.top = 0;
-    crop.c.width = g_pic_width;
-    crop.c.height = g_pic_height;
+    crop.c.width = mPictureWidth;
+    crop.c.height = mPictureHeight;
     if (ioctl(fd_v4l, VIDIOC_S_CROP, &crop) < 0) {
         LOGE("set cropping failed\n");
         return -1;
     }
-
+#endif
     return NO_ERROR;
 }
 
@@ -308,48 +438,20 @@ int CameraHal::cameraPreviewConfig()
     struct v4l2_control ctrl;
     struct v4l2_streamparm parm;
     int fd_v4l;
-    struct v4l2_fmtdesc vid_fmtdesc;
-
     LOG_FUNCTION_NAME
 
     if (cameraOpen() < 0)
         return -1;
-
     fd_v4l = camera_device;
 
-#ifdef UVC_CAMERA
-    /* Get supported format of UVC camera */
-    memset(&vid_fmtdesc, 0, sizeof(vid_fmtdesc));
-    char *buf_types[] = {"VIDEO_CAPTURE","VIDEO_OUTPUT", "VIDEO_OVERLAY"};
-    char *flags[] = {"uncompressed", "compressed"};
-    for (int i = 0;; i++) {
-        memset(&vid_fmtdesc, 0, sizeof(vid_fmtdesc));
-        vid_fmtdesc.index = i;
-	vid_fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-        /* Send the VIDIOC_ENUM_FM ioctl and print the results */
-        if (ioctl(fd_v4l, VIDIOC_ENUM_FMT, &vid_fmtdesc ) == -1)
-            break;
-        /* We got a video format/codec back */
-        LOGD("VIDIOC_ENUM_FMT(%d, %s)\n", vid_fmtdesc.index, buf_types[vid_fmtdesc.type-1]);
-        LOGD( "  type         :%s\n", buf_types[vid_fmtdesc.type-1]);
-        LOGD("  flags        :%s\n", flags[vid_fmtdesc.flags]);
-        LOGD("  description  :%s\n", vid_fmtdesc.description);
-        /* Convert the pixelformat attributes from FourCC into 'human readable' format*/
-        LOGD("  pixelformat  :%c%c%c%c\n",
-                     vid_fmtdesc.pixelformat & 0xFF, (vid_fmtdesc.pixelformat >> 8) & 0xFF,
-                    (vid_fmtdesc.pixelformat >> 16) & 0xFF, (vid_fmtdesc.pixelformat >> 24) & 0xFF);
-        if (vid_fmtdesc.pixelformat == V4L2_PIX_FMT_YUV420) {
-	    mRecordFormat = mPictureFormat = V4L2_PIX_FMT_YUV420;
-	} else
-	    mRecordFormat = mPictureFormat = V4L2_PIX_FMT_YUYV;
-    }/* End of get_supported_video_formats() */
-#endif
-
     fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
     fmt.fmt.pix.pixelformat = mRecordFormat;
     fmt.fmt.pix.width = mRecordWidth;
     fmt.fmt.pix.height = mRecordHeight;
-    fmt.fmt.pix.bytesperline = mRecordWidth;
+    if (mRecordFormat == V4L2_PIX_FMT_YUV420)
+        fmt.fmt.pix.bytesperline = mRecordWidth;
+    else if (mRecordFormat == V4L2_PIX_FMT_YUYV)
+        fmt.fmt.pix.bytesperline = mRecordWidth * 2;
     fmt.fmt.pix.priv = 0;
     fmt.fmt.pix.sizeimage = 0;
 
@@ -362,7 +464,7 @@ int CameraHal::cameraPreviewConfig()
     parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
     parm.parm.capture.timeperframe.numerator = 1;
     parm.parm.capture.timeperframe.denominator = PREVIEW_FRAMERATE;
-    parm.parm.capture.capturemode = g_capture_mode;
+    parm.parm.capture.capturemode = 0;  /* VGA */
 
     if (ioctl(fd_v4l, VIDIOC_S_PARM, &parm) < 0) {
         LOGE("VIDIOC_S_PARM failed\n");
@@ -411,8 +513,8 @@ int CameraHal::cameraPreviewStart()
     req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
     req.memory = V4L2_MEMORY_MMAP;
     if (ioctl(fd_v4l, VIDIOC_REQBUFS, &req) < 0) {
-	    LOGE("v4l_capture_setup: VIDIOC_REQBUFS failed\n");
-	    return -1;
+        LOGE("v4l_capture_setup: VIDIOC_REQBUFS failed\n");
+        return -1;
     }
 
     for (i = 0; i < CAPTURE_BUFFER_NUM; i++) {
@@ -457,9 +559,8 @@ int CameraHal::cameraPreviewStart()
     if (ioctl (fd_v4l, VIDIOC_STREAMON, &type) < 0) {
         LOGE("VIDIOC_STREAMON error\n");
         return -1;
-    } else {
+    } else
         LOGE("VIDIOC_STREAMON ok\n");
-    }
 
     return 0;
 }
@@ -518,28 +619,56 @@ void CameraHal::previewOneFrame()
     cfilledbuffer.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
     cfilledbuffer.memory = V4L2_MEMORY_MMAP;
 
-    /* De-queue the next avaliable buffer */
+#ifdef UVC_CAMERA
+    /* De-queue the next avaiable buffer */
+    ret = ioctl(camera_device, VIDIOC_DQBUF, &cfilledbuffer);
+    if (ret < 0) {
+        LOGE("uvc camera device VIDIOC_DQBUF failure, ret=%d", ret);
+        error_status = -1;
+        return;
+    }
+#else
+    /* De-queue the next avaliable buffer in loop since timout is used in driver */
     while (ioctl(camera_device, VIDIOC_DQBUF, &cfilledbuffer) < 0) {
-        LOGE("VIDIOC_DQBUF Failed!!!");
+        LOGE("VIDIOC_DQBUF Failed in previewOneFrame!!!");
+	usleep(1000);
     }
+#endif
     nCameraBuffersQueued--;
     index = cfilledbuffer.index;
 
     image_size = mRecordFrameSize;
-
     /* Convert YUYV to YUV420SP and put to mPreviewBuffer */
     if (mRecordFormat == V4L2_PIX_FMT_YUYV)
         convertYUYVtoYUV420SP(buffers[cfilledbuffer.index].start,
                                  (uint8_t *)mPreviewBuffer->pointer(), mRecordWidth, mRecordHeight);
 
+    if ((mMsgEnabled & CAMERA_MSG_VIDEO_FRAME) && mRecordRunning) {
+        nsecs_t timeStamp = systemTime(SYSTEM_TIME_MONOTONIC);
+        for(i = 0 ; i < kVideoBufferCount; i ++) {
+            if(mVideoBufferUsing[i] == 0) {
+                if (mRecordFormat == V4L2_PIX_FMT_YUYV)
+                    memcpy(mVideoBuffer[i]->pointer(), mPreviewBuffer->pointer(), image_size);
+                else
+                    memcpy(mVideoBuffer[i]->pointer(),
+		                       (void*)buffers[cfilledbuffer.index].start, image_size);
+                 mVideoBufferUsing[i] = 1;
+                 mDataCbTimestamp(timeStamp, CAMERA_MSG_VIDEO_FRAME, mVideoBuffer[i], mCallbackCookie);
+                 break;
+            }
+        }
+        if (i == kVideoBufferCount)
+                 LOGD("no Buffer can be used for record\n");
+    }
+
     /* Notify overlay of a new frame. */
     if (mOverlay != 0) {
         mOverlay->dequeueBuffer(&overlaybuffer);
         void* address = mOverlay->getBufferAddress(overlaybuffer);
         nOverlayBuffersQueued--;
-	if (mRecordFormat == V4L2_PIX_FMT_YUYV)
+        if (mRecordFormat == V4L2_PIX_FMT_YUYV)
             memcpy(address, mPreviewBuffer->pointer(), image_size);
-	else
+        else
             memcpy(address, (void*)buffers[cfilledbuffer.index].start,  image_size);
         if (mOverlay->queueBuffer(overlaybuffer))
             LOGD("qbuf failed. May be bcos stream was not turned on yet. So try again");
@@ -554,39 +683,18 @@ void CameraHal::previewOneFrame()
         mDataCb(CAMERA_MSG_PREVIEW_FRAME, mPreviewBuffer, mCallbackCookie);
     }
 
-    /* Take picture */
-    if (mIsTakingPic) {
-#ifdef USE_FSL_JPEG_ENC
-        sp<MemoryBase> jpegMemBase = encodeImage((void*)mPreviewBuffer->pointer(), image_size);
-        if (mMsgEnabled & CAMERA_MSG_COMPRESSED_IMAGE) {
-            LOGI("==========CAMERA_MSG_COMPRESSED_IMAGE!!!!");
-            mDataCb(CAMERA_MSG_COMPRESSED_IMAGE, jpegMemBase, mCallbackCookie);
-        }
-#endif
-	mIsTakingPic = false;
-    }
-    if ((mMsgEnabled & CAMERA_MSG_VIDEO_FRAME) && mRecordRunning) {
-        nsecs_t timeStamp = systemTime(SYSTEM_TIME_MONOTONIC);
-
-        for(i = 0 ; i < kVideoBufferCount; i ++) {
-            if(mVideoBufferUsing[i] == 0) {
-                if (mRecordFormat == V4L2_PIX_FMT_YUYV)
-                    memcpy(mVideoBuffer[i]->pointer(), mPreviewBuffer->pointer(), image_size);
-                else
-                    memcpy(mVideoBuffer[i]->pointer(),
-		               (void*)buffers[cfilledbuffer.index].start, image_size);
-                 mVideoBufferUsing[i] = 1;
-                 mDataCbTimestamp(timeStamp, CAMERA_MSG_VIDEO_FRAME, mVideoBuffer[i], mCallbackCookie);
-                 break;
-            }
-        }
-        if (i == kVideoBufferCount)
-                 LOGD("no Buffer can be used for record\n");
+#ifdef UVC_CAMER
+    ret = ioctl(camera_device, VIDIOC_QBUF, &cfilledbuffer);
+    if (ret < 0) {
+        LOGE("uvc camera device VIDIOC_QBUF failure, ret=%d", ret);
+        error_status = -1;
+        return;
     }
-
+#else
     while (ioctl(camera_device, VIDIOC_QBUF, &cfilledbuffer) < 0) {
 	    LOGE("VIDIOC_QBUF Failed.");
     }
+#endif
     nCameraBuffersQueued++;
 
     return;
@@ -594,8 +702,8 @@ void CameraHal::previewOneFrame()
 
 int CameraHal::previewThread()
 {
-    if (mPreviewRunning) {
-	previewOneFrame();
+    if (mPreviewRunning && !error_status) {
+        previewOneFrame();
     }
 
     return NO_ERROR;
@@ -677,6 +785,7 @@ void CameraHal::cameraPreviewStop()
             previewThread->requestExitAndWait();
         }
 
+    if (!error_status) {
         memset(&cfilledbuffer, 0, sizeof (cfilledbuffer));
         cfilledbuffer.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         cfilledbuffer.memory = V4L2_MEMORY_MMAP;
@@ -689,7 +798,7 @@ void CameraHal::cameraPreviewStop()
             nCameraBuffersQueued--;
             LOGD("DQUEUING UNDQUEUED BUFFERS exit = %d",nCameraBuffersQueued);
         }
-
+}
         creqbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
         if (ioctl(camera_device, VIDIOC_STREAMOFF, &creqbuf.type) == -1) {
             LOGE("VIDIOC_STREAMOFF Failed");
@@ -856,15 +965,18 @@ void CameraHal::convertYUYVtoYUV420SP(uint8_t *inputBuffer, uint8_t *outputBuffe
 int CameraHal::cameraTakePicture()
 {
 
-    int w, h;
+    int w, h, ret;
     int pictureSize;
     unsigned long base, offset;
     struct v4l2_streamparm parm;
     struct v4l2_format fmt;
     sp<MemoryBase> mPictureBuffer;
     sp<MemoryBase> memBase;
-    char *buf1;
-    
+    int target_size, count = 0;
+    uint8_t *buf1;
+    struct v4l2_requestbuffers creqbuf;
+    struct v4l2_buffer cfilledbuffer;
+
     LOG_FUNCTION_NAME
 
     if (mMsgEnabled & CAMERA_MSG_SHUTTER) {
@@ -872,9 +984,10 @@ int CameraHal::cameraTakePicture()
         mNotifyCb(CAMERA_MSG_SHUTTER, 0, 0, mCallbackCookie);
     }
 
-    mParameters.setPictureSize(g_pic_width, g_pic_height);
     mParameters.getPictureSize(&w, &h);
     LOGD("Picture Size: Width = %d \tHeight = %d", w, h);
+    mPictureWidth = w;
+    mPictureHeight = h;
 
     if(cameraTakePicConfig() < 0){
         return -1;
@@ -886,30 +999,52 @@ int CameraHal::cameraTakePicture()
         return -1;
     }
 
-    buf1 = (char *)malloc(fmt.fmt.pix.sizeimage);
+    LOGD(" Image size = %d\n", fmt.fmt.pix.sizeimage);
+    LOGD(" pixelformat = %d\n", fmt.fmt.pix.pixelformat);
+
+    target_size = fmt.fmt.pix.sizeimage;
+
+    buf1 = (uint8_t *)malloc(target_size);
     if (!buf1){
         LOGE("buffer malloc error!\n");
         free(buf1);
         return -1;
     }
+    memset(buf1, 0 ,target_size);
 
-    memset(buf1, 0, fmt.fmt.pix.sizeimage);
+#ifdef UVC_CAMERA
+    memset(&cfilledbuffer, 0, sizeof (cfilledbuffer));
+    cfilledbuffer.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    cfilledbuffer.memory = V4L2_MEMORY_MMAP;
 
-    if (read(camera_device, buf1, fmt.fmt.pix.sizeimage) != fmt.fmt.pix.sizeimage) {
+    /* De-queue the next avaliable buffer */
+    ret = ioctl(camera_device, VIDIOC_DQBUF, &cfilledbuffer);
+    if (ret < 0){
+        LOGE("VIDIOC_DQBUF Failed!!!");
+        error_status = -1;
+    }
+
+    convertYUYVtoYUV420SP(buffers[cfilledbuffer.index].start,
+                          buf1, mPictureWidth, mPictureHeight);
+
+    target_size = mPictureWidth * mPictureHeight * 3 / 2;
+#else
+    /* Use read to get one picture for on-board camera */
+    if (read(camera_device, buf1, target_size) != target_size) {
         LOGE("v4l2 read error.\n");
         free(buf1);
         return -1;
     }
 
+#endif
     LOGD("Generated a picture");
 
 #ifdef USE_FSL_JPEG_ENC
-    sp<MemoryBase> jpegMemBase = encodeImage((void*)buf1, fmt.fmt.pix.sizeimage);
+    sp<MemoryBase> jpegMemBase = encodeImage((void*)buf1, target_size);
     if (mMsgEnabled & CAMERA_MSG_COMPRESSED_IMAGE) {
         LOGI("==========CAMERA_MSG_COMPRESSED_IMAGE");
         mDataCb(CAMERA_MSG_COMPRESSED_IMAGE, jpegMemBase, mCallbackCookie);
     }
-
 #else
     LOGI("CameraHal::pictureThread get default image");
     sp<MemoryHeapBase> heap = new MemoryHeapBase(kCannedJpegSize);
@@ -919,6 +1054,28 @@ int CameraHal::cameraTakePicture()
         mJpegPictureCallback(mem, mPictureCallbackCookie);
 #endif
 
+#ifdef UVC_CAMERA
+    /* stop video stream and close device */
+    memset(&cfilledbuffer, 0, sizeof (cfilledbuffer));
+    cfilledbuffer.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    cfilledbuffer.memory = V4L2_MEMORY_MMAP;
+
+    while ((count < CAPTURE_BUFFER_NUM - 1) && !error_status) {
+        if (ioctl(camera_device, VIDIOC_DQBUF, &cfilledbuffer) < 0) {
+            LOGE("VIDIOC_DQBUF Failed before STREAMOFF!!!");
+            error_status = -1;
+        }
+        count++;
+    }
+
+    creqbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    if (ioctl(camera_device, VIDIOC_STREAMOFF, &creqbuf.type) == -1) {
+        LOGE("VIDIOC_STREAMOFF Failed");
+    }
+#endif
+    /* Close device */
+    cameraClose();
+
 exit0:
     if (buf1)
             free(buf1);
@@ -934,18 +1091,11 @@ status_t CameraHal::takePicture()
        ins't realized on uvc_v4l2 driver, but, read function is called
        for CSI camera */
     LOGD("Camera is taking picture!");
-#ifdef UVC_CAMERA
-    mIsTakingPic = 1;
-    mParameters.setPictureSize(mRecordWidth, mRecordHeight);
-#else
     /* Stop preview, start picture capture, and then restart preview again for CSI camera*/
-    cameraPreviewStop();
 
+    cameraPreviewStop();
     cameraTakePicture();
 
-    cameraPreviewConfig();
-    cameraPreviewStart();
-#endif
     return NO_ERROR;
 }
 
@@ -1013,8 +1163,10 @@ status_t CameraHal::setParameters(const CameraParameters& params)
     LOGD("mRecordWidth %d, mRecordHeight %d\n", mRecordWidth, mRecordHeight);
 
     mParameters.getPictureSize(&mPictureWidth, &mPictureHeight);
+    LOGD("mPictureWidth %d, mPictureHeight %d\n", mRecordWidth, mRecordHeight);
+
     if (!mPictureWidth || !mPictureHeight) {
-	/* This is a hack. MMS APP is not setting the resolution correctly. So hardcoding it. */
+        /* This is a hack. MMS APP is not setting the resolution correctly. So hardcoding it. */
         mParameters.setPictureSize(PICTURE_WIDTH, PICTURE_HEIGHT);
         mParameters.getPictureSize(&mPictureWidth, &mPictureHeight);
     }
@@ -1221,11 +1373,10 @@ sp<MemoryBase> CameraHal::encodeImage(void *buffer, uint32_t bufflen)
          * to allocate memory based on them */
         mem_info = &(obj_ptr->mem_infos.mem_info[index]);
         mem_info->memptr = (void *) malloc(mem_info->size);
-	if(mem_info->memptr==NULL)
-	{
-		LOGI("Malloc error after query\n");
-		goto done;
-	}
+        if(mem_info->memptr==NULL) {
+            LOGI("Malloc error after query\n");
+            goto done;
+        }
     }
 
 
diff --git a/libcamera/CameraHal.h b/libcamera/CameraHal.h
index 03dac15..f5cabcd 100644
--- a/libcamera/CameraHal.h
+++ b/libcamera/CameraHal.h
@@ -45,6 +45,7 @@
 #include <binder/MemoryHeapBase.h>
 #include <camera/CameraHardwareInterface.h>
 #include <ui/Overlay.h>
+#include <dirent.h>
 
 #define FB_DEVICE               "/dev/graphics/fb0"
 #define MIN_WIDTH               176
@@ -56,8 +57,6 @@
 
 #define RECORDING_WIDTH_NORMAL  352    //default recording width
 #define RECORDING_HEIGHT_NORMAL 288     //default recording height
-#define RECORDING_WIDTH_LOW     176     //default recording width
-#define RECORDING_HEIGHT_LOW    144     //default recording height
 
 #define CAPTURE_BUFFER_NUM      3
 #define LOG_FUNCTION_NAME       LOGD("%d: %s() Executing...", __LINE__, __FUNCTION__);
@@ -65,12 +64,7 @@
 //#define UVC_CAMERA              1
 
 #define PARAM_BUFFER 		512
-
-#ifdef UVC_CAMERA
-#define VIDEO_DEVICE            "/dev/video1"
-#else
-#define VIDEO_DEVICE            "/dev/video0"
-#endif
+#define FILENAME_LENGTH		256
 
 #ifdef USE_FSL_JPEG_ENC
 #include "jpeg_enc_interface.h" 
@@ -163,13 +157,11 @@ private:
 
     int validateSize(int w, int h);
     void* cropImage(unsigned long buffer);
+
     void convertYUYVtoYUV420SP(uint8_t *inputBuffer, uint8_t *outputBuffer, int width, int height);
-#ifndef UVC_CAMERA
-    void convertYUYVtoUYVY(uint8_t *inputBuffer, uint8_t *outputBuffer, int width, int height);
-    sp<MemoryBase> encodeImage(void *buffer, uint32_t bufflen);
-#else
+    int uvcGetDeviceAndCapability(char *sizes_buf);
+
     sp<MemoryBase> encodeImage(void *buffer, uint32_t bufflen);
-#endif
 
     int cameraOpen();
     int cameraClose();
@@ -233,20 +225,13 @@ private:
 
     static int camera_device;
     static int g_camera_framerate;
+    static char dev_node[FILENAME_LENGTH];
 
     //used for priview
     static int g_rotate;
-    static int g_recording_width;
-    static int g_recording_height;
-    static int g_recording_level;
-
     //used for taking picture
-    static int g_pic_width;
-    static int g_pic_height;
     static int g_still_bpp;
-
     //used for recording
-    static int g_capture_mode;		//0:low resolution 1:high resolution
     static struct picbuffer buffers[3];
 
     static const char supportedPictureSizes[];
@@ -255,6 +240,8 @@ private:
     static const char supprotedThumbnailSizes[];
     static const char PARAMS_DELIMITER[];
 
+    static int error_status;
+
 #ifdef DUMP_CAPTURE_YUV
     static FILE *record_yuvFile;
     static FILE *capture_yuvFile;
-- 
1.8.0

