From 45167a4176ce106deffd89d4dd287c3b0dbb5498 Mon Sep 17 00:00:00 2001
From: Xinyu Chen <xinyu.chen@freescale.com>
Date: Fri, 14 Sep 2012 11:44:18 +0800
Subject: [PATCH 334/635] ENGR00221840-1 jb upgrade: Adapt the LOG api to JB

Change LOGI --> ALOGI due to JB upgrade

Change-Id: I60026aadc624254f751777abdff026d36285ca3a
Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 alsa/alsa_imx.cpp                       |  98 ++++++++---------
 alsa/imx_audio_hal.cpp                  |   2 +-
 alsa/tinyalsa_hal.c                     |  58 +++++-----
 hwcomposer/hwcomposer.cpp               |   2 +-
 libgps/athr_gps.c                       |  32 +++---
 libsensors/LightSensor.cpp              |  12 +-
 libsensors/SensorBase.cpp               |  22 ++--
 libsensors/sensors.cpp                  |  10 +-
 mx5x/hwcomposer/hwc_common.h            |  10 +-
 mx5x/hwcomposer/hwcomposer.cpp          |   2 +-
 mx5x/libcamera/CameraHal.cpp            |   6 +-
 mx5x/libcamera/CameraModule.cpp         |  62 +++++------
 mx5x/libcamera/Camera_utils.h           |  10 +-
 mx5x/libcopybit/copybit.cpp             |  16 +--
 mx5x/libgralloc/framebuffer.cpp         | 144 ++++++++++++------------
 mx5x/libgralloc/gralloc.cpp             |  12 +-
 mx5x/libgralloc/gralloc_priv.h          |   2 +-
 mx5x/libgralloc/mapper.cpp              |  16 +--
 mx6/hwcomposer/FG_device.cpp            |  14 ++-
 mx6/hwcomposer/blit_ipu.cpp             |   6 +-
 mx6/hwcomposer/hwc_common.h             |  10 +-
 mx6/hwcomposer/hwcomposer.cpp           |  21 ++--
 mx6/libcamera/CameraHal.cpp             |   2 +-
 mx6/libcamera/CameraModule.cpp          |  64 +++++------
 mx6/libcamera/Camera_utils.h            |  12 +-
 mx6/libcamera/JpegEncoderSoftware.cpp   |   2 +-
 mx6/libcamera/PP_ipulib.cpp             |   2 +-
 mx6/libcamera/V4l2CsiDevice.cpp         |   2 +-
 mx6/libgralloc_wrapper/Android.mk       |   8 --
 mx6/libgralloc_wrapper/XmlTool.cpp      |  16 +--
 mx6/libgralloc_wrapper/display_mode.cpp |  12 +-
 mx6/libgralloc_wrapper/display_mode.h   |   1 +
 mx6/libgralloc_wrapper/framebuffer.cpp  | 187 +++++++++++++++++---------------
 mx6/libgralloc_wrapper/gralloc.cpp      |   6 +-
 mx6/libgralloc_wrapper/gralloc_priv.h   |   2 +-
 35 files changed, 446 insertions(+), 437 deletions(-)

diff --git a/alsa/alsa_imx.cpp b/alsa/alsa_imx.cpp
index 4869ca1..b171842 100755
--- a/alsa/alsa_imx.cpp
+++ b/alsa/alsa_imx.cpp
@@ -118,7 +118,7 @@ static int s_device_open(const hw_module_t* module, const char* name,
 
     *device = &dev->common;
 
-    LOGD("i.MX ALSA module opened");
+    ALOGD("i.MX ALSA module opened");
 
     return 0;
 }
@@ -264,20 +264,20 @@ const char *deviceName(alsa_handle_t *alsa_handle, uint32_t device, int mode, in
 
     card = -1;
     if (snd_card_next(&card) < 0 || card < 0) {
-        LOGD("no soundcards found...");
+        ALOGD("no soundcards found...");
         return "default";
     }
-    LOGD("**** List of %s Hardware Devices ****\n",
+    ALOGD("**** List of %s Hardware Devices ****\n",
            snd_pcm_stream_name(stream));
     while (card >= 0) {
         char name[32];
         sprintf(name, "hw:%d", card);
         if ((err = snd_ctl_open(&handle, name, 0)) < 0) {
-            LOGD("control open (%i): %s", card, snd_strerror(err));
+            ALOGD("control open (%i): %s", card, snd_strerror(err));
             goto next_card;
         }
         if ((err = snd_ctl_card_info(handle, info)) < 0) {
-            LOGD("control hardware info (%i): %s", card, snd_strerror(err));
+            ALOGD("control hardware info (%i): %s", card, snd_strerror(err));
             snd_ctl_close(handle);
             goto next_card;
         }
@@ -285,7 +285,7 @@ const char *deviceName(alsa_handle_t *alsa_handle, uint32_t device, int mode, in
         while (1) {
             unsigned int count;
             if (snd_ctl_pcm_next_device(handle, &dev)<0)
-                LOGD("snd_ctl_pcm_next_device");
+                ALOGD("snd_ctl_pcm_next_device");
             if (dev < 0)
                 break;
             snd_pcm_info_set_device(pcminfo, dev);
@@ -293,11 +293,11 @@ const char *deviceName(alsa_handle_t *alsa_handle, uint32_t device, int mode, in
             snd_pcm_info_set_stream(pcminfo, stream);
             if ((err = snd_ctl_pcm_info(handle, pcminfo)) < 0) {
                 if (err != -ENOENT)
-                    LOGD("control digital audio info (%i): %s", card, snd_strerror(err));
+                    ALOGD("control digital audio info (%i): %s", card, snd_strerror(err));
                 continue;
             }
             
-            LOGD("card %i: %s [%s], device %i: %s [%s]\n",
+            ALOGD("card %i: %s [%s], device %i: %s [%s]\n",
                 card, snd_ctl_card_info_get_id(info), snd_ctl_card_info_get_name(info),
                 dev,
                 snd_pcm_info_get_id(pcminfo),
@@ -348,7 +348,7 @@ const char *deviceName(alsa_handle_t *alsa_handle, uint32_t device, int mode, in
     next_card:
 
         if (snd_card_next(&card) < 0) {
-            LOGD("snd_card_next");
+            ALOGD("snd_card_next");
             break;
         }
     }
@@ -444,7 +444,7 @@ status_t setHardwareParams(alsa_handle_t *handle, int mmap)
 
     err = snd_pcm_hw_params_any(handle->handle, hardwareParams);
     if (err < 0) {
-        LOGE("Unable to configure hardware: %s", snd_strerror(err));
+        ALOGE("Unable to configure hardware: %s", snd_strerror(err));
         goto done;
     }
 
@@ -458,11 +458,11 @@ status_t setHardwareParams(alsa_handle_t *handle, int mmap)
         err = snd_pcm_hw_params_set_access_mask(handle->handle, hardwareParams, mask);
 
         if (err < 0 ) {
-            LOGW("Unable to enable MMAP access for PCM: %s", snd_strerror(err));
+            ALOGW("Unable to enable MMAP access for PCM: %s", snd_strerror(err));
             err = snd_pcm_hw_params_set_access(handle->handle, hardwareParams,
                     SND_PCM_ACCESS_RW_INTERLEAVED);
             if (err < 0) {
-                LOGE("Unable to configure PCM read/write format: %s",
+                ALOGE("Unable to configure PCM read/write format: %s",
                     snd_strerror(err));
                 free(mask);
                 goto done;
@@ -470,16 +470,16 @@ status_t setHardwareParams(alsa_handle_t *handle, int mmap)
             handle->mmap = 0;
         } else {
             handle->mmap = 1;
-            LOGW("enable MMAP access for PCM");
+            ALOGW("enable MMAP access for PCM");
         }
         free(mask);
     }else
     {
-        LOGW("Don't enable MMAP access for PCM");
+        ALOGW("Don't enable MMAP access for PCM");
         err = snd_pcm_hw_params_set_access(handle->handle, hardwareParams,
                 SND_PCM_ACCESS_RW_INTERLEAVED);
         if (err < 0) {
-            LOGE("Unable to configure PCM read/write format: %s",
+            ALOGE("Unable to configure PCM read/write format: %s",
                     snd_strerror(err));
             goto done;
         }
@@ -489,44 +489,44 @@ status_t setHardwareParams(alsa_handle_t *handle, int mmap)
     err = snd_pcm_hw_params_set_format(handle->handle, hardwareParams,
             handle->format);
     if (err < 0) {
-        LOGE("Unable to configure PCM format %s (%s): %s",
+        ALOGE("Unable to configure PCM format %s (%s): %s",
                 formatName, formatDesc, snd_strerror(err));
         goto done;
     }
 
-    LOGV("Set %s PCM format to %s (%s)", streamName(handle), formatName, formatDesc);
+    ALOGV("Set %s PCM format to %s (%s)", streamName(handle), formatName, formatDesc);
 
     err = snd_pcm_hw_params_set_channels(handle->handle, hardwareParams,
             handle->channels);
     if (err < 0) {
-        LOGE("Unable to set channel count to %i: %s",
+        ALOGE("Unable to set channel count to %i: %s",
                 handle->channels, snd_strerror(err));
         goto done;
     }
 
-    LOGV("Using %i %s .", handle->channels,
+    ALOGV("Using %i %s .", handle->channels,
             handle->channels == 1 ? "channel" : "channels");
 
     err = snd_pcm_hw_params_set_rate_near(handle->handle, hardwareParams,
             &requestedRate, 0);
 
     if (err < 0)
-        LOGE("Unable to set %s sample rate to %u: %s",
+        ALOGE("Unable to set %s sample rate to %u: %s",
                 streamName(handle), handle->sampleRate, snd_strerror(err));
     else if (requestedRate != handle->sampleRate)
         // Some devices have a fixed sample rate, and can not be changed.
         // This may cause resampling problems; i.e. PCM playback will be too
         // slow or fast.
-        LOGW("Requested rate (%u HZ) does not match actual rate (%u HZ)",
+        ALOGW("Requested rate (%u HZ) does not match actual rate (%u HZ)",
                 handle->sampleRate, requestedRate);
     else
-        LOGW("Set sample rate to %u HZ", requestedRate);
+        ALOGW("Set sample rate to %u HZ", requestedRate);
 
     // get the max buffer size we can set
     /* pass cts, don't use the max buffer size,which will add big latency
     err = snd_pcm_hw_params_get_buffer_size_max(hardwareParams, &bufferSize);
     if (err < 0) {
-        LOGE("Unable to get max buffer size:  %s", snd_strerror(err));
+        ALOGE("Unable to get max buffer size:  %s", snd_strerror(err));
         goto done;
     }
     */
@@ -534,7 +534,7 @@ status_t setHardwareParams(alsa_handle_t *handle, int mmap)
     err = snd_pcm_hw_params_set_buffer_size(handle->handle, hardwareParams,
             bufferSize);
     if (err < 0) {
-        LOGE("Unable to set buffer size to %d:  %s",
+        ALOGE("Unable to set buffer size to %d:  %s",
                 (int)bufferSize, snd_strerror(err));
         goto done;
     }
@@ -548,14 +548,14 @@ status_t setHardwareParams(alsa_handle_t *handle, int mmap)
         err = snd_pcm_hw_params_set_period_time_near(handle->handle,
                 hardwareParams, &periodTime, NULL);
         if (err < 0) {
-            LOGE("Unable to set the period time for latency: %s", snd_strerror(err));
+            ALOGE("Unable to set the period time for latency: %s", snd_strerror(err));
             goto done;
         }
         snd_pcm_uframes_t periodSize;
         err = snd_pcm_hw_params_get_period_size(hardwareParams, &periodSize,
                 NULL);
         if (err < 0) {
-            LOGE("Unable to get the period size for latency: %s", snd_strerror(err));
+            ALOGE("Unable to get the period size for latency: %s", snd_strerror(err));
             goto done;
         }
         bufferSize = periodSize * 4;
@@ -563,42 +563,42 @@ status_t setHardwareParams(alsa_handle_t *handle, int mmap)
         err = snd_pcm_hw_params_set_buffer_size_near(handle->handle,
                 hardwareParams, &bufferSize);
         if (err < 0) {
-            LOGE("Unable to set the buffer size for latency: %s", snd_strerror(err));
+            ALOGE("Unable to set the buffer size for latency: %s", snd_strerror(err));
             goto done;
         }
-        LOGV("Setup buffers time near for latency failed %d", latency);
+        ALOGV("Setup buffers time near for latency failed %d", latency);
     } else {
         // OK, we got buffer time near what we expect. See what that did for bufferSize.
         err = snd_pcm_hw_params_get_buffer_size(hardwareParams, &bufferSize);
         if (err < 0) {
-            LOGE("Unable to get the buffer size for latency: %s", snd_strerror(err));
+            ALOGE("Unable to get the buffer size for latency: %s", snd_strerror(err));
             goto done;
         }
         // Does set_buffer_time_near change the passed value? It should.
         err = snd_pcm_hw_params_get_buffer_time(hardwareParams, &latency, NULL);
         if (err < 0) {
-            LOGE("Unable to get the buffer time for latency: %s", snd_strerror(err));
+            ALOGE("Unable to get the buffer time for latency: %s", snd_strerror(err));
             goto done;
         }
         unsigned int periodTime = latency / 4;
         err = snd_pcm_hw_params_set_period_time_near(handle->handle,
                 hardwareParams, &periodTime, NULL);
         if (err < 0) {
-            LOGE("Unable to set the period time for latency: %s", snd_strerror(err));
+            ALOGE("Unable to set the period time for latency: %s", snd_strerror(err));
             goto done;
         }
-        LOGV("Setup buffers time near for latency ok %d", latency);
+        ALOGV("Setup buffers time near for latency ok %d", latency);
     }
 
-    LOGW("Buffer size: %d", (int)bufferSize);
-    LOGW("Latency: %d", (int)latency);
+    ALOGW("Buffer size: %d", (int)bufferSize);
+    ALOGW("Latency: %d", (int)latency);
 
     handle->bufferSize = bufferSize;
     handle->latency = latency;
 
     // Commit the hardware parameters back to the device.
     err = snd_pcm_hw_params(handle->handle, hardwareParams);
-    if (err < 0) LOGE("Unable to set hardware parameters: %s", snd_strerror(err));
+    if (err < 0) ALOGE("Unable to set hardware parameters: %s", snd_strerror(err));
 
     done:
     snd_pcm_hw_params_free(hardwareParams);
@@ -623,7 +623,7 @@ status_t setSoftwareParams(alsa_handle_t *handle)
     // Get the current software parameters
     err = snd_pcm_sw_params_current(handle->handle, softwareParams);
     if (err < 0) {
-        LOGE("Unable to get software parameters: %s", snd_strerror(err));
+        ALOGE("Unable to get software parameters: %s", snd_strerror(err));
         goto done;
     }
 
@@ -645,7 +645,7 @@ status_t setSoftwareParams(alsa_handle_t *handle)
     err = snd_pcm_sw_params_set_start_threshold(handle->handle, softwareParams,
             startThreshold);
     if (err < 0) {
-        LOGE("Unable to set start threshold to %lu frames: %s",
+        ALOGE("Unable to set start threshold to %lu frames: %s",
                 startThreshold, snd_strerror(err));
         goto done;
     }
@@ -653,7 +653,7 @@ status_t setSoftwareParams(alsa_handle_t *handle)
     err = snd_pcm_sw_params_set_stop_threshold(handle->handle, softwareParams,
             stopThreshold);
     if (err < 0) {
-        LOGE("Unable to set stop threshold to %lu frames: %s",
+        ALOGE("Unable to set stop threshold to %lu frames: %s",
                 stopThreshold, snd_strerror(err));
         goto done;
     }
@@ -663,14 +663,14 @@ status_t setSoftwareParams(alsa_handle_t *handle)
     err = snd_pcm_sw_params_set_avail_min(handle->handle, softwareParams,
             periodSize);
     if (err < 0) {
-        LOGE("Unable to configure available minimum to %lu: %s",
+        ALOGE("Unable to configure available minimum to %lu: %s",
                 periodSize, snd_strerror(err));
         goto done;
     }
 
     // Commit the software parameters back to the device.
     err = snd_pcm_sw_params(handle->handle, softwareParams);
-    if (err < 0) LOGE("Unable to configure software parameters: %s",
+    if (err < 0) ALOGE("Unable to configure software parameters: %s",
             snd_strerror(err));
 
     done:
@@ -683,7 +683,7 @@ void setDefaultControls(uint32_t devices, int mode, const char *cardname)
 {
 
     ALSAControl *ctl = new ALSAControl(cardname);
-    LOGD ("setDefaultControls set card: %s",cardname);
+    ALOGD ("setDefaultControls set card: %s",cardname);
 
     if(devices & IMX_IN_CODEC_DEFAULT)
     {
@@ -906,7 +906,7 @@ void setAlsaControls(alsa_handle_t *handle, uint32_t devices, int mode)
 
 static status_t s_init(alsa_device_t *module, ALSAHandleList &list)
 {
-    LOGD("Initializing devices for IMX51 ALSA module");
+    ALOGD("Initializing devices for IMX51 ALSA module");
 
     list.clear();
 
@@ -933,7 +933,7 @@ static status_t s_open(alsa_handle_t *handle, uint32_t devices, int mode)
     s_close(handle);
 
     int mmap = 1;
-    LOGD("open called for devices %08x in mode %d...", devices, mode);
+    ALOGD("open called for devices %08x in mode %d...", devices, mode);
 
     const char *stream = streamName(handle);
     const char *devName = deviceName(handle, devices, mode, 1);
@@ -944,7 +944,7 @@ static status_t s_open(alsa_handle_t *handle, uint32_t devices, int mode)
     int err = snd_pcm_open(&handle->handle, devName, direction(handle), 0);
 
     if (err < 0) {
-        LOGE("Failed to Initialize any ALSA %s device: %s", stream, strerror(err));
+        ALOGE("Failed to Initialize any ALSA %s device: %s", stream, strerror(err));
         return NO_INIT;
     }
 
@@ -960,7 +960,7 @@ static status_t s_open(alsa_handle_t *handle, uint32_t devices, int mode)
 
     if (err == NO_ERROR) err = setSoftwareParams(handle);
 
-    LOGI("Initialized ALSA %s device %s", stream, devName);
+    ALOGI("Initialized ALSA %s device %s", stream, devName);
 
     setAlsaControls(handle, devices, mode);
 
@@ -972,7 +972,7 @@ static status_t s_open(alsa_handle_t *handle, uint32_t devices, int mode)
 
 static status_t s_close(alsa_handle_t *handle)
 {
-    LOGW("s_close--");
+    ALOGW("s_close--");
     status_t err = NO_ERROR;
     snd_pcm_t *h = handle->handle;
     handle->handle = 0;
@@ -990,12 +990,12 @@ static status_t s_route(alsa_handle_t *handle, uint32_t devices, int mode)
 {
     status_t status = NO_ERROR;
 
-    LOGD("route called for devices %08x in mode %d...", devices, mode);
+    ALOGD("route called for devices %08x in mode %d...", devices, mode);
 
     if (handle->handle && handle->curDev == devices && handle->curMode == mode)
         ; // Nothing to do
     else if (handle->handle && (handle->devices & devices)) {
-            LOGD("Call setAlsaControls, devices %08x in mode %d...", devices, mode);
+            ALOGD("Call setAlsaControls, devices %08x in mode %d...", devices, mode);
 
             if(mode == AudioSystem::MODE_IN_CALL && (handle->handle_1) && (!handle->handle_1->handle)){
                 status = s_open(handle->handle_1, devices, mode);
@@ -1036,7 +1036,7 @@ static status_t s_route(alsa_handle_t *handle, uint32_t devices, int mode)
             }
     }
     else {
-        LOGW("Maybe the route is wrong!!");
+        ALOGW("Maybe the route is wrong!!");
         status = s_open(handle, devices, mode);
     }
     return status;
diff --git a/alsa/imx_audio_hal.cpp b/alsa/imx_audio_hal.cpp
index 272a827..ae339a9 100644
--- a/alsa/imx_audio_hal.cpp
+++ b/alsa/imx_audio_hal.cpp
@@ -58,7 +58,7 @@ static int imx_adev_open(const hw_module_t* module, const char* name,
     }
 
     if(!found) {
-        LOGW("reload the legacy audio hal");
+        ALOGW("reload the legacy audio hal");
         ret = hw_get_module(AUDIO_HARDWARE_MODULE_ID_LEGACY, &module_audio);
         if(ret)
             goto out;
diff --git a/alsa/tinyalsa_hal.c b/alsa/tinyalsa_hal.c
index 67b442c..1f148b8 100644
--- a/alsa/tinyalsa_hal.c
+++ b/alsa/tinyalsa_hal.c
@@ -205,7 +205,7 @@ static void force_all_standby(struct imx_audio_device *adev)
 static void select_mode(struct imx_audio_device *adev)
 {
     if (adev->mode == AUDIO_MODE_IN_CALL) {
-        LOGE("Entering IN_CALL state, in_call=%d", adev->in_call);
+        ALOGE("Entering IN_CALL state, in_call=%d", adev->in_call);
         if (!adev->in_call) {
             force_all_standby(adev);
             /* force earpiece route for in call state if speaker is the
@@ -229,7 +229,7 @@ static void select_mode(struct imx_audio_device *adev)
             adev->in_call = 1;
         }
     } else {
-        LOGE("Leaving IN_CALL state, in_call=%d, mode=%d",
+        ALOGE("Leaving IN_CALL state, in_call=%d, mode=%d",
              adev->in_call, adev->mode);
         if (adev->in_call) {
             adev->in_call = 0;
@@ -286,7 +286,7 @@ static void select_output_device(struct imx_audio_device *adev)
         }
     }
     /*if mode = AUDIO_MODE_IN_CALL*/
-    LOGW("headphone %d ,headset %d ,speaker %d, earpiece %d, \n", headphone_on, headset_on, speaker_on, earpiece_on);
+    ALOGW("headphone %d ,headset %d ,speaker %d, earpiece %d, \n", headphone_on, headset_on, speaker_on, earpiece_on);
     /* select output stage */
     for(i = 0; i < MAX_AUDIO_CARD_NUM; i++)
         set_route_by_array(adev->mixer[i], adev->card_list[i]->bt_output, bt_on);
@@ -388,7 +388,7 @@ static int start_output_stream(struct imx_stream_out *out)
     unsigned int port = 0;
     int i;
 
-    LOGW("start_output_stream...");
+    ALOGW("start_output_stream...");
     adev->active_output[out->out_id] = out;
 
     if (adev->mode != AUDIO_MODE_IN_CALL) {
@@ -410,11 +410,11 @@ static int start_output_stream(struct imx_stream_out *out)
             break;
         }
         if(i == MAX_AUDIO_CARD_NUM-1) {
-            LOGE("can not find supported device for %d",out->device);
+            ALOGE("can not find supported device for %d",out->device);
             return -EINVAL;
         }
     }
-    LOGW("card %d, port %d device %x", card, port, out->device);
+    ALOGW("card %d, port %d device %x", card, port, out->device);
 
     out->write_flags            = PCM_OUT | PCM_MMAP;
     out->config.period_size     = LONG_PERIOD_SIZE;
@@ -441,7 +441,7 @@ static int start_output_stream(struct imx_stream_out *out)
     out->pcm = pcm_open(card, port, out->write_flags, &out->config);
 
     if (!pcm_is_ready(out->pcm)) {
-        LOGE("cannot open pcm_out driver: %s", pcm_get_error(out->pcm));
+        ALOGE("cannot open pcm_out driver: %s", pcm_get_error(out->pcm));
         pcm_close(out->pcm);
         adev->active_output[out->out_id] = NULL;
         return -ENOMEM;
@@ -494,7 +494,7 @@ static size_t get_input_buffer_size(uint32_t sample_rate, int format, int channe
     size = (pcm_config_mm_in.period_size * sample_rate) / pcm_config_mm_in.rate;
     size = ((size + 15) / 16) * 16;
 
-    LOGW("get_input_buffer_size size = %d, channel_count = %d",size,channel_count);
+    ALOGW("get_input_buffer_size size = %d, channel_count = %d",size,channel_count);
     return size * channel_count * sizeof(short);
 }
 
@@ -572,7 +572,7 @@ static int get_playback_delay(struct imx_stream_out *out,
         buffer->time_stamp.tv_sec  = 0;
         buffer->time_stamp.tv_nsec = 0;
         buffer->delay_ns           = 0;
-        LOGV("get_playback_delay(): pcm_get_htimestamp error,"
+        ALOGV("get_playback_delay(): pcm_get_htimestamp error,"
                 "setting playbackTimestamp to 0");
         return status;
     }
@@ -596,7 +596,7 @@ static uint32_t out_get_sample_rate(const struct audio_stream *stream)
 
 static int out_set_sample_rate(struct audio_stream *stream, uint32_t rate)
 {
-    LOGE("out_set_sample_rate %d", rate);
+    ALOGE("out_set_sample_rate %d", rate);
     return 0;
 }
 
@@ -636,7 +636,7 @@ static int out_get_format(const struct audio_stream *stream)
 
 static int out_set_format(struct audio_stream *stream, int format)
 {
-    LOGE("out_set_format %d", format);
+    ALOGE("out_set_format %d", format);
     return 0;
 }
 
@@ -650,7 +650,7 @@ static int do_output_standby(struct imx_stream_out *out)
         out->pcm = NULL;
         out->frame_count = 0;
 
-        LOGW("do_out_standby...");
+        ALOGW("do_out_standby...");
         adev->active_output[out->out_id] = 0;
 
         /* if in call, don't turn off the output stage. This will
@@ -738,7 +738,7 @@ static int out_set_parameters(struct audio_stream *stream, const char *kvpairs)
         }
         pthread_mutex_unlock(&adev->lock);
     }
-    LOGW("out_set_parameters %s, ret %d",kvpairs, ret);
+    ALOGW("out_set_parameters %s, ret %d",kvpairs, ret);
     str_parms_destroy(parms);
     return 0;
 }
@@ -756,7 +756,7 @@ static char * out_get_parameters(const struct audio_stream *stream, const char *
 
     ret = str_parms_add_int(parms, AUDIO_PARAMETER_STREAM_ROUTING, val);
 
-    LOGW("out get parameters %s",str_parms_to_str(parms));
+    ALOGW("out get parameters %s",str_parms_to_str(parms));
     return str_parms_to_str(parms);
 }
 
@@ -855,7 +855,7 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
         ret = pcm_write(out->pcm, (void *)buf, out_frames * frame_size);
 
     if(ret !=0) {
-        LOGW("ret %d, pcm write %d error %s.", ret, bytes, pcm_get_error(out->pcm));
+        ALOGW("ret %d, pcm write %d error %s.", ret, bytes, pcm_get_error(out->pcm));
 
         switch(pcm_state(out->pcm)) {
             case PCM_STATE_SETUP:
@@ -900,7 +900,7 @@ static int out_get_render_position(const struct audio_stream_out *stream,
 {
     struct imx_stream_out *out = (struct imx_stream_out *)stream;
     *dsp_frames = out->frame_count;
-    LOGW("get render position....");
+    ALOGW("get render position....");
     return 0;
 }
 
@@ -940,7 +940,7 @@ static int start_input_stream(struct imx_stream_in *in)
             break;
         }
         if(i == MAX_AUDIO_CARD_NUM-1) {
-            LOGE("can not find supported device for %d",in->device);
+            ALOGE("can not find supported device for %d",in->device);
             return -EINVAL;
         }
     }
@@ -971,7 +971,7 @@ static int start_input_stream(struct imx_stream_in *in)
     /* this assumes routing is done previously */
     in->pcm = pcm_open(card, port, PCM_IN, &in->config);
     if (!pcm_is_ready(in->pcm)) {
-        LOGE("cannot open pcm_in driver: %s", pcm_get_error(in->pcm));
+        ALOGE("cannot open pcm_in driver: %s", pcm_get_error(in->pcm));
         pcm_close(in->pcm);
         adev->active_input = NULL;
         return -ENOMEM;
@@ -1155,7 +1155,7 @@ static void get_capture_delay(struct imx_stream_in *in,
         buffer->time_stamp.tv_sec  = 0;
         buffer->time_stamp.tv_nsec = 0;
         buffer->delay_ns           = 0;
-        LOGW("read get_capture_delay(): pcm_htimestamp error");
+        ALOGW("read get_capture_delay(): pcm_htimestamp error");
         return;
     }
 
@@ -1176,7 +1176,7 @@ static void get_capture_delay(struct imx_stream_in *in,
 
     buffer->time_stamp = tstamp;
     buffer->delay_ns   = delay_ns;
-    LOGV("get_capture_delay time_stamp = [%ld].[%ld], delay_ns: [%d],"
+    ALOGV("get_capture_delay time_stamp = [%ld].[%ld], delay_ns: [%d],"
          " kernel_delay:[%ld], buf_delay:[%ld], rsmp_delay:[%ld], kernel_frames:[%d], "
          "in->frames_in:[%d], in->proc_frames_in:[%d], frames:[%d]",
          buffer->time_stamp.tv_sec , buffer->time_stamp.tv_nsec, buffer->delay_ns,
@@ -1190,7 +1190,7 @@ static int32_t update_echo_reference(struct imx_stream_in *in, size_t frames)
     struct echo_reference_buffer b;
     b.delay_ns = 0;
 
-    LOGV("update_echo_reference, frames = [%d], in->ref_frames_in = [%d],  "
+    ALOGV("update_echo_reference, frames = [%d], in->ref_frames_in = [%d],  "
           "b.frame_count = [%d]",
          frames, in->ref_frames_in, frames - in->ref_frames_in);
     if (in->ref_frames_in < frames) {
@@ -1209,12 +1209,12 @@ static int32_t update_echo_reference(struct imx_stream_in *in, size_t frames)
         if (in->echo_reference->read(in->echo_reference, &b) == 0)
         {
             in->ref_frames_in += b.frame_count;
-            LOGV("update_echo_reference: in->ref_frames_in:[%d], "
+            ALOGV("update_echo_reference: in->ref_frames_in:[%d], "
                     "in->ref_buf_size:[%d], frames:[%d], b.frame_count:[%d]",
                  in->ref_frames_in, in->ref_buf_size, frames, b.frame_count);
         }
     } else
-        LOGW("update_echo_reference: NOT enough frames to read ref buffer");
+        ALOGW("update_echo_reference: NOT enough frames to read ref buffer");
     return b.delay_ns;
 }
 
@@ -1307,7 +1307,7 @@ static int get_next_buffer(struct resampler_buffer_provider *buffer_provider,
                                    in->config.period_size *
                                        audio_stream_frame_size(&in->stream.common));
         if (in->read_status != 0) {
-            LOGE("get_next_buffer() pcm_read error %d", in->read_status);
+            ALOGE("get_next_buffer() pcm_read error %d", in->read_status);
             buffer->raw = NULL;
             buffer->frame_count = 0;
             return in->read_status;
@@ -1396,7 +1396,7 @@ static ssize_t process_frames(struct imx_stream_in *in, void* buffer, ssize_t fr
                 in->proc_buf = (int16_t *)realloc(in->proc_buf,
                                          in->proc_buf_size *
                                              in->config.channels * sizeof(int16_t));
-                LOGV("process_frames(): in->proc_buf %p size extended to %d frames",
+                ALOGV("process_frames(): in->proc_buf %p size extended to %d frames",
                      in->proc_buf, in->proc_buf_size);
             }
             frames_rd = read_frames(in,
@@ -1477,7 +1477,7 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
     else
         ret = pcm_read(in->pcm, buffer, bytes);
 
-    if(ret < 0) LOGW("ret %d, pcm read error %s.", ret, pcm_get_error(in->pcm));
+    if(ret < 0) ALOGW("ret %d, pcm read error %s.", ret, pcm_get_error(in->pcm));
 
     if (ret > 0)
         ret = 0;
@@ -1608,7 +1608,7 @@ static int adev_open_output_stream(struct audio_hw_device *dev,
     out = (struct imx_stream_out *)calloc(1, sizeof(struct imx_stream_out));
     if (!out)
         return -ENOMEM;
-    LOGW("open output stream devices %d, format %d, channels %d, sample_rate %d",
+    ALOGW("open output stream devices %d, format %d, channels %d, sample_rate %d",
                         devices, *format, *channels, *sample_rate);
     ret = create_resampler(DEFAULT_OUT_SAMPLING_RATE,
                            MM_FULL_POWER_SAMPLING_RATE,
@@ -1690,7 +1690,7 @@ static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
     char *str;
     char value[32];
     int ret;
-    LOGW("set parameters %s",kvpairs);
+    ALOGW("set parameters %s",kvpairs);
     parms = str_parms_create_str(kvpairs);
     ret = str_parms_get_str(parms, AUDIO_PARAMETER_KEY_TTY_MODE, value, sizeof(value));
     if (ret >= 0) {
@@ -1841,7 +1841,7 @@ static int adev_open_input_stream(struct audio_hw_device *dev, uint32_t devices,
 
     in->requested_rate = *sample_rate;
 
-    LOGW("In channels %d, rate %d, devices %x", channel_count, *sample_rate, devices);
+    ALOGW("In channels %d, rate %d, devices %x", channel_count, *sample_rate, devices);
     memcpy(&in->config, &pcm_config_mm_in, sizeof(pcm_config_mm_in));
     //in->config.channels = channel_count;
     //in->config.rate     = *sample_rate;
diff --git a/hwcomposer/hwcomposer.cpp b/hwcomposer/hwcomposer.cpp
index 939210b..9e73e47 100644
--- a/hwcomposer/hwcomposer.cpp
+++ b/hwcomposer/hwcomposer.cpp
@@ -56,7 +56,7 @@ hwc_module_t HAL_MODULE_INFO_SYM = {
 /*****************************************************************************/
 
 static void dump_layer(hwc_layer_t const* l) {
-    LOGD("\ttype=%d, flags=%08x, handle=%p, tr=%02x, blend=%04x, {%d,%d,%d,%d}, {%d,%d,%d,%d}",
+    ALOGD("\ttype=%d, flags=%08x, handle=%p, tr=%02x, blend=%04x, {%d,%d,%d,%d}, {%d,%d,%d,%d}",
             l->compositionType, l->flags, l->handle, l->transform, l->blending,
             l->sourceCrop.left,
             l->sourceCrop.top,
diff --git a/libgps/athr_gps.c b/libgps/athr_gps.c
index 943ad75..abd5944 100755
--- a/libgps/athr_gps.c
+++ b/libgps/athr_gps.c
@@ -45,10 +45,10 @@
 //#define  GPS_DEBUG
 #undef	 GPS_DEBUG_TOKEN	/* print out NMEA tokens */
 
-#define  DFR(...)   LOGD(__VA_ARGS__)
+#define  DFR(...)   ALOGD(__VA_ARGS__)
 
 #ifdef GPS_DEBUG
-#  define  D(...)   LOGD(__VA_ARGS__)
+#  define  D(...)   ALOGD(__VA_ARGS__)
 #else
 #  define  D(...)   ((void)0)
 #endif
@@ -990,11 +990,11 @@ static int athr_run_hook(char* name)
     char   buf[PROPERTY_VALUE_MAX + 20];
     if (property_get("athr.gps.hookspath",prop,"") == 0)
 	{
-        LOGE("%s: athr.gps.hookspath property is not set", __FUNCTION__);
+        ALOGE("%s: athr.gps.hookspath property is not set", __FUNCTION__);
 		return 0;
     }
     sprintf(buf,"%s/%s" , prop, name);
-    LOGI("%s: going to execute hook  \"%s\"", __FUNCTION__, buf);
+    ALOGI("%s: going to execute hook  \"%s\"", __FUNCTION__, buf);
     return !system(buf);
 }
 
@@ -1111,7 +1111,7 @@ gps_state_stop( GpsState*  s )
 		ret=write( s->control[0], &cmd, 1 );
 		if(ret < 0)
 		{
-			LOGE("write control socket error %s", strerror(errno));
+			ALOGE("write control socket error %s", strerror(errno));
 			sleep(1);
 		}
 	}
@@ -1178,7 +1178,7 @@ gps_state_thread( void*  arg )
 	state->tmr_thread = state->callbacks.create_thread_cb("athr_gps_tmr", gps_timer_thread, state);
 	if (!state->tmr_thread)
 	{
-		LOGE("could not create gps timer thread: %s", strerror(errno));
+		ALOGE("could not create gps timer thread: %s", strerror(errno));
 		started = 0;
 		state->init = STATE_INIT;
 		goto Exit;
@@ -1187,7 +1187,7 @@ gps_state_thread( void*  arg )
 	state->nmea_thread = state->callbacks.create_thread_cb("athr_nmea_thread", gps_nmea_thread, state);
 	if (!state->nmea_thread)
 	{
-		LOGE("could not create gps nmea thread: %s", strerror(errno));
+		ALOGE("could not create gps nmea thread: %s", strerror(errno));
 		started = 0;
 		state->init = STATE_INIT;
 		goto Exit;
@@ -1204,13 +1204,13 @@ gps_state_thread( void*  arg )
         nevents = epoll_wait( epoll_ctrlfd, events, 1, -1 );
         if (nevents < 0) {
             if (errno != EINTR)
-                LOGE("epoll_wait() unexpected error: %s", strerror(errno));
+                ALOGE("epoll_wait() unexpected error: %s", strerror(errno));
             continue;
         }
         // D("gps thread received %d events", nevents);
         for (ne = 0; ne < nevents; ne++) {
             if ((events[ne].events & (EPOLLERR|EPOLLHUP)) != 0) {
-                LOGE("EPOLLERR or EPOLLHUP after epoll_wait() !?");
+                ALOGE("EPOLLERR or EPOLLHUP after epoll_wait() !?");
                 goto Exit;
             }
             if ((events[ne].events & EPOLLIN) != 0) {
@@ -1254,7 +1254,7 @@ gps_state_thread( void*  arg )
                 }
                 else
                 {
-                    LOGE("epoll_wait() returned unkown fd %d ?", fd);
+                    ALOGE("epoll_wait() returned unkown fd %d ?", fd);
 					gps_fd = _gps_state->fd; //resign fd to gps_fd
                 }
             }
@@ -1303,7 +1303,7 @@ gps_nmea_thread( void*  arg )
 
 		if(bOrionShutdown && started) // Orion be shutdown but LM is started, try to wake it up.
 		{
-			LOGI("Try to wake orion up after 5 secs");
+			ALOGI("Try to wake orion up after 5 secs");
 			sleep_lock = 0;
 			sleep(5);
 			GPS_STATUS_CB(state->callbacks, GPS_STATUS_SESSION_BEGIN);
@@ -1332,7 +1332,7 @@ gps_nmea_thread( void*  arg )
 			{
 				if (strstr(buf, "CFG_R"))
 				{
-					LOGI("ver %s",buf);
+					ALOGI("ver %s",buf);
 				}
 
 				for (nn = 0; nn < ret; nn++)
@@ -1499,7 +1499,7 @@ int gps_opentty(GpsState *state)
 
         if (state->fd < 0)
         {
-            LOGE("could not open gps serial device %s: %s", prop, strerror(errno) );
+            ALOGE("could not open gps serial device %s: %s", prop, strerror(errno) );
             return -1;
         }
     }
@@ -1583,14 +1583,14 @@ gps_state_init( GpsState*  state )
 
 
     if ( socketpair( AF_LOCAL, SOCK_STREAM, 0, state->control ) < 0 ) {
-        LOGE("could not create thread control socket pair: %s", strerror(errno));
+        ALOGE("could not create thread control socket pair: %s", strerror(errno));
         goto Fail;
     }
 
 	state->thread = state->callbacks.create_thread_cb("athr_gps", gps_state_thread, state);
         if (!state->thread)
 	{
-        LOGE("could not create gps thread: %s", strerror(errno));
+        ALOGE("could not create gps thread: %s", strerror(errno));
         goto Fail;
     }
 
@@ -1755,7 +1755,7 @@ int gps_checkstate(GpsState *s)
 
 		if(!s->init)
 		{
-			LOGE("%s: still called with uninitialized state !!", __FUNCTION__);
+			ALOGE("%s: still called with uninitialized state !!", __FUNCTION__);
 			return -1;
 		}
     }
diff --git a/libsensors/LightSensor.cpp b/libsensors/LightSensor.cpp
index 55b5d51..c4e8882 100755
--- a/libsensors/LightSensor.cpp
+++ b/libsensors/LightSensor.cpp
@@ -31,7 +31,7 @@
 //#define SENSOR_DEBUG
 
 #ifdef SENSOR_DEBUG
-#define DEBUG(format, ...) LOGD((format), ## __VA_ARGS__)
+#define DEBUG(format, ...) ALOGD((format), ## __VA_ARGS__)
 #else
 #define DEBUG(format, ...)
 #endif
@@ -114,12 +114,12 @@ int LightSensor::setIntLux()
     /* Read current lux value firstly, then change Delta value */
     strcpy(&ls_sysfs_path[ls_sysfs_path_len], "lux");
     if ((fd = fopen(ls_sysfs_path, "r")) == NULL) {
-        LOGE("Unable to open %s\n", ls_sysfs_path);
+        ALOGE("Unable to open %s\n", ls_sysfs_path);
         return -1;
     }
     memset(buf, 0, 6);
     if ((n = fread(buf, 1, 6, fd)) < 0) {
-        LOGE("Unable to read %s\n", ls_sysfs_path);
+        ALOGE("Unable to read %s\n", ls_sysfs_path);
 	return -1;
     }
     fclose(fd);
@@ -142,7 +142,7 @@ int LightSensor::setIntLux()
         n = fwrite(buf, 1, 6, fd);
         fclose(fd);
     } else
-        LOGE("Couldn't open %s file\n", ls_sysfs_path);
+        ALOGE("Couldn't open %s file\n", ls_sysfs_path);
     strcpy(&ls_sysfs_path[ls_sysfs_path_len], "int_ht_lux");
     fd = fopen(ls_sysfs_path, "r+");
     if (fd) {
@@ -151,7 +151,7 @@ int LightSensor::setIntLux()
         n = fwrite(buf, 1, 6, fd);
         fclose(fd);
     } else
-        LOGE("Couldn't open %s file\n", ls_sysfs_path);
+        ALOGE("Couldn't open %s file\n", ls_sysfs_path);
 
     return 0;
 }
@@ -194,7 +194,7 @@ int LightSensor::readEvents(sensors_event_t* data, int count)
                 mPreviousLight = mPendingEvent.light;
             }
         } else {
-            LOGE("LightSensor: unknown event (type=%d, code=%d)",
+            ALOGE("LightSensor: unknown event (type=%d, code=%d)",
                     type, event->code);
         }
         mInputReader.next();
diff --git a/libsensors/SensorBase.cpp b/libsensors/SensorBase.cpp
index 07d3415..e0371a4 100755
--- a/libsensors/SensorBase.cpp
+++ b/libsensors/SensorBase.cpp
@@ -63,7 +63,7 @@ int SensorBase::open_device()
 {
     if (dev_fd<0 && dev_name) {
         dev_fd = open(dev_name, O_RDONLY);
-        LOGE_IF(dev_fd<0, "Couldn't open %s (%s)", dev_name, strerror(errno));
+        ALOGE_IF(dev_fd<0, "Couldn't open %s (%s)", dev_name, strerror(errno));
     }
     return 0;
 }
@@ -102,7 +102,7 @@ int SensorBase::read_sysfs(char * filename,char * buf,int size){
         count = read(fd,buf,size);
         close(fd);
     } else {
-        LOGE("read sysfs file error\n");
+        ALOGE("read sysfs file error\n");
         return 0;
     }
     return count;
@@ -141,7 +141,7 @@ int SensorBase::sensorBaseEnable(int32_t handle,int enabled){
         mEnabled |= (uint32_t(enable)<<what);
     }
 
-    LOGD("sensor %d , usr count %d\n",handle,mUser[handle]);
+    ALOGD("sensor %d , usr count %d\n",handle,mUser[handle]);
     return 0;
 }
 
@@ -164,7 +164,7 @@ int SensorBase::sensorBaseGetPollMin(){
     size = read_sysfs(sysfs_poll_min,buf,sizeof(buf));
     buf[size] = '\0';
     pollmin = atoi(buf);
-    LOGD("%s ,%s",__FUNCTION__,buf);
+    ALOGD("%s ,%s",__FUNCTION__,buf);
     return pollmin;
 }
 
@@ -175,7 +175,7 @@ int SensorBase::sensorBaseGetPollMax(){
     size = read_sysfs(sysfs_poll_max,buf,sizeof(buf));
     buf[size] = '\0';
     pollmax = atoi(buf);
-    LOGD("%s ,%s",__FUNCTION__,buf);
+    ALOGD("%s ,%s",__FUNCTION__,buf);
     return pollmax; //default max is 200ms
 }
 
@@ -217,10 +217,10 @@ int SensorBase::sensorBaseGetSysfsPath(const char* inputName)
                  snprintf(sysfs_poll_max, sizeof(sysfs_poll_max), "%s%s",sysfs_name, SYSFS_POLL_MAX);
                  mMinPollDelay = sensorBaseGetPollMin();
                  mMaxPollDelay = sensorBaseGetPollMax();
-                 LOGD("%s path %s",inputName,sysfs_enable);
-                 LOGD("%s path %s",inputName,sysfs_poll);
-                 LOGD("%s path %s ,poll min delay %d",inputName,sysfs_poll_min,mMinPollDelay);
-                 LOGD("%s path %s ,poll max delay %d",inputName,sysfs_poll_max,mMaxPollDelay);
+                 ALOGD("%s path %s",inputName,sysfs_enable);
+                 ALOGD("%s path %s",inputName,sysfs_poll);
+                 ALOGD("%s path %s ,poll min delay %d",inputName,sysfs_poll_min,mMinPollDelay);
+                 ALOGD("%s path %s ,poll max delay %d",inputName,sysfs_poll_max,mMaxPollDelay);
                  return 0;
             }
         }
@@ -307,7 +307,7 @@ int SensorBase::openInput(const char* inputName)
         }
     }
     closedir(dir);
-    LOGE_IF(fd<0, "couldn't find '%s' input device", inputName);
+    ALOGE_IF(fd<0, "couldn't find '%s' input device", inputName);
     return fd;
 }
 
@@ -347,7 +347,7 @@ int SensorBase::readEvents(sensors_event_t* data, int count)
                 mInputReader.next();
             }
         } else {
-            LOGE("Sensor: unknown event (type=%d, code=%d)",
+            ALOGE("Sensor: unknown event (type=%d, code=%d)",
                     type, event->code);
             mInputReader.next();
         }
diff --git a/libsensors/sensors.cpp b/libsensors/sensors.cpp
index 936c07b..1311423 100755
--- a/libsensors/sensors.cpp
+++ b/libsensors/sensors.cpp
@@ -190,7 +190,7 @@ sensors_poll_context_t::sensors_poll_context_t()
 
     int wakeFds[2];
     int result = pipe(wakeFds);
-    LOGE_IF(result<0, "error creating wake pipe (%s)", strerror(errno));
+    ALOGE_IF(result<0, "error creating wake pipe (%s)", strerror(errno));
     fcntl(wakeFds[0], F_SETFL, O_NONBLOCK);
     fcntl(wakeFds[1], F_SETFL, O_NONBLOCK);
     mWritePipeFd = wakeFds[1];
@@ -222,7 +222,7 @@ int sensors_poll_context_t::activate(int handle, int enabled) {
     if (enabled && !err) {
         const char wakeMessage(WAKE_MESSAGE);
         int result = write(mWritePipeFd, &wakeMessage, 1);
-        LOGE_IF(result<0, "error sending wake message (%s)", strerror(errno));
+        ALOGE_IF(result<0, "error sending wake message (%s)", strerror(errno));
     }
     return err;
 }
@@ -265,14 +265,14 @@ int sensors_poll_context_t::pollEvents(sensors_event_t* data, int count)
             // anything to return
             n = poll(mPollFds, numFds, nbEvents ? 0 : -1);
             if (n<0) {
-                LOGE("poll() failed (%s)", strerror(errno));
+                ALOGE("poll() failed (%s)", strerror(errno));
                 return -errno;
             }
             if (mPollFds[wake].revents & POLLIN) {
                 char msg;
                 int result = read(mPollFds[wake].fd, &msg, 1);
-                LOGE_IF(result<0, "error reading from wake pipe (%s)", strerror(errno));
-                LOGE_IF(msg != WAKE_MESSAGE, "unknown message on wake queue (0x%02x)", int(msg));
+                ALOGE_IF(result<0, "error reading from wake pipe (%s)", strerror(errno));
+                ALOGE_IF(msg != WAKE_MESSAGE, "unknown message on wake queue (0x%02x)", int(msg));
                 mPollFds[wake].revents = 0;
             }
         }
diff --git a/mx5x/hwcomposer/hwc_common.h b/mx5x/hwcomposer/hwc_common.h
index 572768e..5da570b 100755
--- a/mx5x/hwcomposer/hwc_common.h
+++ b/mx5x/hwcomposer/hwc_common.h
@@ -41,17 +41,17 @@
 //#define HWCOMPOSER_DEBUG_LOG
 
 #ifdef HWCOMPOSER_DEBUG_LOG
-#define HWCOMPOSER_LOG_RUNTIME(format, ...) LOGI((format), ## __VA_ARGS__)
-#define HWCOMPOSER_LOG_FUNC LOGI("%s is excuting...",  __FUNCTION__)
+#define HWCOMPOSER_LOG_RUNTIME(format, ...) ALOGI((format), ## __VA_ARGS__)
+#define HWCOMPOSER_LOG_FUNC ALOGI("%s is excuting...",  __FUNCTION__)
 #else
 #define HWCOMPOSER_LOG_RUNTIME(format, ...)
 #define HWCOMPOSER_LOG_FUNC
 #endif
 
-#define HWCOMPOSER_LOG_TRACE   LOGI("%s : %d", __FUNCTION__,__LINE__)
-#define HWCOMPOSER_LOG_INFO(format, ...) LOGI((format), ## __VA_ARGS__)
+#define HWCOMPOSER_LOG_TRACE   ALOGI("%s : %d", __FUNCTION__,__LINE__)
+#define HWCOMPOSER_LOG_INFO(format, ...) ALOGI((format), ## __VA_ARGS__)
 
-#define HWCOMPOSER_LOG_ERR(format, ...) LOGE((format), ##__VA_ARGS__)
+#define HWCOMPOSER_LOG_ERR(format, ...) ALOGE((format), ##__VA_ARGS__)
 /*****************************************************************************/
 #define DEFAULT_FB_DEV_NAME "/dev/graphics/fb0"
 #define FB1_DEV_NAME "/dev/graphics/fb1"
diff --git a/mx5x/hwcomposer/hwcomposer.cpp b/mx5x/hwcomposer/hwcomposer.cpp
index 9293642..8af59ba 100755
--- a/mx5x/hwcomposer/hwcomposer.cpp
+++ b/mx5x/hwcomposer/hwcomposer.cpp
@@ -74,7 +74,7 @@ hwc_module_t HAL_MODULE_INFO_SYM = {
 /*****************************************************************************/
 
 static void dump_layer(hwc_layer_t const* l) {
-    LOGD("\ttype=%d, flags=%08x, handle=%p, tr=%02x, blend=%04x, {%d,%d,%d,%d}, {%d,%d,%d,%d}",
+    ALOGD("\ttype=%d, flags=%08x, handle=%p, tr=%02x, blend=%04x, {%d,%d,%d,%d}, {%d,%d,%d,%d}",
             l->compositionType, l->flags, l->handle, l->transform, l->blending,
             l->sourceCrop.left,
             l->sourceCrop.top,
diff --git a/mx5x/libcamera/CameraHal.cpp b/mx5x/libcamera/CameraHal.cpp
index 5cadab2..885e679 100755
--- a/mx5x/libcamera/CameraHal.cpp
+++ b/mx5x/libcamera/CameraHal.cpp
@@ -1169,7 +1169,7 @@ namespace android {
 
         for (unsigned int i =0;;){
             if (mCaptureDevice->DevDequeue(&DeQueBufIdx) < 0){
-                LOGE("VIDIOC_DQBUF Failed!!!");
+                ALOGE("VIDIOC_DQBUF Failed!!!");
                 ret = UNKNOWN_ERROR;
                 goto Pic_out;
             }
@@ -2527,7 +2527,7 @@ Pic_out:
         else 
             *pFaceBackOrient = atoi(orientStr);
 
-        LOGI("Face Back Camera is %s, orient is %d", pFaceBackCameraName, *pFaceBackOrient);
+        ALOGI("Face Back Camera is %s, orient is %d", pFaceBackCameraName, *pFaceBackOrient);
 
         property_get (FACE_FRONT_CAMERA_NAME,
                 pFaceFrontCameraName,
@@ -2543,7 +2543,7 @@ Pic_out:
         else 
             *pFaceFrontOrient = atoi(orientStr);
 
-        LOGI("Face Front Camera is %s, orient is %d", pFaceFrontCameraName, *pFaceFrontOrient);
+        ALOGI("Face Front Camera is %s, orient is %d", pFaceFrontCameraName, *pFaceFrontOrient);
 
     }
 
diff --git a/mx5x/libcamera/CameraModule.cpp b/mx5x/libcamera/CameraModule.cpp
index 3edad4c..f683150 100644
--- a/mx5x/libcamera/CameraModule.cpp
+++ b/mx5x/libcamera/CameraModule.cpp
@@ -81,7 +81,7 @@ int camera_set_preview_window(struct camera_device * device,
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -102,7 +102,7 @@ void camera_set_callbacks(struct camera_device * device,
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -116,7 +116,7 @@ void camera_enable_msg_type(struct camera_device * device, int32_t msg_type)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -130,7 +130,7 @@ void camera_disable_msg_type(struct camera_device * device, int32_t msg_type)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -144,7 +144,7 @@ int camera_msg_type_enabled(struct camera_device * device, int32_t msg_type)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return 0;
@@ -159,7 +159,7 @@ int camera_start_preview(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -175,7 +175,7 @@ void camera_stop_preview(struct camera_device * device)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -190,7 +190,7 @@ int camera_preview_enabled(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -206,7 +206,7 @@ int camera_store_meta_data_in_buffers(struct camera_device * device, int enable)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -224,7 +224,7 @@ int camera_start_recording(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -239,7 +239,7 @@ void camera_stop_recording(struct camera_device * device)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -254,7 +254,7 @@ int camera_recording_enabled(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -270,7 +270,7 @@ void camera_release_recording_frame(struct camera_device * device,
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -285,7 +285,7 @@ int camera_auto_focus(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -301,7 +301,7 @@ int camera_cancel_auto_focus(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -317,7 +317,7 @@ int camera_take_picture(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -333,7 +333,7 @@ int camera_cancel_picture(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -349,7 +349,7 @@ int camera_set_parameters(struct camera_device * device, const char *params)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -365,7 +365,7 @@ char* camera_get_parameters(struct camera_device * device)
     char* param = NULL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return NULL;
@@ -381,7 +381,7 @@ static void camera_put_parameters(struct camera_device *device, char *parms)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -397,7 +397,7 @@ int camera_send_command(struct camera_device * device,
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -412,7 +412,7 @@ void camera_release(struct camera_device * device)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -443,7 +443,7 @@ int camera_device_close(hw_device_t* device)
     int ret = 0;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     android::Mutex::Autolock lock(gCameraHalDeviceLock);
 
@@ -509,7 +509,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
 
     android::Mutex::Autolock lock(gCameraHalDeviceLock);
 
-    LOGI("camera_device open");
+    ALOGI("camera_device open");
 
     if (name != NULL) {
         cameraid = atoi(name);
@@ -517,7 +517,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
 
         if(cameraid > num_cameras)
         {
-            LOGE("camera service provided cameraid out of bounds, "
+            ALOGE("camera service provided cameraid out of bounds, "
                     "cameraid = %d, num supported = %d",
                     cameraid, num_cameras);
             rv = -EINVAL;
@@ -526,7 +526,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
 #if 0
         if(gCamerasOpen >= MAX_SIMUL_CAMERAS_SUPPORTED)
         {
-            LOGE("maximum number of cameras already open");
+            ALOGE("maximum number of cameras already open");
             rv = -ENOMEM;
             goto fail;
         }
@@ -534,7 +534,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
         camera_device = (fsl_camera_device_t*)malloc(sizeof(*camera_device));
         if(!camera_device)
         {
-            LOGE("camera_device allocation fail");
+            ALOGE("camera_device allocation fail");
             rv = -ENOMEM;
             goto fail;
         }
@@ -542,7 +542,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
         camera_ops = (camera_device_ops_t*)malloc(sizeof(*camera_ops));
         if(!camera_ops)
         {
-            LOGE("camera_ops allocation fail");
+            ALOGE("camera_ops allocation fail");
             rv = -ENOMEM;
             goto fail;
         }
@@ -593,7 +593,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
 
         if(!camera)
         {
-            LOGE("Couldn't create instance of CameraHal class");
+            ALOGE("Couldn't create instance of CameraHal class");
             rv = -ENOMEM;
             goto fail;
         }
@@ -646,7 +646,7 @@ static void GetCameraPropery(char * pFaceBackCameraName, char *pFaceFrontCameraN
     else 
         *pFaceBackOrient = atoi(orientStr);
 
-    LOGI("Face Back Camera is %s, orient is %d", pFaceBackCameraName, *pFaceBackOrient);
+    ALOGI("Face Back Camera is %s, orient is %d", pFaceBackCameraName, *pFaceBackOrient);
 
     property_get(FACE_FRONT_CAMERA_NAME, pFaceFrontCameraName, DEFAULT_ERROR_NAME_str );
 
@@ -658,7 +658,7 @@ static void GetCameraPropery(char * pFaceBackCameraName, char *pFaceFrontCameraN
     else 
         *pFaceFrontOrient = atoi(orientStr);
 
-    LOGI("Face Front Camera is %s, orient is %d", pFaceFrontCameraName, *pFaceFrontOrient);
+    ALOGI("Face Front Camera is %s, orient is %d", pFaceFrontCameraName, *pFaceFrontOrient);
 
 }
 
diff --git a/mx5x/libcamera/Camera_utils.h b/mx5x/libcamera/Camera_utils.h
index 1ce8a7c..70630c3 100755
--- a/mx5x/libcamera/Camera_utils.h
+++ b/mx5x/libcamera/Camera_utils.h
@@ -30,10 +30,10 @@
 //#define CAMERA_HAL_DEBUG_LOG
 
 #ifdef CAMERA_HAL_DEBUG_LOG
-#define CAMERA_HAL_LOG_RUNTIME(format, ...) LOGI((format), ## __VA_ARGS__)
-#define CAMERA_HAL_LOG_FUNC LOGI("%s is excuting...",  __FUNCTION__)
-#define CAMERA_HAL_LOG_TRACE   LOGI("%s : %d", __FUNCTION__,__LINE__)
-#define CAMERA_HAL_LOG_INFO(format, ...) LOGI((format), ## __VA_ARGS__)
+#define CAMERA_HAL_LOG_RUNTIME(format, ...) ALOGI((format), ## __VA_ARGS__)
+#define CAMERA_HAL_LOG_FUNC ALOGI("%s is excuting...",  __FUNCTION__)
+#define CAMERA_HAL_LOG_TRACE   ALOGI("%s : %d", __FUNCTION__,__LINE__)
+#define CAMERA_HAL_LOG_INFO(format, ...) ALOGI((format), ## __VA_ARGS__)
 #else
 #define CAMERA_HAL_LOG_RUNTIME(format, ...) 
 #define CAMERA_HAL_LOG_FUNC
@@ -41,7 +41,7 @@
 #define CAMERA_HAL_LOG_INFO(format, ...)
 #endif
 
-#define CAMERA_HAL_ERR(format, ...) LOGE((format), ##__VA_ARGS__)
+#define CAMERA_HAL_ERR(format, ...) ALOGE((format), ##__VA_ARGS__)
 
 namespace android {
 
diff --git a/mx5x/libcopybit/copybit.cpp b/mx5x/libcopybit/copybit.cpp
index 1f2a630..d344091 100755
--- a/mx5x/libcopybit/copybit.cpp
+++ b/mx5x/libcopybit/copybit.cpp
@@ -153,7 +153,7 @@ static int set_parameter_copybit(
                 ctx->mRotate = value;
                 break;
             default:
-                LOGE("Invalid value for COPYBIT_ROTATION");
+                ALOGE("Invalid value for COPYBIT_ROTATION");
                 status = -EINVAL;
                 break;
             }
@@ -193,13 +193,13 @@ static int set_parameter_copybit(
                 ctx->mFlags |= C2D_FLIP_V;
                 break;
             default:
-                LOGE("Invalid value for COPYBIT_ROTATION");
+                ALOGE("Invalid value for COPYBIT_ROTATION");
                 status = -EINVAL;
                 break;
             }
             break;        
         case COPYBIT_BLUR:
-            LOGE("Not support for COPYBIT_BLUR");
+            ALOGE("Not support for COPYBIT_BLUR");
             status = -EINVAL;
             break;
         default:
@@ -365,7 +365,7 @@ static int stretch_copybit(
         if (src_rect->l < 0 || src_rect->r > src->w ||
             src_rect->t < 0 || src_rect->b > src->h) {
             // this is always invalid
-            LOGE("src_rect invalid");
+            ALOGE("src_rect invalid");
             return -EINVAL;
         }
 
@@ -377,14 +377,14 @@ static int stretch_copybit(
         image_to_surface(src, &srcSurfaceDef);
         if (c2dSurfAlloc(ctx->c2dctx, &srcSurface, &srcSurfaceDef) != C2D_STATUS_OK)
         {
-            LOGE("srcSurface c2dSurfAlloc fail");
+            ALOGE("srcSurface c2dSurfAlloc fail");
             return -EINVAL;
         }
                 
         image_to_surface(dst, &dstSurfaceDef);
         if (c2dSurfAlloc(ctx->c2dctx, &dstSurface, &dstSurfaceDef) != C2D_STATUS_OK)
         {
-            LOGE("dstSurface c2dSurfAlloc fail");
+            ALOGE("dstSurface c2dSurfAlloc fail");
             c2dSurfFree(ctx->c2dctx, srcSurface);
             return -EINVAL;
         }
@@ -409,12 +409,12 @@ static int stretch_copybit(
                 set_rects(ctx, &srcRect, &dstRect, dst_rect, src_rect, &clip, src);
                 if (srcRect.width<=0 || srcRect.height<=0)
                 {
-                        LOGE("srcRect invalid");
+                        ALOGE("srcRect invalid");
                         continue;
                 }
                 if (dstRect.width<=0 || dstRect.height<=0)
                 {
-                        LOGE("dstRect invalid");
+                        ALOGE("dstRect invalid");
                         continue;
                 }
 
diff --git a/mx5x/libgralloc/framebuffer.cpp b/mx5x/libgralloc/framebuffer.cpp
index 6eb18f3..922b1ed 100755
--- a/mx5x/libgralloc/framebuffer.cpp
+++ b/mx5x/libgralloc/framebuffer.cpp
@@ -158,7 +158,7 @@ static void update_to_display(int left, int top, int width, int height, int upda
 	int auto_update_mode = AUTO_UPDATE_MODE_REGION_MODE;
 	memset(&upd_data, 0, sizeof(mxcfb_update_data));
 
-    LOGI("update_to_display:left=%d, top=%d, width=%d, height=%d updatemode=%d\n", left, top, width, height,updatemode);
+    ALOGI("update_to_display:left=%d, top=%d, width=%d, height=%d updatemode=%d\n", left, top, width, height,updatemode);
 
 
     if((updatemode & EINK_WAVEFORM_MODE_MASK) == EINK_WAVEFORM_MODE_DU)
@@ -170,38 +170,38 @@ static void update_to_display(int left, int top, int width, int height, int upda
 	else if((updatemode & EINK_WAVEFORM_MODE_MASK) == EINK_WAVEFORM_MODE_AUTO)
 	   upd_data.waveform_mode = WAVEFORM_MODE_AUTO;
 	else 
-        LOGI("waveform_mode  wrong\n");
+        ALOGI("waveform_mode  wrong\n");
 	   
     if((updatemode & EINK_AUTO_MODE_MASK) == EINK_AUTO_MODE_REGIONAL)
         auto_update_mode = AUTO_UPDATE_MODE_REGION_MODE;
     else if((updatemode & EINK_AUTO_MODE_MASK) == EINK_AUTO_MODE_AUTOMATIC)
         auto_update_mode = AUTO_UPDATE_MODE_AUTOMATIC_MODE;
     else 
-        LOGI("wait_for_complete  wrong\n");
+        ALOGI("wait_for_complete  wrong\n");
         
     if((updatemode & EINK_UPDATE_MODE_MASK) == EINK_UPDATE_MODE_PARTIAL)
         upd_data.update_mode = UPDATE_MODE_PARTIAL;
     else if((updatemode & EINK_UPDATE_MODE_MASK) == EINK_UPDATE_MODE_FULL)
         upd_data.update_mode = UPDATE_MODE_FULL;
     else
-        LOGI("update_mode  wrong\n");
+        ALOGI("update_mode  wrong\n");
 
     if((updatemode & EINK_WAIT_MODE_MASK) == EINK_WAIT_MODE_NOWAIT)
         wait_for_complete = false;
     else if((updatemode & EINK_WAIT_MODE_MASK) == EINK_WAIT_MODE_WAIT)
         wait_for_complete = true;
     else 
-        LOGI("wait_for_complete  wrong\n");
+        ALOGI("wait_for_complete  wrong\n");
 
     if((updatemode & EINK_INVERT_MODE_MASK) == EINK_INVERT_MODE_INVERT)
 	{
 	   upd_data.flags |= EPDC_FLAG_ENABLE_INVERSION;
-       LOGI("invert mode \n");
+       ALOGI("invert mode \n");
     }
 
 	retval = ioctl(fb_dev, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode);
 	if (retval < 0) {
-		LOGI("set auto update mode failed.  Error = 0x%x", retval);
+		ALOGI("set auto update mode failed.  Error = 0x%x", retval);
 	}    
     
     upd_data.temp = 24; //the temperature is get from linux team
@@ -223,14 +223,14 @@ static void update_to_display(int left, int top, int width, int height, int upda
 		 * then try again after some updates have completed */
 		usleep(300000);
 		retval = ioctl(fb_dev, MXCFB_SEND_UPDATE, &upd_data);
-        LOGI("MXCFB_SEND_UPDATE  retval = 0x%x try again maybe", retval);
+        ALOGI("MXCFB_SEND_UPDATE  retval = 0x%x try again maybe", retval);
 	}
 
 	if (wait_for_complete) {
 		/* Wait for update to complete */
 		retval = ioctl(fb_dev, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
 		if (retval < 0) {
-			LOGI("Wait for update complete failed.  Error = 0x%x", retval);
+			ALOGI("Wait for update complete failed.  Error = 0x%x", retval);
 		}
 	}
 
@@ -307,7 +307,7 @@ static int fb_setUpdateRect(struct framebuffer_device_t* dev,
     fb_context_t* ctx = (fb_context_t*)dev;
     if(count > MAX_RECT_NUM)
     {
-        LOGE("count > MAX_RECT_NUM in fb_setUpdateRect\n");
+        ALOGE("count > MAX_RECT_NUM in fb_setUpdateRect\n");
         return -EINVAL;
     }
 
@@ -338,7 +338,7 @@ static int fb_setUpdateRect(struct framebuffer_device_t* dev,
 static int fb_setSecRotation(struct framebuffer_device_t* dev,int secRotation)
 {
     fb_context_t* ctx = (fb_context_t*)dev;
-    //LOGI("fb_setSecRotation %d",secRotation);
+    //ALOGI("fb_setSecRotation %d",secRotation);
     if((ctx->sec_rotation != secRotation)&&(ctx->sec_disp_base != 0))      
        memset((void *)ctx->sec_disp_base, 0, ctx->sec_frame_size*nr_framebuffers);
     ctx->sec_rotation = secRotation;
@@ -405,7 +405,7 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
                //     c2dCreateContext(&ctx->c2dctx);
                     ctx->mIpuFd = open("/dev/mxc_ipu", O_RDWR, 0);
                     if(ctx->mIpuFd < 0) {
-                        LOGE("%s:%d,open ipu dev failed", __FUNCTION__, __LINE__);
+                        ALOGE("%s:%d,open ipu dev failed", __FUNCTION__, __LINE__);
                     }
 
                     sem_init(&ctx->sec_display_begin, 0, 0);
@@ -414,7 +414,7 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
                     pthread_create(&ctx->thread_id, NULL, &secDispShowFrames, (void *)ctx);
                                         
                     //Set the prop rw.SECOND_DISPLAY_ENABLED to 1
-                    LOGI("sys.SECOND_DISPLAY_ENABLED Set to 1");
+                    ALOGI("sys.SECOND_DISPLAY_ENABLED Set to 1");
                     property_set("sys.SECOND_DISPLAY_ENABLED", "1");
                 }
             }
@@ -441,8 +441,8 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
                 if(ctx->mIpuFd >= 0)close(ctx->mIpuFd);
                 
                 //Set the prop rw.SECOND_DISPLAY_ENABLED to 0
-                LOGI("Switch back to display 0");
-                LOGI("sys.SECOND_DISPLAY_ENABLED Set to 0");
+                ALOGI("Switch back to display 0");
+                ALOGI("sys.SECOND_DISPLAY_ENABLED Set to 0");
                 property_set("sys.SECOND_DISPLAY_ENABLED", "0");
                 memset((void *)ctx->sec_disp_base, 0, ctx->sec_frame_size*nr_framebuffers);
                 //unmap the sec_disp_base
@@ -461,41 +461,41 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
 
                         fb2_fp = open("/dev/graphics/fb2",O_RDWR, 0);
                         if (fb2_fp < 0){
-                            LOGE("Error!Cannot open the /dev/graphics/fb2");
+                            ALOGE("Error!Cannot open the /dev/graphics/fb2");
                         }
                         else{
                             if(ioctl(fb2_fp, FBIOBLANK, blank) < 0) {
-                        		LOGI("Error!BLANK FB2 failed!\n");
+                        		ALOGI("Error!BLANK FB2 failed!\n");
                         	}
                             close(fb2_fp);
                         }
 
                     	if(ioctl(ctx->sec_fp, FBIOBLANK, blank) < 0) {
-                            LOGI("Error!BLANK FB2 failed!\n");
+                            ALOGI("Error!BLANK FB2 failed!\n");
                     	}
                     
                         if(ioctl(m->framebuffer->fd, FBIOBLANK, blank) < 0) {
-                    		LOGI("Error!BLANK FB0 failed!\n");
+                    		ALOGI("Error!BLANK FB0 failed!\n");
                     	}
 
                         memset(overlayStr, 0 ,32);
                         strcpy(overlayStr, "1-layer-fb\n");
-                        LOGI("WRITE 1-layer-fb to fb2/fsl_disp_property");
+                        ALOGI("WRITE 1-layer-fb to fb2/fsl_disp_property");
                         write(fp_property, overlayStr, strlen(overlayStr)+1);
                         close(fp_property);
 
                         blank = FB_BLANK_POWERDOWN;
                     	if(ioctl(ctx->sec_fp, FBIOBLANK, blank) < 0) {
-                            LOGI("Error!BLANK FB2 failed!\n");
+                            ALOGI("Error!BLANK FB2 failed!\n");
                     	}
                         blank = FB_BLANK_UNBLANK;
                     	if(ioctl(m->framebuffer->fd, FBIOBLANK, blank) < 0) {
-                    		LOGI("Error!UNBLANK FB0 failed!\n");
+                    		ALOGI("Error!UNBLANK FB0 failed!\n");
                     	}
 
 			if (ioctl(m->framebuffer->fd, FBIOGET_VSCREENINFO,
 				  &fb0_var) < 0) {
-                            LOGE("Error!Cannot get var info for fb0");
+                            ALOGE("Error!Cannot get var info for fb0");
 			}
 
 			if (fb0_var.bits_per_pixel == 32) {
@@ -505,7 +505,7 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
 				l_alpha.alpha_in_pixel = true;
 				if (ioctl(m->framebuffer->fd, MXCFB_SET_LOC_ALPHA,
 				            &l_alpha) < 0) {
-				    LOGE("Error!MXCFB_SET_LOC_ALPHA failed!");
+				    ALOGE("Error!MXCFB_SET_LOC_ALPHA failed!");
 				}
 			} else {
 				struct mxcfb_gbl_alpha gbl_alpha;
@@ -515,16 +515,16 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
 				gbl_alpha.enable = 1;
 				if (ioctl(m->framebuffer->fd, MXCFB_SET_GBL_ALPHA,
 					  &gbl_alpha) < 0) {
-				    LOGE("Error!MXCFB_SET_GBL_ALPHA failed!");
+				    ALOGE("Error!MXCFB_SET_GBL_ALPHA failed!");
 				}
 
 	                        key.enable = 1;
 	                        key.color_key = 0x00000000; // Black
-	                        LOGI("MXCFB_SET_CLR_KEY");
+	                        ALOGI("MXCFB_SET_CLR_KEY");
 	                        if( ioctl(m->framebuffer->fd, MXCFB_SET_CLR_KEY,
 					  &key) < 0)
 	                        {
-	                            LOGE("Error!MXCFB_SET_CLR_KEY for fb0");
+	                            ALOGE("Error!MXCFB_SET_CLR_KEY for fb0");
 	                        }
 			}
                     }
@@ -537,7 +537,7 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
         #endif
 
         if (ioctl(m->framebuffer->fd, FBIOPAN_DISPLAY, &m->info) == -1) {
-            LOGE("FBIOPAN_DISPLAY failed");
+            ALOGE("FBIOPAN_DISPLAY failed");
             m->base.unlock(&m->base, buffer); 
             return -errno;
         }
@@ -779,7 +779,7 @@ static int set_graphics_fb_mode(int fb, int dual_disp)
 
     fp_cmd = open("/proc/cmdline",O_RDONLY, 0);
     if(fp_cmd < 0) {
-        LOGI("Error %d! Cannot open /proc/cmdline", fp_cmd);
+        ALOGI("Error %d! Cannot open /proc/cmdline", fp_cmd);
         goto set_graphics_fb_mode_error;
     }
 
@@ -787,7 +787,7 @@ static int set_graphics_fb_mode(int fb, int dual_disp)
     size = read(fp_cmd, cmd_line, sizeof(cmd_line));
     if(size <= 0)
     {
-        LOGI("Error! Cannot read /proc/cmdline");
+        ALOGI("Error! Cannot read /proc/cmdline");
         goto set_graphics_fb_mode_error;
     }
 
@@ -798,7 +798,7 @@ static int set_graphics_fb_mode(int fb, int dual_disp)
     sprintf(temp_name, "/sys/class/graphics/fb%d/modes", fb);
     fp_modes = open(temp_name,O_RDONLY, 0);
     if(fp_modes < 0) {
-        LOGI("Error %d! Cannot open %s", fp_modes, temp_name);
+        ALOGI("Error %d! Cannot open %s", fp_modes, temp_name);
         goto set_graphics_fb_mode_error;
     }
 
@@ -806,7 +806,7 @@ static int set_graphics_fb_mode(int fb, int dual_disp)
     size = read(fp_modes, fb_modes, sizeof(fb_modes));
     if(size <= 0)
     {
-        LOGI("Error! Cannot read %s", temp_name);
+        ALOGI("Error! Cannot read %s", temp_name);
         goto set_graphics_fb_mode_error;
     }
 
@@ -817,16 +817,16 @@ static int set_graphics_fb_mode(int fb, int dual_disp)
     disp_mode = find_available_mode(fb_modes, dual_disp);
     if(!disp_mode)
     {
-        LOGI("Error! Cannot find available mode for fb%d", fb);
+        ALOGI("Error! Cannot find available mode for fb%d", fb);
         goto set_graphics_fb_mode_error;
     }
 
-    LOGI("find fb%d available mode %s", fb,disp_mode);
+    ALOGI("find fb%d available mode %s", fb,disp_mode);
 
     sprintf(temp_name, "/sys/class/graphics/fb%d/mode", fb);
     fp_mode = open(temp_name,O_RDWR, 0);
     if(fp_mode < 0) {
-        LOGI("Error %d! Cannot open %s", fp_mode, temp_name);
+        ALOGI("Error %d! Cannot open %s", fp_mode, temp_name);
         goto set_graphics_fb_mode_error;
     }
 
@@ -834,7 +834,7 @@ static int set_graphics_fb_mode(int fb, int dual_disp)
     size = read(fp_mode, fb_mode, sizeof(fb_mode));
     if(size < 0)
     {
-        LOGI("Error! Cannot read %s", temp_name);
+        ALOGI("Error! Cannot read %s", temp_name);
         goto set_graphics_fb_mode_error;
     }
 
@@ -843,7 +843,7 @@ static int set_graphics_fb_mode(int fb, int dual_disp)
         size = write(fp_mode, disp_mode, strlen(disp_mode)+1);
         if(size <= 0)
         {
-           LOGI("Error! Cannot write %s", temp_name);
+           ALOGI("Error! Cannot write %s", temp_name);
         }
     }
 
@@ -917,7 +917,7 @@ int mapFrameBufferLocked(struct private_module_t* module)
     info.activate = FB_ACTIVATE_NOW;
 
     if(info.bits_per_pixel == 32){
-        LOGW("32bpp setting of Framebuffer catched!");
+        ALOGW("32bpp setting of Framebuffer catched!");
         /*
          * Explicitly request BGRA 8/8/8
          */
@@ -968,7 +968,7 @@ int mapFrameBufferLocked(struct private_module_t* module)
             gbl_alpha.enable = 1;
             int ret = ioctl(fd, MXCFB_SET_GBL_ALPHA, &gbl_alpha);
             if(ret <0) {
-	        LOGE("Error!MXCFB_SET_GBL_ALPHA failed!");
+	        ALOGE("Error!MXCFB_SET_GBL_ALPHA failed!");
 	        return -1;
             }
 
@@ -977,7 +977,7 @@ int mapFrameBufferLocked(struct private_module_t* module)
             key.color_key = 0x00000000; // Black
             ret = ioctl(fd, MXCFB_SET_CLR_KEY, &key);
             if(ret <0) {
-	        LOGE("Error!Colorkey setting failed for dev ");
+	        ALOGE("Error!Colorkey setting failed for dev ");
 	        return -1;
             }
         }
@@ -999,14 +999,14 @@ int mapFrameBufferLocked(struct private_module_t* module)
     if (ioctl(fd, FBIOPUT_VSCREENINFO, &info) == -1) {
         info.yres_virtual = ALIGN_PIXEL_128(info.yres);
         flags &= ~PAGE_FLIP;
-        LOGW("FBIOPUT_VSCREENINFO failed, page flipping not supported");
+        ALOGW("FBIOPUT_VSCREENINFO failed, page flipping not supported");
     }
 
     if (info.yres_virtual < ALIGN_PIXEL_128(info.yres) * 2) {
         // we need at least 2 for page-flipping
         info.yres_virtual = ALIGN_PIXEL_128(info.yres);
         flags &= ~PAGE_FLIP;
-        LOGW("page flipping not supported (yres_virtual=%d, requested=%d)",
+        ALOGW("page flipping not supported (yres_virtual=%d, requested=%d)",
                 info.yres_virtual, ALIGN_PIXEL_128(info.yres)*2);
     }
 
@@ -1017,14 +1017,14 @@ int mapFrameBufferLocked(struct private_module_t* module)
     int auto_update_mode = AUTO_UPDATE_MODE_REGION_MODE;
     int retval = ioctl(fd, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode);
     if (retval < 0) {
-	LOGE("Error! set auto update mode error!\n");
+	ALOGE("Error! set auto update mode error!\n");
 	return -errno;
     }
 
     int scheme_mode = UPDATE_SCHEME_QUEUE_AND_MERGE;
     retval = ioctl(fd, MXCFB_SET_UPDATE_SCHEME, &scheme_mode);
     if (retval < 0) {
-	LOGE("Error! set update scheme error!\n");
+	ALOGE("Error! set update scheme error!\n");
 	return -errno;
     }
 #endif
@@ -1051,7 +1051,7 @@ int mapFrameBufferLocked(struct private_module_t* module)
     float ydpi = (info.yres * 25.4f) / info.height;
     float fps  = refreshRate / 1000.0f;
 
-    LOGI(   "using (fd=%d)\n"
+    ALOGI(   "using (fd=%d)\n"
             "id           = %s\n"
             "xres         = %d px\n"
             "yres         = %d px\n"
@@ -1073,7 +1073,7 @@ int mapFrameBufferLocked(struct private_module_t* module)
             info.blue.offset, info.blue.length
     );
 
-    LOGI(   "width        = %d mm (%f dpi)\n"
+    ALOGI(   "width        = %d mm (%f dpi)\n"
             "height       = %d mm (%f dpi)\n"
             "refresh rate = %.2f Hz\n",
             info.width,  xdpi,
@@ -1110,7 +1110,7 @@ int mapFrameBufferLocked(struct private_module_t* module)
 
     void* vaddr = mmap(0, fbSize, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
     if (vaddr == MAP_FAILED) {
-        LOGE("Error mapping the framebuffer (%s)", strerror(errno));
+        ALOGE("Error mapping the framebuffer (%s)", strerror(errno));
         return -errno;
     }
     module->framebuffer->base = intptr_t(vaddr);
@@ -1146,7 +1146,7 @@ static int mapSecFrameBuffer(fb_context_t* ctx)
 
     sec_fp = open("/dev/graphics/fb2",O_RDWR, 0);
     if (sec_fp < 0){
-        LOGE("Error!Cannot open the /dev/graphics/fb2 for second display");
+        ALOGE("Error!Cannot open the /dev/graphics/fb2 for second display");
         goto disp_init_error;
     }
 
@@ -1156,46 +1156,46 @@ static int mapSecFrameBuffer(fb_context_t* ctx)
 
     fb2_fp = open("/dev/graphics/fb2",O_RDWR, 0);
     if (fb2_fp < 0){
-        LOGE("Error!Cannot open the /dev/graphics/fb2");
+        ALOGE("Error!Cannot open the /dev/graphics/fb2");
         goto disp_init_error;
     }
     if(ioctl(fb2_fp, FBIOBLANK, blank) < 0) {
-		LOGI("Error!BLANK FB0 failed!\n");
+		ALOGI("Error!BLANK FB0 failed!\n");
         goto disp_init_error;
 	}
     close(fb2_fp);
 
 	if(ioctl(sec_fp, FBIOBLANK, blank) < 0) {
-		LOGI("Error!BLANK FB2 failed!\n");
+		ALOGI("Error!BLANK FB2 failed!\n");
         goto disp_init_error;
 	}
 
     if(ioctl(m->framebuffer->fd, FBIOBLANK, blank) < 0) {
-		LOGI("Error!BLANK FB0 failed!\n");
+		ALOGI("Error!BLANK FB0 failed!\n");
         goto disp_init_error;
 	}
     
-    LOGI("Open fb0/fsl_disp_property");
+    ALOGI("Open fb0/fsl_disp_property");
     fp_property = open("/sys/class/graphics/fb0/fsl_disp_property",O_RDWR, 0); 
     if(fp_property < 0) {
-         LOGI("Error!Cannot switch the overlay to second disp");
+         ALOGI("Error!Cannot switch the overlay to second disp");
          goto disp_init_error;
     }
     
     memset(overlayStr, 0 ,32);
     strcpy(overlayStr, "1-layer-fb\n");
-    LOGI("WRITE 1-layer-fb to fb0/fsl_disp_property");
+    ALOGI("WRITE 1-layer-fb to fb0/fsl_disp_property");
     write(fp_property, overlayStr, strlen(overlayStr)+1);
     close(fp_property);
 
     blank = FB_BLANK_UNBLANK;
 	if(ioctl(sec_fp, FBIOBLANK, blank) < 0) {
-		LOGI("Error!UNBLANK FB2 failed!\n");
+		ALOGI("Error!UNBLANK FB2 failed!\n");
         goto disp_init_error;
 	}
 
 	if(ioctl(m->framebuffer->fd, FBIOBLANK, blank) < 0) {
-		LOGI("Error!UNBLANK FB0 failed!\n");
+		ALOGI("Error!UNBLANK FB0 failed!\n");
         goto disp_init_error;
 	}
 
@@ -1207,7 +1207,7 @@ static int mapSecFrameBuffer(fb_context_t* ctx)
     if (ioctl(sec_fp, FBIOGET_VSCREENINFO, &info) == -1)
         goto disp_init_error;
                 
-    LOGI("Second display: xres %d,yres %d, xres_virtual %d, yres_virtual %d",
+    ALOGI("Second display: xres %d,yres %d, xres_virtual %d, yres_virtual %d",
          info.xres,info.xres_virtual,info.yres,info.yres_virtual);
 
     info.reserved[0] = 0;
@@ -1221,17 +1221,17 @@ static int mapSecFrameBuffer(fb_context_t* ctx)
     info.xres_virtual = ALIGN_PIXEL(info.xres);
                         
     if (ioctl(sec_fp, FBIOPUT_VSCREENINFO, &info) == -1) {
-        LOGE("Error!Second display FBIOPUT_VSCREENINFO");
+        ALOGE("Error!Second display FBIOPUT_VSCREENINFO");
         goto disp_init_error;
     }
                     
     if (ioctl(sec_fp, FBIOGET_VSCREENINFO, &info) == -1){
-        LOGE("Error!Second display FBIOGET_VSCREENINFO");
+        ALOGE("Error!Second display FBIOGET_VSCREENINFO");
         goto disp_init_error;
     }
                     
     if (ioctl(sec_fp, FBIOGET_FSCREENINFO, &finfo) == -1){
-        LOGE("Error!Second display FBIOGET_FSCREENINFO");
+        ALOGE("Error!Second display FBIOGET_FSCREENINFO");
         goto disp_init_error;
     }
                     
@@ -1242,25 +1242,25 @@ static int mapSecFrameBuffer(fb_context_t* ctx)
                    
     vaddr = mmap(0, fbSize, PROT_READ|PROT_WRITE, MAP_SHARED, sec_fp, 0);
     if (vaddr == MAP_FAILED) {
-        LOGE("Error!mapping the framebuffer (%s)", strerror(errno));
+        ALOGE("Error!mapping the framebuffer (%s)", strerror(errno));
         goto disp_init_error;
     }
 
     key.enable = 1;
     key.color_key = 0x00000000; // Black
-    LOGI("MXCFB_SET_CLR_KEY");
+    ALOGI("MXCFB_SET_CLR_KEY");
     if( ioctl(sec_fp, MXCFB_SET_CLR_KEY, &key) < 0)
     {
-        LOGE("Error!MXCFB_SET_CLR_KEY");
+        ALOGE("Error!MXCFB_SET_CLR_KEY");
         goto disp_init_error;
     }
 
     gbl_alpha.alpha = 255;
     gbl_alpha.enable = 1;
-    LOGI("MXCFB_SET_GBL_ALPHA");
+    ALOGI("MXCFB_SET_GBL_ALPHA");
     if(ioctl(sec_fp, MXCFB_SET_GBL_ALPHA, &gbl_alpha) <0)
     {
-        LOGI("Error!MXCFB_SET_GBL_ALPHA error");
+        ALOGI("Error!MXCFB_SET_GBL_ALPHA error");
         goto disp_init_error;
     }
 
@@ -1283,7 +1283,7 @@ static int mapSecFrameBuffer(fb_context_t* ctx)
     if (ioctl(m->framebuffer->fd, FBIOGET_VSCREENINFO, &fb0_info) == -1)
         goto disp_init_error;
                 
-    LOGI("fb0_info display: xres %d,yres %d, xres_virtual %d, yres_virtual %d",
+    ALOGI("fb0_info display: xres %d,yres %d, xres_virtual %d, yres_virtual %d",
          fb0_info.xres,fb0_info.xres_virtual,
          fb0_info.yres,fb0_info.yres_virtual);
 
@@ -1311,7 +1311,7 @@ static int mapSecFrameBuffer(fb_context_t* ctx)
 	fb0_info.xres_virtual = fb0_info.xres;
 #endif
     if (ioctl(m->framebuffer->fd, FBIOPUT_VSCREENINFO, &m->info) == -1) {
-        LOGE("Error!Second display FBIOPUT_VSCREENINFO");
+        ALOGE("Error!Second display FBIOPUT_VSCREENINFO");
         goto disp_init_error;
     }
 
@@ -1331,7 +1331,7 @@ static int resizeToSecFrameBuffer(int base,int phys,fb_context_t* ctx)
     private_module_t* m = reinterpret_cast<private_module_t*>(ctx->dev->common.module);
 
     if(ctx->mIpuFd < 0){
-        LOGE("%s:%d, invalid ipu device !!!!", __FUNCTION__, __LINE__);
+        ALOGE("%s:%d, invalid ipu device !!!!", __FUNCTION__, __LINE__);
         return -EINVAL;
     }
 
@@ -1410,7 +1410,7 @@ static int resizeToSecFrameBuffer(int base,int phys,fb_context_t* ctx)
     }
     status = ioctl(ctx->mIpuFd, IPU_QUEUE_TASK, &ctx->mTask);
     if(status < 0) {
-        LOGE("%s:%d, IPU_QUEUE_TASK failed %d", __FUNCTION__, __LINE__ ,status);
+        ALOGE("%s:%d, IPU_QUEUE_TASK failed %d", __FUNCTION__, __LINE__ ,status);
     }
 
     return status;
@@ -1458,7 +1458,7 @@ static int resizeToSecFrameBuffer_c2d(int base,int phys,fb_context_t* ctx)
 
     if (c2dSurfAlloc(ctx->c2dctx, &srcSurface, &srcSurfaceDef) != C2D_STATUS_OK)
     {
-        LOGE("srcSurface c2dSurfAlloc fail");
+        ALOGE("srcSurface c2dSurfAlloc fail");
         return -EINVAL;
     }
 
@@ -1500,7 +1500,7 @@ static int resizeToSecFrameBuffer_c2d(int base,int phys,fb_context_t* ctx)
             
     if (c2dSurfAlloc(ctx->c2dctx, &dstSurface, &dstSurfaceDef) != C2D_STATUS_OK)
     {
-        LOGE("dstSurface c2dSurfAlloc fail");
+        ALOGE("dstSurface c2dSurfAlloc fail");
         c2dSurfFree(ctx->c2dctx, srcSurface);
         return -EINVAL;
     }
diff --git a/mx5x/libgralloc/gralloc.cpp b/mx5x/libgralloc/gralloc.cpp
index 93b1ca8..16eeefd 100755
--- a/mx5x/libgralloc/gralloc.cpp
+++ b/mx5x/libgralloc/gralloc.cpp
@@ -193,7 +193,7 @@ static int init_pmem_area_locked(private_module_t* m)
         size_t size;
         pmem_region region;
         if (ioctl(master_fd, PMEM_GET_TOTAL_SIZE, &region) < 0) {
-            LOGE("PMEM_GET_TOTAL_SIZE failed, limp mode");
+            ALOGE("PMEM_GET_TOTAL_SIZE failed, limp mode");
             size = 8<<20;   // 8 MiB
         } else {
             size = region.len;
@@ -211,10 +211,10 @@ static int init_pmem_area_locked(private_module_t* m)
             pmem_region region;
             err = ioctl(master_fd, PMEM_GET_PHYS, &region);
             if (err < 0) {
-                LOGE("PMEM_GET_PHYS failed (%s)", strerror(-errno));
+                ALOGE("PMEM_GET_PHYS failed (%s)", strerror(-errno));
             } else {
                 m->master_phys = (unsigned long)region.offset;
-				LOGI("PMEM GPU enabled, size:%d, phys base:%lx",size,m->master_phys);
+				ALOGI("PMEM GPU enabled, size:%d, phys base:%lx",size,m->master_phys);
             }
         }
         m->pmem_master = master_fd;
@@ -277,7 +277,7 @@ static int gralloc_alloc_buffer(alloc_device_t* dev,
 try_ashmem:
         fd = ashmem_create_region("gralloc-buffer", size);
         if (fd < 0) {
-            LOGE("couldn't create ashmem (%s)", strerror(-errno));
+            ALOGE("couldn't create ashmem (%s)", strerror(-errno));
             err = -errno;
         }
     } else {
@@ -325,7 +325,7 @@ try_ashmem:
                 err = 0;
                 goto try_ashmem;
             } else {
-                LOGE("couldn't open pmem (%s)", strerror(-errno));
+                ALOGE("couldn't open pmem (%s)", strerror(-errno));
             }
         }
     }
@@ -334,7 +334,7 @@ try_ashmem:
     
     fd = ashmem_create_region("Buffer", size);
     if (fd < 0) {
-        LOGE("couldn't create ashmem (%s)", strerror(-errno));
+        ALOGE("couldn't create ashmem (%s)", strerror(-errno));
         err = -errno;
     }
 
diff --git a/mx5x/libgralloc/gralloc_priv.h b/mx5x/libgralloc/gralloc_priv.h
index 0aed8dd..c60942b 100755
--- a/mx5x/libgralloc/gralloc_priv.h
+++ b/mx5x/libgralloc/gralloc_priv.h
@@ -139,7 +139,7 @@ struct private_handle_t {
                 h->numInts != sNumInts || h->numFds != sNumFds ||
                 hnd->magic != sMagic) 
         {
-            LOGE("invalid gralloc handle (at %p)", h);
+            ALOGE("invalid gralloc handle (at %p)", h);
             return -EINVAL;
         }
         return 0;
diff --git a/mx5x/libgralloc/mapper.cpp b/mx5x/libgralloc/mapper.cpp
index f75bcc1..05174dd 100755
--- a/mx5x/libgralloc/mapper.cpp
+++ b/mx5x/libgralloc/mapper.cpp
@@ -65,13 +65,13 @@ static int gralloc_map(gralloc_module_t const* module,
         void* mappedAddress = mmap(0, size,
                 PROT_READ|PROT_WRITE, MAP_SHARED, hnd->fd, 0);
         if (mappedAddress == MAP_FAILED) {
-            LOGE("Could not mmap handle %p, fd=%d (%s)",
+            ALOGE("Could not mmap handle %p, fd=%d (%s)",
                     handle, hnd->fd, strerror(errno));
             hnd->base = 0;
             return -errno;
         }
         hnd->base = intptr_t(mappedAddress) + hnd->offset;
-        //LOGD("gralloc_map() succeeded fd=%d, off=%d, size=%d, vaddr=%p", 
+        //ALOGD("gralloc_map() succeeded fd=%d, off=%d, size=%d, vaddr=%p", 
         //        hnd->fd, hnd->offset, hnd->size, mappedAddress);
     }
     *vaddr = (void*)hnd->base;
@@ -89,9 +89,9 @@ static int gralloc_unmap(gralloc_module_t const* module,
         base = (void*)(intptr_t(base) - hnd->offset);
         size += hnd->offset;
 #endif
-        //LOGD("unmapping from %p, size=%d", base, size);
+        //ALOGD("unmapping from %p, size=%d", base, size);
         if (munmap(base, size) < 0) {
-            LOGE("Could not unmap %s", strerror(errno));
+            ALOGE("Could not unmap %s", strerror(errno));
         }
     }
     hnd->base = 0;
@@ -205,16 +205,16 @@ int gralloc_lock(gralloc_module_t const* module,
 
         if (current_value & private_handle_t::LOCK_STATE_WRITE) {
             // already locked for write 
-            LOGE("handle %p already locked for write", handle);
+            ALOGE("handle %p already locked for write", handle);
             return -EBUSY;
         } else if (current_value & private_handle_t::LOCK_STATE_READ_MASK) {
             // already locked for read
             if (usage & (GRALLOC_USAGE_SW_WRITE_MASK | GRALLOC_USAGE_HW_RENDER)) {
-                LOGE("handle %p already locked for read", handle);
+                ALOGE("handle %p already locked for read", handle);
                 return -EBUSY;
             } else {
                 // this is not an error
-                //LOGD("%p already locked for read... count = %d", 
+                //ALOGD("%p already locked for read... count = %d", 
                 //        handle, (current_value & ~(1<<31)));
             }
         }
@@ -298,7 +298,7 @@ int gralloc_unlock(gralloc_module_t const* module,
         }
 
         if ((new_value & private_handle_t::LOCK_STATE_READ_MASK) == 0) {
-            LOGE("handle %p not locked", handle);
+            ALOGE("handle %p not locked", handle);
             return -EINVAL;
         }
 
diff --git a/mx6/hwcomposer/FG_device.cpp b/mx6/hwcomposer/FG_device.cpp
index 68564b6..a40e7df 100755
--- a/mx6/hwcomposer/FG_device.cpp
+++ b/mx6/hwcomposer/FG_device.cpp
@@ -50,7 +50,8 @@ static int switch_set(int fd0, int fd1, int flag)
 {
     struct mxcfb_gbl_alpha gbl_alpha;
     struct mxcfb_color_key key;
-  	if(flag & GRALLOC_USAGE_HWC_OVERLAY_DISP0) {
+  	//if(flag & GRALLOC_USAGE_HWC_OVERLAY_DISP0) {
+    {
 		  	key.enable = 1;
 		  	key.color_key = 0x00000000; //black
 		  	if(ioctl(fd0, MXCFB_SET_CLR_KEY, &key) < 0) {
@@ -66,7 +67,8 @@ static int switch_set(int fd0, int fd1, int flag)
 		  	}
   	}
 
-  	if(flag & GRALLOC_USAGE_HWC_OVERLAY_DISP1) {
+  	//if(flag & GRALLOC_USAGE_HWC_OVERLAY_DISP1) {
+    {
 		  	key.enable = 1;
 		  	key.color_key = 0x00000000; //black
 		  	if(ioctl(fd1, MXCFB_SET_CLR_KEY, &key) < 0) {
@@ -107,7 +109,8 @@ static int overlay_switch(int fd0, int fd1, int fd2, int flag)
 	      return -1;
 		}
 
-  	if(flag & GRALLOC_USAGE_HWC_OVERLAY_DISP1) {
+  	//if(flag & GRALLOC_USAGE_HWC_OVERLAY_DISP1) {
+      {
   			//fp_property;
 
 		    HWCOMPOSER_LOG_ERR("Open fb0/fsl_disp_property");
@@ -124,7 +127,8 @@ static int overlay_switch(int fd0, int fd1, int fd2, int flag)
 		    close(fp_property);
 
   	}
-  	if(flag & GRALLOC_USAGE_HWC_OVERLAY_DISP0) {
+  	//if(flag & GRALLOC_USAGE_HWC_OVERLAY_DISP0) {
+      {
 		    HWCOMPOSER_LOG_ERR("Open fb1/fsl_disp_property");
 		    fp_property = open("/sys/class/graphics/fb1/fsl_disp_property",O_RDWR, 0);
 		    if(fp_property < 0) {
@@ -163,7 +167,7 @@ int FG_device::init()
         HWCOMPOSER_LOG_ERR("Error! FG_device::FG_init() invalid parameter!");
         return -1;
     }
-#if 1
+#if 0
     //fist open fb0 device that it is binded to.
     //it may be modified in mx6x
     int fd_def = -1;
diff --git a/mx6/hwcomposer/blit_ipu.cpp b/mx6/hwcomposer/blit_ipu.cpp
index a234b7a..1ff2da9 100755
--- a/mx6/hwcomposer/blit_ipu.cpp
+++ b/mx6/hwcomposer/blit_ipu.cpp
@@ -182,8 +182,8 @@ int blit_ipu::blit(hwc_layer_t *layer, hwc_buffer *out_buf)
         hdmi_full_screen = 0;
     }
 
-    if(out_buf->usage & GRALLOC_USAGE_DISPLAY_MASK || (hdmi_full_screen && 
-                        (out_buf->usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2))) { 
+    if(out_buf->usage & GRALLOC_USAGE_DISPLAY_MASK || (hdmi_full_screen /*&& 
+                        (out_buf->usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2)*/)) { 
 	    mTask.output.width = out_buf->width;
 	    mTask.output.height = out_buf->height;
 	    mTask.output.crop.pos.x = 0;
@@ -191,7 +191,7 @@ int blit_ipu::blit(hwc_layer_t *layer, hwc_buffer *out_buf)
 	    mTask.output.crop.w = out_buf->width;
 	    mTask.output.crop.h = out_buf->height;
     }
-    else if((out_buf->usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2) && 
+    else if(/*(out_buf->usage & GRALLOC_USAGE_HWC_OVERLAY_DISP2) &&*/ 
                (out_buf->width != m_def_disp_w || out_buf->height!= m_def_disp_h)){
             int def_w,def_h;
             int dst_w = out_buf->width;
diff --git a/mx6/hwcomposer/hwc_common.h b/mx6/hwcomposer/hwc_common.h
index 572768e..5da570b 100755
--- a/mx6/hwcomposer/hwc_common.h
+++ b/mx6/hwcomposer/hwc_common.h
@@ -41,17 +41,17 @@
 //#define HWCOMPOSER_DEBUG_LOG
 
 #ifdef HWCOMPOSER_DEBUG_LOG
-#define HWCOMPOSER_LOG_RUNTIME(format, ...) LOGI((format), ## __VA_ARGS__)
-#define HWCOMPOSER_LOG_FUNC LOGI("%s is excuting...",  __FUNCTION__)
+#define HWCOMPOSER_LOG_RUNTIME(format, ...) ALOGI((format), ## __VA_ARGS__)
+#define HWCOMPOSER_LOG_FUNC ALOGI("%s is excuting...",  __FUNCTION__)
 #else
 #define HWCOMPOSER_LOG_RUNTIME(format, ...)
 #define HWCOMPOSER_LOG_FUNC
 #endif
 
-#define HWCOMPOSER_LOG_TRACE   LOGI("%s : %d", __FUNCTION__,__LINE__)
-#define HWCOMPOSER_LOG_INFO(format, ...) LOGI((format), ## __VA_ARGS__)
+#define HWCOMPOSER_LOG_TRACE   ALOGI("%s : %d", __FUNCTION__,__LINE__)
+#define HWCOMPOSER_LOG_INFO(format, ...) ALOGI((format), ## __VA_ARGS__)
 
-#define HWCOMPOSER_LOG_ERR(format, ...) LOGE((format), ##__VA_ARGS__)
+#define HWCOMPOSER_LOG_ERR(format, ...) ALOGE((format), ##__VA_ARGS__)
 /*****************************************************************************/
 #define DEFAULT_FB_DEV_NAME "/dev/graphics/fb0"
 #define FB1_DEV_NAME "/dev/graphics/fb1"
diff --git a/mx6/hwcomposer/hwcomposer.cpp b/mx6/hwcomposer/hwcomposer.cpp
index 00ceea5..51ac062 100755
--- a/mx6/hwcomposer/hwcomposer.cpp
+++ b/mx6/hwcomposer/hwcomposer.cpp
@@ -73,7 +73,7 @@ hwc_module_t HAL_MODULE_INFO_SYM = {
 /*****************************************************************************/
 
 static void dump_layer(hwc_layer_t const* l) {
-    LOGD("\ttype=%d, flags=%08x, handle=%p, tr=%02x, blend=%04x, {%d,%d,%d,%d}, {%d,%d,%d,%d}",
+    ALOGD("\ttype=%d, flags=%08x, handle=%p, tr=%02x, blend=%04x, {%d,%d,%d,%d}, {%d,%d,%d,%d}",
             l->compositionType, l->flags, l->handle, l->transform, l->blending,
             l->sourceCrop.left,
             l->sourceCrop.top,
@@ -113,10 +113,10 @@ static void addRecord(hwc_context_t *dev, hwc_layer_list_t* list)
             //HWCOMPOSER_LOG_RUNTIME("<<<<<<<<<<<<<<<hwc_prepare---2>>>>>>>>>>>>>>>>>\n");
             //HWCOMPOSER_LOG_ERR("-------hwc_prepare----layer[%d]-----displayID = %d", i, layer->displayId);
             private_handle_t *handle = (private_handle_t *)(layer->handle);
-            if(!(handle->usage & GRALLOC_USAGE_HWC_OVERLAY)) {
+            //if(!(handle->usage & GRALLOC_USAGE_HWC_OVERLAY)) {
                 //HWCOMPOSER_LOG_ERR("<<<<<<<<<<<<<<<hwc_prepare---usage=%x>>phy=%x>>>>>>>>>>>>>>>\n", handle->usage, handle->phys);
-                continue;
-            }
+            //    continue;
+            //}
 
             if(rec_index >= LAYER_RECORD_NUM) {
                 HWCOMPOSER_LOG_ERR("******************Error: too many video layers");
@@ -225,6 +225,7 @@ static int hwc_check_property(hwc_context_t *dev)
 
 static int hwc_modify_property(hwc_context_t *dev, private_handle_t *handle)
 {
+#if 0
 	handle->usage &= ~GRALLOC_USAGE_OVERLAY_DISPLAY_MASK;
 
     if(dev->display_mode & DISPLAY_MODE_DISP1){
@@ -247,7 +248,7 @@ static int hwc_modify_property(hwc_context_t *dev, private_handle_t *handle)
 			handle->usage |= GRALLOC_USAGE_HWC_OVERLAY_DISP2;
 	else if(dev->display_mode & DISPLAY_MODE_OVERLAY_DISP3)
 			handle->usage |= GRALLOC_USAGE_HWC_OVERLAY_DISP3;
-
+#endif
     //HWCOMPOSER_LOG_ERR("************handle->usage=%x", handle->usage);
 	return 0;
 }
@@ -331,6 +332,7 @@ static void deleteEmtpyIndex(struct hwc_context_t *ctx)
 
 static char* getDeviceName(hwc_context_t *dev, int usage, int *pUse)
 {
+#if 0
     if(dev->second_display) {
         if(usage & GRALLOC_USAGE_HWC_OVERLAY_DISP0) {
             *pUse = GRALLOC_USAGE_HWC_OVERLAY_DISP0;
@@ -359,7 +361,7 @@ static char* getDeviceName(hwc_context_t *dev, int usage, int *pUse)
             *pUse = GRALLOC_USAGE_HWC_OVERLAY_DISP2;
             return (char *)FB3_DEV_NAME;
     }
-
+#endif
     return NULL;
 }
 
@@ -453,10 +455,12 @@ static int hwc_prepare(hwc_composer_device_t *dev, hwc_layer_list_t* list) {
 	    }
 	    //HWCOMPOSER_LOG_RUNTIME("<<<<<<<<<<<<<<<hwc_prepare---2>>>>>>>>>>>>>>>>>\n");
             private_handle_t *handle = (private_handle_t *)(layer->handle);
+#if 0
             if(!(handle->usage & GRALLOC_USAGE_HWC_OVERLAY)) {
                 //HWCOMPOSER_LOG_ERR("<<<<<<<<<<<<<<<hwc_prepare---usage=%x>>phy=%x>>>>>>>>>>>>>>>\n", handle->usage, handle->phys);
             	continue;
             }
+#endif
             HWCOMPOSER_LOG_RUNTIME("<<<<<<<<<<<<<<<hwc_prepare---3>usage=%x, phy=%x>>>>>>>>>>>>>>>>\n", handle->usage, handle->phys);
             hwc_check_property(ctx);
 	    layer->compositionType = HWC_OVERLAY;
@@ -622,7 +626,8 @@ static int hwc_set(hwc_composer_device_t *dev,
         }
 
 	private_handle_t *handle = (private_handle_t *)(layer->handle);
-	if(handle->usage & GRALLOC_USAGE_HWC_OVERLAY){
+//	if(handle->usage & GRALLOC_USAGE_HWC_OVERLAY){
+    {
             int retv = 0;
             int m_usage = 0;
             int i_usage = handle->usage & GRALLOC_USAGE_OVERLAY_DISPLAY_MASK;
@@ -705,7 +710,7 @@ static int hwc_device_open(const struct hw_module_t* module, const char* name,
 
         dev->device.prepare = hwc_prepare;
         dev->device.set = hwc_set;
-        dev->device.setUpdateMode = hwc_setUpdateMode;
+//        dev->device.setUpdateMode = hwc_setUpdateMode;
 
         *device = &dev->device.common;
 
diff --git a/mx6/libcamera/CameraHal.cpp b/mx6/libcamera/CameraHal.cpp
index 75ac3b3..658cf17 100755
--- a/mx6/libcamera/CameraHal.cpp
+++ b/mx6/libcamera/CameraHal.cpp
@@ -1156,7 +1156,7 @@ namespace android {
 
         for (unsigned int i =0;;){
             if (mCaptureDevice->DevDequeue(&DeQueBufIdx) < 0){
-                LOGE("VIDIOC_DQBUF Failed!!!");
+                ALOGE("VIDIOC_DQBUF Failed!!!");
                 ret = UNKNOWN_ERROR;
                 goto Pic_out;
             }
diff --git a/mx6/libcamera/CameraModule.cpp b/mx6/libcamera/CameraModule.cpp
index 479baa3..b884e86 100755
--- a/mx6/libcamera/CameraModule.cpp
+++ b/mx6/libcamera/CameraModule.cpp
@@ -79,7 +79,7 @@ int camera_set_preview_window(struct camera_device * device,
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -100,7 +100,7 @@ void camera_set_callbacks(struct camera_device * device,
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -114,7 +114,7 @@ void camera_enable_msg_type(struct camera_device * device, int32_t msg_type)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -128,7 +128,7 @@ void camera_disable_msg_type(struct camera_device * device, int32_t msg_type)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -142,7 +142,7 @@ int camera_msg_type_enabled(struct camera_device * device, int32_t msg_type)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return 0;
@@ -157,7 +157,7 @@ int camera_start_preview(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -173,7 +173,7 @@ void camera_stop_preview(struct camera_device * device)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -188,7 +188,7 @@ int camera_preview_enabled(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -204,7 +204,7 @@ int camera_store_meta_data_in_buffers(struct camera_device * device, int enable)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -222,7 +222,7 @@ int camera_start_recording(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -237,7 +237,7 @@ void camera_stop_recording(struct camera_device * device)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -252,7 +252,7 @@ int camera_recording_enabled(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -268,7 +268,7 @@ void camera_release_recording_frame(struct camera_device * device,
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -283,7 +283,7 @@ int camera_auto_focus(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -299,7 +299,7 @@ int camera_cancel_auto_focus(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -315,7 +315,7 @@ int camera_take_picture(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -331,7 +331,7 @@ int camera_cancel_picture(struct camera_device * device)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -347,7 +347,7 @@ int camera_set_parameters(struct camera_device * device, const char *params)
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -363,7 +363,7 @@ char* camera_get_parameters(struct camera_device * device)
     char* param = NULL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return NULL;
@@ -379,7 +379,7 @@ static void camera_put_parameters(struct camera_device *device, char *parms)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -395,7 +395,7 @@ int camera_send_command(struct camera_device * device,
     int rv = -EINVAL;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return rv;
@@ -410,7 +410,7 @@ void camera_release(struct camera_device * device)
 {
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     if(!device)
         return;
@@ -441,7 +441,7 @@ int camera_device_close(hw_device_t* device)
     int ret = 0;
     fsl_camera_device_t* fsl_dev = NULL;
 
-    LOGV("%s", __FUNCTION__);
+    ALOGV("%s", __FUNCTION__);
 
     android::Mutex::Autolock lock(gCameraHalDeviceLock);
 
@@ -511,7 +511,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
 
     android::Mutex::Autolock lock(gCameraHalDeviceLock);
 
-    LOGI("camera_device open: %s", name);
+    ALOGI("camera_device open: %s", name);
 
     if (name != NULL) {
         cameraid = atoi(name);
@@ -519,7 +519,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
 
         if(cameraid > num_cameras)
         {
-            LOGE("camera service provided cameraid out of bounds, "
+            ALOGE("camera service provided cameraid out of bounds, "
                     "cameraid = %d, num supported = %d",
                     cameraid, num_cameras);
             rv = -EINVAL;
@@ -528,7 +528,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
 #if 0
         if(gCamerasOpen >= MAX_SIMUL_CAMERAS_SUPPORTED)
         {
-            LOGE("maximum number of cameras already open");
+            ALOGE("maximum number of cameras already open");
             rv = -ENOMEM;
             goto fail;
         }
@@ -536,7 +536,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
         camera_device = (fsl_camera_device_t*)malloc(sizeof(*camera_device));
         if(!camera_device)
         {
-            LOGE("camera_device allocation fail");
+            ALOGE("camera_device allocation fail");
             rv = -ENOMEM;
             goto fail;
         }
@@ -544,7 +544,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
         camera_ops = (camera_device_ops_t*)malloc(sizeof(*camera_ops));
         if(!camera_ops)
         {
-            LOGE("camera_ops allocation fail");
+            ALOGE("camera_ops allocation fail");
             rv = -ENOMEM;
             goto fail;
         }
@@ -595,7 +595,7 @@ int camera_device_open(const hw_module_t* module, const char* name,
 
         if(!camera)
         {
-            LOGE("Couldn't create instance of CameraHal class");
+            ALOGE("Couldn't create instance of CameraHal class");
             rv = -ENOMEM;
             goto fail;
         }
@@ -667,7 +667,7 @@ static int GetDevPath(const char *pCameraName, char *pCameraDevPath, unsigned in
                     //fsl csi/mipi camera name and path match
                     if(pathLen > strlen(dev_node)) {
                         strcpy(pCameraDevPath, dev_node);
-                        LOGI("Get sensor %s's dev path %s", pCameraName, pCameraDevPath);
+                        ALOGI("Get sensor %s's dev path %s", pCameraName, pCameraDevPath);
                         retCode = 0;
                     }
                     close(fd);
@@ -696,7 +696,7 @@ static void GetCameraPropery(char * pFaceBackCameraName, char *pFaceFrontCameraN
     else
         *pFaceBackOrient = atoi(orientStr);
 
-    LOGI("Face Back Camera is %s, orient is %d", pFaceBackCameraName, *pFaceBackOrient);
+    ALOGI("Face Back Camera is %s, orient is %d", pFaceBackCameraName, *pFaceBackOrient);
 
     property_get(FACE_FRONT_CAMERA_NAME, pFaceFrontCameraName, DEFAULT_ERROR_NAME_str );
 
@@ -708,7 +708,7 @@ static void GetCameraPropery(char * pFaceBackCameraName, char *pFaceFrontCameraN
     else
         *pFaceFrontOrient = atoi(orientStr);
 
-    LOGI("Face Front Camera is %s, orient is %d", pFaceFrontCameraName, *pFaceFrontOrient);
+    ALOGI("Face Front Camera is %s, orient is %d", pFaceFrontCameraName, *pFaceFrontOrient);
 }
 
 int camera_get_number_of_cameras()
diff --git a/mx6/libcamera/Camera_utils.h b/mx6/libcamera/Camera_utils.h
index 7cf350f..c1d1c45 100755
--- a/mx6/libcamera/Camera_utils.h
+++ b/mx6/libcamera/Camera_utils.h
@@ -29,18 +29,18 @@
 
 //#define CAMERA_HAL_DEBUG_LOG
 #ifdef CAMERA_HAL_DEBUG_LOG
-#define CAMERA_LOG_RUNTIME(format, ...) LOGI((format), ## __VA_ARGS__)
-#define CAMERA_LOG_FUNC LOGI("%s is excuting...",  __FUNCTION__)
-#define CAMERA_LOG_TRACE   LOGI("%s : %d", __FUNCTION__,__LINE__)
+#define CAMERA_LOG_RUNTIME(format, ...) ALOGI((format), ## __VA_ARGS__)
+#define CAMERA_LOG_FUNC ALOGI("%s is excuting...",  __FUNCTION__)
+#define CAMERA_LOG_TRACE   ALOGI("%s : %d", __FUNCTION__,__LINE__)
 #else
 #define CAMERA_LOG_RUNTIME(format, ...)
 #define CAMERA_LOG_FUNC
 #define CAMERA_LOG_TRACE
 #endif
 
-#define CAMERA_LOG_INFO(format, ...) LOGI((format), ## __VA_ARGS__)
-#define CAMERA_LOG_WARN(format, ...) LOGW((format), ## __VA_ARGS__)
-#define CAMERA_LOG_ERR(format, ...) LOGE((format), ##__VA_ARGS__)
+#define CAMERA_LOG_INFO(format, ...) ALOGI((format), ## __VA_ARGS__)
+#define CAMERA_LOG_WARN(format, ...) ALOGW((format), ## __VA_ARGS__)
+#define CAMERA_LOG_ERR(format, ...) ALOGE((format), ##__VA_ARGS__)
 
 namespace android {
 
diff --git a/mx6/libcamera/JpegEncoderSoftware.cpp b/mx6/libcamera/JpegEncoderSoftware.cpp
index a7a4b3f..49868d7 100755
--- a/mx6/libcamera/JpegEncoderSoftware.cpp
+++ b/mx6/libcamera/JpegEncoderSoftware.cpp
@@ -560,7 +560,7 @@ done:
             CAMERA_LOG_RUNTIME("jpeg output data len %d",(int)g_JpegDataLen);
 
             *out_buf_ptrptr = NULL;
-            *out_buf_len_ptr = NULL;
+            *out_buf_len_ptr = 0;
         }
         else
         {
diff --git a/mx6/libcamera/PP_ipulib.cpp b/mx6/libcamera/PP_ipulib.cpp
index 49d9af5..07e72a4 100755
--- a/mx6/libcamera/PP_ipulib.cpp
+++ b/mx6/libcamera/PP_ipulib.cpp
@@ -99,7 +99,7 @@ namespace android{
 
         mIPUOutputParam.user_def_paddr[0] = pp_output_addr->phy_offset;
 
-        mIPURet = mxc_ipu_lib_task_buf_update(&mIPUHandle,pp_input_addr->phy_offset,pp_output_addr->phy_offset,NULL,NULL,NULL);
+        mIPURet = mxc_ipu_lib_task_buf_update(&mIPUHandle,pp_input_addr->phy_offset,pp_output_addr->phy_offset, 0,NULL,NULL);
         if (mIPURet < 0) {
             CAMERA_LOG_ERR("Error! convertYUYVtoNV12, mxc_ipu_lib_task_buf_update ret %d!",mIPURet);
             mxc_ipu_lib_task_uninit(&mIPUHandle);
diff --git a/mx6/libcamera/V4l2CsiDevice.cpp b/mx6/libcamera/V4l2CsiDevice.cpp
index f3f4d0d..60fe01b 100755
--- a/mx6/libcamera/V4l2CsiDevice.cpp
+++ b/mx6/libcamera/V4l2CsiDevice.cpp
@@ -63,7 +63,7 @@ namespace android{
         struct v4l2_frmsizeenum vid_frmsize;
         CAPTURE_DEVICE_RET ret = CAPTURE_DEVICE_ERR_NONE;
 
-        LOGI("%s: mInitalDeviceName %s, cameraId %d, mCaptureDeviceName %s",
+        ALOGI("%s: mInitalDeviceName %s, cameraId %d, mCaptureDeviceName %s",
                 __func__, mInitalDeviceName, cameraId, mCaptureDeviceName);
 
         if(mCameraDevice > 0)
diff --git a/mx6/libgralloc_wrapper/Android.mk b/mx6/libgralloc_wrapper/Android.mk
index b038639..d899b30 100755
--- a/mx6/libgralloc_wrapper/Android.mk
+++ b/mx6/libgralloc_wrapper/Android.mk
@@ -52,11 +52,3 @@ include $(BUILD_SHARED_LIBRARY)
 endif
 
 
-####build xmltool lib######
-include $(CLEAR_VARS)
-LOCAL_SHARED_LIBRARIES := liblog libcutils libutils libexpat
-LOCAL_C_INCLUDES = external/expat/lib
-LOCAL_SRC_FILES := XmlTool.cpp
-LOCAL_MODULE := libfsl_xmltool
-LOCAL_MODULE_TAGS := optional
-include $(BUILD_SHARED_LIBRARY)
diff --git a/mx6/libgralloc_wrapper/XmlTool.cpp b/mx6/libgralloc_wrapper/XmlTool.cpp
index 924a8bf..ca182da 100644
--- a/mx6/libgralloc_wrapper/XmlTool.cpp
+++ b/mx6/libgralloc_wrapper/XmlTool.cpp
@@ -78,7 +78,7 @@ XmlTool::XmlTool(const char* file)
       mBuffer(NULL), mDepth(0),
       mFileName(file), mFileHandle(NULL), mContent()
 {
-    LOGI("XmlTool()");
+    ALOGI("XmlTool()");
     init();
     loadAndParseFile();
 }
@@ -86,19 +86,19 @@ XmlTool::XmlTool(const char* file)
 void XmlTool::init()
 {
     if(mFileName == NULL) {
-        LOGE("invalide file name");
+        ALOGE("invalide file name");
         return;
     }
 
     mFileHandle = fopen(mFileName, "r");
     if(mFileHandle == NULL) {
-        LOGE("open %s failed", mFileName);
+        ALOGE("open %s failed", mFileName);
         return;
     }
 
     mParser = XML_ParserCreate(NULL);
     if(mParser == NULL)  {
-        LOGE("create parser failed");
+        ALOGE("create parser failed");
         return;
     }
 
@@ -111,13 +111,13 @@ void XmlTool::loadAndParseFile()
 {
     Mutex::Autolock _l(mLock);
     if(mFileHandle == NULL || mParser == NULL){
-        LOGE("invalidate parameter in loadAndParseFile");
+        ALOGE("invalidate parameter in loadAndParseFile");
         return;
     }
 
     mBuffer = (char*)malloc(BUFFSIZE);
     if(mBuffer == NULL) {
-        LOGE("malloc buffer failed");
+        ALOGE("malloc buffer failed");
         return;
     }
 
@@ -130,13 +130,13 @@ void XmlTool::loadAndParseFile()
 
         len = fread(mBuffer, 1, BUFFSIZE, mFileHandle);
         if(ferror(mFileHandle)) {
-            LOGE("read file error");
+            ALOGE("read file error");
             return;
         }
 
         done = feof(mFileHandle);
         if(!XML_Parse(mParser, mBuffer, len, done)) {
-            LOGE("Parse error at line %d:/n%s", (int)XML_GetCurrentLineNumber(mParser),
+            ALOGE("Parse error at line %d:/n%s", (int)XML_GetCurrentLineNumber(mParser),
                          XML_ErrorString(XML_GetErrorCode(mParser)));
             return;
         }
diff --git a/mx6/libgralloc_wrapper/display_mode.cpp b/mx6/libgralloc_wrapper/display_mode.cpp
index b667611..9f673b8 100644
--- a/mx6/libgralloc_wrapper/display_mode.cpp
+++ b/mx6/libgralloc_wrapper/display_mode.cpp
@@ -178,7 +178,7 @@ static int read_graphics_fb_mode(int fb)
         memset(&g_config_mode[0], 0, sizeof(g_config_mode));
         int fd = open("/system/etc/display_mode_fb0.conf", O_RDONLY, 0);
         if(fd < 0) {
-            LOGE("Warning: /system/etc/display_mode_fb0.conf not defined");
+            ALOGE("Warning: /system/etc/display_mode_fb0.conf not defined");
         }
         else {
             size = read(fd, conf_modes, sizeof(conf_modes));
@@ -203,7 +203,7 @@ static int read_graphics_fb_mode(int fb)
     sprintf(temp_name, "/sys/class/graphics/fb%d/modes", fb);
     fp_modes = open(temp_name,O_RDONLY, 0);
     if(fp_modes < 0) {
-        LOGI("Error %d! Cannot open %s", fp_modes, temp_name);
+        ALOGI("Error %d! Cannot open %s", fp_modes, temp_name);
         goto set_graphics_fb_mode_error;
     }
 
@@ -211,7 +211,7 @@ static int read_graphics_fb_mode(int fb)
     size = read(fp_modes, fb_modes, sizeof(fb_modes));
     if(size <= 0)
     {
-        LOGI("Error! Cannot read %s", temp_name);
+        ALOGI("Error! Cannot read %s", temp_name);
         goto set_graphics_fb_mode_error;
     }
 
@@ -231,12 +231,12 @@ set_graphics_fb_mode_error:
     return -1;
 }
 
-int isModeValid(int fb, const char* pMode, int len)
+int isModeValid(int fb, char* pMode, int len)
 {
     int err = 0;
     int i;
 
-    //LOGW("isModeValid:pMode=%s, len=%d", pMode, len);
+    //ALOGW("isModeValid:pMode=%s, len=%d", pMode, len);
     if(read_mode_finished == 0) {
         err = read_graphics_fb_mode(fb);
         if(err)
@@ -244,7 +244,7 @@ int isModeValid(int fb, const char* pMode, int len)
     }
 
     for(i=0; i<disp_class_list[fb].disp_mode_length; i++) {
-        //LOGW("isModeValid:disp_mode_list[%d].mode=%s", i, disp_class_list[fb].disp_mode_list[i].mode);
+        //ALOGW("isModeValid:disp_mode_list[%d].mode=%s", i, disp_class_list[fb].disp_mode_list[i].mode);
         if(!strncmp(disp_class_list[fb].disp_mode_list[i].mode, pMode, len)) {
             return 1;
         }
diff --git a/mx6/libgralloc_wrapper/display_mode.h b/mx6/libgralloc_wrapper/display_mode.h
index 9558b65..88869c9 100644
--- a/mx6/libgralloc_wrapper/display_mode.h
+++ b/mx6/libgralloc_wrapper/display_mode.h
@@ -58,4 +58,5 @@ static int   disp_mode_compare( const void *arg1, const void *arg2);
 static int     get_available_mode(int fbid, const char *mode_list);
 static int     read_graphics_fb_mode(int fbid);
 
+extern int isModeValid(int fb, char* pMode, int len);
 #endif
diff --git a/mx6/libgralloc_wrapper/framebuffer.cpp b/mx6/libgralloc_wrapper/framebuffer.cpp
index 4062674..0fc4859 100755
--- a/mx6/libgralloc_wrapper/framebuffer.cpp
+++ b/mx6/libgralloc_wrapper/framebuffer.cpp
@@ -52,7 +52,6 @@
 #include <hardware/DisplayCommand.h>
 #include "gralloc_priv.h"
 #include <utils/String8.h>
-#include <hardware/XmlTool.h>
 /*****************************************************************************/
 
 // numbers of buffers for page flipping
@@ -75,8 +74,6 @@ struct fb_context_t {
 };
 
 static int nr_framebuffers;
-static XmlTool* g_xmltool = NULL;
-static int primary_display_type = 0;
 
 sem_t * fslwatermark_sem_open()
 {
@@ -181,7 +178,7 @@ static int fb_post(struct framebuffer_device_t* dev, buffer_handle_t buffer)
         m->info.yoffset = offset / m->finfo.line_length;
 
         if (ioctl(m->framebuffer->fd, FBIOPAN_DISPLAY, &m->info) == -1) {
-            LOGE("<%s, %d> ioctl FBIOPAN_DISPLAY failed", __FUNCTION__, __LINE__);
+            ALOGE("<%s, %d> ioctl FBIOPAN_DISPLAY failed", __FUNCTION__, __LINE__);
             m->base.unlock(&m->base, buffer); 
             m->currentBuffer = buffer;
             return 0;
@@ -223,10 +220,9 @@ static int fb_compositionComplete(struct framebuffer_device_t* dev)
 }
 
 /*****************************************************************************/
-extern int isModeValid(int fb, const char* pMode, int len);
-extern char* getHighestMode(int fb);
+extern int isModeValid(int fb, char* pMode, int len);
 
-static int set_graphics_fb_mode(int fb, struct configParam* param, int *pColordepth)
+static int set_graphics_fb_mode(int fb, struct configParam* param)
 {
     char temp_name[256];
     char fb_mode[256];
@@ -236,79 +232,94 @@ static int set_graphics_fb_mode(int fb, struct configParam* param, int *pColorde
     int size=0;
     int n = 0;
 
-    //the primary display
-    if(fb == 0){
-        memset(temp_name, 0, sizeof(temp_name));
-        fd_mode = open("/sys/class/graphics/fb0/fsl_disp_dev_property", O_RDONLY, 0);
-        if(fd_mode > 0 && (size = read(fd_mode, temp_name, sizeof(temp_name))) > 0) {
-            LOGI("primary display name %s", temp_name);
-            if(strstr(temp_name, "hdmi")) primary_display_type = 1;
-            else primary_display_type = 0;
-            close(fd_mode);
-        } else {
-            LOGI("open or read /sys/class/graphics/fb0/fsl_disp_dev_property failed");
-        }
-
-        if(g_xmltool == NULL) {
-            g_xmltool = new XmlTool(FSL_SETTINGS_PREFERENCE);
-            if(g_xmltool == NULL) {
-                LOGE("Error: g_xmltool not created");
-                return -1;
-            }
-        }
-
-        *pColordepth = g_xmltool->getInt(FSL_PREFERENCE_COLORDEPTH, 0);
-        LOGI("colordepth is %d", *pColordepth);
-        String8 dispMode = g_xmltool->getString(FSL_PREFERENCE_MODE, String8(FSL_PREFERENCE_MODE_DEFAULT));
-        disp_mode = dispMode.string();
-        if(!strcmp(disp_mode, FSL_PREFERENCE_MODE_DEFAULT)) {
-            disp_mode = getHighestMode(fb);
-            memset(fb_mode, 0, sizeof(fb_mode));
-            strcpy(fb_mode, disp_mode);
-        }
-        else if(!isModeValid(fb, disp_mode, strlen(disp_mode))) {
-            LOGI("Warning: display %d does not support mode: %s", fb, disp_mode);
-            delete g_xmltool;
-            g_xmltool = NULL;
-            return -1;
-        }
-        else {
+    if(param == NULL) {
+        /*
+         * file /data/misc/display.conf format:
+         * mode=S1920:x1080p-60
+         * colordepth=32
+         * usage: change fb display mode.
+        */
+        int fb_misc = open("/data/misc/display.conf", O_RDWR, 0);
+        if(fb_misc > 0) {
             memset(fb_mode, 0, sizeof(fb_mode));
-            strcpy(fb_mode, disp_mode);
-            fb_mode[strlen(disp_mode)] = '\n';
-        }
-        LOGI("disp_mode is %s", disp_mode);
-        memset(temp_name, 0, sizeof(temp_name));
-        sprintf(temp_name, "/sys/class/graphics/fb%d/mode", fb);
-        fd_mode = open(temp_name,O_RDWR, 0);
-        if(fd_mode < 0) {
-            LOGI("Error %d! Cannot open %s", fd_mode, temp_name);
-            return -1;
+            size = read(fb_misc, fb_mode, sizeof(fb_mode));
+            if(size > 0) {
+                disp_mode = fb_mode;
+                while(*disp_mode != '\0') {
+                    if(*disp_mode == '\n') {
+                        disp_mode++;
+                        n = disp_mode - start_index;
+                        *(char*)disp_mode = '\0';
+
+                        if(!isModeValid(fb, start_index + 1, n-1)) {
+                            ALOGI("Warning: display %d does not support len:%d, %s", fb, n-1, start_index + 1);
+                            memset(fb_mode, 0, sizeof(fb_mode));
+                            memset(temp_name, 0, sizeof(temp_name));
+                            sprintf(temp_name, "/sys/class/graphics/fb%d/mode", fb);
+                            fd_mode = open(temp_name,O_RDWR, 0);
+                            if(fd_mode < 0) {
+                                ALOGI("Error %d! Cannot open %s", fd_mode, temp_name);
+                                return -1;
+                            }
+                            strncpy(fb_mode, "mode=", 5);
+                            size = 5;
+                            size += read(fd_mode, fb_mode+size, sizeof(fb_mode)-size);
+                            ALOGW("fb_mode is %s", fb_mode);
+                            close(fd_mode);
+
+                            memset(temp_name, 0, sizeof(temp_name));
+                            sprintf(temp_name, "/sys/class/graphics/fb%d/bits_per_pixel", fb);
+                            fd_mode = open(temp_name, O_RDONLY, 0);
+                            if(fd_mode < 0) {
+                                ALOGI("Error %d! Cannot open %s", fd_mode, temp_name);
+                                return -1;
+                            }
+                            strncpy(fb_mode+size, "colordepth=", 11);
+                            size += 11;
+                            size += read(fd_mode, fb_mode+size, sizeof(fb_mode)-size);
+                            ALOGW("fb_mode is size=%d, %s", size, fb_mode);
+                            close(fd_mode);
+
+                            close(fb_misc);
+                            fb_misc = open("/data/misc/display.conf", O_RDWR | O_TRUNC, 0);
+                            if(fb_misc < 0)
+                                return -1;
+                            write(fb_misc, fb_mode, size);
+                            close(fb_misc);
+                            return -1;
+                        }//end !isModeValid
+
+                        memset(temp_name, 0, sizeof(temp_name));
+			sprintf(temp_name, "/sys/class/graphics/fb%d/mode", fb);
+			fd_mode = open(temp_name,O_RDWR, 0);
+			if(fd_mode < 0) {
+			    ALOGI("Error %d! Cannot open %s", fd_mode, temp_name);
+			    return -1;
+			}
+                        write(fd_mode, start_index + 1, n);
+                        close(fd_mode);
+                        break;
+                    }
+                    if(*disp_mode == '=') start_index = (char*)disp_mode;
+                    disp_mode++;
+                }
+            }
         }
-
-        write(fd_mode, fb_mode, strlen(fb_mode));
-        close(fd_mode);
-        delete g_xmltool;
-        g_xmltool = NULL;
+        close(fb_misc);
         return 0;
     }
 
-    if(param == NULL) {
-        LOGE("param should not NULL for added display");
-        return -1;
-    }
-    //other display goes here.
     String8 str8_mode(param->mode);
     disp_mode = str8_mode.string();
     if(disp_mode == NULL) {
-        LOGE("<%s,%d> invalide parameter", __FUNCTION__, __LINE__);
+        ALOGE("<%s,%d> invalide parameter", __FUNCTION__, __LINE__);
         return -1;
     }
     memset(temp_name, 0, sizeof(temp_name));
     sprintf(temp_name, "/sys/class/graphics/fb%d/mode", fb);
     fd_mode = open(temp_name,O_RDWR, 0);
     if(fd_mode < 0) {
-        LOGI("Error %d! Cannot open %s", fd_mode, temp_name);
+        ALOGI("Error %d! Cannot open %s", fd_mode, temp_name);
         return -1;
     }
 
@@ -320,7 +331,7 @@ static int set_graphics_fb_mode(int fb, struct configParam* param, int *pColorde
     size = write(fd_mode, fb_mode, n + 2);
     if(size <= 0)
     {
-        LOGI("Error %d %s! Cannot write %s=%s", errno, strerror(errno), temp_name, fb_mode);
+        ALOGI("Error %d %s! Cannot write %s", errno, strerror(errno), temp_name);
     }
 
     close(fd_mode);
@@ -344,12 +355,11 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
     int i=0;
     char name[64];
     int dpy = 0;
-    int colordepth = 0;
 
     if(param != NULL) {
         dpy = param->displayId;
     }
-    set_graphics_fb_mode(dpy, param, &colordepth);
+    set_graphics_fb_mode(dpy, param);
 
     while ((fd==-1) && device_template[i]) {
         snprintf(name, 64, device_template[i], dpy);
@@ -357,26 +367,26 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
         i++;
     }
     if (fd < 0) {
-        LOGE("<%s,%d> open %s failed", __FUNCTION__, __LINE__, name);
+        ALOGE("<%s,%d> open %s failed", __FUNCTION__, __LINE__, name);
         return -errno;
     }
 
     if(param != NULL) {
         int blank = FB_BLANK_UNBLANK;
         if(ioctl(fd, FBIOBLANK, blank) < 0) {
-            LOGE("<%s, %d> ioctl FBIOBLANK failed", __FUNCTION__, __LINE__);
+            ALOGE("<%s, %d> ioctl FBIOBLANK failed", __FUNCTION__, __LINE__);
         }
     }
 
     struct fb_fix_screeninfo finfo;
     if (ioctl(fd, FBIOGET_FSCREENINFO, &finfo) == -1) {
-        LOGE("<%s,%d> FBIOGET_FSCREENINFO failed", __FUNCTION__, __LINE__);
+        ALOGE("<%s,%d> FBIOGET_FSCREENINFO failed", __FUNCTION__, __LINE__);
         return -errno;
     }
 
     struct fb_var_screeninfo info;
     if (ioctl(fd, FBIOGET_VSCREENINFO, &info) == -1) {
-        LOGE("<%s,%d> FBIOGET_VSCREENINFO failed", __FUNCTION__, __LINE__);
+        ALOGE("<%s,%d> FBIOGET_VSCREENINFO failed", __FUNCTION__, __LINE__);
         return -errno;
     }
 
@@ -390,11 +400,9 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
         }
 
         if(info.bits_per_pixel == 0) { //|| info.xres == 0 || info.yres == 0 
-            LOGE("<%s,%d> the bpp or xres yres is 0", __FUNCTION__, __LINE__);
+            ALOGE("<%s,%d> the bpp or xres yres is 0", __FUNCTION__, __LINE__);
             return -1;
         }
-    } else if(colordepth == 16 || colordepth == 32) {
-        info.bits_per_pixel = colordepth;
     }
 
     info.reserved[0] = 0;
@@ -405,7 +413,7 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
     info.activate = FB_ACTIVATE_NOW;
 
     if(info.bits_per_pixel == 32){
-        LOGW("32bpp setting of Framebuffer catched!");
+        ALOGW("32bpp setting of Framebuffer catched!");
         /*
          * Explicitly request BGRA 8/8/8
          */
@@ -444,19 +452,19 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
     if (ioctl(fd, FBIOPUT_VSCREENINFO, &info) == -1) {
         info.yres_virtual = ALIGN_PIXEL_128(info.yres);
         flags &= ~PAGE_FLIP;
-        LOGW("FBIOPUT_VSCREENINFO failed, page flipping not supported");
+        ALOGW("FBIOPUT_VSCREENINFO failed, page flipping not supported");
     }
 
     if (info.yres_virtual < ALIGN_PIXEL_128(info.yres) * 2) {
         // we need at least 2 for page-flipping
         info.yres_virtual = ALIGN_PIXEL_128(info.yres);
         flags &= ~PAGE_FLIP;
-        LOGW("page flipping not supported (yres_virtual=%d, requested=%d)",
+        ALOGW("page flipping not supported (yres_virtual=%d, requested=%d)",
                 info.yres_virtual, ALIGN_PIXEL_128(info.yres)*2);
     }
 
     if (ioctl(fd, FBIOGET_VSCREENINFO, &info) == -1) {
-        LOGE("<%s,%d> FBIOGET_VSCREENINFO failed", __FUNCTION__, __LINE__);
+        ALOGE("<%s,%d> FBIOGET_VSCREENINFO failed", __FUNCTION__, __LINE__);
         return -errno;
     }
 
@@ -483,7 +491,7 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
     float ydpi = (info.yres * 25.4f) / info.height;
     float fps  = refreshRate / 1000.0f;
 
-    LOGW(   "using (fd=%d)\n"
+    ALOGW(   "using (fd=%d)\n"
             "id           = %s\n"
             "xres         = %d px\n"
             "yres         = %d px\n"
@@ -505,7 +513,7 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
             info.blue.offset, info.blue.length
     );
 
-    LOGW(   "width        = %d mm (%f dpi)\n"
+    ALOGW(   "width        = %d mm (%f dpi)\n"
             "height       = %d mm (%f dpi)\n"
             "refresh rate = %.2f Hz\n",
             info.width,  xdpi,
@@ -515,12 +523,12 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
 
 
     if (ioctl(fd, FBIOGET_FSCREENINFO, &finfo) == -1) {
-        LOGE("<%s,%d> FBIOGET_FSCREENINFO failed", __FUNCTION__, __LINE__);
+        ALOGE("<%s,%d> FBIOGET_FSCREENINFO failed", __FUNCTION__, __LINE__);
         return -errno;
     }
 
     if (finfo.smem_len <= 0) {
-        LOGE("<%s,%d> finfo.smem_len <= 0", __FUNCTION__, __LINE__);
+        ALOGE("<%s,%d> finfo.smem_len <= 0", __FUNCTION__, __LINE__);
         return -errno;
     }
 
@@ -546,7 +554,7 @@ static int mapFrameBufferWithParamLocked(struct private_module_t* module, struct
 
     void* vaddr = mmap(0, fbSize, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
     if (vaddr == MAP_FAILED) {
-        LOGE("Error mapping the framebuffer (%s)", strerror(errno));
+        ALOGE("Error mapping the framebuffer (%s)", strerror(errno));
         return -errno;
     }
     module->framebuffer->base = intptr_t(vaddr);
@@ -582,13 +590,13 @@ static int unMapFrameBuffer(fb_context_t* ctx, struct private_module_t* module)
 
     int blank = 1;
     if(ioctl(fd, FBIOBLANK, blank) < 0) {
-        LOGE("<%s, %d> ioctl FBIOBLANK failed", __FUNCTION__, __LINE__);
+        ALOGE("<%s, %d> ioctl FBIOBLANK failed", __FUNCTION__, __LINE__);
     }
 
     if(ctx->mainDisp_fd > 0) {
         blank = FB_BLANK_UNBLANK;
         if(ioctl(ctx->mainDisp_fd, FBIOBLANK, blank) < 0) {
-            LOGE("<%s, %d> ioctl FBIOBLANK failed", __FUNCTION__, __LINE__);
+            ALOGE("<%s, %d> ioctl FBIOBLANK failed", __FUNCTION__, __LINE__);
         }
     }
     close(fd);
@@ -653,13 +661,13 @@ static int fb_perform(struct gralloc_module_t const* module,
 		    memset(addr, 0, fbSize);
                     } break;
                 default:
-                    LOGE("<%s, %d> invalide operate code %d!", __FUNCTION__, __LINE__, (int)operation);
+                    ALOGE("<%s, %d> invalide operate code %d!", __FUNCTION__, __LINE__, (int)operation);
                     err = -1;
                     break;
             } 
             break;
         default:
-            LOGE("<%s, %d> invalide operate code %d!", __FUNCTION__, __LINE__, (int)operation);
+            ALOGE("<%s, %d> invalide operate code %d!", __FUNCTION__, __LINE__, (int)operation);
             err = -1;
             break;
     }
@@ -751,7 +759,6 @@ int fb_device_open(hw_module_t const* module, const char* name,
         *device = &dev->device.common;
         fbdev = (framebuffer_device_t*) *device;
         fbdev->reserved[0] = nr_framebuffers;
-        fbdev->reserved[1] = primary_display_type;
     } 
 
     return status;
diff --git a/mx6/libgralloc_wrapper/gralloc.cpp b/mx6/libgralloc_wrapper/gralloc.cpp
index 56c4f44..2d5c14a 100755
--- a/mx6/libgralloc_wrapper/gralloc.cpp
+++ b/mx6/libgralloc_wrapper/gralloc.cpp
@@ -104,13 +104,13 @@ static int gralloc_alloc(alloc_device_t* dev,
         buffer_handle_t* pHandle, int* pStride)
 {
     if (!pHandle || !pStride) {
-        LOGE("<%s,%d> invalide parameters", __FUNCTION__, __LINE__);
+        ALOGE("<%s,%d> invalide parameters", __FUNCTION__, __LINE__);
         return -EINVAL;
     }
 
     private_module_t* m = reinterpret_cast<private_module_t*>(dev->common.module);
     if(!m || !m->gpu_device) {
-        LOGE("<%s,%d> m or m->gpu_device is NULL", __FUNCTION__, __LINE__);
+        ALOGE("<%s,%d> m or m->gpu_device is NULL", __FUNCTION__, __LINE__);
         return -EINVAL;
     }
 
@@ -179,7 +179,7 @@ int gralloc_device_open(const hw_module_t* module, const char* name,
            if (hw_get_module(GRALLOC_VIV_HARDWARE_MODULE_ID, &gpu_module) == 0) {
               status = gralloc_open(gpu_module, &m->gpu_device);
               if(status || !m->gpu_device){
-                 LOGE("gralloc_device_open: gpu gralloc device open failed!");
+                 ALOGE("gralloc_device_open: gpu gralloc device open failed!");
               }
            }
         }
diff --git a/mx6/libgralloc_wrapper/gralloc_priv.h b/mx6/libgralloc_wrapper/gralloc_priv.h
index 304bca7..c769606 100755
--- a/mx6/libgralloc_wrapper/gralloc_priv.h
+++ b/mx6/libgralloc_wrapper/gralloc_priv.h
@@ -131,7 +131,7 @@ struct private_handle_t {
                 h->numInts != sNumInts || h->numFds != sNumFds ||
                 hnd->magic != sMagic)
         {
-            LOGE("invalid gralloc handle (at %p)", h);
+            ALOGE("invalid gralloc handle (at %p)", h);
             return -EINVAL;
         }
         return 0;
-- 
1.8.0

