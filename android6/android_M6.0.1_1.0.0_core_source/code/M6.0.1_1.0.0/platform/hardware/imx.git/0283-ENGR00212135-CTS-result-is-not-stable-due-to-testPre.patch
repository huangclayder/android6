From b4686cf7b59a2f0e8bd2efd9cd4a430eae55db35 Mon Sep 17 00:00:00 2001
From: "guoyin.chen" <guoyin.chen@freescale.com>
Date: Fri, 1 Jun 2012 15:35:33 +0800
Subject: [PATCH 283/635] ENGR00212135 CTS result is not stable due to
 testPreviewFpsRange FAILED

Rootcase is stopPreview be called at preview thread which cannot exit

Signed-off-by: guoyin.chen <guoyin.chen@freescale.com>
---
 mx6/libcamera/CameraHal.cpp | 17 +++++++++++++----
 mx6/libcamera/CameraHal.h   | 24 ++++++++++++++++++------
 2 files changed, 31 insertions(+), 10 deletions(-)

diff --git a/mx6/libcamera/CameraHal.cpp b/mx6/libcamera/CameraHal.cpp
index 6571b4e..36c1af6 100755
--- a/mx6/libcamera/CameraHal.cpp
+++ b/mx6/libcamera/CameraHal.cpp
@@ -1683,7 +1683,10 @@ Pic_out:
             CAMERA_HAL_LOG_INFO("%s :capture run", __FUNCTION__);
             mCaptureThreadQueue.postStopMessage();
             mCaptureRunning = false;
-            sem_wait(&mCaptureStoppedCondition);
+            if(gettid()!= mCaptureFrameThread->mTID)
+                sem_wait(&mCaptureStoppedCondition);
+            else
+                CAMERA_HAL_LOG_INFO("Stop CaptureFrameThread in itself");
         }else {
             CAMERA_HAL_LOG_INFO("%s :capture not run", __FUNCTION__);
         }
@@ -1694,7 +1697,10 @@ Pic_out:
         if(mPPDeviceNeed && mPreviewRunning) {
             CAMERA_HAL_LOG_INFO("%s :postprocess run", __FUNCTION__);
             mPostProcessThreadQueue.postStopMessage();
-            sem_wait(&mPostProcessStoppedCondition);
+            if(gettid()!= mPostProcessThread->mTID)
+                sem_wait(&mPostProcessStoppedCondition);
+            else
+                CAMERA_HAL_LOG_INFO("Stop PostProcessThread in itself");
         }
         mPostProcessLock.unlock(); 
 
@@ -1703,7 +1709,10 @@ Pic_out:
             CAMERA_HAL_LOG_INFO("%s :preview run", __FUNCTION__);
             mPreviewThreadQueue.postStopMessage();
             mPreviewRunning = false;
-            sem_wait(&mPreviewStoppedCondition);
+            if(gettid()!= mPreviewShowFrameThread->mTID)
+                sem_wait(&mPreviewStoppedCondition);
+            else
+                CAMERA_HAL_LOG_INFO("Stop PreviewShowThread in itself");
         }else {
             CAMERA_HAL_LOG_INFO("%s :preview not run", __FUNCTION__);
         }
@@ -2167,7 +2176,7 @@ Pic_out:
             }
 #endif                    
     }
-    
+   
     int CameraHal ::previewshowFrameThread()
     {
         //CAMERA_HAL_LOG_FUNC;
diff --git a/mx6/libcamera/CameraHal.h b/mx6/libcamera/CameraHal.h
index 7dd0a60..5b64de6 100755
--- a/mx6/libcamera/CameraHal.h
+++ b/mx6/libcamera/CameraHal.h
@@ -143,28 +143,32 @@ namespace android {
             CameraHal* mHardware;
         public:
             CaptureFrameThread(CameraHal* hw)
-                : Thread(false), mHardware(hw) { }
+                : Thread(false), mHardware(hw), mTID(0)  { }
             virtual void onFirstRef() {
                 run("CaptureFrameThread", PRIORITY_URGENT_DISPLAY);
             }
             virtual bool threadLoop() {
+                mTID = gettid();
                 mHardware->captureframeThreadWrapper();
                 return false;
             }
+            int mTID;
         };
 
         class PostProcessThread : public Thread {
             CameraHal* mHardware;
         public:
             PostProcessThread(CameraHal* hw)
-                : Thread(false), mHardware(hw) { }
+                : Thread(false), mHardware(hw), mTID(0)  { }
             virtual void onFirstRef() {
                 run("PostProcessThread", PRIORITY_URGENT_DISPLAY);
             }
             virtual bool threadLoop() {
+                mTID = gettid();
                 mHardware->postprocessThreadWrapper();
                 return false;
             }
+            int mTID;
         };
 
 
@@ -172,44 +176,50 @@ namespace android {
             CameraHal* mHardware;
         public:
             PreviewShowFrameThread(CameraHal* hw)
-                : Thread(false), mHardware(hw) { }
+                : Thread(false), mHardware(hw), mTID(0)  { }
             virtual void onFirstRef() {
                 run("CameraPreviewShowFrameThread", PRIORITY_URGENT_DISPLAY);
             }
             virtual bool threadLoop() {
+                mTID = gettid();
                 mHardware->previewshowFrameThreadWrapper();
                 return false;
             }
+            int mTID;
         };
 
         class EncodeFrameThread : public Thread {
             CameraHal* mHardware;
         public:
             EncodeFrameThread(CameraHal* hw)
-                : Thread(false), mHardware(hw) { }
+                : Thread(false), mHardware(hw), mTID(0)  { }
             virtual void onFirstRef() {
                 run("EncodeFrameThread", PRIORITY_URGENT_DISPLAY);
             }
             virtual bool threadLoop() {
+                mTID = gettid();
                 mHardware->encodeframeThreadWrapper();
                 return true;
             }
+            int mTID;
         };
 
         class AutoFocusThread : public Thread {
             CameraHal* mHardware;
         public:
             AutoFocusThread(CameraHal* hw)
-                : Thread(false), mHardware(hw) { }
+                : Thread(false), mHardware(hw), mTID(0)  { }
             virtual void onFirstRef() {
                 run("AutoFocusThread", PRIORITY_URGENT_DISPLAY);
             }
             virtual bool threadLoop() {
+                mTID = gettid();
                 if (mHardware->autoFocusThread()>=0)
                     return true;
                 else
                     return false;
             }
+            int mTID;
         };
 
 
@@ -217,16 +227,18 @@ namespace android {
             CameraHal* mHardware;
         public:
             TakePicThread(CameraHal* hw)
-                : Thread(false), mHardware(hw) { }
+                : Thread(false), mHardware(hw), mTID(0) { }
 #if 0
             virtual void onFirstRef() {
                 run("TakePicThread", PRIORITY_URGENT_DISPLAY);
             }
 #endif  
             virtual bool threadLoop() {
+                mTID = gettid();
                 mHardware->takepicThread();
                 return false;
             }
+            int mTID;
         };
 
         void preInit();
-- 
1.8.0

