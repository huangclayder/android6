From 4b7ea8b2137a8d82608acad92c58e931ea3f51d3 Mon Sep 17 00:00:00 2001
From: Zhang Sanshan <b51434@freescale.com>
Date: Mon, 16 Nov 2015 17:06:46 +0800
Subject: [PATCH] MA-7256 Support NTFS format in Android6.0

The adopt storage is managed by PublicVolume.
1 Add system file which support NTFS, And change related API to fit the android6.0 vold changing.
2 Add NTFS support when readPartitions.
3 Change the storage device node name from /dev/block/vold/public:179,33 to /dev/block/vold/public:179:33
  The do_mount code parse option parameter /dev/block/vold/public:179,33 to /dev/block/vold/public:179.
  This patch use ':' instead of ','.

Signed-off-by: Zhang Sanshan <b51434@freescale.com>
---
 Android.mk       |   1 +
 Disk.cpp         |   1 +
 PublicVolume.cpp |  29 +++++++---
 fs/Ntfs.cpp      | 174 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 fs/Ntfs.h        |  33 +++++++++++
 5 files changed, 230 insertions(+), 8 deletions(-)

diff --git a/Android.mk b/Android.mk
index 1d36312..f741a59 100644
--- a/Android.mk
+++ b/Android.mk
@@ -11,6 +11,7 @@ common_src_files := \
 	fs/Ext4.cpp \
 	fs/F2fs.cpp \
 	fs/Vfat.cpp \
+	fs/Ntfs.cpp \
 	Loop.cpp \
 	Devmapper.cpp \
 	ResponseCode.cpp \
diff --git a/Disk.cpp b/Disk.cpp
index d5f3e5d..1477688 100644
--- a/Disk.cpp
+++ b/Disk.cpp
@@ -295,6 +295,7 @@ status_t Disk::readPartitions() {
 
                 switch (strtol(type, nullptr, 16)) {
                 case 0x06: // FAT16
+                case 0x07: // NTFS
                 case 0x0b: // W95 FAT32 (LBA)
                 case 0x0c: // W95 FAT32 (LBA)
                 case 0x0e: // W95 FAT16 (LBA)
diff --git a/PublicVolume.cpp b/PublicVolume.cpp
index eb550c3..9c5c8fa 100644
--- a/PublicVolume.cpp
+++ b/PublicVolume.cpp
@@ -15,6 +15,7 @@
  */
 
 #include "fs/Vfat.h"
+#include "fs/Ntfs.h"
 #include "PublicVolume.h"
 #include "Utils.h"
 #include "VolumeManager.h"
@@ -31,6 +32,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include <cutils/log.h>
 
 using android::base::StringPrintf;
 
@@ -43,7 +45,7 @@ static const char* kAsecPath = "/mnt/secure/asec";
 
 PublicVolume::PublicVolume(dev_t device) :
         VolumeBase(Type::kPublic), mDevice(device), mFusePid(0) {
-    setId(StringPrintf("public:%u,%u", major(device), minor(device)));
+    setId(StringPrintf("public:%u:%u", major(device), minor(device)));
     mDevPath = StringPrintf("/dev/block/vold/%s", getId().c_str());
 }
 
@@ -92,16 +94,22 @@ status_t PublicVolume::doDestroy() {
 
 status_t PublicVolume::doMount() {
     // TODO: expand to support mounting other filesystems
+    int ntfs = 0;
     readMetadata();
-
-    if (mFsType != "vfat") {
-        LOG(ERROR) << getId() << " unsupported filesystem " << mFsType;
-        return -EIO;
+    if (mFsType != "vfat" && mFsType != "ntfs") {
+		LOG(ERROR) << getId() << " unsupported filesystem " << mFsType;
+        	return -EIO;
     }
 
     if (vfat::Check(mDevPath)) {
-        LOG(ERROR) << getId() << " failed filesystem check";
-        return -EIO;
+	/* try the NTFS filesystem */
+        if (!Ntfs::check(mDevPath)) {
+                ntfs = 1;
+        } else {
+                LOG(ERROR) << getId() << " failed filesystem check ";
+                return -EIO;
+        }
+
     }
 
     // Use UUID as stable name, if available
@@ -131,7 +139,12 @@ status_t PublicVolume::doMount() {
         return -errno;
     }
 
-    if (vfat::Mount(mDevPath, mRawPath, false, false, false,
+    if ( ntfs ) {
+    	if (Ntfs::doMount(mDevPath, mRawPath, false, false, false,
+		 AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
+	PLOG(ERROR) << getId() << "failed to mount via NTFS " << mDevPath;
+	}
+    } else if (vfat::Mount(mDevPath, mRawPath, false, false, false,
             AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
         PLOG(ERROR) << getId() << " failed to mount " << mDevPath;
         return -EIO;
diff --git a/fs/Ntfs.cpp b/fs/Ntfs.cpp
new file mode 100644
index 0000000..5a5f62c
--- /dev/null
+++ b/fs/Ntfs.cpp
@@ -0,0 +1,174 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * Copyright (C) 2012-2015 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+#include <sys/wait.h>
+#include <iostream>
+
+#include <linux/kdev_t.h>
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include <logwrap/logwrap.h>
+#include "Ntfs.h"
+#include "VoldUtil.h"
+
+static char NTFS_FIX_PATH[] = "/system/bin/ntfsfix";
+static char NTFS_MOUNT_PATH[] = "/system/bin/ntfs-3g";
+
+int Ntfs::check(const std::string& source) {
+
+    const char *fsPath = source.c_str();
+    if (access(NTFS_FIX_PATH, X_OK)) {
+        SLOGW("Skipping fs checks\n");
+        return 0;
+    }
+
+    int rc = 0;
+    int status;
+    const char *args[4];
+    /* we first use -n to do ntfs detection */
+    args[0] = NTFS_FIX_PATH;
+    args[1] = "-n";
+    args[2] = fsPath;
+    args[3] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+           true);
+    if (rc) {
+        errno = ENODATA;
+        return -1;
+    }
+    if (!WIFEXITED(status)) {
+        errno = ENODATA;
+        return -1;
+    }
+
+    SLOGI("Ntfs filesystem existed");
+
+    /* do the real fix */
+    /* redo the ntfsfix without -n to fix problems */
+    args[1] = fsPath;
+    args[2] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+           true);
+    if (rc) {
+        errno = EIO;
+        SLOGE("Filesystem check failed (unknown exit code %d)", rc);
+        return -1;
+    }
+    if (!WIFEXITED(status)) {
+        errno = EIO;
+        return -1;
+    }
+
+    SLOGI("Ntfs filesystem check completed OK");
+    return 0;
+}
+
+int Ntfs::doMount(const std::string& source, const std::string& target,
+                 bool ro, bool remount, bool executable,
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
+    int rc;
+    int status;
+    char mountData[255];
+    const char *args[6];
+    
+    const char *fsPath = source.c_str();
+    const char *mountPoint = target.c_str();
+    /*
+     * Note: This is a temporary hack. If the sampling profiler is enabled,
+     * we make the SD card world-writable so any process can write snapshots.
+     *
+     * TODO: Remove this code once we have a drop box in system_server.
+     */
+    char value[PROPERTY_VALUE_MAX];
+    property_get("persist.sampling_profiler", value, "");
+    if (value[0] == '1') {
+        SLOGW("The SD card is world-writable because the"
+            " 'persist.sampling_profiler' system property is set to '1'.");
+        permMask = 0;
+    }
+
+    sprintf(mountData,
+            "utf8,uid=%d,gid=%d,fmask=%o,dmask=%o,"
+	    "shortname=mixed,nodev,nosuid,dirsync",
+            ownerUid, ownerGid, permMask, permMask);
+
+    if (!executable)
+        strcat(mountData, ",noexec");
+    if (ro)
+        strcat(mountData, ",ro");
+    if (remount)
+        strcat(mountData, ",remount");
+
+    SLOGD("Mounting ntfs with options:%s\n", mountData);
+
+    args[0] = NTFS_MOUNT_PATH;
+    args[1] = "-o";
+    args[2] = mountData;
+    args[3] = fsPath;
+    args[4] = mountPoint;
+    args[5] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+           true);
+    if (rc && errno == EROFS) {
+        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
+        strcat(mountData, ",ro");
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+           true);
+    }
+    if (!WIFEXITED(status)) {
+        return rc;
+    }
+
+    if (rc == 0 && createLost) {
+        char *lost_path;
+        asprintf(&lost_path, "%s/LOST.DIR", mountPoint);
+        if (access(lost_path, F_OK)) {
+            /*
+             * Create a LOST.DIR in the root so we have somewhere to put
+             * lost cluster chains (fsck_msdos doesn't currently do this)
+             */
+            if (mkdir(lost_path, 0755)) {
+                SLOGE("Unable to create LOST.DIR (%s)", strerror(errno));
+            }
+        }
+        free(lost_path);
+    }
+
+    return rc;
+}
diff --git a/fs/Ntfs.h b/fs/Ntfs.h
new file mode 100644
index 0000000..252eb34
--- /dev/null
+++ b/fs/Ntfs.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * Copyright (C) 2012-2015 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _NTFS_H
+#define _NTFS_H
+
+#include <unistd.h>
+#include <iostream>
+
+class Ntfs {
+public:
+    static int check(const std::string& source);
+    static int doMount(const std::string& source, const std::string& target,
+                       bool ro, bool remount, bool executable,
+                       int ownerUid, int ownerGid, int permMask,
+                       bool createLost);
+};
+
+#endif
-- 
1.8.0

