From 2dee1b14450908e3a4203180b03d8d245936c6bb Mon Sep 17 00:00:00 2001
From: Zhang Jiejing <jiejing.zhang@freescale.com>
Date: Sat, 5 Jan 2013 15:33:53 +0800
Subject: [PATCH 01/21] ENGR00238882-1 recovery: add basic ubi support.

Add basic ubi support, rewrite the updatevolume,
not use system() to call anther process to make
this image simple, no needs to change make file.

Signed-off-by: Zhang Jiejing <jiejing.zhang@freescale.com>

Conflicts:
	Android.mk
	roots.cpp
---
 Android.mk         | 18 ++++++++++++++
 roots.cpp          | 28 +++++++++++++++++++++-
 ubi.cpp            | 69 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ubi.h              | 25 ++++++++++++++++++++
 updater/Android.mk |  7 ++++++
 updater/install.c  | 13 ++++++++++
 6 files changed, 159 insertions(+), 1 deletion(-)

diff --git a/Android.mk b/Android.mk
index 0484065..3652693 100644
--- a/Android.mk
+++ b/Android.mk
@@ -87,6 +87,24 @@ ifeq ($(TARGET_USERIMAGES_USE_EXT4), true)
 endif
 
 LOCAL_MODULE_PATH := $(TARGET_RECOVERY_ROOT_OUT)/sbin
+ifeq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+    LOCAL_CFLAGS += -DUSE_UBIFS
+    LOCAL_C_INCLUDES += external/mtd-utils/new-utils/include/
+    LOCAL_STATIC_LIBRARIES += libubi
+    LOCAL_SRC_FILES += ubi.cpp
+endif
+
+ifeq ($(HAVE_SELINUX), true)
+  LOCAL_C_INCLUDES += external/libselinux/include
+  LOCAL_STATIC_LIBRARIES += libselinux
+  LOCAL_CFLAGS += -DHAVE_SELINUX
+endif # HAVE_SELINUX
+
+# This binary is in the recovery ramdisk, which is otherwise a copy of root.
+# It gets copied there in config/Makefile.  LOCAL_MODULE_TAGS suppresses
+# a (redundant) copy of the binary in /system/bin for user builds.
+# TODO: Build the ramdisk image in a more principled way.
+LOCAL_MODULE_TAGS := eng
 
 ifeq ($(TARGET_RECOVERY_UI_LIB),)
   LOCAL_SRC_FILES += default_device.cpp
diff --git a/roots.cpp b/roots.cpp
index 2bd457e..9f3b82f 100644
--- a/roots.cpp
+++ b/roots.cpp
@@ -37,6 +37,13 @@ extern "C" {
 
 static struct fstab *fstab = NULL;
 
+#ifdef USE_UBIFS
+#include "ubi.h"
+#endif
+
+static int num_volumes = 0;
+static Volume* device_volumes = NULL;
+
 extern struct selabel_handle *sehandle;
 
 void load_volume_table()
@@ -119,7 +126,14 @@ int ensure_path_mounted(const char* path) {
 
         LOGE("failed to mount %s (%s)\n", v->mount_point, strerror(errno));
         return -1;
-    }
+        } else if(strcmp(v->fs_type, "ubifs") == 0) {
+    	    result = mount(v->blk_device, v->mount_point, v->fs_type,
+                       MS_NOATIME | MS_NODEV | MS_NODIRATIME, "");
+        if (result == 0) return 0;
+
+        LOGE("failed to mount %s (%s)\n", v->mount_point, strerror(errno));
+        return -1;
+	}
 
     LOGE("unknown fs_type \"%s\" for %s\n", v->fs_type, v->mount_point);
     return -1;
@@ -260,6 +274,18 @@ int format_volume(const char* volume) {
         }
         return 0;
     }
+#ifdef USE_UBIFS
+    if (strcmp(v->fs_type, "ubifs") == 0) {
+        int ret;
+        LOGW("formating by ubiVolumeFormat");
+        ret = ubiVolumeFormat(v->device);
+        if (ret != 0) {
+            LOGE("ubiVolumeFormat return error:%d", ret);
+            return -1;
+        }
+            return 0;
+    }
+#endif
 
     LOGE("format_volume: fs_type \"%s\" unsupported\n", v->fs_type);
     return -1;
diff --git a/ubi.cpp b/ubi.cpp
new file mode 100644
index 0000000..bb37fad
--- /dev/null
+++ b/ubi.cpp
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <unistd.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <sys/stat.h>
+#include <libubi.h>
+
+extern "C" int ubiVolumeFormat(char *location)
+{
+    int ret = -1;
+    libubi_t libubi;
+    struct ubi_vol_info vol_info;
+    int fd;
+    libubi = libubi_open(1);
+
+    if (libubi == NULL) {
+        fprintf(stderr, "can not open libubi");
+        goto done;
+    }
+
+    ret = ubi_node_type(libubi, location);
+    if (ret == 1) {
+        fprintf(stderr, "%s is a ubi device node, not a ubi volume node",
+                location);
+        goto done;
+    } else if (ret < 0) {
+        fprintf(stderr, "%s is not a UBI volume node", location);
+        goto done;
+    }
+
+    ret = ubi_get_vol_info(libubi, location, &vol_info);
+    if (ret) {
+        fprintf(stderr, "can not get information about UBI volume %s", location);
+        goto done;
+    }
+
+    fd = open(location, O_RDWR);
+    if (fd == -1) {
+        fprintf(stderr, "can not open %s", location);
+        goto done;
+    }
+
+    ret = ubi_update_start(libubi, fd, 0);
+    if (ret) {
+        fprintf(stderr, "cannot truncate volume %s", location);
+        close(fd);
+        goto done;
+    }
+
+    close(fd);
+
+  done:
+    return ret;
+}
diff --git a/ubi.h b/ubi.h
new file mode 100644
index 0000000..e99eeec
--- /dev/null
+++ b/ubi.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef UBI_H
+#define UBI_H
+
+#ifdef __cplusplus
+extern "C"
+#endif
+int ubiVolumeFormat(const char *location);
+
+#endif
diff --git a/updater/Android.mk b/updater/Android.mk
index ff02a33..4fed3fd 100644
--- a/updater/Android.mk
+++ b/updater/Android.mk
@@ -82,6 +82,13 @@ $(inc) : $(inc_dep_file)
 $(call intermediates-dir-for,EXECUTABLES,updater,,,$(TARGET_PREFER_32_BIT))/updater.o : $(inc)
 LOCAL_C_INCLUDES += $(dir $(inc))
 
+ifeq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+    LOCAL_CFLAGS += -DUSE_UBIFS
+    LOCAL_C_INCLUDES += external/mtd-utils/new-utils/include/
+    LOCAL_STATIC_LIBRARIES += libubi
+    LOCAL_SRC_FILES += ../ubi.cpp
+endif
+
 inc :=
 inc_dep_file :=
 
diff --git a/updater/install.c b/updater/install.c
index 01a5dd2..ea0e42b 100644
--- a/updater/install.c
+++ b/updater/install.c
@@ -53,6 +53,10 @@
 #include "wipe.h"
 #endif
 
+#ifdef USE_UBIFS
+#include "ubi.h"
+#endif
+
 void uiPrint(State* state, char* buffer) {
     char* line = strtok(buffer, "\n");
     UpdaterInfo* ui = (UpdaterInfo*)(state->cookie);
@@ -90,6 +94,7 @@ char* PrintSha1(const uint8_t* digest) {
 //
 //    fs_type="yaffs2" partition_type="MTD"     location=partition
 //    fs_type="ext4"   partition_type="EMMC"    location=device
+//    fs_type="ubifs"  partition_type="UBI"    location=device
 Value* MountFn(const char* name, State* state, int argc, Expr* argv[]) {
     char* result = NULL;
     if (argc != 4 && argc != 5) {
@@ -361,6 +366,14 @@ Value* FormatFn(const char* name, State* state, int argc, Expr* argv[]) {
         }
         result = location;
 #endif
+#ifdef USE_UBIFS
+    } else if (strcmp(fs_type, "ubifs") == 0) {
+
+            if (ubiVolumeFormat(location) != 0)
+                    goto done;
+
+            result = location;
+#endif
     } else {
         printf("%s: unsupported fs_type \"%s\" partition_type \"%s\"",
                 name, fs_type, partition_type);
-- 
1.8.0

